/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Framework/src/cubismdefaultparameterid.ts":
/*!***************************************************!*\
  !*** ./Framework/src/cubismdefaultparameterid.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismDefaultParameterId = void 0;\nexports.CubismDefaultParameterId = Object.freeze({\n    HitAreaPrefix: 'HitArea',\n    HitAreaHead: 'Head',\n    HitAreaBody: 'Body',\n    PartsIdCore: 'Parts01Core',\n    PartsArmPrefix: 'Parts01Arm_',\n    PartsArmLPrefix: 'Parts01ArmL_',\n    PartsArmRPrefix: 'Parts01ArmR_',\n    ParamAngleX: 'ParamAngleX',\n    ParamAngleY: 'ParamAngleY',\n    ParamAngleZ: 'ParamAngleZ',\n    ParamEyeLOpen: 'ParamEyeLOpen',\n    ParamEyeLSmile: 'ParamEyeLSmile',\n    ParamEyeROpen: 'ParamEyeROpen',\n    ParamEyeRSmile: 'ParamEyeRSmile',\n    ParamEyeBallX: 'ParamEyeBallX',\n    ParamEyeBallY: 'ParamEyeBallY',\n    ParamEyeBallForm: 'ParamEyeBallForm',\n    ParamBrowLY: 'ParamBrowLY',\n    ParamBrowRY: 'ParamBrowRY',\n    ParamBrowLX: 'ParamBrowLX',\n    ParamBrowRX: 'ParamBrowRX',\n    ParamBrowLAngle: 'ParamBrowLAngle',\n    ParamBrowRAngle: 'ParamBrowRAngle',\n    ParamBrowLForm: 'ParamBrowLForm',\n    ParamBrowRForm: 'ParamBrowRForm',\n    ParamMouthForm: 'ParamMouthForm',\n    ParamMouthOpenY: 'ParamMouthOpenY',\n    ParamCheek: 'ParamCheek',\n    ParamBodyAngleX: 'ParamBodyAngleX',\n    ParamBodyAngleY: 'ParamBodyAngleY',\n    ParamBodyAngleZ: 'ParamBodyAngleZ',\n    ParamBreath: 'ParamBreath',\n    ParamArmLA: 'ParamArmLA',\n    ParamArmRA: 'ParamArmRA',\n    ParamArmLB: 'ParamArmLB',\n    ParamArmRB: 'ParamArmRB',\n    ParamHandL: 'ParamHandL',\n    ParamHandR: 'ParamHandR',\n    ParamHairFront: 'ParamHairFront',\n    ParamHairSide: 'ParamHairSide',\n    ParamHairBack: 'ParamHairBack',\n    ParamHairFluffy: 'ParamHairFluffy',\n    ParamShoulderY: 'ParamShoulderY',\n    ParamBustX: 'ParamBustX',\n    ParamBustY: 'ParamBustY',\n    ParamBaseX: 'ParamBaseX',\n    ParamBaseY: 'ParamBaseY',\n    ParamNONE: 'NONE:'\n});\nvar $ = __importStar(__webpack_require__(/*! ./cubismdefaultparameterid */ \"./Framework/src/cubismdefaultparameterid.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;\n    Live2DCubismFramework.HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;\n    Live2DCubismFramework.HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;\n    Live2DCubismFramework.ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;\n    Live2DCubismFramework.ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;\n    Live2DCubismFramework.ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;\n    Live2DCubismFramework.ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;\n    Live2DCubismFramework.ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;\n    Live2DCubismFramework.ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;\n    Live2DCubismFramework.ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;\n    Live2DCubismFramework.ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;\n    Live2DCubismFramework.ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;\n    Live2DCubismFramework.ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;\n    Live2DCubismFramework.ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;\n    Live2DCubismFramework.ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;\n    Live2DCubismFramework.ParamBreath = $.CubismDefaultParameterId.ParamBreath;\n    Live2DCubismFramework.ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;\n    Live2DCubismFramework.ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;\n    Live2DCubismFramework.ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;\n    Live2DCubismFramework.ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;\n    Live2DCubismFramework.ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;\n    Live2DCubismFramework.ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;\n    Live2DCubismFramework.ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;\n    Live2DCubismFramework.ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;\n    Live2DCubismFramework.ParamBustX = $.CubismDefaultParameterId.ParamBustX;\n    Live2DCubismFramework.ParamBustY = $.CubismDefaultParameterId.ParamBustY;\n    Live2DCubismFramework.ParamCheek = $.CubismDefaultParameterId.ParamCheek;\n    Live2DCubismFramework.ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;\n    Live2DCubismFramework.ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;\n    Live2DCubismFramework.ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;\n    Live2DCubismFramework.ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;\n    Live2DCubismFramework.ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;\n    Live2DCubismFramework.ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;\n    Live2DCubismFramework.ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;\n    Live2DCubismFramework.ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;\n    Live2DCubismFramework.ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;\n    Live2DCubismFramework.ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;\n    Live2DCubismFramework.ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;\n    Live2DCubismFramework.ParamHandL = $.CubismDefaultParameterId.ParamHandL;\n    Live2DCubismFramework.ParamHandR = $.CubismDefaultParameterId.ParamHandR;\n    Live2DCubismFramework.ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;\n    Live2DCubismFramework.ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;\n    Live2DCubismFramework.ParamNONE = $.CubismDefaultParameterId.ParamNONE;\n    Live2DCubismFramework.ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;\n    Live2DCubismFramework.PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;\n    Live2DCubismFramework.PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;\n    Live2DCubismFramework.PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;\n    Live2DCubismFramework.PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/cubismdefaultparameterid.ts\n");

/***/ }),

/***/ "./Framework/src/cubismframeworkconfig.ts":
/*!************************************************!*\
  !*** ./Framework/src/cubismframeworkconfig.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_OFF = exports.CSM_LOG_LEVEL_ERROR = exports.CSM_LOG_LEVEL_WARNING = exports.CSM_LOG_LEVEL_INFO = exports.CSM_LOG_LEVEL_DEBUG = exports.CSM_LOG_LEVEL_VERBOSE = void 0;\nexports.CSM_LOG_LEVEL_VERBOSE = 0;\nexports.CSM_LOG_LEVEL_DEBUG = 1;\nexports.CSM_LOG_LEVEL_INFO = 2;\nexports.CSM_LOG_LEVEL_WARNING = 3;\nexports.CSM_LOG_LEVEL_ERROR = 4;\nexports.CSM_LOG_LEVEL_OFF = 5;\nexports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2N1YmlzbWZyYW1ld29ya2NvbmZpZy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvY3ViaXNtZnJhbWV3b3JrY29uZmlnLnRzP2U4MGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIOODreOCsOWHuuWKm+mWouaVsOOBruioreWumlxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLy0tLS0tLS0tLS0g44Ot44Kw5Ye65Yqb44Os44OZ44OrIOmBuOaKnumgheebriDlrprnvqkgLS0tLS0tLS0tLVxuLy8g6Kmz57Sw44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9WRVJCT1NFID0gMDtcbi8vIOODh+ODkOODg+OCsOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfREVCVUcgPSAxO1xuLy8gSW5mb+ODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfSU5GTyA9IDI7XG4vLyDorablkYrjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1dBUk5JTkcgPSAzO1xuLy8g44Ko44Op44O844Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9FUlJPUiA9IDQ7XG4vLyDjg63jgrDlh7rlipvjgqrjg5XoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX09GRiA9IDU7XG5cbi8qKlxuICog44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44CCXG4gKlxuICog5by35Yi255qE44Gr44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5aSJ44GI44KL5pmC44Gr5a6a576p44KS5pyJ5Yq544Gr44GZ44KL44CCXG4gKiBDU01fTE9HX0xFVkVMX1ZFUkJPU0Ug772eIENTTV9MT0dfTEVWRUxfT0ZGIOOCkumBuOaKnuOBmeOCi+OAglxuICovXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTDogbnVtYmVyID0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFhQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFRQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/cubismframeworkconfig.ts\n");

/***/ }),

/***/ "./Framework/src/cubismmodelsettingjson.ts":
/*!*************************************************!*\
  !*** ./Framework/src/cubismmodelsettingjson.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismModelSettingJson = void 0;\nvar icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ \"./Framework/src/icubismmodelsetting.ts\");\nvar live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar csmvector_1 = __webpack_require__(/*! ./type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nvar Version = 'Version';\nvar FileReferences = 'FileReferences';\nvar Groups = 'Groups';\nvar Layout = 'Layout';\nvar HitAreas = 'HitAreas';\nvar Moc = 'Moc';\nvar Textures = 'Textures';\nvar Physics = 'Physics';\nvar Pose = 'Pose';\nvar Expressions = 'Expressions';\nvar Motions = 'Motions';\nvar UserData = 'UserData';\nvar Name = 'Name';\nvar FilePath = 'File';\nvar Id = 'Id';\nvar Ids = 'Ids';\nvar Target = 'Target';\nvar Idle = 'Idle';\nvar TapBody = 'TapBody';\nvar PinchIn = 'PinchIn';\nvar PinchOut = 'PinchOut';\nvar Shake = 'Shake';\nvar FlickHead = 'FlickHead';\nvar Parameter = 'Parameter';\nvar SoundPath = 'Sound';\nvar FadeInTime = 'FadeInTime';\nvar FadeOutTime = 'FadeOutTime';\nvar CenterX = 'CenterX';\nvar CenterY = 'CenterY';\nvar X = 'X';\nvar Y = 'Y';\nvar Width = 'Width';\nvar Height = 'Height';\nvar LipSync = 'LipSync';\nvar EyeBlink = 'EyeBlink';\nvar InitParameter = 'init_param';\nvar InitPartsVisible = 'init_parts_visible';\nvar Val = 'val';\nvar FrequestNode;\n(function (FrequestNode) {\n    FrequestNode[FrequestNode[\"FrequestNode_Groups\"] = 0] = \"FrequestNode_Groups\";\n    FrequestNode[FrequestNode[\"FrequestNode_Moc\"] = 1] = \"FrequestNode_Moc\";\n    FrequestNode[FrequestNode[\"FrequestNode_Motions\"] = 2] = \"FrequestNode_Motions\";\n    FrequestNode[FrequestNode[\"FrequestNode_Expressions\"] = 3] = \"FrequestNode_Expressions\";\n    FrequestNode[FrequestNode[\"FrequestNode_Textures\"] = 4] = \"FrequestNode_Textures\";\n    FrequestNode[FrequestNode[\"FrequestNode_Physics\"] = 5] = \"FrequestNode_Physics\";\n    FrequestNode[FrequestNode[\"FrequestNode_Pose\"] = 6] = \"FrequestNode_Pose\";\n    FrequestNode[FrequestNode[\"FrequestNode_HitAreas\"] = 7] = \"FrequestNode_HitAreas\";\n})(FrequestNode || (FrequestNode = {}));\nvar CubismModelSettingJson = (function (_super) {\n    __extends(CubismModelSettingJson, _super);\n    function CubismModelSettingJson(buffer, size) {\n        var _this = _super.call(this) || this;\n        _this._json = cubismjson_1.CubismJson.create(buffer, size);\n        if (_this._json) {\n            _this._jsonValue = new csmvector_1.csmVector();\n            _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));\n            _this._jsonValue.pushBack(_this._json\n                .getRoot()\n                .getValueByString(FileReferences)\n                .getValueByString(Moc));\n            _this._jsonValue.pushBack(_this._json\n                .getRoot()\n                .getValueByString(FileReferences)\n                .getValueByString(Motions));\n            _this._jsonValue.pushBack(_this._json\n                .getRoot()\n                .getValueByString(FileReferences)\n                .getValueByString(Expressions));\n            _this._jsonValue.pushBack(_this._json\n                .getRoot()\n                .getValueByString(FileReferences)\n                .getValueByString(Textures));\n            _this._jsonValue.pushBack(_this._json\n                .getRoot()\n                .getValueByString(FileReferences)\n                .getValueByString(Physics));\n            _this._jsonValue.pushBack(_this._json\n                .getRoot()\n                .getValueByString(FileReferences)\n                .getValueByString(Pose));\n            _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));\n        }\n        return _this;\n    }\n    CubismModelSettingJson.prototype.release = function () {\n        cubismjson_1.CubismJson.delete(this._json);\n        this._jsonValue = null;\n    };\n    CubismModelSettingJson.prototype.GetJson = function () {\n        return this._json;\n    };\n    CubismModelSettingJson.prototype.getModelFileName = function () {\n        if (!this.isExistModelFile()) {\n            return '';\n        }\n        return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\n    };\n    CubismModelSettingJson.prototype.getTextureCount = function () {\n        if (!this.isExistTextureFiles()) {\n            return 0;\n        }\n        return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\n    };\n    CubismModelSettingJson.prototype.getTextureDirectory = function () {\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Textures)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getTextureFileName = function (index) {\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Textures)\n            .getValueByIndex(index)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getHitAreasCount = function () {\n        if (!this.isExistHitAreas()) {\n            return 0;\n        }\n        return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\n    };\n    CubismModelSettingJson.prototype.getHitAreaId = function (index) {\n        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._jsonValue\n            .at(FrequestNode.FrequestNode_HitAreas)\n            .getValueByIndex(index)\n            .getValueByString(Id)\n            .getRawString());\n    };\n    CubismModelSettingJson.prototype.getHitAreaName = function (index) {\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_HitAreas)\n            .getValueByIndex(index)\n            .getValueByString(Name)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getPhysicsFileName = function () {\n        if (!this.isExistPhysicsFile()) {\n            return '';\n        }\n        return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\n    };\n    CubismModelSettingJson.prototype.getPoseFileName = function () {\n        if (!this.isExistPoseFile()) {\n            return '';\n        }\n        return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\n    };\n    CubismModelSettingJson.prototype.getExpressionCount = function () {\n        if (!this.isExistExpressionFile()) {\n            return 0;\n        }\n        return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\n    };\n    CubismModelSettingJson.prototype.getExpressionName = function (index) {\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Expressions)\n            .getValueByIndex(index)\n            .getValueByString(Name)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getExpressionFileName = function (index) {\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Expressions)\n            .getValueByIndex(index)\n            .getValueByString(FilePath)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getMotionGroupCount = function () {\n        if (!this.isExistMotionGroups()) {\n            return 0;\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getKeys()\n            .getSize();\n    };\n    CubismModelSettingJson.prototype.getMotionGroupName = function (index) {\n        if (!this.isExistMotionGroups()) {\n            return null;\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getKeys()\n            .at(index);\n    };\n    CubismModelSettingJson.prototype.getMotionCount = function (groupName) {\n        if (!this.isExistMotionGroupName(groupName)) {\n            return 0;\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getSize();\n    };\n    CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {\n        if (!this.isExistMotionGroupName(groupName)) {\n            return '';\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(FilePath)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {\n        if (!this.isExistMotionSoundFile(groupName, index)) {\n            return '';\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(SoundPath)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {\n        if (!this.isExistMotionFadeIn(groupName, index)) {\n            return -1.0;\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(FadeInTime)\n            .toFloat();\n    };\n    CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {\n        if (!this.isExistMotionFadeOut(groupName, index)) {\n            return -1.0;\n        }\n        return this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(FadeOutTime)\n            .toFloat();\n    };\n    CubismModelSettingJson.prototype.getUserDataFile = function () {\n        if (!this.isExistUserDataFile()) {\n            return '';\n        }\n        return this._json\n            .getRoot()\n            .getValueByString(FileReferences)\n            .getValueByString(UserData)\n            .getRawString();\n    };\n    CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {\n        var map = this._json\n            .getRoot()\n            .getValueByString(Layout)\n            .getMap();\n        if (map == null) {\n            return false;\n        }\n        var ret = false;\n        for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {\n            outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\n            ret = true;\n        }\n        return ret;\n    };\n    CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {\n        if (!this.isExistEyeBlinkParameters()) {\n            return 0;\n        }\n        var num = 0;\n        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n            var refI = this._jsonValue\n                .at(FrequestNode.FrequestNode_Groups)\n                .getValueByIndex(i);\n            if (refI.isNull() || refI.isError()) {\n                continue;\n            }\n            if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n                num = refI\n                    .getValueByString(Ids)\n                    .getVector()\n                    .getSize();\n                break;\n            }\n        }\n        return num;\n    };\n    CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {\n        if (!this.isExistEyeBlinkParameters()) {\n            return null;\n        }\n        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n            var refI = this._jsonValue\n                .at(FrequestNode.FrequestNode_Groups)\n                .getValueByIndex(i);\n            if (refI.isNull() || refI.isError()) {\n                continue;\n            }\n            if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n                return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI\n                    .getValueByString(Ids)\n                    .getValueByIndex(index)\n                    .getRawString());\n            }\n        }\n        return null;\n    };\n    CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {\n        if (!this.isExistLipSyncParameters()) {\n            return 0;\n        }\n        var num = 0;\n        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n            var refI = this._jsonValue\n                .at(FrequestNode.FrequestNode_Groups)\n                .getValueByIndex(i);\n            if (refI.isNull() || refI.isError()) {\n                continue;\n            }\n            if (refI.getValueByString(Name).getRawString() == LipSync) {\n                num = refI\n                    .getValueByString(Ids)\n                    .getVector()\n                    .getSize();\n                break;\n            }\n        }\n        return num;\n    };\n    CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {\n        if (!this.isExistLipSyncParameters()) {\n            return null;\n        }\n        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n            var refI = this._jsonValue\n                .at(FrequestNode.FrequestNode_Groups)\n                .getValueByIndex(i);\n            if (refI.isNull() || refI.isError()) {\n                continue;\n            }\n            if (refI.getValueByString(Name).getRawString() == LipSync) {\n                return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI\n                    .getValueByString(Ids)\n                    .getValueByIndex(index)\n                    .getRawString());\n            }\n        }\n        return null;\n    };\n    CubismModelSettingJson.prototype.isExistModelFile = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistTextureFiles = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistHitAreas = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistPhysicsFile = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistPoseFile = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistExpressionFile = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistMotionGroups = function () {\n        var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {\n        var node = this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {\n        var node = this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(SoundPath);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {\n        var node = this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(FadeInTime);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {\n        var node = this._jsonValue\n            .at(FrequestNode.FrequestNode_Motions)\n            .getValueByString(groupName)\n            .getValueByIndex(index)\n            .getValueByString(FadeOutTime);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistUserDataFile = function () {\n        var node = this._json\n            .getRoot()\n            .getValueByString(FileReferences)\n            .getValueByString(UserData);\n        return !node.isNull() && !node.isError();\n    };\n    CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {\n        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n            this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\n            return false;\n        }\n        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\n            if (this._jsonValue\n                .at(FrequestNode.FrequestNode_Groups)\n                .getValueByIndex(i)\n                .getValueByString(Name)\n                .getRawString() == EyeBlink) {\n                return true;\n            }\n        }\n        return false;\n    };\n    CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {\n        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n            this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\n            return false;\n        }\n        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\n            if (this._jsonValue\n                .at(FrequestNode.FrequestNode_Groups)\n                .getValueByIndex(i)\n                .getValueByString(Name)\n                .getRawString() == LipSync) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return CubismModelSettingJson;\n}(icubismmodelsetting_1.ICubismModelSetting));\nexports.CubismModelSettingJson = CubismModelSettingJson;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmodelsettingjson */ \"./Framework/src/cubismmodelsettingjson.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismModelSettingJson = $.CubismModelSettingJson;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/cubismmodelsettingjson.ts\n");

/***/ }),

/***/ "./Framework/src/effect/cubismbreath.ts":
/*!**********************************************!*\
  !*** ./Framework/src/effect/cubismbreath.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.BreathParameterData = exports.CubismBreath = void 0;\nvar CubismBreath = (function () {\n    function CubismBreath() {\n        this._currentTime = 0.0;\n    }\n    CubismBreath.create = function () {\n        return new CubismBreath();\n    };\n    CubismBreath.delete = function (instance) {\n        if (instance != null) {\n            instance = null;\n        }\n    };\n    CubismBreath.prototype.setParameters = function (breathParameters) {\n        this._breathParameters = breathParameters;\n    };\n    CubismBreath.prototype.getParameters = function () {\n        return this._breathParameters;\n    };\n    CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {\n        this._currentTime += deltaTimeSeconds;\n        var t = this._currentTime * 2.0 * 3.14159;\n        for (var i = 0; i < this._breathParameters.getSize(); ++i) {\n            var data = this._breathParameters.at(i);\n            model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);\n        }\n    };\n    return CubismBreath;\n}());\nexports.CubismBreath = CubismBreath;\nvar BreathParameterData = (function () {\n    function BreathParameterData(parameterId, offset, peak, cycle, weight) {\n        this.parameterId = parameterId == undefined ? null : parameterId;\n        this.offset = offset == undefined ? 0.0 : offset;\n        this.peak = peak == undefined ? 0.0 : peak;\n        this.cycle = cycle == undefined ? 0.0 : cycle;\n        this.weight = weight == undefined ? 0.0 : weight;\n    }\n    return BreathParameterData;\n}());\nexports.BreathParameterData = BreathParameterData;\nvar $ = __importStar(__webpack_require__(/*! ./cubismbreath */ \"./Framework/src/effect/cubismbreath.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.BreathParameterData = $.BreathParameterData;\n    Live2DCubismFramework.CubismBreath = $.CubismBreath;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21icmVhdGgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21icmVhdGgudHM/YWRiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIOWRvOWQuOapn+iDvVxuICpcbiAqIOWRvOWQuOapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtQnJlYXRoIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogQ3ViaXNtQnJlYXRoIHtcbiAgICByZXR1cm4gbmV3IEN1YmlzbUJyZWF0aCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgKiBAcGFyYW0gaW5zdGFuY2Ug5a++6LGh44GuQ3ViaXNtQnJlYXRoXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtQnJlYXRoKTogdm9pZCB7XG4gICAgaWYgKGluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgIGluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5ZG85ZC444Gu44OR44Op44Oh44O844K/44Gu57SQ44Gl44GRXG4gICAqIEBwYXJhbSBicmVhdGhQYXJhbWV0ZXJzIOWRvOWQuOOCkue0kOOBpeOBkeOBn+OBhOODkeODqeODoeODvOOCv+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlcnMoYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+KTogdm9pZCB7XG4gICAgdGhpcy5fYnJlYXRoUGFyYW1ldGVycyA9IGJyZWF0aFBhcmFtZXRlcnM7XG4gIH1cblxuICAvKipcbiAgICog5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVycygpOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICBjb25zdCB0OiBudW1iZXIgPSB0aGlzLl9jdXJyZW50VGltZSAqIDIuMCAqIDMuMTQxNTk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGNvbnN0IGRhdGE6IEJyZWF0aFBhcmFtZXRlckRhdGEgPSB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmF0KGkpO1xuXG4gICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgIGRhdGEucGFyYW1ldGVySWQsXG4gICAgICAgIGRhdGEub2Zmc2V0ICsgZGF0YS5wZWFrICogTWF0aC5zaW4odCAvIGRhdGEuY3ljbGUpLFxuICAgICAgICBkYXRhLndlaWdodFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgPSAwLjA7XG4gIH1cblxuICBfYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+OyAvLyDlkbzlkLjjgavjgbLjgoLjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgX2N1cnJlbnRUaW1lOiBudW1iZXI7IC8vIOepjeeul+aZgumWk1vnp5JdXG59XG5cbi8qKlxuICog5ZG85ZC444Gu44OR44Op44Oh44O844K/5oOF5aCxXG4gKi9cbmV4cG9ydCBjbGFzcyBCcmVhdGhQYXJhbWV0ZXJEYXRhIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcGFyYW0gb2Zmc2V0ICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHBlYWsgICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXG4gICAqIEBwYXJhbSBjeWNsZSAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruWRqOacn1xuICAgKiBAcGFyYW0gd2VpZ2h0ICAgICAgICDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhcmFtZXRlcklkPzogQ3ViaXNtSWRIYW5kbGUsXG4gICAgb2Zmc2V0PzogbnVtYmVyLFxuICAgIHBlYWs/OiBudW1iZXIsXG4gICAgY3ljbGU/OiBudW1iZXIsXG4gICAgd2VpZ2h0PzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZCA9PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1ldGVySWQ7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgPT0gdW5kZWZpbmVkID8gMC4wIDogb2Zmc2V0O1xuICAgIHRoaXMucGVhayA9IHBlYWsgPT0gdW5kZWZpbmVkID8gMC4wIDogcGVhaztcbiAgICB0aGlzLmN5Y2xlID0gY3ljbGUgPT0gdW5kZWZpbmVkID8gMC4wIDogY3ljbGU7XG4gICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQgPT0gdW5kZWZpbmVkID8gMC4wIDogd2VpZ2h0O1xuICB9XG5cbiAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxcXG4gIG9mZnNldDogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcbiAgcGVhazogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7pq5jjgZVcbiAgY3ljbGU6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXG4gIHdlaWdodDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtYnJlYXRoJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gJC5CcmVhdGhQYXJhbWV0ZXJEYXRhO1xuICBleHBvcnQgdHlwZSBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gJC5CcmVhdGhQYXJhbWV0ZXJEYXRhO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtQnJlYXRoID0gJC5DdWJpc21CcmVhdGg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUJyZWF0aCA9ICQuQ3ViaXNtQnJlYXRoO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBO0FBMERBO0FBQ0E7QUFDQTtBQXhEQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQVdBO0FBQUE7QUFoRUE7QUFxRUE7QUFTQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQUE7QUE1QkE7QUErQkE7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/effect/cubismbreath.ts\n");

/***/ }),

/***/ "./Framework/src/effect/cubismeyeblink.ts":
/*!************************************************!*\
  !*** ./Framework/src/effect/cubismeyeblink.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.EyeState = exports.CubismEyeBlink = void 0;\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar CubismEyeBlink = (function () {\n    function CubismEyeBlink(modelSetting) {\n        this._blinkingState = EyeState.EyeState_First;\n        this._nextBlinkingTime = 0.0;\n        this._stateStartTimeSeconds = 0.0;\n        this._blinkingIntervalSeconds = 4.0;\n        this._closingSeconds = 0.1;\n        this._closedSeconds = 0.05;\n        this._openingSeconds = 0.15;\n        this._userTimeSeconds = 0.0;\n        this._parameterIds = new csmvector_1.csmVector();\n        if (modelSetting == null) {\n            return;\n        }\n        for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\n            this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\n        }\n    }\n    CubismEyeBlink.create = function (modelSetting) {\n        if (modelSetting === void 0) { modelSetting = null; }\n        return new CubismEyeBlink(modelSetting);\n    };\n    CubismEyeBlink.delete = function (eyeBlink) {\n        if (eyeBlink != null) {\n            eyeBlink = null;\n        }\n    };\n    CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {\n        this._blinkingIntervalSeconds = blinkingInterval;\n    };\n    CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {\n        this._closingSeconds = closing;\n        this._closedSeconds = closed;\n        this._openingSeconds = opening;\n    };\n    CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {\n        this._parameterIds = parameterIds;\n    };\n    CubismEyeBlink.prototype.getParameterIds = function () {\n        return this._parameterIds;\n    };\n    CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {\n        this._userTimeSeconds += deltaTimeSeconds;\n        var parameterValue;\n        var t = 0.0;\n        switch (this._blinkingState) {\n            case EyeState.EyeState_Closing:\n                t =\n                    (this._userTimeSeconds - this._stateStartTimeSeconds) /\n                        this._closingSeconds;\n                if (t >= 1.0) {\n                    t = 1.0;\n                    this._blinkingState = EyeState.EyeState_Closed;\n                    this._stateStartTimeSeconds = this._userTimeSeconds;\n                }\n                parameterValue = 1.0 - t;\n                break;\n            case EyeState.EyeState_Closed:\n                t =\n                    (this._userTimeSeconds - this._stateStartTimeSeconds) /\n                        this._closedSeconds;\n                if (t >= 1.0) {\n                    this._blinkingState = EyeState.EyeState_Opening;\n                    this._stateStartTimeSeconds = this._userTimeSeconds;\n                }\n                parameterValue = 0.0;\n                break;\n            case EyeState.EyeState_Opening:\n                t =\n                    (this._userTimeSeconds - this._stateStartTimeSeconds) /\n                        this._openingSeconds;\n                if (t >= 1.0) {\n                    t = 1.0;\n                    this._blinkingState = EyeState.EyeState_Interval;\n                    this._nextBlinkingTime = this.determinNextBlinkingTiming();\n                }\n                parameterValue = t;\n                break;\n            case EyeState.EyeState_Interval:\n                if (this._nextBlinkingTime < this._userTimeSeconds) {\n                    this._blinkingState = EyeState.EyeState_Closing;\n                    this._stateStartTimeSeconds = this._userTimeSeconds;\n                }\n                parameterValue = 1.0;\n                break;\n            case EyeState.EyeState_First:\n            default:\n                this._blinkingState = EyeState.EyeState_Interval;\n                this._nextBlinkingTime = this.determinNextBlinkingTiming();\n                parameterValue = 1.0;\n                break;\n        }\n        if (!CubismEyeBlink.CloseIfZero) {\n            parameterValue = -parameterValue;\n        }\n        for (var i = 0; i < this._parameterIds.getSize(); ++i) {\n            model.setParameterValueById(this._parameterIds.at(i), parameterValue);\n        }\n    };\n    CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {\n        var r = Math.random();\n        return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));\n    };\n    CubismEyeBlink.CloseIfZero = true;\n    return CubismEyeBlink;\n}());\nexports.CubismEyeBlink = CubismEyeBlink;\nvar EyeState;\n(function (EyeState) {\n    EyeState[EyeState[\"EyeState_First\"] = 0] = \"EyeState_First\";\n    EyeState[EyeState[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\n    EyeState[EyeState[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\n    EyeState[EyeState[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\n    EyeState[EyeState[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\n})(EyeState = exports.EyeState || (exports.EyeState = {}));\nvar $ = __importStar(__webpack_require__(/*! ./cubismeyeblink */ \"./Framework/src/effect/cubismeyeblink.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismEyeBlink = $.CubismEyeBlink;\n    Live2DCubismFramework.EyeState = $.EyeState;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/effect/cubismeyeblink.ts\n");

/***/ }),

/***/ "./Framework/src/effect/cubismpose.ts":
/*!********************************************!*\
  !*** ./Framework/src/effect/cubismpose.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.PartData = exports.CubismPose = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nvar Epsilon = 0.001;\nvar DefaultFadeInSeconds = 0.5;\nvar FadeIn = 'FadeInTime';\nvar Link = 'Link';\nvar Groups = 'Groups';\nvar Id = 'Id';\nvar CubismPose = (function () {\n    function CubismPose() {\n        this._fadeTimeSeconds = DefaultFadeInSeconds;\n        this._lastModel = null;\n        this._partGroups = new csmvector_1.csmVector();\n        this._partGroupCounts = new csmvector_1.csmVector();\n    }\n    CubismPose.create = function (pose3json, size) {\n        var ret = new CubismPose();\n        var json = cubismjson_1.CubismJson.create(pose3json, size);\n        var root = json.getRoot();\n        if (!root.getValueByString(FadeIn).isNull()) {\n            ret._fadeTimeSeconds = root\n                .getValueByString(FadeIn)\n                .toFloat(DefaultFadeInSeconds);\n            if (ret._fadeTimeSeconds <= 0.0) {\n                ret._fadeTimeSeconds = DefaultFadeInSeconds;\n            }\n        }\n        var poseListInfo = root.getValueByString(Groups);\n        var poseCount = poseListInfo.getSize();\n        for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n            var idListInfo = poseListInfo.getValueByIndex(poseIndex);\n            var idCount = idListInfo.getSize();\n            var groupCount = 0;\n            for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n                var partInfo = idListInfo.getValueByIndex(groupIndex);\n                var partData = new PartData();\n                var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());\n                partData.partId = parameterId;\n                if (!partInfo.getValueByString(Link).isNull()) {\n                    var linkListInfo = partInfo.getValueByString(Link);\n                    var linkCount = linkListInfo.getSize();\n                    for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n                        var linkPart = new PartData();\n                        var linkId = live2dcubismframework_1.CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());\n                        linkPart.partId = linkId;\n                        partData.link.pushBack(linkPart);\n                    }\n                }\n                ret._partGroups.pushBack(partData.clone());\n                ++groupCount;\n            }\n            ret._partGroupCounts.pushBack(groupCount);\n        }\n        cubismjson_1.CubismJson.delete(json);\n        return ret;\n    };\n    CubismPose.delete = function (pose) {\n        if (pose != null) {\n            pose = null;\n        }\n    };\n    CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {\n        if (model != this._lastModel) {\n            this.reset(model);\n        }\n        this._lastModel = model;\n        if (deltaTimeSeconds < 0.0) {\n            deltaTimeSeconds = 0.0;\n        }\n        var beginIndex = 0;\n        for (var i = 0; i < this._partGroupCounts.getSize(); i++) {\n            var partGroupCount = this._partGroupCounts.at(i);\n            this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n            beginIndex += partGroupCount;\n        }\n        this.copyPartOpacities(model);\n    };\n    CubismPose.prototype.reset = function (model) {\n        var beginIndex = 0;\n        for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {\n            var groupCount = this._partGroupCounts.at(i);\n            for (var j = beginIndex; j < beginIndex + groupCount; ++j) {\n                this._partGroups.at(j).initialize(model);\n                var partsIndex = this._partGroups.at(j).partIndex;\n                var paramIndex = this._partGroups.at(j).parameterIndex;\n                if (partsIndex < 0) {\n                    continue;\n                }\n                model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\n                model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\n                for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\n                    this._partGroups\n                        .at(j)\n                        .link.at(k)\n                        .initialize(model);\n                }\n            }\n            beginIndex += groupCount;\n        }\n    };\n    CubismPose.prototype.copyPartOpacities = function (model) {\n        for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {\n            var partData = this._partGroups.at(groupIndex);\n            if (partData.link.getSize() == 0) {\n                continue;\n            }\n            var partIndex = this._partGroups.at(groupIndex).partIndex;\n            var opacity = model.getPartOpacityByIndex(partIndex);\n            for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {\n                var linkPart = partData.link.at(linkIndex);\n                var linkPartIndex = linkPart.partIndex;\n                if (linkPartIndex < 0) {\n                    continue;\n                }\n                model.setPartOpacityByIndex(linkPartIndex, opacity);\n            }\n        }\n    };\n    CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {\n        var visiblePartIndex = -1;\n        var newOpacity = 1.0;\n        var phi = 0.5;\n        var backOpacityThreshold = 0.15;\n        for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n            var partIndex = this._partGroups.at(i).partIndex;\n            var paramIndex = this._partGroups.at(i).parameterIndex;\n            if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n                if (visiblePartIndex >= 0) {\n                    break;\n                }\n                visiblePartIndex = i;\n                newOpacity = model.getPartOpacityByIndex(partIndex);\n                newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n                if (newOpacity > 1.0) {\n                    newOpacity = 1.0;\n                }\n            }\n        }\n        if (visiblePartIndex < 0) {\n            visiblePartIndex = 0;\n            newOpacity = 1.0;\n        }\n        for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n            var partsIndex = this._partGroups.at(i).partIndex;\n            if (visiblePartIndex == i) {\n                model.setPartOpacityByIndex(partsIndex, newOpacity);\n            }\n            else {\n                var opacity = model.getPartOpacityByIndex(partsIndex);\n                var a1 = void 0;\n                if (newOpacity < phi) {\n                    a1 = (newOpacity * (phi - 1)) / phi + 1.0;\n                }\n                else {\n                    a1 = ((1 - newOpacity) * phi) / (1.0 - phi);\n                }\n                var backOpacity = (1.0 - a1) * (1.0 - newOpacity);\n                if (backOpacity > backOpacityThreshold) {\n                    a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\n                }\n                if (opacity > a1) {\n                    opacity = a1;\n                }\n                model.setPartOpacityByIndex(partsIndex, opacity);\n            }\n        }\n    };\n    return CubismPose;\n}());\nexports.CubismPose = CubismPose;\nvar PartData = (function () {\n    function PartData(v) {\n        this.parameterIndex = 0;\n        this.partIndex = 0;\n        this.link = new csmvector_1.csmVector();\n        if (v != undefined) {\n            this.partId = v.partId;\n            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\n                this.link.pushBack(ite.ptr().clone());\n            }\n        }\n    }\n    PartData.prototype.assignment = function (v) {\n        this.partId = v.partId;\n        for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\n            this.link.pushBack(ite.ptr().clone());\n        }\n        return this;\n    };\n    PartData.prototype.initialize = function (model) {\n        this.parameterIndex = model.getParameterIndex(this.partId);\n        this.partIndex = model.getPartIndex(this.partId);\n        model.setParameterValueByIndex(this.parameterIndex, 1);\n    };\n    PartData.prototype.clone = function () {\n        var clonePartData = new PartData();\n        clonePartData.partId = this.partId;\n        clonePartData.parameterIndex = this.parameterIndex;\n        clonePartData.partIndex = this.partIndex;\n        clonePartData.link = new csmvector_1.csmVector();\n        for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {\n            clonePartData.link.pushBack(ite.ptr().clone());\n        }\n        return clonePartData;\n    };\n    return PartData;\n}());\nexports.PartData = PartData;\nvar $ = __importStar(__webpack_require__(/*! ./cubismpose */ \"./Framework/src/effect/cubismpose.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismPose = $.CubismPose;\n    Live2DCubismFramework.PartData = $.PartData;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21wb3NlLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtcG9zZS50cz8wZDY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUpzb24sIFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5cbmNvbnN0IEVwc2lsb24gPSAwLjAwMTtcbmNvbnN0IERlZmF1bHRGYWRlSW5TZWNvbmRzID0gMC41O1xuXG4vLyBQb3NlLmpzb27jga7jgr/jgrBcbmNvbnN0IEZhZGVJbiA9ICdGYWRlSW5UaW1lJztcbmNvbnN0IExpbmsgPSAnTGluayc7XG5jb25zdCBHcm91cHMgPSAnR3JvdXBzJztcbmNvbnN0IElkID0gJ0lkJztcblxuLyoqXG4gKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrppcbiAqXG4gKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7nrqHnkIbjgajoqK3lrprjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBvc2Uge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAqIEBwYXJhbSBwb3NlM2pzb24gcG9zZTMuanNvbuOBruODh+ODvOOCv1xuICAgKiBAcGFyYW0gc2l6ZSBwb3NlMy5qc29u44Gu44OH44O844K/44Gu44K144Kk44K6W2J5dGVdXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwb3NlM2pzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21Qb3NlIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVBvc2UgPSBuZXcgQ3ViaXNtUG9zZSgpO1xuICAgIGNvbnN0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShwb3NlM2pzb24sIHNpemUpO1xuICAgIGNvbnN0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XG5cbiAgICAvLyDjg5Xjgqfjg7zjg4nmmYLplpPjga7mjIflrppcbiAgICBpZiAoIXJvb3QuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW4pLmlzTnVsbCgpKSB7XG4gICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IHJvb3RcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKVxuICAgICAgICAudG9GbG9hdChEZWZhdWx0RmFkZUluU2Vjb25kcyk7XG5cbiAgICAgIGlmIChyZXQuX2ZhZGVUaW1lU2Vjb25kcyA8PSAwLjApIHtcbiAgICAgICAgcmV0Ll9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcbiAgICBjb25zdCBwb3NlTGlzdEluZm86IFZhbHVlID0gcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEdyb3Vwcyk7XG4gICAgY29uc3QgcG9zZUNvdW50OiBudW1iZXIgPSBwb3NlTGlzdEluZm8uZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgcG9zZUluZGV4ID0gMDsgcG9zZUluZGV4IDwgcG9zZUNvdW50OyArK3Bvc2VJbmRleCkge1xuICAgICAgY29uc3QgaWRMaXN0SW5mbzogVmFsdWUgPSBwb3NlTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KHBvc2VJbmRleCk7XG4gICAgICBjb25zdCBpZENvdW50OiBudW1iZXIgPSBpZExpc3RJbmZvLmdldFNpemUoKTtcbiAgICAgIGxldCBncm91cENvdW50ID0gMDtcblxuICAgICAgZm9yIChsZXQgZ3JvdXBJbmRleCA9IDA7IGdyb3VwSW5kZXggPCBpZENvdW50OyArK2dyb3VwSW5kZXgpIHtcbiAgICAgICAgY29uc3QgcGFydEluZm86IFZhbHVlID0gaWRMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgoZ3JvdXBJbmRleCk7XG4gICAgICAgIGNvbnN0IHBhcnREYXRhOiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhJZCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgKTtcblxuICAgICAgICBwYXJ0RGF0YS5wYXJ0SWQgPSBwYXJhbWV0ZXJJZDtcblxuICAgICAgICAvLyDjg6rjg7Pjgq/jgZnjgovjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgICAgaWYgKCFwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspLmlzTnVsbCgpKSB7XG4gICAgICAgICAgY29uc3QgbGlua0xpc3RJbmZvOiBWYWx1ZSA9IHBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoTGluayk7XG4gICAgICAgICAgY29uc3QgbGlua0NvdW50OiBudW1iZXIgPSBsaW5rTGlzdEluZm8uZ2V0U2l6ZSgpO1xuXG4gICAgICAgICAgZm9yIChsZXQgbGlua0luZGV4ID0gMDsgbGlua0luZGV4IDwgbGlua0NvdW50OyArK2xpbmtJbmRleCkge1xuICAgICAgICAgICAgY29uc3QgbGlua1BhcnQ6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XG4gICAgICAgICAgICBjb25zdCBsaW5rSWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgICBsaW5rTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KGxpbmtJbmRleCkuZ2V0U3RyaW5nKClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGxpbmtQYXJ0LnBhcnRJZCA9IGxpbmtJZDtcblxuICAgICAgICAgICAgcGFydERhdGEubGluay5wdXNoQmFjayhsaW5rUGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0Ll9wYXJ0R3JvdXBzLnB1c2hCYWNrKHBhcnREYXRhLmNsb25lKCkpO1xuXG4gICAgICAgICsrZ3JvdXBDb3VudDtcbiAgICAgIH1cblxuICAgICAgcmV0Ll9wYXJ0R3JvdXBDb3VudHMucHVzaEJhY2soZ3JvdXBDb3VudCk7XG4gICAgfVxuXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgKiBAcGFyYW0gcG9zZSDlr77osaHjga5DdWJpc21Qb3NlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShwb3NlOiBDdWJpc21Qb3NlKTogdm9pZCB7XG4gICAgaWYgKHBvc2UgIT0gbnVsbCkge1xuICAgICAgcG9zZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOWJjeWbnuOBruODouODh+ODq+OBqOWQjOOBmOOBp+OBquOBhOWgtOWQiOOBr+WIneacn+WMluOBjOW/heimgVxuICAgIGlmIChtb2RlbCAhPSB0aGlzLl9sYXN0TW9kZWwpIHtcbiAgICAgIC8vIOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCueOBruWIneacn+WMllxuICAgICAgdGhpcy5yZXNldChtb2RlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGFzdE1vZGVsID0gbW9kZWw7XG5cbiAgICAvLyDoqK3lrprjgYvjgonmmYLplpPjgpLlpInmm7TjgZnjgovjgajjgIHntYzpgY7mmYLplpPjgYzjg57jgqTjg4rjgrnjgavjgarjgovkuovjgYzjgYLjgovjga7jgafjgIHntYzpgY7mmYLplpMw44Go44GX44Gm5a++5b+cXG4gICAgaWYgKGRlbHRhVGltZVNlY29uZHMgPCAwLjApIHtcbiAgICAgIGRlbHRhVGltZVNlY29uZHMgPSAwLjA7XG4gICAgfVxuXG4gICAgbGV0IGJlZ2luSW5kZXggPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGNvbnN0IHBhcnRHcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XG5cbiAgICAgIHRoaXMuZG9GYWRlKG1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzLCBiZWdpbkluZGV4LCBwYXJ0R3JvdXBDb3VudCk7XG5cbiAgICAgIGJlZ2luSW5kZXggKz0gcGFydEdyb3VwQ291bnQ7XG4gICAgfVxuXG4gICAgdGhpcy5jb3B5UGFydE9wYWNpdGllcyhtb2RlbCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo56S644KS5Yid5pyf5YyWXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQG5vdGUg5LiN6YCP5piO5bqm44Gu5Yid5pyf5YCk44GMMOOBp+OBquOBhOODkeODqeODoeODvOOCv+OBr+OAgeS4jemAj+aYjuW6puOCku+8keOBq+ioreWumuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlc2V0KG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGxldCBiZWdpbkluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBjb25zdCBncm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XG5cbiAgICAgIGZvciAobGV0IGo6IG51bWJlciA9IGJlZ2luSW5kZXg7IGogPCBiZWdpbkluZGV4ICsgZ3JvdXBDb3VudDsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BhcnRHcm91cHMuYXQoaikuaW5pdGlhbGl6ZShtb2RlbCk7XG5cbiAgICAgICAgY29uc3QgcGFydHNJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5wYXJ0SW5kZXg7XG4gICAgICAgIGNvbnN0IHBhcmFtSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFyYW1ldGVySW5kZXg7XG5cbiAgICAgICAgaWYgKHBhcnRzSW5kZXggPCAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wKTtcbiAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtSW5kZXgsIGogPT0gYmVnaW5JbmRleCA/IDEuMCA6IDAuMCk7XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmxpbmsuZ2V0U2l6ZSgpOyArK2spIHtcbiAgICAgICAgICB0aGlzLl9wYXJ0R3JvdXBzXG4gICAgICAgICAgICAuYXQoailcbiAgICAgICAgICAgIC5saW5rLmF0KGspXG4gICAgICAgICAgICAuaW5pdGlhbGl6ZShtb2RlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYmVnaW5JbmRleCArPSBncm91cENvdW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgpLjgrPjg5Tjg7xcbiAgICpcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgZ3JvdXBJbmRleCA9IDA7XG4gICAgICBncm91cEluZGV4IDwgdGhpcy5fcGFydEdyb3Vwcy5nZXRTaXplKCk7XG4gICAgICArK2dyb3VwSW5kZXhcbiAgICApIHtcbiAgICAgIGNvbnN0IHBhcnREYXRhOiBQYXJ0RGF0YSA9IHRoaXMuX3BhcnRHcm91cHMuYXQoZ3JvdXBJbmRleCk7XG5cbiAgICAgIGlmIChwYXJ0RGF0YS5saW5rLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlOyAvLyDpgKPli5XjgZnjgovjg5Hjg6njg6Hjg7zjgr/jga/jgarjgYRcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFydEluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpLnBhcnRJbmRleDtcbiAgICAgIGNvbnN0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgbGlua0luZGV4ID0gMDtcbiAgICAgICAgbGlua0luZGV4IDwgcGFydERhdGEubGluay5nZXRTaXplKCk7XG4gICAgICAgICsrbGlua0luZGV4XG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbGlua1BhcnQ6IFBhcnREYXRhID0gcGFydERhdGEubGluay5hdChsaW5rSW5kZXgpO1xuICAgICAgICBjb25zdCBsaW5rUGFydEluZGV4OiBudW1iZXIgPSBsaW5rUGFydC5wYXJ0SW5kZXg7XG5cbiAgICAgICAgaWYgKGxpbmtQYXJ0SW5kZXggPCAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgobGlua1BhcnRJbmRleCwgb3BhY2l0eSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuOAglxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBiZWdpbkluZGV4IOODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuODkeODvOODhOOCsOODq+ODvOODl+OBruWFiOmgreOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gcGFydEdyb3VwQ291bnQg44OV44Kn44O844OJ5pON5L2c44KS6KGM44GG44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZG9GYWRlKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgYmVnaW5JbmRleDogbnVtYmVyLFxuICAgIHBhcnRHcm91cENvdW50OiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgbGV0IHZpc2libGVQYXJ0SW5kZXggPSAtMTtcbiAgICBsZXQgbmV3T3BhY2l0eSA9IDEuMDtcblxuICAgIGNvbnN0IHBoaSA9IDAuNTtcbiAgICBjb25zdCBiYWNrT3BhY2l0eVRocmVzaG9sZCA9IDAuMTU7XG5cbiAgICAvLyDnj77lnKjjgIHooajnpLrnirbmhYvjgavjgarjgaPjgabjgYTjgovjg5Hjg7zjg4TjgpLlj5blvpdcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBiZWdpbkluZGV4OyBpIDwgYmVnaW5JbmRleCArIHBhcnRHcm91cENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XG4gICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcmFtZXRlckluZGV4O1xuXG4gICAgICBpZiAobW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtSW5kZXgpID4gRXBzaWxvbikge1xuICAgICAgICBpZiAodmlzaWJsZVBhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gaTtcbiAgICAgICAgbmV3T3BhY2l0eSA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xuXG4gICAgICAgIC8vIOaWsOOBl+OBhOS4jemAj+aYjuW6puOCkuioiOeul1xuICAgICAgICBuZXdPcGFjaXR5ICs9IGRlbHRhVGltZVNlY29uZHMgLyB0aGlzLl9mYWRlVGltZVNlY29uZHM7XG5cbiAgICAgICAgaWYgKG5ld09wYWNpdHkgPiAxLjApIHtcbiAgICAgICAgICBuZXdPcGFjaXR5ID0gMS4wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPCAwKSB7XG4gICAgICB2aXNpYmxlUGFydEluZGV4ID0gMDtcbiAgICAgIG5ld09wYWNpdHkgPSAxLjA7XG4gICAgfVxuXG4gICAgLy8g6KGo56S644OR44O844OE44CB6Z2e6KGo56S644OR44O844OE44Gu5LiN6YCP5piO5bqm44KS6Kit5a6a44GZ44KLXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gYmVnaW5JbmRleDsgaSA8IGJlZ2luSW5kZXggKyBwYXJ0R3JvdXBDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwYXJ0c0luZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcnRJbmRleDtcblxuICAgICAgLy8g6KGo56S644OR44O844OE44Gu6Kit5a6aXG4gICAgICBpZiAodmlzaWJsZVBhcnRJbmRleCA9PSBpKSB7XG4gICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBuZXdPcGFjaXR5KTsgLy8g5YWI44Gr6Kit5a6aXG4gICAgICB9XG4gICAgICAvLyDpnZ7ooajnpLrjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgIGVsc2Uge1xuICAgICAgICBsZXQgb3BhY2l0eTogbnVtYmVyID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgpO1xuICAgICAgICBsZXQgYTE6IG51bWJlcjsgLy8g6KiI566X44Gr44KI44Gj44Gm5rGC44KB44KJ44KM44KL5LiN6YCP5piO5bqmXG5cbiAgICAgICAgaWYgKG5ld09wYWNpdHkgPCBwaGkpIHtcbiAgICAgICAgICBhMSA9IChuZXdPcGFjaXR5ICogKHBoaSAtIDEpKSAvIHBoaSArIDEuMDsgLy8gKDAsMSksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYTEgPSAoKDEgLSBuZXdPcGFjaXR5KSAqIHBoaSkgLyAoMS4wIC0gcGhpKTsgLy8gKDEsMCksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXG4gICAgICAgIH1cblxuICAgICAgICAvLyDog4zmma/jga7opovjgYjjgovlibLlkIjjgpLliLbpmZDjgZnjgovloLTlkIhcbiAgICAgICAgY29uc3QgYmFja09wYWNpdHk6IG51bWJlciA9ICgxLjAgLSBhMSkgKiAoMS4wIC0gbmV3T3BhY2l0eSk7XG5cbiAgICAgICAgaWYgKGJhY2tPcGFjaXR5ID4gYmFja09wYWNpdHlUaHJlc2hvbGQpIHtcbiAgICAgICAgICBhMSA9IDEuMCAtIGJhY2tPcGFjaXR5VGhyZXNob2xkIC8gKDEuMCAtIG5ld09wYWNpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wYWNpdHkgPiBhMSkge1xuICAgICAgICAgIG9wYWNpdHkgPSBhMTsgLy8g6KiI566X44Gu5LiN6YCP5piO5bqm44KI44KK44KC5aSn44GN44GR44KM44Gw77yI5r+D44GR44KM44Gw77yJ5LiN6YCP5piO5bqm44KS5LiK44GS44KLXG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgb3BhY2l0eSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZhZGVUaW1lU2Vjb25kcyA9IERlZmF1bHRGYWRlSW5TZWNvbmRzO1xuICAgIHRoaXMuX2xhc3RNb2RlbCA9IG51bGw7XG4gICAgdGhpcy5fcGFydEdyb3VwcyA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG4gICAgdGhpcy5fcGFydEdyb3VwQ291bnRzID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gIH1cblxuICBfcGFydEdyb3VwczogY3NtVmVjdG9yPFBhcnREYXRhPjsgLy8g44OR44O844OE44Kw44Or44O844OXXG4gIF9wYXJ0R3JvdXBDb3VudHM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDjgZ3jgozjgZ7jgozjga7jg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcbiAgX2ZhZGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4nmmYLplpNb56eSXVxuICBfbGFzdE1vZGVsOiBDdWJpc21Nb2RlbDsgLy8g5YmN5Zue5pON5L2c44GX44Gf44Oi44OH44OrXG59XG5cbi8qKlxuICog44OR44O844OE44Gr44G+44Gk44KP44KL44OH44O844K/44KS566h55CGXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJ0RGF0YSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHY/OiBQYXJ0RGF0YSkge1xuICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSAwO1xuICAgIHRoaXMucGFydEluZGV4ID0gMDtcbiAgICB0aGlzLmxpbmsgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuXG4gICAgaWYgKHYgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnBhcnRJZCA9IHYucGFydElkO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodi5saW5rLmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIGFzc2lnbm1lbnQodjogUGFydERhdGEpOiBQYXJ0RGF0YSB7XG4gICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHYubGluay5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIHRoaXMubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyWXG4gICAqIEBwYXJhbSBtb2RlbCDliJ3mnJ/ljJbjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleCh0aGlzLnBhcnRJZCk7XG4gICAgdGhpcy5wYXJ0SW5kZXggPSBtb2RlbC5nZXRQYXJ0SW5kZXgodGhpcy5wYXJ0SWQpO1xuXG4gICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHRoaXMucGFyYW1ldGVySW5kZXgsIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCquODluOCuOOCp+OCr+ODiOOBruOCs+ODlOODvOOCkueUn+aIkOOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IFBhcnREYXRhIHtcbiAgICBjb25zdCBjbG9uZVBhcnREYXRhOiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuXG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SWQgPSB0aGlzLnBhcnRJZDtcbiAgICBjbG9uZVBhcnREYXRhLnBhcmFtZXRlckluZGV4ID0gdGhpcy5wYXJhbWV0ZXJJbmRleDtcbiAgICBjbG9uZVBhcnREYXRhLnBhcnRJbmRleCA9IHRoaXMucGFydEluZGV4O1xuICAgIGNsb25lUGFydERhdGEubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdGhpcy5saW5rLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5saW5rLmVuZCgpKTtcbiAgICAgIGl0ZS5pbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY2xvbmVQYXJ0RGF0YS5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVQYXJ0RGF0YTtcbiAgfVxuXG4gIHBhcnRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODvOODhElEXG4gIHBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICBwYXJ0SW5kZXg6IG51bWJlcjsgLy8g44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIGxpbms6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOmAo+WLleOBmeOCi+ODkeODqeODoeODvOOCv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21wb3NlJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Qb3NlID0gJC5DdWJpc21Qb3NlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Qb3NlID0gJC5DdWJpc21Qb3NlO1xuICBleHBvcnQgY29uc3QgUGFydERhdGEgPSAkLlBhcnREYXRhO1xuICBleHBvcnQgdHlwZSBQYXJ0RGF0YSA9ICQuUGFydERhdGE7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQThRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE1UUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWdCQTtBQUFBO0FBelJBO0FBOFJBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUFBO0FBNUVBO0FBK0VBO0FBRUE7QUFBQTtBQUNBO0FBRUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/effect/cubismpose.ts\n");

/***/ }),

/***/ "./Framework/src/icubismmodelsetting.ts":
/*!**********************************************!*\
  !*** ./Framework/src/icubismmodelsetting.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.ICubismModelSetting = void 0;\nvar ICubismModelSetting = (function () {\n    function ICubismModelSetting() {\n    }\n    return ICubismModelSetting;\n}());\nexports.ICubismModelSetting = ICubismModelSetting;\nvar $ = __importStar(__webpack_require__(/*! ./icubismmodelsetting */ \"./Framework/src/icubismmodelsetting.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.ICubismModelSetting = $.ICubismModelSetting;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/icubismmodelsetting.ts\n");

/***/ }),

/***/ "./Framework/src/id/cubismid.ts":
/*!**************************************!*\
  !*** ./Framework/src/id/cubismid.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismId = void 0;\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\nvar CubismId = (function () {\n    function CubismId(id) {\n        if (typeof id === 'string') {\n            this._id = new csmstring_1.csmString(id);\n            return;\n        }\n        this._id = id;\n    }\n    CubismId.prototype.getString = function () {\n        return this._id;\n    };\n    CubismId.prototype.isEqual = function (c) {\n        if (typeof c === 'string') {\n            return this._id.isEqual(c);\n        }\n        else if (c instanceof csmstring_1.csmString) {\n            return this._id.isEqual(c.s);\n        }\n        else if (c instanceof CubismId) {\n            return this._id.isEqual(c._id.s);\n        }\n        return false;\n    };\n    CubismId.prototype.isNotEqual = function (c) {\n        if (typeof c == 'string') {\n            return !this._id.isEqual(c);\n        }\n        else if (c instanceof csmstring_1.csmString) {\n            return !this._id.isEqual(c.s);\n        }\n        else if (c instanceof CubismId) {\n            return !this._id.isEqual(c._id.s);\n        }\n        return false;\n    };\n    return CubismId;\n}());\nexports.CubismId = CubismId;\nvar $ = __importStar(__webpack_require__(/*! ./cubismid */ \"./Framework/src/id/cubismid.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismId = $.CubismId;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZC50cz8xZjE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcblxuLyoqXG4gKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgVxuICpcbiAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyB44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21JZCB7XG4gIC8qKlxuICAgKiBJROWQjeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldFN0cmluZygpOiBjc21TdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2lkID0gbmV3IGNzbVN0cmluZyhpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBpZOOCkuavlOi8g1xuICAgKiBAcGFyYW0gYyDmr5TovIPjgZnjgotpZFxuICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBpc0VxdWFsKGM6IHN0cmluZyB8IGNzbVN0cmluZyB8IEN1YmlzbUlkKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBjID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYyk7XG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLnMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGlk44KS5q+U6LyDXG4gICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXG4gICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGlzTm90RXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIGMgPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjKTtcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLnMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2lkOiBjc21TdHJpbmc7IC8vIElE5ZCNXG59XG5cbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21JZDtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtaWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUlkID0gJC5DdWJpc21JZDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWQgPSAkLkN1YmlzbUlkO1xuICBleHBvcnQgdHlwZSBDdWJpc21JZEhhbmRsZSA9ICQuQ3ViaXNtSWRIYW5kbGU7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQU9BO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFkQTtBQUNBO0FBQ0E7QUFtQkE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQXJEQTtBQTBEQTtBQUVBO0FBQUE7QUFDQTtBQUdBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/id/cubismid.ts\n");

/***/ }),

/***/ "./Framework/src/id/cubismidmanager.ts":
/*!*********************************************!*\
  !*** ./Framework/src/id/cubismidmanager.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismIdManager = void 0;\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismid_1 = __webpack_require__(/*! ./cubismid */ \"./Framework/src/id/cubismid.ts\");\nvar CubismIdManager = (function () {\n    function CubismIdManager() {\n        this._ids = new csmvector_1.csmVector();\n    }\n    CubismIdManager.prototype.release = function () {\n        for (var i = 0; i < this._ids.getSize(); ++i) {\n            this._ids.set(i, void 0);\n        }\n        this._ids = null;\n    };\n    CubismIdManager.prototype.registerIds = function (ids) {\n        for (var i = 0; i < ids.length; i++) {\n            this.registerId(ids[i]);\n        }\n    };\n    CubismIdManager.prototype.registerId = function (id) {\n        var result = null;\n        if ('string' == typeof id) {\n            if ((result = this.findId(id)) != null) {\n                return result;\n            }\n            result = new cubismid_1.CubismId(id);\n            this._ids.pushBack(result);\n        }\n        else {\n            return this.registerId(id.s);\n        }\n        return result;\n    };\n    CubismIdManager.prototype.getId = function (id) {\n        return this.registerId(id);\n    };\n    CubismIdManager.prototype.isExist = function (id) {\n        if ('string' == typeof id) {\n            return this.findId(id) != null;\n        }\n        return this.isExist(id.s);\n    };\n    CubismIdManager.prototype.findId = function (id) {\n        for (var i = 0; i < this._ids.getSize(); ++i) {\n            if (this._ids\n                .at(i)\n                .getString()\n                .isEqual(id)) {\n                return this._ids.at(i);\n            }\n        }\n        return null;\n    };\n    return CubismIdManager;\n}());\nexports.CubismIdManager = CubismIdManager;\nvar $ = __importStar(__webpack_require__(/*! ./cubismidmanager */ \"./Framework/src/id/cubismidmanager.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismIdManager = $.CubismIdManager;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvaWQvY3ViaXNtaWRtYW5hZ2VyLnRzPzZmOWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtSWQgfSBmcm9tICcuL2N1YmlzbWlkJztcblxuLyoqXG4gKiBJROWQjeOBrueuoeeQhlxuICpcbiAqIElE5ZCN44KS566h55CG44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21JZE1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZD4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICB0aGlzLl9pZHMuc2V0KGksIHZvaWQgMCk7XG4gICAgfVxuICAgIHRoaXMuX2lkcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgpLjg6rjgrnjg4jjgYvjgonnmbvpjLJcbiAgICpcbiAgICogQHBhcmFtIGlkcyBJROWQjeODquOCueODiFxuICAgKiBAcGFyYW0gY291bnQgSUTjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcklkcyhpZHM6IHN0cmluZ1tdIHwgY3NtU3RyaW5nW10pOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RlcklkKGlkc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44KS55m76YyyXG4gICAqXG4gICAqIEBwYXJhbSBpZCBJROWQjVxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVySWQoaWQ6IHN0cmluZyB8IGNzbVN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICBsZXQgcmVzdWx0OiBDdWJpc21JZCA9IG51bGw7XG5cbiAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XG4gICAgICBpZiAoKHJlc3VsdCA9IHRoaXMuZmluZElkKGlkKSkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBuZXcgQ3ViaXNtSWQoaWQpO1xuICAgICAgdGhpcy5faWRzLnB1c2hCYWNrKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOBi+OCiUlE44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBpZCBJROWQjVxuICAgKi9cbiAgcHVibGljIGdldElkKGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZCk7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgYvjgolJROOBrueiuuiqjVxuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZElkKGlkKSAhPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pc0V4aXN0KGlkLnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44GL44KJSUTjgpLmpJzntKLjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGlkIElE5ZCNXG4gICAqIEByZXR1cm4g55m76Yyy44GV44KM44Gm44GE44KLSUTjgILjgarjgZHjgozjgbBOVUxM44CCXG4gICAqL1xuICBwcml2YXRlIGZpbmRJZChpZDogc3RyaW5nKTogQ3ViaXNtSWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2lkc1xuICAgICAgICAgIC5hdChpKVxuICAgICAgICAgIC5nZXRTdHJpbmcoKVxuICAgICAgICAgIC5pc0VxdWFsKGlkKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZHMuYXQoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9pZHM6IGNzbVZlY3RvcjxDdWJpc21JZD47IC8vIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44Gu44Oq44K544OIXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWlkbWFuYWdlcic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtSWRNYW5hZ2VyID0gJC5DdWJpc21JZE1hbmFnZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUlkTWFuYWdlciA9ICQuQ3ViaXNtSWRNYW5hZ2VyO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQU9BO0FBSUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFBQTtBQWhHQTtBQW1HQTtBQUVBO0FBQUE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/id/cubismidmanager.ts\n");

/***/ }),

/***/ "./Framework/src/live2dcubismframework.ts":
/*!************************************************!*\
  !*** ./Framework/src/live2dcubismframework.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.LogLevel = exports.Option = exports.CubismFramework = exports.csmDelete = exports.Constant = exports.strtod = void 0;\nvar cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ \"./Framework/src/id/cubismidmanager.ts\");\nvar cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nfunction strtod(s, endPtr) {\n    var index = 0;\n    for (var i = 1;; i++) {\n        var testC = s.slice(i - 1, i);\n        if (testC == 'e' || testC == '-' || testC == 'E') {\n            continue;\n        }\n        var test = s.substring(0, i);\n        var number = Number(test);\n        if (isNaN(number)) {\n            break;\n        }\n        index = i;\n    }\n    var d = parseFloat(s);\n    if (isNaN(d)) {\n        d = NaN;\n    }\n    endPtr[0] = s.slice(index);\n    return d;\n}\nexports.strtod = strtod;\nvar s_isStarted = false;\nvar s_isInitialized = false;\nvar s_option = null;\nvar s_cubismIdManager = null;\nexports.Constant = Object.freeze({\n    vertexOffset: 0,\n    vertexStep: 2\n});\nfunction csmDelete(address) {\n    if (!address) {\n        return;\n    }\n    address = void 0;\n}\nexports.csmDelete = csmDelete;\nvar CubismFramework = (function () {\n    function CubismFramework() {\n    }\n    CubismFramework.startUp = function (option) {\n        if (option === void 0) { option = null; }\n        if (s_isStarted) {\n            cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is already done.');\n            return s_isStarted;\n        }\n        s_option = option;\n        if (s_option != null) {\n            Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\n        }\n        s_isStarted = true;\n        if (s_isStarted) {\n            var version = Live2DCubismCore.Version.csmGetVersion();\n            var major = (version & 0xff000000) >> 24;\n            var minor = (version & 0x00ff0000) >> 16;\n            var patch = version & 0x0000ffff;\n            var versionNumber = version;\n            cubismdebug_1.CubismLogInfo(\"Live2D Cubism Core version: {0}.{1}.{2} ({3})\", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);\n        }\n        cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is complete.');\n        return s_isStarted;\n    };\n    CubismFramework.cleanUp = function () {\n        s_isStarted = false;\n        s_isInitialized = false;\n        s_option = null;\n        s_cubismIdManager = null;\n    };\n    CubismFramework.initialize = function () {\n        cubismdebug_1.CSM_ASSERT(s_isStarted);\n        if (!s_isStarted) {\n            cubismdebug_1.CubismLogWarning('CubismFramework is not started.');\n            return;\n        }\n        if (s_isInitialized) {\n            cubismdebug_1.CubismLogWarning('CubismFramework.initialize() skipped, already initialized.');\n            return;\n        }\n        cubismjson_1.Value.staticInitializeNotForClientCall();\n        s_cubismIdManager = new cubismidmanager_1.CubismIdManager();\n        s_isInitialized = true;\n        cubismdebug_1.CubismLogInfo('CubismFramework.initialize() is complete.');\n    };\n    CubismFramework.dispose = function () {\n        cubismdebug_1.CSM_ASSERT(s_isStarted);\n        if (!s_isStarted) {\n            cubismdebug_1.CubismLogWarning('CubismFramework is not started.');\n            return;\n        }\n        if (!s_isInitialized) {\n            cubismdebug_1.CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\n            return;\n        }\n        cubismjson_1.Value.staticReleaseNotForClientCall();\n        s_cubismIdManager.release();\n        s_cubismIdManager = null;\n        cubismrenderer_1.CubismRenderer.staticRelease();\n        s_isInitialized = false;\n        cubismdebug_1.CubismLogInfo('CubismFramework.dispose() is complete.');\n    };\n    CubismFramework.isStarted = function () {\n        return s_isStarted;\n    };\n    CubismFramework.isInitialized = function () {\n        return s_isInitialized;\n    };\n    CubismFramework.coreLogFunction = function (message) {\n        if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\n            return;\n        }\n        Live2DCubismCore.Logging.csmGetLogFunction()(message);\n    };\n    CubismFramework.getLoggingLevel = function () {\n        if (s_option != null) {\n            return s_option.loggingLevel;\n        }\n        return LogLevel.LogLevel_Off;\n    };\n    CubismFramework.getIdManager = function () {\n        return s_cubismIdManager;\n    };\n    return CubismFramework;\n}());\nexports.CubismFramework = CubismFramework;\nvar Option = (function () {\n    function Option() {\n    }\n    return Option;\n}());\nexports.Option = Option;\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\n    LogLevel[LogLevel[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\n    LogLevel[LogLevel[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\n    LogLevel[LogLevel[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\n    LogLevel[LogLevel[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\n    LogLevel[LogLevel[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nvar $ = __importStar(__webpack_require__(/*! ./live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.Constant = $.Constant;\n    Live2DCubismFramework.csmDelete = $.csmDelete;\n    Live2DCubismFramework.CubismFramework = $.CubismFramework;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/live2dcubismframework.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismmath.ts":
/*!******************************************!*\
  !*** ./Framework/src/math/cubismmath.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMath = void 0;\nvar cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\nvar CubismMath = (function () {\n    function CubismMath() {\n    }\n    CubismMath.range = function (value, min, max) {\n        if (value < min) {\n            value = min;\n        }\n        else if (value > max) {\n            value = max;\n        }\n        return value;\n    };\n    CubismMath.sin = function (x) {\n        return Math.sin(x);\n    };\n    CubismMath.cos = function (x) {\n        return Math.cos(x);\n    };\n    CubismMath.abs = function (x) {\n        return Math.abs(x);\n    };\n    CubismMath.sqrt = function (x) {\n        return Math.sqrt(x);\n    };\n    CubismMath.cbrt = function (x) {\n        if (x === 0) {\n            return x;\n        }\n        var cx = x;\n        var isNegativeNumber = cx < 0;\n        if (isNegativeNumber) {\n            cx = -cx;\n        }\n        var ret;\n        if (cx === Infinity) {\n            ret = Infinity;\n        }\n        else {\n            ret = Math.exp(Math.log(cx) / 3);\n            ret = (cx / (ret * ret) + 2 * ret) / 3;\n        }\n        return isNegativeNumber ? -ret : ret;\n    };\n    CubismMath.getEasingSine = function (value) {\n        if (value < 0.0) {\n            return 0.0;\n        }\n        else if (value > 1.0) {\n            return 1.0;\n        }\n        return 0.5 - 0.5 * this.cos(value * Math.PI);\n    };\n    CubismMath.max = function (left, right) {\n        return left > right ? left : right;\n    };\n    CubismMath.min = function (left, right) {\n        return left > right ? right : left;\n    };\n    CubismMath.degreesToRadian = function (degrees) {\n        return (degrees / 180.0) * Math.PI;\n    };\n    CubismMath.radianToDegrees = function (radian) {\n        return (radian * 180.0) / Math.PI;\n    };\n    CubismMath.directionToRadian = function (from, to) {\n        var q1 = Math.atan2(to.y, to.x);\n        var q2 = Math.atan2(from.y, from.x);\n        var ret = q1 - q2;\n        while (ret < -Math.PI) {\n            ret += Math.PI * 2.0;\n        }\n        while (ret > Math.PI) {\n            ret -= Math.PI * 2.0;\n        }\n        return ret;\n    };\n    CubismMath.directionToDegrees = function (from, to) {\n        var radian = this.directionToRadian(from, to);\n        var degree = this.radianToDegrees(radian);\n        if (to.x - from.x > 0.0) {\n            degree = -degree;\n        }\n        return degree;\n    };\n    CubismMath.radianToDirection = function (totalAngle) {\n        var ret = new cubismvector2_1.CubismVector2();\n        ret.x = this.sin(totalAngle);\n        ret.y = this.cos(totalAngle);\n        return ret;\n    };\n    CubismMath.quadraticEquation = function (a, b, c) {\n        if (this.abs(a) < CubismMath.Epsilon) {\n            if (this.abs(b) < CubismMath.Epsilon) {\n                return -c;\n            }\n            return -c / b;\n        }\n        return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\n    };\n    CubismMath.cardanoAlgorithmForBezier = function (a, b, c, d) {\n        if (this.sqrt(a) < CubismMath.Epsilon) {\n            return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\n        }\n        var ba = b / a;\n        var ca = c / a;\n        var da = d / a;\n        var p = (3.0 * ca - ba * ba) / 3.0;\n        var p3 = p / 3.0;\n        var q = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\n        var q2 = q / 2.0;\n        var discriminant = q2 * q2 + p3 * p3 * p3;\n        var center = 0.5;\n        var threshold = center + 0.01;\n        if (discriminant < 0.0) {\n            var mp3 = -p / 3.0;\n            var mp33 = mp3 * mp3 * mp3;\n            var r = this.sqrt(mp33);\n            var t = -q / (2.0 * r);\n            var cosphi = this.range(t, -1.0, 1.0);\n            var phi = Math.acos(cosphi);\n            var crtr = this.cbrt(r);\n            var t1 = 2.0 * crtr;\n            var root1_1 = t1 * this.cos(phi / 3.0) - ba / 3.0;\n            if (this.abs(root1_1 - center) < threshold) {\n                return this.range(root1_1, 0.0, 1.0);\n            }\n            var root2 = t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\n            if (this.abs(root2 - center) < threshold) {\n                return this.range(root2, 0.0, 1.0);\n            }\n            var root3 = t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\n            return this.range(root3, 0.0, 1.0);\n        }\n        if (discriminant == 0.0) {\n            var u1_1;\n            if (q2 < 0.0) {\n                u1_1 = this.cbrt(-q2);\n            }\n            else {\n                u1_1 = -this.cbrt(q2);\n            }\n            var root1_2 = 2.0 * u1_1 - ba / 3.0;\n            if (this.abs(root1_2 - center) < threshold) {\n                return this.range(root1_2, 0.0, 1.0);\n            }\n            var root2 = -u1_1 - ba / 3.0;\n            return this.range(root2, 0.0, 1.0);\n        }\n        var sd = this.sqrt(discriminant);\n        var u1 = this.cbrt(sd - q2);\n        var v1 = this.cbrt(sd + q2);\n        var root1 = u1 - v1 - ba / 3.0;\n        return this.range(root1, 0.0, 1.0);\n    };\n    CubismMath.Epsilon = 0.00001;\n    return CubismMath;\n}());\nexports.CubismMath = CubismMath;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmath */ \"./Framework/src/math/cubismmath.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMath = $.CubismMath;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismmath.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismmatrix44.ts":
/*!**********************************************!*\
  !*** ./Framework/src/math/cubismmatrix44.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMatrix44 = void 0;\nvar CubismMatrix44 = (function () {\n    function CubismMatrix44() {\n        this._tr = new Float32Array(16);\n        this.loadIdentity();\n    }\n    CubismMatrix44.multiply = function (a, b, dst) {\n        var c = new Float32Array([\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0\n        ]);\n        var n = 4;\n        for (var i = 0; i < n; ++i) {\n            for (var j = 0; j < n; ++j) {\n                for (var k = 0; k < n; ++k) {\n                    c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\n                }\n            }\n        }\n        for (var i = 0; i < 16; ++i) {\n            dst[i] = c[i];\n        }\n    };\n    CubismMatrix44.prototype.loadIdentity = function () {\n        var c = new Float32Array([\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0\n        ]);\n        this.setMatrix(c);\n    };\n    CubismMatrix44.prototype.setMatrix = function (tr) {\n        for (var i = 0; i < 16; ++i) {\n            this._tr[i] = tr[i];\n        }\n    };\n    CubismMatrix44.prototype.getArray = function () {\n        return this._tr;\n    };\n    CubismMatrix44.prototype.getScaleX = function () {\n        return this._tr[0];\n    };\n    CubismMatrix44.prototype.getScaleY = function () {\n        return this._tr[5];\n    };\n    CubismMatrix44.prototype.getTranslateX = function () {\n        return this._tr[12];\n    };\n    CubismMatrix44.prototype.getTranslateY = function () {\n        return this._tr[13];\n    };\n    CubismMatrix44.prototype.transformX = function (src) {\n        return this._tr[0] * src + this._tr[12];\n    };\n    CubismMatrix44.prototype.transformY = function (src) {\n        return this._tr[5] * src + this._tr[13];\n    };\n    CubismMatrix44.prototype.invertTransformX = function (src) {\n        return (src - this._tr[12]) / this._tr[0];\n    };\n    CubismMatrix44.prototype.invertTransformY = function (src) {\n        return (src - this._tr[13]) / this._tr[5];\n    };\n    CubismMatrix44.prototype.translateRelative = function (x, y) {\n        var tr1 = new Float32Array([\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            x,\n            y,\n            0.0,\n            1.0\n        ]);\n        CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    };\n    CubismMatrix44.prototype.translate = function (x, y) {\n        this._tr[12] = x;\n        this._tr[13] = y;\n    };\n    CubismMatrix44.prototype.translateX = function (x) {\n        this._tr[12] = x;\n    };\n    CubismMatrix44.prototype.translateY = function (y) {\n        this._tr[13] = y;\n    };\n    CubismMatrix44.prototype.scaleRelative = function (x, y) {\n        var tr1 = new Float32Array([\n            x,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            y,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0\n        ]);\n        CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    };\n    CubismMatrix44.prototype.scale = function (x, y) {\n        this._tr[0] = x;\n        this._tr[5] = y;\n    };\n    CubismMatrix44.prototype.multiplyByMatrix = function (m) {\n        CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\n    };\n    CubismMatrix44.prototype.clone = function () {\n        var cloneMatrix = new CubismMatrix44();\n        for (var i = 0; i < this._tr.length; i++) {\n            cloneMatrix._tr[i] = this._tr[i];\n        }\n        return cloneMatrix;\n    };\n    return CubismMatrix44;\n}());\nexports.CubismMatrix44 = CubismMatrix44;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMatrix44 = $.CubismMatrix44;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismmatrix44.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismmodelmatrix.ts":
/*!*************************************************!*\
  !*** ./Framework/src/math/cubismmodelmatrix.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismModelMatrix = void 0;\nvar cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\nvar CubismModelMatrix = (function (_super) {\n    __extends(CubismModelMatrix, _super);\n    function CubismModelMatrix(w, h) {\n        var _this = _super.call(this) || this;\n        _this._width = w !== undefined ? w : 0.0;\n        _this._height = h !== undefined ? h : 0.0;\n        _this.setHeight(2.0);\n        return _this;\n    }\n    CubismModelMatrix.prototype.setWidth = function (w) {\n        var scaleX = w / this._width;\n        var scaleY = scaleX;\n        this.scale(scaleX, scaleY);\n    };\n    CubismModelMatrix.prototype.setHeight = function (h) {\n        var scaleX = h / this._height;\n        var scaleY = scaleX;\n        this.scale(scaleX, scaleY);\n    };\n    CubismModelMatrix.prototype.setPosition = function (x, y) {\n        this.translate(x, y);\n    };\n    CubismModelMatrix.prototype.setCenterPosition = function (x, y) {\n        this.centerX(x);\n        this.centerY(y);\n    };\n    CubismModelMatrix.prototype.top = function (y) {\n        this.setY(y);\n    };\n    CubismModelMatrix.prototype.bottom = function (y) {\n        var h = this._height * this.getScaleY();\n        this.translateY(y - h);\n    };\n    CubismModelMatrix.prototype.left = function (x) {\n        this.setX(x);\n    };\n    CubismModelMatrix.prototype.right = function (x) {\n        var w = this._width * this.getScaleX();\n        this.translateX(x - w);\n    };\n    CubismModelMatrix.prototype.centerX = function (x) {\n        var w = this._width * this.getScaleX();\n        this.translateX(x - w / 2.0);\n    };\n    CubismModelMatrix.prototype.setX = function (x) {\n        this.translateX(x);\n    };\n    CubismModelMatrix.prototype.centerY = function (y) {\n        var h = this._height * this.getScaleY();\n        this.translateY(y - h / 2.0);\n    };\n    CubismModelMatrix.prototype.setY = function (y) {\n        this.translateY(y);\n    };\n    CubismModelMatrix.prototype.setupFromLayout = function (layout) {\n        var keyWidth = 'width';\n        var keyHeight = 'height';\n        var keyX = 'x';\n        var keyY = 'y';\n        var keyCenterX = 'center_x';\n        var keyCenterY = 'center_y';\n        var keyTop = 'top';\n        var keyBottom = 'bottom';\n        var keyLeft = 'left';\n        var keyRight = 'right';\n        for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {\n            var key = ite.ptr().first;\n            var value = ite.ptr().second;\n            if (key == keyWidth) {\n                this.setWidth(value);\n            }\n            else if (key == keyHeight) {\n                this.setHeight(value);\n            }\n        }\n        for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {\n            var key = ite.ptr().first;\n            var value = ite.ptr().second;\n            if (key == keyX) {\n                this.setX(value);\n            }\n            else if (key == keyY) {\n                this.setY(value);\n            }\n            else if (key == keyCenterX) {\n                this.centerX(value);\n            }\n            else if (key == keyCenterY) {\n                this.centerY(value);\n            }\n            else if (key == keyTop) {\n                this.top(value);\n            }\n            else if (key == keyBottom) {\n                this.bottom(value);\n            }\n            else if (key == keyLeft) {\n                this.left(value);\n            }\n            else if (key == keyRight) {\n                this.right(value);\n            }\n        }\n    };\n    return CubismModelMatrix;\n}(cubismmatrix44_1.CubismMatrix44));\nexports.CubismModelMatrix = CubismModelMatrix;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmodelmatrix */ \"./Framework/src/math/cubismmodelmatrix.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismModelMatrix = $.CubismModelMatrix;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismmodelmatrix.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismtargetpoint.ts":
/*!*************************************************!*\
  !*** ./Framework/src/math/cubismtargetpoint.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismTargetPoint = void 0;\nvar cubismmath_1 = __webpack_require__(/*! ./cubismmath */ \"./Framework/src/math/cubismmath.ts\");\nvar FrameRate = 30;\nvar Epsilon = 0.01;\nvar CubismTargetPoint = (function () {\n    function CubismTargetPoint() {\n        this._faceTargetX = 0.0;\n        this._faceTargetY = 0.0;\n        this._faceX = 0.0;\n        this._faceY = 0.0;\n        this._faceVX = 0.0;\n        this._faceVY = 0.0;\n        this._lastTimeSeconds = 0.0;\n        this._userTimeSeconds = 0.0;\n    }\n    CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {\n        this._userTimeSeconds += deltaTimeSeconds;\n        var faceParamMaxV = 40.0 / 10.0;\n        var maxV = (faceParamMaxV * 1.0) / FrameRate;\n        if (this._lastTimeSeconds == 0.0) {\n            this._lastTimeSeconds = this._userTimeSeconds;\n            return;\n        }\n        var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\n        this._lastTimeSeconds = this._userTimeSeconds;\n        var timeToMaxSpeed = 0.15;\n        var frameToMaxSpeed = timeToMaxSpeed * FrameRate;\n        var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;\n        var dx = this._faceTargetX - this._faceX;\n        var dy = this._faceTargetY - this._faceY;\n        if (cubismmath_1.CubismMath.abs(dx) <= Epsilon && cubismmath_1.CubismMath.abs(dy) <= Epsilon) {\n            return;\n        }\n        var d = cubismmath_1.CubismMath.sqrt(dx * dx + dy * dy);\n        var vx = (maxV * dx) / d;\n        var vy = (maxV * dy) / d;\n        var ax = vx - this._faceVX;\n        var ay = vy - this._faceVY;\n        var a = cubismmath_1.CubismMath.sqrt(ax * ax + ay * ay);\n        if (a < -maxA || a > maxA) {\n            ax *= maxA / a;\n            ay *= maxA / a;\n        }\n        this._faceVX += ax;\n        this._faceVY += ay;\n        {\n            var maxV_1 = 0.5 *\n                (cubismmath_1.CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\n                    maxA);\n            var curV = cubismmath_1.CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);\n            if (curV > maxV_1) {\n                this._faceVX *= maxV_1 / curV;\n                this._faceVY *= maxV_1 / curV;\n            }\n        }\n        this._faceX += this._faceVX;\n        this._faceY += this._faceVY;\n    };\n    CubismTargetPoint.prototype.getX = function () {\n        return this._faceX;\n    };\n    CubismTargetPoint.prototype.getY = function () {\n        return this._faceY;\n    };\n    CubismTargetPoint.prototype.set = function (x, y) {\n        this._faceTargetX = x;\n        this._faceTargetY = y;\n    };\n    return CubismTargetPoint;\n}());\nexports.CubismTargetPoint = CubismTargetPoint;\nvar $ = __importStar(__webpack_require__(/*! ./cubismtargetpoint */ \"./Framework/src/math/cubismtargetpoint.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismTargetPoint = $.CubismTargetPoint;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismtargetpoint.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismvector2.ts":
/*!*********************************************!*\
  !*** ./Framework/src/math/cubismvector2.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismVector2 = void 0;\nvar CubismVector2 = (function () {\n    function CubismVector2(x, y) {\n        this.x = x;\n        this.y = y;\n        this.x = x == undefined ? 0.0 : x;\n        this.y = y == undefined ? 0.0 : y;\n    }\n    CubismVector2.prototype.add = function (vector2) {\n        var ret = new CubismVector2(0.0, 0.0);\n        ret.x = this.x + vector2.x;\n        ret.y = this.y + vector2.y;\n        return ret;\n    };\n    CubismVector2.prototype.substract = function (vector2) {\n        var ret = new CubismVector2(0.0, 0.0);\n        ret.x = this.x - vector2.x;\n        ret.y = this.y - vector2.y;\n        return ret;\n    };\n    CubismVector2.prototype.multiply = function (vector2) {\n        var ret = new CubismVector2(0.0, 0.0);\n        ret.x = this.x * vector2.x;\n        ret.y = this.y * vector2.y;\n        return ret;\n    };\n    CubismVector2.prototype.multiplyByScaler = function (scalar) {\n        return this.multiply(new CubismVector2(scalar, scalar));\n    };\n    CubismVector2.prototype.division = function (vector2) {\n        var ret = new CubismVector2(0.0, 0.0);\n        ret.x = this.x / vector2.x;\n        ret.y = this.y / vector2.y;\n        return ret;\n    };\n    CubismVector2.prototype.divisionByScalar = function (scalar) {\n        return this.division(new CubismVector2(scalar, scalar));\n    };\n    CubismVector2.prototype.getLength = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    };\n    CubismVector2.prototype.getDistanceWith = function (a) {\n        return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\n    };\n    CubismVector2.prototype.dot = function (a) {\n        return this.x * a.x + this.y * a.y;\n    };\n    CubismVector2.prototype.normalize = function () {\n        var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);\n        this.x = this.x / length;\n        this.y = this.y / length;\n    };\n    CubismVector2.prototype.isEqual = function (rhs) {\n        return this.x == rhs.x && this.y == rhs.y;\n    };\n    CubismVector2.prototype.isNotEqual = function (rhs) {\n        return !this.isEqual(rhs);\n    };\n    return CubismVector2;\n}());\nexports.CubismVector2 = CubismVector2;\nvar $ = __importStar(__webpack_require__(/*! ./cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismVector2 = $.CubismVector2;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmVjdG9yMi50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212ZWN0b3IyLnRzP2RiMDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6LXG4gKlxuICogMuasoeWFg+ODmeOCr+ODiOODq+Wei+OBruapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgeD86IG51bWJlciwgcHVibGljIHk/OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4ID09IHVuZGVmaW5lZCA/IDAuMCA6IHg7XG5cbiAgICB0aGlzLnkgPSB5ID09IHVuZGVmaW5lZCA/IDAuMCA6IHk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu5Yqg566XXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOWKoOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBhZGQodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICByZXQueCA9IHRoaXMueCArIHZlY3RvcjIueDtcbiAgICByZXQueSA9IHRoaXMueSArIHZlY3RvcjIueTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yMiDmuJvnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgc3Vic3RyYWN0KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggLSB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgLSB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg5LmX566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g5LmX566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIG11bHRpcGx5KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggKiB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgKiB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpco44K544Kr44Op44O8KVxuICAgKlxuICAgKiBAcGFyYW0gc2NhbGFyIOS5l+eul+OBmeOCi+OCueOCq+ODqeODvOWApFxuICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseUJ5U2NhbGVyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg6Zmk566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIGRpdmlzaW9uKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggLyB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgLyB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpco44K544Kr44Op44O8KVxuICAgKlxuICAgKiBAcGFyYW0gc2NhbGFyIOmZpOeul+OBmeOCi+OCueOCq+ODqeODvOWApFxuICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBkaXZpc2lvbkJ5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuZGl2aXNpb24obmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7plbfjgZVcbiAgICovXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu6Led6Zui44Gu5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSBhIOeCuVxuICAgKiBAcmV0dXJuIOODmeOCr+ODiOODq+OBrui3nembolxuICAgKi9cbiAgcHVibGljIGdldERpc3RhbmNlV2l0aChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODg+ODiOepjeOBruioiOeul1xuICAgKlxuICAgKiBAcGFyYW0gYSDlgKRcbiAgICogQHJldHVybiDntZDmnpxcbiAgICovXG4gIHB1YmxpYyBkb3QoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueCAqIGEueCArIHRoaXMueSAqIGEueTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjga7pgannlKhcbiAgICovXG4gIHB1YmxpYyBub3JtYWxpemUoKTogdm9pZCB7XG4gICAgY29uc3QgbGVuZ3RoOiBudW1iZXIgPSBNYXRoLnBvdyh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnksIDAuNSk7XG5cbiAgICB0aGlzLnggPSB0aGlzLnggLyBsZW5ndGg7XG4gICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBhOOBi++8n++8iVxuICAgKlxuICAgKiDlgKTjgYznrYnjgZfjgYTjgYvvvJ9cbiAgICpcbiAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcbiAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBhFxuICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMueCA9PSByaHMueCAmJiB0aGlzLnkgPT0gcmhzLnk7XG4gIH1cblxuICAvKipcbiAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GP44Gq44GE44GL77yf77yJXG4gICAqXG4gICAqIOWApOOBjOetieOBl+OBj+OBquOBhOOBi++8n1xuICAgKlxuICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxuICAgKiBAcmV0dXJuIHRydWUg5YCk44Gv562J44GX44GP44Gq44GEXG4gICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GEXG4gICAqL1xuICBwdWJsaWMgaXNOb3RFcXVhbChyaHM6IEN1YmlzbVZlY3RvcjIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuaXNFcXVhbChyaHMpO1xuICB9XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXZlY3RvcjInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVZlY3RvcjIgPSAkLkN1YmlzbVZlY3RvcjI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZlY3RvcjIgPSAkLkN1YmlzbVZlY3RvcjI7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFHQTtBQVFBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBcEpBO0FBdUpBO0FBRUE7QUFBQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismvector2.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismviewmatrix.ts":
/*!************************************************!*\
  !*** ./Framework/src/math/cubismviewmatrix.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismViewMatrix = void 0;\nvar cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\nvar CubismViewMatrix = (function (_super) {\n    __extends(CubismViewMatrix, _super);\n    function CubismViewMatrix() {\n        var _this = _super.call(this) || this;\n        _this._screenLeft = 0.0;\n        _this._screenRight = 0.0;\n        _this._screenTop = 0.0;\n        _this._screenBottom = 0.0;\n        _this._maxLeft = 0.0;\n        _this._maxRight = 0.0;\n        _this._maxTop = 0.0;\n        _this._maxBottom = 0.0;\n        _this._maxScale = 0.0;\n        _this._minScale = 0.0;\n        return _this;\n    }\n    CubismViewMatrix.prototype.adjustTranslate = function (x, y) {\n        if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\n            x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\n        }\n        if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {\n            x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\n        }\n        if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\n            y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\n        }\n        if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >\n            this._screenBottom) {\n            y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\n        }\n        var tr1 = new Float32Array([\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            x,\n            y,\n            0.0,\n            1.0\n        ]);\n        cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    };\n    CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {\n        var maxScale = this.getMaxScale();\n        var minScale = this.getMinScale();\n        var targetScale = scale * this._tr[0];\n        if (targetScale < minScale) {\n            if (this._tr[0] > 0.0) {\n                scale = minScale / this._tr[0];\n            }\n        }\n        else if (targetScale > maxScale) {\n            if (this._tr[0] > 0.0) {\n                scale = maxScale / this._tr[0];\n            }\n        }\n        var tr1 = new Float32Array([\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            cx,\n            cy,\n            0.0,\n            1.0\n        ]);\n        var tr2 = new Float32Array([\n            scale,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            scale,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0\n        ]);\n        var tr3 = new Float32Array([\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            -cx,\n            -cy,\n            0.0,\n            1.0\n        ]);\n        cubismmatrix44_1.CubismMatrix44.multiply(tr3, this._tr, this._tr);\n        cubismmatrix44_1.CubismMatrix44.multiply(tr2, this._tr, this._tr);\n        cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    };\n    CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {\n        this._screenLeft = left;\n        this._screenRight = right;\n        this._screenBottom = bottom;\n        this._screenTop = top;\n    };\n    CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {\n        this._maxLeft = left;\n        this._maxRight = right;\n        this._maxTop = top;\n        this._maxBottom = bottom;\n    };\n    CubismViewMatrix.prototype.setMaxScale = function (maxScale) {\n        this._maxScale = maxScale;\n    };\n    CubismViewMatrix.prototype.setMinScale = function (minScale) {\n        this._minScale = minScale;\n    };\n    CubismViewMatrix.prototype.getMaxScale = function () {\n        return this._maxScale;\n    };\n    CubismViewMatrix.prototype.getMinScale = function () {\n        return this._minScale;\n    };\n    CubismViewMatrix.prototype.isMaxScale = function () {\n        return this.getScaleX() >= this._maxScale;\n    };\n    CubismViewMatrix.prototype.isMinScale = function () {\n        return this.getScaleX() <= this._minScale;\n    };\n    CubismViewMatrix.prototype.getScreenLeft = function () {\n        return this._screenLeft;\n    };\n    CubismViewMatrix.prototype.getScreenRight = function () {\n        return this._screenRight;\n    };\n    CubismViewMatrix.prototype.getScreenBottom = function () {\n        return this._screenBottom;\n    };\n    CubismViewMatrix.prototype.getScreenTop = function () {\n        return this._screenTop;\n    };\n    CubismViewMatrix.prototype.getMaxLeft = function () {\n        return this._maxLeft;\n    };\n    CubismViewMatrix.prototype.getMaxRight = function () {\n        return this._maxRight;\n    };\n    CubismViewMatrix.prototype.getMaxBottom = function () {\n        return this._maxBottom;\n    };\n    CubismViewMatrix.prototype.getMaxTop = function () {\n        return this._maxTop;\n    };\n    return CubismViewMatrix;\n}(cubismmatrix44_1.CubismMatrix44));\nexports.CubismViewMatrix = CubismViewMatrix;\nvar $ = __importStar(__webpack_require__(/*! ./cubismviewmatrix */ \"./Framework/src/math/cubismviewmatrix.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismViewMatrix = $.CubismViewMatrix;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismviewmatrix.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmoc.ts":
/*!******************************************!*\
  !*** ./Framework/src/model/cubismmoc.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMoc = void 0;\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ \"./Framework/src/model/cubismmodel.ts\");\nvar CubismMoc = (function () {\n    function CubismMoc(moc) {\n        this._moc = moc;\n        this._modelCount = 0;\n    }\n    CubismMoc.create = function (mocBytes) {\n        var cubismMoc = null;\n        var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\n        if (moc) {\n            cubismMoc = new CubismMoc(moc);\n        }\n        return cubismMoc;\n    };\n    CubismMoc.delete = function (moc) {\n        moc._moc._release();\n        moc._moc = null;\n        moc = null;\n    };\n    CubismMoc.prototype.createModel = function () {\n        var cubismModel = null;\n        var model = Live2DCubismCore.Model.fromMoc(this._moc);\n        if (model) {\n            cubismModel = new cubismmodel_1.CubismModel(model);\n            cubismModel.initialize();\n            ++this._modelCount;\n        }\n        return cubismModel;\n    };\n    CubismMoc.prototype.deleteModel = function (model) {\n        if (model != null) {\n            model.release();\n            model = null;\n            --this._modelCount;\n        }\n    };\n    CubismMoc.prototype.release = function () {\n        cubismdebug_1.CSM_ASSERT(this._modelCount == 0);\n        this._moc._release();\n        this._moc = null;\n    };\n    return CubismMoc;\n}());\nexports.CubismMoc = CubismMoc;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmoc */ \"./Framework/src/model/cubismmoc.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMoc = $.CubismMoc;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vYy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9jLnRzPzdlNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XG5cbi8qKlxuICogTW9j44OH44O844K/44Gu566h55CGXG4gKlxuICogTW9j44OH44O844K/44Gu566h55CG44KS6KGM44GG44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2Mge1xuICAvKipcbiAgICogTW9j44OH44O844K/44Gu5L2c5oiQXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShtb2NCeXRlczogQXJyYXlCdWZmZXIpOiBDdWJpc21Nb2Mge1xuICAgIGxldCBjdWJpc21Nb2M6IEN1YmlzbU1vYyA9IG51bGw7XG4gICAgY29uc3QgbW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYyA9IExpdmUyREN1YmlzbUNvcmUuTW9jLmZyb21BcnJheUJ1ZmZlcihcbiAgICAgIG1vY0J5dGVzXG4gICAgKTtcblxuICAgIGlmIChtb2MpIHtcbiAgICAgIGN1YmlzbU1vYyA9IG5ldyBDdWJpc21Nb2MobW9jKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3ViaXNtTW9jO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpFxuICAgKlxuICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaTjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vYzogQ3ViaXNtTW9jKTogdm9pZCB7XG4gICAgbW9jLl9tb2MuX3JlbGVhc2UoKTtcbiAgICBtb2MuX21vYyA9IG51bGw7XG4gICAgbW9jID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLkvZzmiJDjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBNb2Pjg4fjg7zjgr/jgYvjgonkvZzmiJDjgZXjgozjgZ/jg6Ljg4fjg6tcbiAgICovXG4gIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICBsZXQgY3ViaXNtTW9kZWw6IEN1YmlzbU1vZGVsID0gbnVsbDtcblxuICAgIGNvbnN0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKFxuICAgICAgdGhpcy5fbW9jXG4gICAgKTtcblxuICAgIGlmIChtb2RlbCkge1xuICAgICAgY3ViaXNtTW9kZWwgPSBuZXcgQ3ViaXNtTW9kZWwobW9kZWwpO1xuICAgICAgY3ViaXNtTW9kZWwuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICArK3RoaXMuX21vZGVsQ291bnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1YmlzbU1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuWJiumZpOOBmeOCi1xuICAgKi9cbiAgZGVsZXRlTW9kZWwobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcbiAgICAgIG1vZGVsLnJlbGVhc2UoKTtcbiAgICAgIG1vZGVsID0gbnVsbDtcbiAgICAgIC0tdGhpcy5fbW9kZWxDb3VudDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MpIHtcbiAgICB0aGlzLl9tb2MgPSBtb2M7XG4gICAgdGhpcy5fbW9kZWxDb3VudCA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsQ291bnQgPT0gMCk7XG5cbiAgICB0aGlzLl9tb2MuX3JlbGVhc2UoKTtcbiAgICB0aGlzLl9tb2MgPSBudWxsO1xuICB9XG5cbiAgX21vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2M7IC8vIE1vY+ODh+ODvOOCv1xuICBfbW9kZWxDb3VudDogbnVtYmVyOyAvLyBNb2Pjg4fjg7zjgr/jgYvjgonkvZzjgonjgozjgZ/jg6Ljg4fjg6vjga7lgIvmlbBcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9jJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9jID0gJC5DdWJpc21Nb2M7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBT0E7QUFnRUE7QUFDQTtBQUNBO0FBQ0E7QUEvREE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQUE7QUFqRkE7QUFvRkE7QUFFQTtBQUFBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmoc.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmodel.ts":
/*!********************************************!*\
  !*** ./Framework/src/model/cubismmodel.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismModel = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\");\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"./Framework/src/type/csmmap.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar CubismModel = (function () {\n    function CubismModel(model) {\n        this._model = model;\n        this._parameterValues = null;\n        this._parameterMaximumValues = null;\n        this._parameterMinimumValues = null;\n        this._partOpacities = null;\n        this._savedParameters = new csmvector_1.csmVector();\n        this._parameterIds = new csmvector_1.csmVector();\n        this._drawableIds = new csmvector_1.csmVector();\n        this._partIds = new csmvector_1.csmVector();\n        this._notExistPartId = new csmmap_1.csmMap();\n        this._notExistParameterId = new csmmap_1.csmMap();\n        this._notExistParameterValues = new csmmap_1.csmMap();\n        this._notExistPartOpacities = new csmmap_1.csmMap();\n    }\n    CubismModel.prototype.update = function () {\n        this._model.update();\n        this._model.drawables.resetDynamicFlags();\n    };\n    CubismModel.prototype.getCanvasWidth = function () {\n        if (this._model == null) {\n            return 0.0;\n        }\n        return (this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit);\n    };\n    CubismModel.prototype.getCanvasHeight = function () {\n        if (this._model == null) {\n            return 0.0;\n        }\n        return (this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit);\n    };\n    CubismModel.prototype.saveParameters = function () {\n        var parameterCount = this._model.parameters.count;\n        var savedParameterCount = this._savedParameters.getSize();\n        for (var i = 0; i < parameterCount; ++i) {\n            if (i < savedParameterCount) {\n                this._savedParameters.set(i, this._parameterValues[i]);\n            }\n            else {\n                this._savedParameters.pushBack(this._parameterValues[i]);\n            }\n        }\n    };\n    CubismModel.prototype.getModel = function () {\n        return this._model;\n    };\n    CubismModel.prototype.getPartIndex = function (partId) {\n        var partIndex;\n        var partCount = this._model.parts.count;\n        for (partIndex = 0; partIndex < partCount; ++partIndex) {\n            if (partId == this._partIds.at(partIndex)) {\n                return partIndex;\n            }\n        }\n        if (this._notExistPartId.isExist(partId)) {\n            return this._notExistPartId.getValue(partId);\n        }\n        partIndex = partCount + this._notExistPartId.getSize();\n        this._notExistPartId.setValue(partId, partIndex);\n        this._notExistPartOpacities.appendKey(partIndex);\n        return partIndex;\n    };\n    CubismModel.prototype.getPartCount = function () {\n        var partCount = this._model.parts.count;\n        return partCount;\n    };\n    CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {\n        if (this._notExistPartOpacities.isExist(partIndex)) {\n            this._notExistPartOpacities.setValue(partIndex, opacity);\n            return;\n        }\n        cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n        this._partOpacities[partIndex] = opacity;\n    };\n    CubismModel.prototype.setPartOpacityById = function (partId, opacity) {\n        var index = this.getPartIndex(partId);\n        if (index < 0) {\n            return;\n        }\n        this.setPartOpacityByIndex(index, opacity);\n    };\n    CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {\n        if (this._notExistPartOpacities.isExist(partIndex)) {\n            return this._notExistPartOpacities.getValue(partIndex);\n        }\n        cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n        return this._partOpacities[partIndex];\n    };\n    CubismModel.prototype.getPartOpacityById = function (partId) {\n        var index = this.getPartIndex(partId);\n        if (index < 0) {\n            return 0;\n        }\n        return this.getPartOpacityByIndex(index);\n    };\n    CubismModel.prototype.getParameterIndex = function (parameterId) {\n        var parameterIndex;\n        var idCount = this._model.parameters.count;\n        for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n            if (parameterId != this._parameterIds.at(parameterIndex)) {\n                continue;\n            }\n            return parameterIndex;\n        }\n        if (this._notExistParameterId.isExist(parameterId)) {\n            return this._notExistParameterId.getValue(parameterId);\n        }\n        parameterIndex =\n            this._model.parameters.count + this._notExistParameterId.getSize();\n        this._notExistParameterId.setValue(parameterId, parameterIndex);\n        this._notExistParameterValues.appendKey(parameterIndex);\n        return parameterIndex;\n    };\n    CubismModel.prototype.getParameterCount = function () {\n        return this._model.parameters.count;\n    };\n    CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {\n        return this._model.parameters.maximumValues[parameterIndex];\n    };\n    CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {\n        return this._model.parameters.minimumValues[parameterIndex];\n    };\n    CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {\n        return this._model.parameters.defaultValues[parameterIndex];\n    };\n    CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {\n        if (this._notExistParameterValues.isExist(parameterIndex)) {\n            return this._notExistParameterValues.getValue(parameterIndex);\n        }\n        cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n        return this._parameterValues[parameterIndex];\n    };\n    CubismModel.prototype.getParameterValueById = function (parameterId) {\n        var parameterIndex = this.getParameterIndex(parameterId);\n        return this.getParameterValueByIndex(parameterIndex);\n    };\n    CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {\n        if (weight === void 0) { weight = 1.0; }\n        if (this._notExistParameterValues.isExist(parameterIndex)) {\n            this._notExistParameterValues.setValue(parameterIndex, weight == 1\n                ? value\n                : this._notExistParameterValues.getValue(parameterIndex) *\n                    (1 - weight) +\n                    value * weight);\n            return;\n        }\n        cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n        if (this._model.parameters.maximumValues[parameterIndex] < value) {\n            value = this._model.parameters.maximumValues[parameterIndex];\n        }\n        if (this._model.parameters.minimumValues[parameterIndex] > value) {\n            value = this._model.parameters.minimumValues[parameterIndex];\n        }\n        this._parameterValues[parameterIndex] =\n            weight == 1\n                ? value\n                : (this._parameterValues[parameterIndex] =\n                    this._parameterValues[parameterIndex] * (1 - weight) +\n                        value * weight);\n    };\n    CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {\n        if (weight === void 0) { weight = 1.0; }\n        var index = this.getParameterIndex(parameterId);\n        this.setParameterValueByIndex(index, value, weight);\n    };\n    CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {\n        if (weight === void 0) { weight = 1.0; }\n        this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\n    };\n    CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {\n        if (weight === void 0) { weight = 1.0; }\n        var index = this.getParameterIndex(parameterId);\n        this.addParameterValueByIndex(index, value, weight);\n    };\n    CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {\n        if (weight === void 0) { weight = 1.0; }\n        var index = this.getParameterIndex(parameterId);\n        this.multiplyParameterValueByIndex(index, value, weight);\n    };\n    CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {\n        if (weight === void 0) { weight = 1.0; }\n        this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *\n            (1.0 + (value - 1.0) * weight));\n    };\n    CubismModel.prototype.getDrawableIndex = function (drawableId) {\n        var drawableCount = this._model.drawables.count;\n        for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\n            if (this._drawableIds.at(drawableIndex) == drawableId) {\n                return drawableIndex;\n            }\n        }\n        return -1;\n    };\n    CubismModel.prototype.getDrawableCount = function () {\n        var drawableCount = this._model.drawables.count;\n        return drawableCount;\n    };\n    CubismModel.prototype.getDrawableId = function (drawableIndex) {\n        var parameterIds = this._model.drawables.ids;\n        return live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableRenderOrders = function () {\n        var renderOrders = this._model.drawables.renderOrders;\n        return renderOrders;\n    };\n    CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {\n        var textureIndices = this._model.drawables.textureIndices;\n        return textureIndices[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {\n        var dynamicFlags = this._model.drawables.dynamicFlags;\n        return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {\n        var indexCounts = this._model.drawables.indexCounts;\n        return indexCounts[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {\n        var vertexCounts = this._model.drawables.vertexCounts;\n        return vertexCounts[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableVertices = function (drawableIndex) {\n        return this.getDrawableVertexPositions(drawableIndex);\n    };\n    CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {\n        var indicesArray = this._model.drawables.indices;\n        return indicesArray[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {\n        var verticesArray = this._model.drawables.vertexPositions;\n        return verticesArray[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {\n        var uvsArray = this._model.drawables.vertexUvs;\n        return uvsArray[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {\n        var opacities = this._model.drawables.opacities;\n        return opacities[drawableIndex];\n    };\n    CubismModel.prototype.getDrawableCulling = function (drawableIndex) {\n        var constantFlags = this._model.drawables.constantFlags;\n        return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {\n        var constantFlags = this._model.drawables.constantFlags;\n        return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])\n            ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive\n            : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])\n                ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative\n                : cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal;\n    };\n    CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {\n        var constantFlags = this._model.drawables.constantFlags;\n        return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableMasks = function () {\n        var masks = this._model.drawables.masks;\n        return masks;\n    };\n    CubismModel.prototype.getDrawableMaskCounts = function () {\n        var maskCounts = this._model.drawables.maskCounts;\n        return maskCounts;\n    };\n    CubismModel.prototype.isUsingMasking = function () {\n        for (var d = 0; d < this._model.drawables.count; ++d) {\n            if (this._model.drawables.maskCounts[d] <= 0) {\n                continue;\n            }\n            return true;\n        }\n        return false;\n    };\n    CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {\n        var dynamicFlags = this._model.drawables.dynamicFlags;\n        return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {\n        var dynamicFlags = this._model.drawables.dynamicFlags;\n        return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {\n        var dynamicFlags = this._model.drawables.dynamicFlags;\n        return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\n    };\n    CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {\n        var dynamicFlags = this._model.drawables.dynamicFlags;\n        return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\n    };\n    CubismModel.prototype.loadParameters = function () {\n        var parameterCount = this._model.parameters.count;\n        var savedParameterCount = this._savedParameters.getSize();\n        if (parameterCount > savedParameterCount) {\n            parameterCount = savedParameterCount;\n        }\n        for (var i = 0; i < parameterCount; ++i) {\n            this._parameterValues[i] = this._savedParameters.at(i);\n        }\n    };\n    CubismModel.prototype.initialize = function () {\n        cubismdebug_1.CSM_ASSERT(this._model);\n        this._parameterValues = this._model.parameters.values;\n        this._partOpacities = this._model.parts.opacities;\n        this._parameterMaximumValues = this._model.parameters.maximumValues;\n        this._parameterMinimumValues = this._model.parameters.minimumValues;\n        {\n            var parameterIds = this._model.parameters.ids;\n            var parameterCount = this._model.parameters.count;\n            this._parameterIds.prepareCapacity(parameterCount);\n            for (var i = 0; i < parameterCount; ++i) {\n                this._parameterIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[i]));\n            }\n        }\n        {\n            var partIds = this._model.parts.ids;\n            var partCount = this._model.parts.count;\n            this._partIds.prepareCapacity(partCount);\n            for (var i = 0; i < partCount; ++i) {\n                this._partIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(partIds[i]));\n            }\n        }\n        {\n            var drawableIds = this._model.drawables.ids;\n            var drawableCount = this._model.drawables.count;\n            this._drawableIds.prepareCapacity(drawableCount);\n            for (var i = 0; i < drawableCount; ++i) {\n                this._drawableIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(drawableIds[i]));\n            }\n        }\n    };\n    CubismModel.prototype.release = function () {\n        this._model.release();\n        this._model = null;\n    };\n    return CubismModel;\n}());\nexports.CubismModel = CubismModel;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmodel */ \"./Framework/src/model/cubismmodel.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismModel = $.CubismModel;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmodel.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmodeluserdata.ts":
/*!****************************************************!*\
  !*** ./Framework/src/model/cubismmodeluserdata.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismModelUserData = exports.CubismModelUserDataNode = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ \"./Framework/src/model/cubismmodeluserdatajson.ts\");\nvar ArtMesh = 'ArtMesh';\nvar CubismModelUserDataNode = (function () {\n    function CubismModelUserDataNode() {\n    }\n    return CubismModelUserDataNode;\n}());\nexports.CubismModelUserDataNode = CubismModelUserDataNode;\nvar CubismModelUserData = (function () {\n    function CubismModelUserData() {\n        this._userDataNodes = new csmvector_1.csmVector();\n        this._artMeshUserDataNode = new csmvector_1.csmVector();\n    }\n    CubismModelUserData.create = function (buffer, size) {\n        var ret = new CubismModelUserData();\n        ret.parseUserData(buffer, size);\n        return ret;\n    };\n    CubismModelUserData.delete = function (modelUserData) {\n        if (modelUserData != null) {\n            modelUserData.release();\n            modelUserData = null;\n        }\n    };\n    CubismModelUserData.prototype.getArtMeshUserDatas = function () {\n        return this._artMeshUserDataNode;\n    };\n    CubismModelUserData.prototype.parseUserData = function (buffer, size) {\n        var json = new cubismmodeluserdatajson_1.CubismModelUserDataJson(buffer, size);\n        var typeOfArtMesh = live2dcubismframework_1.CubismFramework.getIdManager().getId(ArtMesh);\n        var nodeCount = json.getUserDataCount();\n        for (var i = 0; i < nodeCount; i++) {\n            var addNode = new CubismModelUserDataNode();\n            addNode.targetId = json.getUserDataId(i);\n            addNode.targetType = live2dcubismframework_1.CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));\n            addNode.value = new csmstring_1.csmString(json.getUserDataValue(i));\n            this._userDataNodes.pushBack(addNode);\n            if (addNode.targetType == typeOfArtMesh) {\n                this._artMeshUserDataNode.pushBack(addNode);\n            }\n        }\n        json.release();\n        json = void 0;\n    };\n    CubismModelUserData.prototype.release = function () {\n        for (var i = 0; i < this._userDataNodes.getSize(); ++i) {\n            this._userDataNodes.set(i, null);\n        }\n        this._userDataNodes = null;\n    };\n    return CubismModelUserData;\n}());\nexports.CubismModelUserData = CubismModelUserData;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdata */ \"./Framework/src/model/cubismmodeluserdata.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismModelUserData = $.CubismModelUserData;\n    Live2DCubismFramework.CubismModelUserDataNode = $.CubismModelUserDataNode;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHM/OTU1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xuXG5jb25zdCBBcnRNZXNoID0gJ0FydE1lc2gnO1xuXG4vKipcbiAqIOODpuODvOOCtuODvOODh+ODvOOCv+OCpOODs+OCv+ODvOODleOCp+ODvOOCuVxuICpcbiAqIEpzb27jgYvjgonoqq3jgb/ovrzjgpPjgaDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqJjpjLLjgZfjgabjgYrjgY/jgZ/jgoHjga7mp4vpgKDkvZNcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlIHtcbiAgdGFyZ2V0VHlwZTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOCv+OCpOODl1xuICB0YXJnZXRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOBrklEXG4gIHZhbHVlOiBjc21TdHJpbmc7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xufVxuXG4vKipcbiAqIOODpuODvOOCtuODh+ODvOOCv+OBrueuoeeQhuOCr+ODqeOCuVxuICpcbiAqIOODpuODvOOCtuODh+ODvOOCv+OCkuODreODvOODieOAgeeuoeeQhuOAgeaknOe0ouOCpOODs+OCv+ODvOODleOCp+OCpOOCueOAgeino+aUvuOBvuOBp+OCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21Nb2RlbFVzZXJEYXRhID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGEoKTtcblxuICAgIHJldC5wYXJzZVVzZXJEYXRhKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gbW9kZWxVc2VyRGF0YSDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGEpOiB2b2lkIHtcbiAgICBpZiAobW9kZWxVc2VyRGF0YSAhPSBudWxsKSB7XG4gICAgICBtb2RlbFVzZXJEYXRhLnJlbGVhc2UoKTtcbiAgICAgIG1vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0QXJ0TWVzaFVzZXJEYXRhcygpOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+IHtcbiAgICByZXR1cm4gdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2VyZGF0YTMuanNvbuOBruODkeODvOOCuVxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2VVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQganNvbjogQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24oXG4gICAgICBidWZmZXIsXG4gICAgICBzaXplXG4gICAgKTtcblxuICAgIGNvbnN0IHR5cGVPZkFydE1lc2ggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoQXJ0TWVzaCk7XG4gICAgY29uc3Qgbm9kZUNvdW50OiBudW1iZXIgPSBqc29uLmdldFVzZXJEYXRhQ291bnQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGFkZE5vZGU6IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlKCk7XG5cbiAgICAgIGFkZE5vZGUudGFyZ2V0SWQgPSBqc29uLmdldFVzZXJEYXRhSWQoaSk7XG4gICAgICBhZGROb2RlLnRhcmdldFR5cGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIGpzb24uZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGkpXG4gICAgICApO1xuICAgICAgYWRkTm9kZS52YWx1ZSA9IG5ldyBjc21TdHJpbmcoanNvbi5nZXRVc2VyRGF0YVZhbHVlKGkpKTtcbiAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMucHVzaEJhY2soYWRkTm9kZSk7XG5cbiAgICAgIGlmIChhZGROb2RlLnRhcmdldFR5cGUgPT0gdHlwZU9mQXJ0TWVzaCkge1xuICAgICAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlLnB1c2hCYWNrKGFkZE5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGpzb24ucmVsZWFzZSgpO1xuICAgIGpzb24gPSB2b2lkIDA7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZSA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl+OCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl91c2VyRGF0YU5vZGVzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX3VzZXJEYXRhTm9kZXM6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl1xuICBwcml2YXRlIF9hcnRNZXNoVXNlckRhdGFOb2RlOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDplrLopqfjg6rjgrnjg4jjga7kv53mjIFcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhTm9kZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFOb2RlO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU9BO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFKQTtBQVdBO0FBMEVBO0FBQ0E7QUFDQTtBQUNBO0FBckVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFBQTtBQTlGQTtBQWlHQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmodeluserdata.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmodeluserdatajson.ts":
/*!********************************************************!*\
  !*** ./Framework/src/model/cubismmodeluserdatajson.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismModelUserDataJson = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nvar Meta = 'Meta';\nvar UserDataCount = 'UserDataCount';\nvar TotalUserDataSize = 'TotalUserDataSize';\nvar UserData = 'UserData';\nvar Target = 'Target';\nvar Id = 'Id';\nvar Value = 'Value';\nvar CubismModelUserDataJson = (function () {\n    function CubismModelUserDataJson(buffer, size) {\n        this._json = cubismjson_1.CubismJson.create(buffer, size);\n    }\n    CubismModelUserDataJson.prototype.release = function () {\n        cubismjson_1.CubismJson.delete(this._json);\n    };\n    CubismModelUserDataJson.prototype.getUserDataCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(UserDataCount)\n            .toInt();\n    };\n    CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(TotalUserDataSize)\n            .toInt();\n    };\n    CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {\n        return this._json\n            .getRoot()\n            .getValueByString(UserData)\n            .getValueByIndex(i)\n            .getValueByString(Target)\n            .getRawString();\n    };\n    CubismModelUserDataJson.prototype.getUserDataId = function (i) {\n        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json\n            .getRoot()\n            .getValueByString(UserData)\n            .getValueByIndex(i)\n            .getValueByString(Id)\n            .getRawString());\n    };\n    CubismModelUserDataJson.prototype.getUserDataValue = function (i) {\n        return this._json\n            .getRoot()\n            .getValueByString(UserData)\n            .getValueByIndex(i)\n            .getValueByString(Value)\n            .getRawString();\n    };\n    return CubismModelUserDataJson;\n}());\nexports.CubismModelUserDataJson = CubismModelUserDataJson;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdatajson */ \"./Framework/src/model/cubismmodeluserdatajson.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismModelUserDataJson = $.CubismModelUserDataJson;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhanNvbi50cz82MWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbUpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcblxuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IFVzZXJEYXRhQ291bnQgPSAnVXNlckRhdGFDb3VudCc7XG5jb25zdCBUb3RhbFVzZXJEYXRhU2l6ZSA9ICdUb3RhbFVzZXJEYXRhU2l6ZSc7XG5jb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XG5jb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcbmNvbnN0IElkID0gJ0lkJztcbmNvbnN0IFZhbHVlID0gJ1ZhbHVlJztcblxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YUNvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWw44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VG90YWxVc2VyRGF0YVNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsVXNlckRhdGFTaXplKVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OX44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OXXG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+ODvOOCsuODg+ODiElE44Gu5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiElEXG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFJZChpOiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7mloflrZfliJfjga7lj5blvpdcbiAgICpcbiAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/XG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFWYWx1ZShpOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfanNvbjogQ3ViaXNtSnNvbjtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFNQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQXpGQTtBQTRGQTtBQUVBO0FBQUE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmodeluserdatajson.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismusermodel.ts":
/*!************************************************!*\
  !*** ./Framework/src/model/cubismusermodel.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismUserModel = void 0;\nvar cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ \"./Framework/src/effect/cubismbreath.ts\");\nvar cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ \"./Framework/src/effect/cubismeyeblink.ts\");\nvar cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ \"./Framework/src/effect/cubismpose.ts\");\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ \"./Framework/src/math/cubismmodelmatrix.ts\");\nvar cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ \"./Framework/src/math/cubismtargetpoint.ts\");\nvar cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ \"./Framework/src/motion/cubismexpressionmotion.ts\");\nvar cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ \"./Framework/src/motion/cubismmotion.ts\");\nvar cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ \"./Framework/src/motion/cubismmotionmanager.ts\");\nvar cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ \"./Framework/src/physics/cubismphysics.ts\");\nvar cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ \"./Framework/src/rendering/cubismrenderer_webgl.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ \"./Framework/src/model/cubismmoc.ts\");\nvar cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ \"./Framework/src/model/cubismmodeluserdata.ts\");\nvar CubismUserModel = (function () {\n    function CubismUserModel() {\n        this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return cubismmotion_1.CubismMotion.create(buffer, size, onFinishedMotionHandler); };\n        this._moc = null;\n        this._model = null;\n        this._motionManager = null;\n        this._expressionManager = null;\n        this._eyeBlink = null;\n        this._breath = null;\n        this._modelMatrix = null;\n        this._pose = null;\n        this._dragManager = null;\n        this._physics = null;\n        this._modelUserData = null;\n        this._initialized = false;\n        this._updating = false;\n        this._opacity = 1.0;\n        this._lipsync = true;\n        this._lastLipSyncValue = 0.0;\n        this._dragX = 0.0;\n        this._dragY = 0.0;\n        this._accelerationX = 0.0;\n        this._accelerationY = 0.0;\n        this._accelerationZ = 0.0;\n        this._debugMode = false;\n        this._renderer = null;\n        this._motionManager = new cubismmotionmanager_1.CubismMotionManager();\n        this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);\n        this._expressionManager = new cubismmotionmanager_1.CubismMotionManager();\n        this._dragManager = new cubismtargetpoint_1.CubismTargetPoint();\n    }\n    CubismUserModel.prototype.isInitialized = function () {\n        return this._initialized;\n    };\n    CubismUserModel.prototype.setInitialized = function (v) {\n        this._initialized = v;\n    };\n    CubismUserModel.prototype.isUpdating = function () {\n        return this._updating;\n    };\n    CubismUserModel.prototype.setUpdating = function (v) {\n        this._updating = v;\n    };\n    CubismUserModel.prototype.setDragging = function (x, y) {\n        this._dragManager.set(x, y);\n    };\n    CubismUserModel.prototype.setAcceleration = function (x, y, z) {\n        this._accelerationX = x;\n        this._accelerationY = y;\n        this._accelerationZ = z;\n    };\n    CubismUserModel.prototype.getModelMatrix = function () {\n        return this._modelMatrix;\n    };\n    CubismUserModel.prototype.setOpacity = function (a) {\n        this._opacity = a;\n    };\n    CubismUserModel.prototype.getOpacity = function () {\n        return this._opacity;\n    };\n    CubismUserModel.prototype.loadModel = function (buffer) {\n        this._moc = cubismmoc_1.CubismMoc.create(buffer);\n        this._model = this._moc.createModel();\n        this._model.saveParameters();\n        if (this._moc == null || this._model == null) {\n            cubismdebug_1.CubismLogError('Failed to CreateModel().');\n            return;\n        }\n        this._modelMatrix = new cubismmodelmatrix_1.CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());\n    };\n    CubismUserModel.prototype.loadExpression = function (buffer, size, name) {\n        return cubismexpressionmotion_1.CubismExpressionMotion.create(buffer, size);\n    };\n    CubismUserModel.prototype.loadPose = function (buffer, size) {\n        this._pose = cubismpose_1.CubismPose.create(buffer, size);\n    };\n    CubismUserModel.prototype.loadUserData = function (buffer, size) {\n        this._modelUserData = cubismmodeluserdata_1.CubismModelUserData.create(buffer, size);\n    };\n    CubismUserModel.prototype.loadPhysics = function (buffer, size) {\n        this._physics = cubismphysics_1.CubismPhysics.create(buffer, size);\n    };\n    CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {\n        var drawIndex = this._model.getDrawableIndex(drawableId);\n        if (drawIndex < 0) {\n            return false;\n        }\n        var count = this._model.getDrawableVertexCount(drawIndex);\n        var vertices = this._model.getDrawableVertices(drawIndex);\n        var left = vertices[0];\n        var right = vertices[0];\n        var top = vertices[1];\n        var bottom = vertices[1];\n        for (var j = 1; j < count; ++j) {\n            var x = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep];\n            var y = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep + 1];\n            if (x < left) {\n                left = x;\n            }\n            if (x > right) {\n                right = x;\n            }\n            if (y < top) {\n                top = y;\n            }\n            if (y > bottom) {\n                bottom = y;\n            }\n        }\n        var tx = this._modelMatrix.invertTransformX(pointX);\n        var ty = this._modelMatrix.invertTransformY(pointY);\n        return left <= tx && tx <= right && top <= ty && ty <= bottom;\n    };\n    CubismUserModel.prototype.getModel = function () {\n        return this._model;\n    };\n    CubismUserModel.prototype.getRenderer = function () {\n        return this._renderer;\n    };\n    CubismUserModel.prototype.createRenderer = function () {\n        if (this._renderer) {\n            this.deleteRenderer();\n        }\n        this._renderer = new cubismrenderer_webgl_1.CubismRenderer_WebGL();\n        this._renderer.initialize(this._model);\n    };\n    CubismUserModel.prototype.deleteRenderer = function () {\n        if (this._renderer != null) {\n            this._renderer.release();\n            this._renderer = null;\n        }\n    };\n    CubismUserModel.prototype.motionEventFired = function (eventValue) {\n        cubismdebug_1.CubismLogInfo('{0}', eventValue.s);\n    };\n    CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {\n        var model = customData;\n        if (model != null) {\n            model.motionEventFired(eventValue);\n        }\n    };\n    CubismUserModel.prototype.release = function () {\n        if (this._motionManager != null) {\n            this._motionManager.release();\n            this._motionManager = null;\n        }\n        if (this._expressionManager != null) {\n            this._expressionManager.release();\n            this._expressionManager = null;\n        }\n        if (this._moc != null) {\n            this._moc.deleteModel(this._model);\n            this._moc.release();\n            this._moc = null;\n        }\n        this._modelMatrix = null;\n        cubismpose_1.CubismPose.delete(this._pose);\n        cubismeyeblink_1.CubismEyeBlink.delete(this._eyeBlink);\n        cubismbreath_1.CubismBreath.delete(this._breath);\n        this._dragManager = null;\n        cubismphysics_1.CubismPhysics.delete(this._physics);\n        cubismmodeluserdata_1.CubismModelUserData.delete(this._modelUserData);\n        this.deleteRenderer();\n    };\n    return CubismUserModel;\n}());\nexports.CubismUserModel = CubismUserModel;\nvar $ = __importStar(__webpack_require__(/*! ./cubismusermodel */ \"./Framework/src/model/cubismusermodel.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismUserModel = $.CubismUserModel;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismusermodel.ts\n");

/***/ }),

/***/ "./Framework/src/motion/acubismmotion.ts":
/*!***********************************************!*\
  !*** ./Framework/src/motion/acubismmotion.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.ACubismMotion = void 0;\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"./Framework/src/math/cubismmath.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar ACubismMotion = (function () {\n    function ACubismMotion() {\n        var _this = this;\n        this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };\n        this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };\n        this._fadeInSeconds = -1.0;\n        this._fadeOutSeconds = -1.0;\n        this._weight = 1.0;\n        this._offsetSeconds = 0.0;\n        this._firedEventValues = new csmvector_1.csmVector();\n    }\n    ACubismMotion.delete = function (motion) {\n        motion.release();\n        motion = null;\n    };\n    ACubismMotion.prototype.release = function () {\n        this._weight = 0.0;\n    };\n    ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {\n        if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n            return;\n        }\n        if (!motionQueueEntry.isStarted()) {\n            motionQueueEntry.setIsStarted(true);\n            motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);\n            motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n            var duration = this.getDuration();\n            if (motionQueueEntry.getEndTime() < 0) {\n                motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\n            }\n        }\n        var fadeWeight = this._weight;\n        var fadeIn = this._fadeInSeconds == 0.0\n            ? 1.0\n            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                this._fadeInSeconds);\n        var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\n            ? 1.0\n            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\n                this._fadeOutSeconds);\n        fadeWeight = fadeWeight * fadeIn * fadeOut;\n        motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n        cubismdebug_1.CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\n        this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\n        if (motionQueueEntry.getEndTime() > 0 &&\n            motionQueueEntry.getEndTime() < userTimeSeconds) {\n            motionQueueEntry.setIsFinished(true);\n        }\n    };\n    ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {\n        this._fadeInSeconds = fadeInSeconds;\n    };\n    ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {\n        this._fadeOutSeconds = fadeOutSeconds;\n    };\n    ACubismMotion.prototype.getFadeOutTime = function () {\n        return this._fadeOutSeconds;\n    };\n    ACubismMotion.prototype.getFadeInTime = function () {\n        return this._fadeInSeconds;\n    };\n    ACubismMotion.prototype.setWeight = function (weight) {\n        this._weight = weight;\n    };\n    ACubismMotion.prototype.getWeight = function () {\n        return this._weight;\n    };\n    ACubismMotion.prototype.getDuration = function () {\n        return -1.0;\n    };\n    ACubismMotion.prototype.getLoopDuration = function () {\n        return -1.0;\n    };\n    ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {\n        this._offsetSeconds = offsetSeconds;\n    };\n    ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {\n        return this._firedEventValues;\n    };\n    return ACubismMotion;\n}());\nexports.ACubismMotion = ACubismMotion;\nvar $ = __importStar(__webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.ACubismMotion = $.ACubismMotion;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/acubismmotion.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismexpressionmotion.ts":
/*!********************************************************!*\
  !*** ./Framework/src/motion/cubismexpressionmotion.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.ExpressionParameter = exports.ExpressionBlendType = exports.CubismExpressionMotion = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\nvar ExpressionKeyFadeIn = 'FadeInTime';\nvar ExpressionKeyFadeOut = 'FadeOutTime';\nvar ExpressionKeyParameters = 'Parameters';\nvar ExpressionKeyId = 'Id';\nvar ExpressionKeyValue = 'Value';\nvar ExpressionKeyBlend = 'Blend';\nvar BlendValueAdd = 'Add';\nvar BlendValueMultiply = 'Multiply';\nvar BlendValueOverwrite = 'Overwrite';\nvar DefaultFadeTime = 1.0;\nvar CubismExpressionMotion = (function (_super) {\n    __extends(CubismExpressionMotion, _super);\n    function CubismExpressionMotion() {\n        var _this = _super.call(this) || this;\n        _this._parameters = new csmvector_1.csmVector();\n        return _this;\n    }\n    CubismExpressionMotion.create = function (buffer, size) {\n        var expression = new CubismExpressionMotion();\n        var json = cubismjson_1.CubismJson.create(buffer, size);\n        var root = json.getRoot();\n        expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));\n        expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));\n        var parameterCount = root\n            .getValueByString(ExpressionKeyParameters)\n            .getSize();\n        expression._parameters.prepareCapacity(parameterCount);\n        for (var i = 0; i < parameterCount; ++i) {\n            var param = root\n                .getValueByString(ExpressionKeyParameters)\n                .getValueByIndex(i);\n            var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());\n            var value = param\n                .getValueByString(ExpressionKeyValue)\n                .toFloat();\n            var blendType = void 0;\n            if (param.getValueByString(ExpressionKeyBlend).isNull() ||\n                param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd) {\n                blendType = ExpressionBlendType.ExpressionBlendType_Add;\n            }\n            else if (param.getValueByString(ExpressionKeyBlend).getString() ==\n                BlendValueMultiply) {\n                blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\n            }\n            else if (param.getValueByString(ExpressionKeyBlend).getString() ==\n                BlendValueOverwrite) {\n                blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\n            }\n            else {\n                blendType = ExpressionBlendType.ExpressionBlendType_Add;\n            }\n            var item = new ExpressionParameter();\n            item.parameterId = parameterId;\n            item.blendType = blendType;\n            item.value = value;\n            expression._parameters.pushBack(item);\n        }\n        cubismjson_1.CubismJson.delete(json);\n        return expression;\n    };\n    CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {\n        for (var i = 0; i < this._parameters.getSize(); ++i) {\n            var parameter = this._parameters.at(i);\n            switch (parameter.blendType) {\n                case ExpressionBlendType.ExpressionBlendType_Add: {\n                    model.addParameterValueById(parameter.parameterId, parameter.value, weight);\n                    break;\n                }\n                case ExpressionBlendType.ExpressionBlendType_Multiply: {\n                    model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\n                    break;\n                }\n                case ExpressionBlendType.ExpressionBlendType_Overwrite: {\n                    model.setParameterValueById(parameter.parameterId, parameter.value, weight);\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n    };\n    return CubismExpressionMotion;\n}(acubismmotion_1.ACubismMotion));\nexports.CubismExpressionMotion = CubismExpressionMotion;\nvar ExpressionBlendType;\n(function (ExpressionBlendType) {\n    ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\n    ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\n    ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\n})(ExpressionBlendType = exports.ExpressionBlendType || (exports.ExpressionBlendType = {}));\nvar ExpressionParameter = (function () {\n    function ExpressionParameter() {\n    }\n    return ExpressionParameter;\n}());\nexports.ExpressionParameter = ExpressionParameter;\nvar $ = __importStar(__webpack_require__(/*! ./cubismexpressionmotion */ \"./Framework/src/motion/cubismexpressionmotion.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismExpressionMotion = $.CubismExpressionMotion;\n    Live2DCubismFramework.ExpressionBlendType = $.ExpressionBlendType;\n    Live2DCubismFramework.ExpressionParameter = $.ExpressionParameter;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismexpressionmotion.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotion.ts":
/*!**********************************************!*\
  !*** ./Framework/src/motion/cubismmotion.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMotion = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"./Framework/src/math/cubismmath.ts\");\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\nvar cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ \"./Framework/src/motion/cubismmotioninternal.ts\");\nvar cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ \"./Framework/src/motion/cubismmotionjson.ts\");\nvar EffectNameEyeBlink = 'EyeBlink';\nvar EffectNameLipSync = 'LipSync';\nvar TargetNameModel = 'Model';\nvar TargetNameParameter = 'Parameter';\nvar TargetNamePartOpacity = 'PartOpacity';\nvar UseOldBeziersCurveMotion = false;\nfunction lerpPoints(a, b, t) {\n    var result = new cubismmotioninternal_1.CubismMotionPoint();\n    result.time = a.time + (b.time - a.time) * t;\n    result.value = a.value + (b.value - a.value) * t;\n    return result;\n}\nfunction linearEvaluate(points, time) {\n    var t = (time - points[0].time) / (points[1].time - points[0].time);\n    if (t < 0.0) {\n        t = 0.0;\n    }\n    return points[0].value + (points[1].value - points[0].value) * t;\n}\nfunction bezierEvaluate(points, time) {\n    var t = (time - points[0].time) / (points[3].time - points[0].time);\n    if (t < 0.0) {\n        t = 0.0;\n    }\n    var p01 = lerpPoints(points[0], points[1], t);\n    var p12 = lerpPoints(points[1], points[2], t);\n    var p23 = lerpPoints(points[2], points[3], t);\n    var p012 = lerpPoints(p01, p12, t);\n    var p123 = lerpPoints(p12, p23, t);\n    return lerpPoints(p012, p123, t).value;\n}\nfunction bezierEvaluateBinarySearch(points, time) {\n    var x_error = 0.01;\n    var x = time;\n    var x1 = points[0].time;\n    var x2 = points[3].time;\n    var cx1 = points[1].time;\n    var cx2 = points[2].time;\n    var ta = 0.0;\n    var tb = 1.0;\n    var t = 0.0;\n    var i = 0;\n    for (var var33 = true; i < 20; ++i) {\n        if (x < x1 + x_error) {\n            t = ta;\n            break;\n        }\n        if (x2 - x_error < x) {\n            t = tb;\n            break;\n        }\n        var centerx = (cx1 + cx2) * 0.5;\n        cx1 = (x1 + cx1) * 0.5;\n        cx2 = (x2 + cx2) * 0.5;\n        var ctrlx12 = (cx1 + centerx) * 0.5;\n        var ctrlx21 = (cx2 + centerx) * 0.5;\n        centerx = (ctrlx12 + ctrlx21) * 0.5;\n        if (x < centerx) {\n            tb = (ta + tb) * 0.5;\n            if (centerx - x_error < x) {\n                t = tb;\n                break;\n            }\n            x2 = centerx;\n            cx2 = ctrlx12;\n        }\n        else {\n            ta = (ta + tb) * 0.5;\n            if (x < centerx + x_error) {\n                t = ta;\n                break;\n            }\n            x1 = centerx;\n            cx1 = ctrlx21;\n        }\n    }\n    if (i == 20) {\n        t = (ta + tb) * 0.5;\n    }\n    if (t < 0.0) {\n        t = 0.0;\n    }\n    if (t > 1.0) {\n        t = 1.0;\n    }\n    var p01 = lerpPoints(points[0], points[1], t);\n    var p12 = lerpPoints(points[1], points[2], t);\n    var p23 = lerpPoints(points[2], points[3], t);\n    var p012 = lerpPoints(p01, p12, t);\n    var p123 = lerpPoints(p12, p23, t);\n    return lerpPoints(p012, p123, t).value;\n}\nfunction bezierEvaluateCardanoInterpretation(points, time) {\n    var x = time;\n    var x1 = points[0].time;\n    var x2 = points[3].time;\n    var cx1 = points[1].time;\n    var cx2 = points[2].time;\n    var a = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;\n    var b = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;\n    var c = 3.0 * cx1 - 3.0 * x1;\n    var d = x1 - x;\n    var t = cubismmath_1.CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\n    var p01 = lerpPoints(points[0], points[1], t);\n    var p12 = lerpPoints(points[1], points[2], t);\n    var p23 = lerpPoints(points[2], points[3], t);\n    var p012 = lerpPoints(p01, p12, t);\n    var p123 = lerpPoints(p12, p23, t);\n    return lerpPoints(p012, p123, t).value;\n}\nfunction steppedEvaluate(points, time) {\n    return points[0].value;\n}\nfunction inverseSteppedEvaluate(points, time) {\n    return points[1].value;\n}\nfunction evaluateCurve(motionData, index, time) {\n    var curve = motionData.curves.at(index);\n    var target = -1;\n    var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\n    var pointPosition = 0;\n    for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\n        pointPosition =\n            motionData.segments.at(i).basePointIndex +\n                (motionData.segments.at(i).segmentType ==\n                    cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier\n                    ? 3\n                    : 1);\n        if (motionData.points.at(pointPosition).time > time) {\n            target = i;\n            break;\n        }\n    }\n    if (target == -1) {\n        return motionData.points.at(pointPosition).value;\n    }\n    var segment = motionData.segments.at(target);\n    return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\n}\nvar CubismMotion = (function (_super) {\n    __extends(CubismMotion, _super);\n    function CubismMotion() {\n        var _this = _super.call(this) || this;\n        _this._sourceFrameRate = 30.0;\n        _this._loopDurationSeconds = -1.0;\n        _this._isLoop = false;\n        _this._isLoopFadeIn = true;\n        _this._lastWeight = 0.0;\n        _this._motionData = null;\n        _this._modelCurveIdEyeBlink = null;\n        _this._modelCurveIdLipSync = null;\n        _this._eyeBlinkParameterIds = null;\n        _this._lipSyncParameterIds = null;\n        return _this;\n    }\n    CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {\n        var ret = new CubismMotion();\n        ret.parse(buffer, size);\n        ret._sourceFrameRate = ret._motionData.fps;\n        ret._loopDurationSeconds = ret._motionData.duration;\n        ret._onFinishedMotion = onFinishedMotionHandler;\n        return ret;\n    };\n    CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {\n        if (this._modelCurveIdEyeBlink == null) {\n            this._modelCurveIdEyeBlink = live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameEyeBlink);\n        }\n        if (this._modelCurveIdLipSync == null) {\n            this._modelCurveIdLipSync = live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameLipSync);\n        }\n        var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\n        if (timeOffsetSeconds < 0.0) {\n            timeOffsetSeconds = 0.0;\n        }\n        var lipSyncValue = Number.MAX_VALUE;\n        var eyeBlinkValue = Number.MAX_VALUE;\n        var MaxTargetSize = 64;\n        var lipSyncFlags = 0;\n        var eyeBlinkFlags = 0;\n        if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {\n            cubismdebug_1.CubismLogDebug('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());\n        }\n        if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {\n            cubismdebug_1.CubismLogDebug('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());\n        }\n        var tmpFadeIn = this._fadeInSeconds <= 0.0\n            ? 1.0\n            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                this._fadeInSeconds);\n        var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\n            ? 1.0\n            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\n                this._fadeOutSeconds);\n        var value;\n        var c, parameterIndex;\n        var time = timeOffsetSeconds;\n        if (this._isLoop) {\n            while (time > this._motionData.duration) {\n                time -= this._motionData.duration;\n            }\n        }\n        var curves = this._motionData.curves;\n        for (c = 0; c < this._motionData.curveCount &&\n            curves.at(c).type ==\n                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\n            value = evaluateCurve(this._motionData, c, time);\n            if (curves.at(c).id == this._modelCurveIdEyeBlink) {\n                eyeBlinkValue = value;\n            }\n            else if (curves.at(c).id == this._modelCurveIdLipSync) {\n                lipSyncValue = value;\n            }\n        }\n        var parameterMotionCurveCount = 0;\n        for (; c < this._motionData.curveCount &&\n            curves.at(c).type ==\n                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\n            parameterMotionCurveCount++;\n            parameterIndex = model.getParameterIndex(curves.at(c).id);\n            if (parameterIndex == -1) {\n                continue;\n            }\n            var sourceValue = model.getParameterValueByIndex(parameterIndex);\n            value = evaluateCurve(this._motionData, c, time);\n            if (eyeBlinkValue != Number.MAX_VALUE) {\n                for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\n                    if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\n                        value *= eyeBlinkValue;\n                        eyeBlinkFlags |= 1 << i;\n                        break;\n                    }\n                }\n            }\n            if (lipSyncValue != Number.MAX_VALUE) {\n                for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\n                    if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\n                        value += lipSyncValue;\n                        lipSyncFlags |= 1 << i;\n                        break;\n                    }\n                }\n            }\n            var v = void 0;\n            if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\n                v = sourceValue + (value - sourceValue) * fadeWeight;\n            }\n            else {\n                var fin = void 0;\n                var fout = void 0;\n                if (curves.at(c).fadeInTime < 0.0) {\n                    fin = tmpFadeIn;\n                }\n                else {\n                    fin =\n                        curves.at(c).fadeInTime == 0.0\n                            ? 1.0\n                            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                                curves.at(c).fadeInTime);\n                }\n                if (curves.at(c).fadeOutTime < 0.0) {\n                    fout = tmpFadeOut;\n                }\n                else {\n                    fout =\n                        curves.at(c).fadeOutTime == 0.0 ||\n                            motionQueueEntry.getEndTime() < 0.0\n                            ? 1.0\n                            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\n                                curves.at(c).fadeOutTime);\n                }\n                var paramWeight = this._weight * fin * fout;\n                v = sourceValue + (value - sourceValue) * paramWeight;\n            }\n            model.setParameterValueByIndex(parameterIndex, v, 1.0);\n        }\n        {\n            if (eyeBlinkValue != Number.MAX_VALUE) {\n                for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\n                    var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));\n                    if ((eyeBlinkFlags >> i) & 0x01) {\n                        continue;\n                    }\n                    var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\n                    model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\n                }\n            }\n            if (lipSyncValue != Number.MAX_VALUE) {\n                for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\n                    var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));\n                    if ((lipSyncFlags >> i) & 0x01) {\n                        continue;\n                    }\n                    var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\n                    model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\n                }\n            }\n        }\n        for (; c < this._motionData.curveCount &&\n            curves.at(c).type ==\n                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\n            parameterIndex = model.getParameterIndex(curves.at(c).id);\n            if (parameterIndex == -1) {\n                continue;\n            }\n            value = evaluateCurve(this._motionData, c, time);\n            model.setParameterValueByIndex(parameterIndex, value);\n        }\n        if (timeOffsetSeconds >= this._motionData.duration) {\n            if (this._isLoop) {\n                motionQueueEntry.setStartTime(userTimeSeconds);\n                if (this._isLoopFadeIn) {\n                    motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n                }\n            }\n            else {\n                if (this._onFinishedMotion) {\n                    this._onFinishedMotion(this);\n                }\n                motionQueueEntry.setIsFinished(true);\n            }\n        }\n        this._lastWeight = fadeWeight;\n    };\n    CubismMotion.prototype.setIsLoop = function (loop) {\n        this._isLoop = loop;\n    };\n    CubismMotion.prototype.isLoop = function () {\n        return this._isLoop;\n    };\n    CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {\n        this._isLoopFadeIn = loopFadeIn;\n    };\n    CubismMotion.prototype.isLoopFadeIn = function () {\n        return this._isLoopFadeIn;\n    };\n    CubismMotion.prototype.getDuration = function () {\n        return this._isLoop ? -1.0 : this._loopDurationSeconds;\n    };\n    CubismMotion.prototype.getLoopDuration = function () {\n        return this._loopDurationSeconds;\n    };\n    CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {\n        var curves = this._motionData.curves;\n        for (var i = 0; i < this._motionData.curveCount; ++i) {\n            if (parameterId == curves.at(i).id) {\n                curves.at(i).fadeInTime = value;\n                return;\n            }\n        }\n    };\n    CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {\n        var curves = this._motionData.curves;\n        for (var i = 0; i < this._motionData.curveCount; ++i) {\n            if (parameterId == curves.at(i).id) {\n                curves.at(i).fadeOutTime = value;\n                return;\n            }\n        }\n    };\n    CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {\n        var curves = this._motionData.curves;\n        for (var i = 0; i < this._motionData.curveCount; ++i) {\n            if (parameterId == curves.at(i).id) {\n                return curves.at(i).fadeInTime;\n            }\n        }\n        return -1;\n    };\n    CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {\n        var curves = this._motionData.curves;\n        for (var i = 0; i < this._motionData.curveCount; ++i) {\n            if (parameterId == curves.at(i).id) {\n                return curves.at(i).fadeOutTime;\n            }\n        }\n        return -1;\n    };\n    CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {\n        this._eyeBlinkParameterIds = eyeBlinkParameterIds;\n        this._lipSyncParameterIds = lipSyncParameterIds;\n    };\n    CubismMotion.prototype.release = function () {\n        this._motionData = void 0;\n        this._motionData = null;\n    };\n    CubismMotion.prototype.parse = function (motionJson, size) {\n        this._motionData = new cubismmotioninternal_1.CubismMotionData();\n        var json = new cubismmotionjson_1.CubismMotionJson(motionJson, size);\n        this._motionData.duration = json.getMotionDuration();\n        this._motionData.loop = json.isMotionLoop();\n        this._motionData.curveCount = json.getMotionCurveCount();\n        this._motionData.fps = json.getMotionFps();\n        this._motionData.eventCount = json.getEventCount();\n        var areBeziersRestructed = json.getEvaluationOptionFlag(cubismmotionjson_1.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);\n        if (json.isExistMotionFadeInTime()) {\n            this._fadeInSeconds =\n                json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\n        }\n        else {\n            this._fadeInSeconds = 1.0;\n        }\n        if (json.isExistMotionFadeOutTime()) {\n            this._fadeOutSeconds =\n                json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\n        }\n        else {\n            this._fadeOutSeconds = 1.0;\n        }\n        this._motionData.curves.updateSize(this._motionData.curveCount, cubismmotioninternal_1.CubismMotionCurve, true);\n        this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), cubismmotioninternal_1.CubismMotionSegment, true);\n        this._motionData.points.updateSize(json.getMotionTotalPointCount(), cubismmotioninternal_1.CubismMotionPoint, true);\n        this._motionData.events.updateSize(this._motionData.eventCount, cubismmotioninternal_1.CubismMotionEvent, true);\n        var totalPointCount = 0;\n        var totalSegmentCount = 0;\n        for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\n            if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\n                this._motionData.curves.at(curveCount).type =\n                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n            }\n            else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\n                this._motionData.curves.at(curveCount).type =\n                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n            }\n            else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {\n                this._motionData.curves.at(curveCount).type =\n                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n            }\n            else {\n                cubismdebug_1.CubismLogWarning('Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!');\n            }\n            this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);\n            this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;\n            this._motionData.curves.at(curveCount).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount)\n                ? json.getMotionCurveFadeInTime(curveCount)\n                : -1.0;\n            this._motionData.curves.at(curveCount).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount)\n                ? json.getMotionCurveFadeOutTime(curveCount)\n                : -1.0;\n            for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {\n                if (segmentPosition == 0) {\n                    this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;\n                    this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);\n                    this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                    totalPointCount += 1;\n                    segmentPosition += 2;\n                }\n                else {\n                    this._motionData.segments.at(totalSegmentCount).basePointIndex =\n                        totalPointCount - 1;\n                }\n                var segment = json.getMotionCurveSegment(curveCount, segmentPosition);\n                switch (segment) {\n                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\n                        this._motionData.segments.at(totalSegmentCount).segmentType =\n                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear;\n                        this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;\n                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                        totalPointCount += 1;\n                        segmentPosition += 3;\n                        break;\n                    }\n                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\n                        this._motionData.segments.at(totalSegmentCount).segmentType =\n                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\n                        if (areBeziersRestructed || UseOldBeziersCurveMotion) {\n                            this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;\n                        }\n                        else {\n                            this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluateCardanoInterpretation;\n                        }\n                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                        this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, segmentPosition + 3);\n                        this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, segmentPosition + 4);\n                        this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, segmentPosition + 5);\n                        this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, segmentPosition + 6);\n                        totalPointCount += 3;\n                        segmentPosition += 7;\n                        break;\n                    }\n                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\n                        this._motionData.segments.at(totalSegmentCount).segmentType =\n                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\n                        this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;\n                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                        totalPointCount += 1;\n                        segmentPosition += 3;\n                        break;\n                    }\n                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\n                        this._motionData.segments.at(totalSegmentCount).segmentType =\n                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\n                        this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;\n                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                        totalPointCount += 1;\n                        segmentPosition += 3;\n                        break;\n                    }\n                    default: {\n                        cubismdebug_1.CSM_ASSERT(0);\n                        break;\n                    }\n                }\n                ++this._motionData.curves.at(curveCount).segmentCount;\n                ++totalSegmentCount;\n            }\n        }\n        for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\n            this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);\n            this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);\n        }\n        json.release();\n        json = void 0;\n        json = null;\n    };\n    CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {\n        this._firedEventValues.updateSize(0);\n        for (var u = 0; u < this._motionData.eventCount; ++u) {\n            if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\n                this._motionData.events.at(u).fireTime <= motionTimeSeconds) {\n                this._firedEventValues.pushBack(new csmstring_1.csmString(this._motionData.events.at(u).value.s));\n            }\n        }\n        return this._firedEventValues;\n    };\n    return CubismMotion;\n}(acubismmotion_1.ACubismMotion));\nexports.CubismMotion = CubismMotion;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmotion */ \"./Framework/src/motion/cubismmotion.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMotion = $.CubismMotion;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotion.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotioninternal.ts":
/*!******************************************************!*\
  !*** ./Framework/src/motion/cubismmotioninternal.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMotionData = exports.CubismMotionEvent = exports.CubismMotionCurve = exports.CubismMotionSegment = exports.CubismMotionPoint = exports.CubismMotionSegmentType = exports.CubismMotionCurveTarget = void 0;\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar CubismMotionCurveTarget;\n(function (CubismMotionCurveTarget) {\n    CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_Model\"] = 0] = \"CubismMotionCurveTarget_Model\";\n    CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_Parameter\"] = 1] = \"CubismMotionCurveTarget_Parameter\";\n    CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_PartOpacity\"] = 2] = \"CubismMotionCurveTarget_PartOpacity\";\n})(CubismMotionCurveTarget = exports.CubismMotionCurveTarget || (exports.CubismMotionCurveTarget = {}));\nvar CubismMotionSegmentType;\n(function (CubismMotionSegmentType) {\n    CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Linear\"] = 0] = \"CubismMotionSegmentType_Linear\";\n    CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Bezier\"] = 1] = \"CubismMotionSegmentType_Bezier\";\n    CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Stepped\"] = 2] = \"CubismMotionSegmentType_Stepped\";\n    CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_InverseStepped\"] = 3] = \"CubismMotionSegmentType_InverseStepped\";\n})(CubismMotionSegmentType = exports.CubismMotionSegmentType || (exports.CubismMotionSegmentType = {}));\nvar CubismMotionPoint = (function () {\n    function CubismMotionPoint() {\n        this.time = 0.0;\n        this.value = 0.0;\n    }\n    return CubismMotionPoint;\n}());\nexports.CubismMotionPoint = CubismMotionPoint;\nvar CubismMotionSegment = (function () {\n    function CubismMotionSegment() {\n        this.evaluate = null;\n        this.basePointIndex = 0;\n        this.segmentType = 0;\n    }\n    return CubismMotionSegment;\n}());\nexports.CubismMotionSegment = CubismMotionSegment;\nvar CubismMotionCurve = (function () {\n    function CubismMotionCurve() {\n        this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n        this.segmentCount = 0;\n        this.baseSegmentIndex = 0;\n        this.fadeInTime = 0.0;\n        this.fadeOutTime = 0.0;\n    }\n    return CubismMotionCurve;\n}());\nexports.CubismMotionCurve = CubismMotionCurve;\nvar CubismMotionEvent = (function () {\n    function CubismMotionEvent() {\n        this.fireTime = 0.0;\n    }\n    return CubismMotionEvent;\n}());\nexports.CubismMotionEvent = CubismMotionEvent;\nvar CubismMotionData = (function () {\n    function CubismMotionData() {\n        this.duration = 0.0;\n        this.loop = false;\n        this.curveCount = 0;\n        this.eventCount = 0;\n        this.fps = 0.0;\n        this.curves = new csmvector_1.csmVector();\n        this.segments = new csmvector_1.csmVector();\n        this.points = new csmvector_1.csmVector();\n        this.events = new csmvector_1.csmVector();\n    }\n    return CubismMotionData;\n}());\nexports.CubismMotionData = CubismMotionData;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmotioninternal */ \"./Framework/src/motion/cubismmotioninternal.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMotionCurve = $.CubismMotionCurve;\n    Live2DCubismFramework.CubismMotionCurveTarget = $.CubismMotionCurveTarget;\n    Live2DCubismFramework.CubismMotionData = $.CubismMotionData;\n    Live2DCubismFramework.CubismMotionEvent = $.CubismMotionEvent;\n    Live2DCubismFramework.CubismMotionPoint = $.CubismMotionPoint;\n    Live2DCubismFramework.CubismMotionSegment = $.CubismMotionSegment;\n    Live2DCubismFramework.CubismMotionSegmentType = $.CubismMotionSegmentType;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbmludGVybmFsLnRzP2U2ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnuOAglxuICovXG5leHBvcnQgZW51bSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCB7XG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsLCAvLyDjg6Ljg4fjg6vjgavlr77jgZfjgaZcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyLCAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgaZcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHkgLy8g44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gr5a++44GX44GmXG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnuOAglxuICovXG5leHBvcnQgZW51bSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSB7XG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhciA9IDAsIC8vIOODquODi+OColxuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXIgPSAxLCAvLyDjg5njgrjjgqfmm7Lnt5pcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCA9IDIsIC8vIOOCueODhuODg+ODl1xuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZCA9IDMgLy8g44Kk44Oz44OQ44O844K544K544OG44OD44OXXG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCuVxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUG9pbnQge1xuICB0aW1lID0gMC4wOyAvLyDmmYLplpNb56eSXVxuICB2YWx1ZSA9IDAuMDsgLy8g5YCkXG59XG5cbi8qKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu6KmV5L6h6Zai5pWwXG4gKlxuICogQHBhcmFtICAgcG9pbnRzICAgICAg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544Oq44K544OIXG4gKiBAcGFyYW0gICB0aW1lICAgICAgICDoqZXkvqHjgZnjgovmmYLplpNb56eSXVxuICovXG5leHBvcnQgaW50ZXJmYWNlIGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb24ge1xuICAocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXI7XG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiFxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uU2VnbWVudCB7XG4gIC8qKlxuICAgKiBAYnJpZWYg44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OAglxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZhbHVhdGUgPSBudWxsO1xuICAgIHRoaXMuYmFzZVBvaW50SW5kZXggPSAwO1xuICAgIHRoaXMuc2VnbWVudFR5cGUgPSAwO1xuICB9XG5cbiAgZXZhbHVhdGU6IGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb247IC8vIOS9v+eUqOOBmeOCi+ipleS+oemWouaVsFxuICBiYXNlUG9pbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjgbjjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgc2VnbWVudFR5cGU6IG51bWJlcjsgLy8g44K744Kw44Oh44Oz44OI44Gu56iu6aGeXG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODllxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uQ3VydmUge1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50eXBlID0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XG4gICAgdGhpcy5zZWdtZW50Q291bnQgPSAwO1xuICAgIHRoaXMuYmFzZVNlZ21lbnRJbmRleCA9IDA7XG4gICAgdGhpcy5mYWRlSW5UaW1lID0gMC4wO1xuICAgIHRoaXMuZmFkZU91dFRpbWUgPSAwLjA7XG4gIH1cblxuICB0eXBlOiBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDsgLy8g44Kr44O844OW44Gu56iu6aGeXG4gIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Kr44O844OW44GuSURcbiAgc2VnbWVudENvdW50OiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxuICBiYXNlU2VnbWVudEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBmYWRlSW5UaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gIGZhZGVPdXRUaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG59XG5cbi8qKlxuICog44Kk44OZ44Oz44OI44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25FdmVudCB7XG4gIGZpcmVUaW1lID0gMC4wO1xuICB2YWx1ZTogY3NtU3RyaW5nO1xufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr9cbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkRhdGEge1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDAuMDtcbiAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICB0aGlzLmN1cnZlQ291bnQgPSAwO1xuICAgIHRoaXMuZXZlbnRDb3VudCA9IDA7XG4gICAgdGhpcy5mcHMgPSAwLjA7XG5cbiAgICB0aGlzLmN1cnZlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+KCk7XG4gICAgdGhpcy5zZWdtZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD4oKTtcbiAgICB0aGlzLnBvaW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+KCk7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PigpO1xuICB9XG5cbiAgZHVyYXRpb246IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgbG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GL44Gp44GG44GLXG4gIGN1cnZlQ291bnQ6IG51bWJlcjsgLy8g44Kr44O844OW44Gu5YCL5pWwXG4gIGV2ZW50Q291bnQ6IG51bWJlcjsgLy8gVXNlckRhdGHjga7lgIvmlbBcbiAgZnBzOiBudW1iZXI7IC8vIOODleODrOODvOODoOODrOODvOODiFxuICBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT47IC8vIOOCq+ODvOODluOBruODquOCueODiFxuICBzZWdtZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+OyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7jg6rjgrnjg4hcbiAgcG9pbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+OyAvLyDjg53jgqTjg7Pjg4jjga7jg6rjgrnjg4hcbiAgZXZlbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+OyAvLyDjgqTjg5njg7Pjg4jjga7jg6rjgrnjg4hcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9uaW50ZXJuYWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkN1cnZlID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uQ3VydmUgPSAkLkN1YmlzbU1vdGlvbkN1cnZlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSAkLkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCA9ICQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25EYXRhID0gJC5DdWJpc21Nb3Rpb25EYXRhO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25EYXRhID0gJC5DdWJpc21Nb3Rpb25EYXRhO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uRXZlbnQgPSAkLkN1YmlzbU1vdGlvbkV2ZW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25FdmVudCA9ICQuQ3ViaXNtTW90aW9uRXZlbnQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25Qb2ludCA9ICQuQ3ViaXNtTW90aW9uUG9pbnQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblBvaW50ID0gJC5DdWJpc21Nb3Rpb25Qb2ludDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblNlZ21lbnQgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblNlZ21lbnQgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcbiAgZXhwb3J0IHR5cGUgY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbiA9ICQuY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVNBO0FBT0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUhBO0FBb0JBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQUE7QUFmQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFBQTtBQWZBO0FBb0JBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUhBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFBQTtBQXZCQTtBQTBCQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUdBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotioninternal.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionjson.ts":
/*!**************************************************!*\
  !*** ./Framework/src/motion/cubismmotionjson.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.EvaluationOptionFlag = exports.CubismMotionJson = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nvar Meta = 'Meta';\nvar Duration = 'Duration';\nvar Loop = 'Loop';\nvar AreBeziersRestricted = 'AreBeziersRestricted';\nvar CurveCount = 'CurveCount';\nvar Fps = 'Fps';\nvar TotalSegmentCount = 'TotalSegmentCount';\nvar TotalPointCount = 'TotalPointCount';\nvar Curves = 'Curves';\nvar Target = 'Target';\nvar Id = 'Id';\nvar FadeInTime = 'FadeInTime';\nvar FadeOutTime = 'FadeOutTime';\nvar Segments = 'Segments';\nvar UserData = 'UserData';\nvar UserDataCount = 'UserDataCount';\nvar TotalUserDataSize = 'TotalUserDataSize';\nvar Time = 'Time';\nvar Value = 'Value';\nvar CubismMotionJson = (function () {\n    function CubismMotionJson(buffer, size) {\n        this._json = cubismjson_1.CubismJson.create(buffer, size);\n    }\n    CubismMotionJson.prototype.release = function () {\n        cubismjson_1.CubismJson.delete(this._json);\n    };\n    CubismMotionJson.prototype.getMotionDuration = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(Duration)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.isMotionLoop = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(Loop)\n            .toBoolean();\n    };\n    CubismMotionJson.prototype.getEvaluationOptionFlag = function (flagType) {\n        if (EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType) {\n            return this._json\n                .getRoot()\n                .getValueByString(Meta)\n                .getValueByString(AreBeziersRestricted)\n                .toBoolean();\n        }\n        return false;\n    };\n    CubismMotionJson.prototype.getMotionCurveCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(CurveCount)\n            .toInt();\n    };\n    CubismMotionJson.prototype.getMotionFps = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(Fps)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(TotalSegmentCount)\n            .toInt();\n    };\n    CubismMotionJson.prototype.getMotionTotalPointCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(TotalPointCount)\n            .toInt();\n    };\n    CubismMotionJson.prototype.isExistMotionFadeInTime = function () {\n        return !this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(FadeInTime)\n            .isNull();\n    };\n    CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {\n        return !this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(FadeOutTime)\n            .isNull();\n    };\n    CubismMotionJson.prototype.getMotionFadeInTime = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(FadeInTime)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getMotionFadeOutTime = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(FadeOutTime)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(Target)\n            .getRawString();\n    };\n    CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {\n        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(Id)\n            .getRawString());\n    };\n    CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {\n        return !this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(FadeInTime)\n            .isNull();\n    };\n    CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {\n        return !this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(FadeOutTime)\n            .isNull();\n    };\n    CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(FadeInTime)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(FadeOutTime)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(Segments)\n            .getVector()\n            .getSize();\n    };\n    CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(Curves)\n            .getValueByIndex(curveIndex)\n            .getValueByString(Segments)\n            .getValueByIndex(segmentIndex)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getEventCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(UserDataCount)\n            .toInt();\n    };\n    CubismMotionJson.prototype.getTotalEventValueSize = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(TotalUserDataSize)\n            .toInt();\n    };\n    CubismMotionJson.prototype.getEventTime = function (userDataIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(UserData)\n            .getValueByIndex(userDataIndex)\n            .getValueByString(Time)\n            .toFloat();\n    };\n    CubismMotionJson.prototype.getEventValue = function (userDataIndex) {\n        return new csmstring_1.csmString(this._json\n            .getRoot()\n            .getValueByString(UserData)\n            .getValueByIndex(userDataIndex)\n            .getValueByString(Value)\n            .getRawString());\n    };\n    return CubismMotionJson;\n}());\nexports.CubismMotionJson = CubismMotionJson;\nvar EvaluationOptionFlag;\n(function (EvaluationOptionFlag) {\n    EvaluationOptionFlag[EvaluationOptionFlag[\"EvaluationOptionFlag_AreBeziersRistricted\"] = 0] = \"EvaluationOptionFlag_AreBeziersRistricted\";\n})(EvaluationOptionFlag = exports.EvaluationOptionFlag || (exports.EvaluationOptionFlag = {}));\nvar $ = __importStar(__webpack_require__(/*! ./cubismmotionjson */ \"./Framework/src/motion/cubismmotionjson.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMotionJson = $.CubismMotionJson;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionjson.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionmanager.ts":
/*!*****************************************************!*\
  !*** ./Framework/src/motion/cubismmotionmanager.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMotionManager = void 0;\nvar cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ \"./Framework/src/motion/cubismmotionqueuemanager.ts\");\nvar CubismMotionManager = (function (_super) {\n    __extends(CubismMotionManager, _super);\n    function CubismMotionManager() {\n        var _this = _super.call(this) || this;\n        _this._currentPriority = 0;\n        _this._reservePriority = 0;\n        return _this;\n    }\n    CubismMotionManager.prototype.getCurrentPriority = function () {\n        return this._currentPriority;\n    };\n    CubismMotionManager.prototype.getReservePriority = function () {\n        return this._reservePriority;\n    };\n    CubismMotionManager.prototype.setReservePriority = function (val) {\n        this._reservePriority = val;\n    };\n    CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {\n        if (priority == this._reservePriority) {\n            this._reservePriority = 0;\n        }\n        this._currentPriority = priority;\n        return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);\n    };\n    CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {\n        this._userTimeSeconds += deltaTimeSeconds;\n        var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);\n        if (this.isFinished()) {\n            this._currentPriority = 0;\n        }\n        return updated;\n    };\n    CubismMotionManager.prototype.reserveMotion = function (priority) {\n        if (priority <= this._reservePriority ||\n            priority <= this._currentPriority) {\n            return false;\n        }\n        this._reservePriority = priority;\n        return true;\n    };\n    return CubismMotionManager;\n}(cubismmotionqueuemanager_1.CubismMotionQueueManager));\nexports.CubismMotionManager = CubismMotionManager;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmotionmanager */ \"./Framework/src/motion/cubismmotionmanager.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMotionManager = $.CubismMotionManager;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cz81ZmE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlLFxuICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcbn0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhuOCkuihjOOBhuOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uTWFuYWdlciBleHRlbmRzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7XG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjga7lj5blvpdcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRQcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLlj5blvpfjgZnjgovjgIJcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UmVzZXJ2ZVByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc2VydmVQcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrprjgZnjgovjgIJcbiAgICogQHBhcmFtICAgdmFsICAgICDlhKrlhYjluqZcbiAgICovXG4gIHB1YmxpYyBzZXRSZXNlcnZlUHJpb3JpdHkodmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICog5YSq5YWI5bqm44KS6Kit5a6a44GX44Gm44Oi44O844K344On44Oz44KS6ZaL5aeL44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBtb3Rpb24gICAgICAgICAg44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM54up54yf44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJdHJ1ZVxuICAgKiBAcGFyYW0gcHJpb3JpdHkgICAgICAgIOWEquWFiOW6plxuICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcbiAgICBwcmlvcml0eTogbnVtYmVyXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmIChwcmlvcml0eSA9PSB0aGlzLl9yZXNlcnZlUHJpb3JpdHkpIHtcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7IC8vIOS6iOe0hOOCkuino+mZpFxuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IHByaW9yaXR5OyAvLyDlho3nlJ/kuK3jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrppcblxuICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCAgIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyAgICDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJuICBmYWxzZSAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgY29uc3QgdXBkYXRlZDogYm9vbGVhbiA9IHN1cGVyLmRvVXBkYXRlTW90aW9uKG1vZGVsLCB0aGlzLl91c2VyVGltZVNlY29uZHMpO1xuXG4gICAgaWYgKHRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSAwOyAvLyDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLop6PpmaRcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLkuojntITjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgcHJpb3JpdHkgICAg5YSq5YWI5bqmXG4gICAqIEByZXR1cm4gIHRydWUgICAg5LqI57SE44Gn44GN44GfXG4gICAqIEByZXR1cm4gIGZhbHNlICAg5LqI57SE44Gn44GN44Gq44GL44Gj44GfXG4gICAqL1xuICBwdWJsaWMgcmVzZXJ2ZU1vdGlvbihwcmlvcml0eTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgcHJpb3JpdHkgPD0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5IHx8XG4gICAgICBwcmlvcml0eSA8PSB0aGlzLl9jdXJyZW50UHJpb3JpdHlcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSBwcmlvcml0eTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX2N1cnJlbnRQcmlvcml0eTogbnVtYmVyOyAvLyDnj77lnKjlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcbiAgX3Jlc2VydmVQcmlvcml0eTogbnVtYmVyOyAvLyDlho3nlJ/kuojlrprjga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgILlho3nlJ/kuK3jga8w44Gr44Gq44KL44CC44Oi44O844K344On44Oz44OV44Kh44Kk44Or44KS5Yil44K544Os44OD44OJ44Gn6Kqt44G/6L6844KA44Go44GN44Gu5qmf6IO944CCXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbm1hbmFnZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU0E7QUFVQTtBQUFBO0FBSUE7QUFBQTtBQUVBO0FBQ0E7O0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFVQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQVVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFTQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBSUE7QUFBQTtBQWxHQTtBQXFHQTtBQUVBO0FBQUE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionmanager.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionqueueentry.ts":
/*!********************************************************!*\
  !*** ./Framework/src/motion/cubismmotionqueueentry.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismMotionQueueEntry = void 0;\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\nvar CubismMotionQueueEntry = (function () {\n    function CubismMotionQueueEntry() {\n        this._autoDelete = false;\n        this._motion = null;\n        this._available = true;\n        this._finished = false;\n        this._started = false;\n        this._startTimeSeconds = -1.0;\n        this._fadeInStartTimeSeconds = 0.0;\n        this._endTimeSeconds = -1.0;\n        this._stateTimeSeconds = 0.0;\n        this._stateWeight = 0.0;\n        this._lastEventCheckSeconds = 0.0;\n        this._motionQueueEntryHandle = this;\n        this._fadeOutSeconds = 0.0;\n        this._isTriggeredFadeOut = false;\n    }\n    CubismMotionQueueEntry.prototype.release = function () {\n        if (this._autoDelete && this._motion) {\n            acubismmotion_1.ACubismMotion.delete(this._motion);\n        }\n    };\n    CubismMotionQueueEntry.prototype.setFadeOut = function (fadeOutSeconds) {\n        this._fadeOutSeconds = fadeOutSeconds;\n        this._isTriggeredFadeOut = true;\n    };\n    CubismMotionQueueEntry.prototype.startFadeOut = function (fadeOutSeconds, userTimeSeconds) {\n        var newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;\n        this._isTriggeredFadeOut = true;\n        if (this._endTimeSeconds < 0.0 ||\n            newEndTimeSeconds < this._endTimeSeconds) {\n            this._endTimeSeconds = newEndTimeSeconds;\n        }\n    };\n    CubismMotionQueueEntry.prototype.isFinished = function () {\n        return this._finished;\n    };\n    CubismMotionQueueEntry.prototype.isStarted = function () {\n        return this._started;\n    };\n    CubismMotionQueueEntry.prototype.getStartTime = function () {\n        return this._startTimeSeconds;\n    };\n    CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {\n        return this._fadeInStartTimeSeconds;\n    };\n    CubismMotionQueueEntry.prototype.getEndTime = function () {\n        return this._endTimeSeconds;\n    };\n    CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {\n        this._startTimeSeconds = startTime;\n    };\n    CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {\n        this._fadeInStartTimeSeconds = startTime;\n    };\n    CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {\n        this._endTimeSeconds = endTime;\n    };\n    CubismMotionQueueEntry.prototype.setIsFinished = function (f) {\n        this._finished = f;\n    };\n    CubismMotionQueueEntry.prototype.setIsStarted = function (f) {\n        this._started = f;\n    };\n    CubismMotionQueueEntry.prototype.isAvailable = function () {\n        return this._available;\n    };\n    CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {\n        this._available = v;\n    };\n    CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {\n        this._stateTimeSeconds = timeSeconds;\n        this._stateWeight = weight;\n    };\n    CubismMotionQueueEntry.prototype.getStateTime = function () {\n        return this._stateTimeSeconds;\n    };\n    CubismMotionQueueEntry.prototype.getStateWeight = function () {\n        return this._stateWeight;\n    };\n    CubismMotionQueueEntry.prototype.getLastCheckEventSeconds = function () {\n        return this._lastEventCheckSeconds;\n    };\n    CubismMotionQueueEntry.prototype.setLastCheckEventSeconds = function (checkSeconds) {\n        this._lastEventCheckSeconds = checkSeconds;\n    };\n    CubismMotionQueueEntry.prototype.isTriggeredFadeOut = function () {\n        return this._isTriggeredFadeOut;\n    };\n    CubismMotionQueueEntry.prototype.getFadeOutSeconds = function () {\n        return this._fadeOutSeconds;\n    };\n    return CubismMotionQueueEntry;\n}());\nexports.CubismMotionQueueEntry = CubismMotionQueueEntry;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmotionqueueentry */ \"./Framework/src/motion/cubismmotionqueueentry.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMotionQueueEntry = $.CubismMotionQueueEntry;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionqueueentry.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionqueuemanager.ts":
/*!**********************************************************!*\
  !*** ./Framework/src/motion/cubismmotionqueuemanager.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.InvalidMotionQueueEntryHandleValue = exports.CubismMotionQueueManager = void 0;\nvar cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ \"./Framework/src/motion/cubismmotionqueueentry.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar CubismMotionQueueManager = (function () {\n    function CubismMotionQueueManager() {\n        this._userTimeSeconds = 0.0;\n        this._eventCallBack = null;\n        this._eventCustomData = null;\n        this._motions = new csmvector_1.csmVector();\n    }\n    CubismMotionQueueManager.prototype.release = function () {\n        for (var i = 0; i < this._motions.getSize(); ++i) {\n            if (this._motions.at(i)) {\n                this._motions.at(i).release();\n                this._motions.set(i, null);\n            }\n        }\n        this._motions = null;\n    };\n    CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {\n        if (motion == null) {\n            return exports.InvalidMotionQueueEntryHandleValue;\n        }\n        var motionQueueEntry = null;\n        for (var i = 0; i < this._motions.getSize(); ++i) {\n            motionQueueEntry = this._motions.at(i);\n            if (motionQueueEntry == null) {\n                continue;\n            }\n            motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());\n        }\n        motionQueueEntry = new cubismmotionqueueentry_1.CubismMotionQueueEntry();\n        motionQueueEntry._autoDelete = autoDelete;\n        motionQueueEntry._motion = motion;\n        this._motions.pushBack(motionQueueEntry);\n        return motionQueueEntry._motionQueueEntryHandle;\n    };\n    CubismMotionQueueManager.prototype.isFinished = function () {\n        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\n            var motionQueueEntry = ite.ptr();\n            if (motionQueueEntry == null) {\n                ite = this._motions.erase(ite);\n                continue;\n            }\n            var motion = motionQueueEntry._motion;\n            if (motion == null) {\n                motionQueueEntry.release();\n                motionQueueEntry = null;\n                ite = this._motions.erase(ite);\n                continue;\n            }\n            if (!motionQueueEntry.isFinished()) {\n                return false;\n            }\n            else {\n                ite.preIncrement();\n            }\n        }\n        return true;\n    };\n    CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {\n        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {\n            var motionQueueEntry = ite.ptr();\n            if (motionQueueEntry == null) {\n                continue;\n            }\n            if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\n                !motionQueueEntry.isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    };\n    CubismMotionQueueManager.prototype.stopAllMotions = function () {\n        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\n            var motionQueueEntry = ite.ptr();\n            if (motionQueueEntry == null) {\n                ite = this._motions.erase(ite);\n                continue;\n            }\n            motionQueueEntry.release();\n            motionQueueEntry = null;\n            ite = this._motions.erase(ite);\n        }\n    };\n    CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {\n        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {\n            var motionQueueEntry = ite.ptr();\n            if (motionQueueEntry == null) {\n                continue;\n            }\n            if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\n                return motionQueueEntry;\n            }\n        }\n        return null;\n    };\n    CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {\n        if (customData === void 0) { customData = null; }\n        this._eventCallBack = callback;\n        this._eventCustomData = customData;\n    };\n    CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {\n        var updated = false;\n        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\n            var motionQueueEntry = ite.ptr();\n            if (motionQueueEntry == null) {\n                ite = this._motions.erase(ite);\n                continue;\n            }\n            var motion = motionQueueEntry._motion;\n            if (motion == null) {\n                motionQueueEntry.release();\n                motionQueueEntry = null;\n                ite = this._motions.erase(ite);\n                continue;\n            }\n            motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\n            updated = true;\n            var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventSeconds() -\n                motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());\n            for (var i = 0; i < firedList.getSize(); ++i) {\n                this._eventCallBack(this, firedList.at(i), this._eventCustomData);\n            }\n            motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\n            if (motionQueueEntry.isFinished()) {\n                motionQueueEntry.release();\n                motionQueueEntry = null;\n                ite = this._motions.erase(ite);\n            }\n            else {\n                if (motionQueueEntry.isTriggeredFadeOut()) {\n                    motionQueueEntry.startFadeOut(motionQueueEntry.getFadeOutSeconds(), userTimeSeconds);\n                }\n                ite.preIncrement();\n            }\n        }\n        return updated;\n    };\n    return CubismMotionQueueManager;\n}());\nexports.CubismMotionQueueManager = CubismMotionQueueManager;\nexports.InvalidMotionQueueEntryHandleValue = -1;\nvar $ = __importStar(__webpack_require__(/*! ./cubismmotionqueuemanager */ \"./Framework/src/motion/cubismmotionqueuemanager.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismMotionQueueManager = $.CubismMotionQueueManager;\n    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = $.InvalidMotionQueueEntryHandleValue;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionqueuemanager.ts\n");

/***/ }),

/***/ "./Framework/src/physics/cubismphysics.ts":
/*!************************************************!*\
  !*** ./Framework/src/physics/cubismphysics.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.Options = exports.CubismPhysics = void 0;\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"./Framework/src/math/cubismmath.ts\");\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\nvar cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ \"./Framework/src/physics/cubismphysicsinternal.ts\");\nvar cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ \"./Framework/src/physics/cubismphysicsjson.ts\");\nvar PhysicsTypeTagX = 'X';\nvar PhysicsTypeTagY = 'Y';\nvar PhysicsTypeTagAngle = 'Angle';\nvar AirResistance = 5.0;\nvar MaximumWeight = 100.0;\nvar MovementThreshold = 0.001;\nvar CubismPhysics = (function () {\n    function CubismPhysics() {\n        this._physicsRig = null;\n        this._options = new Options();\n        this._options.gravity.y = -1.0;\n        this._options.gravity.x = 0;\n        this._options.wind.x = 0;\n        this._options.wind.y = 0;\n    }\n    CubismPhysics.create = function (buffer, size) {\n        var ret = new CubismPhysics();\n        ret.parse(buffer, size);\n        ret._physicsRig.gravity.y = 0;\n        return ret;\n    };\n    CubismPhysics.delete = function (physics) {\n        if (physics != null) {\n            physics.release();\n            physics = null;\n        }\n    };\n    CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {\n        var totalAngle;\n        var weight;\n        var radAngle;\n        var outputValue;\n        var totalTranslation = new cubismvector2_1.CubismVector2();\n        var currentSetting;\n        var currentInput;\n        var currentOutput;\n        var currentParticles;\n        var parameterValue;\n        var parameterMaximumValue;\n        var parameterMinimumValue;\n        var parameterDefaultValue;\n        parameterValue = model.getModel().parameters.values;\n        parameterMaximumValue = model.getModel().parameters.maximumValues;\n        parameterMinimumValue = model.getModel().parameters.minimumValues;\n        parameterDefaultValue = model.getModel().parameters.defaultValues;\n        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n            totalAngle = { angle: 0.0 };\n            totalTranslation.x = 0.0;\n            totalTranslation.y = 0.0;\n            currentSetting = this._physicsRig.settings.at(settingIndex);\n            currentInput = this._physicsRig.inputs.get(currentSetting.baseInputIndex);\n            currentOutput = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);\n            currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\n            for (var i = 0; i < currentSetting.inputCount; ++i) {\n                weight = currentInput[i].weight / MaximumWeight;\n                if (currentInput[i].sourceParameterIndex == -1) {\n                    currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);\n                }\n                currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[i].reflect, weight);\n            }\n            radAngle = cubismmath_1.CubismMath.degreesToRadian(-totalAngle.angle);\n            totalTranslation.x =\n                totalTranslation.x * cubismmath_1.CubismMath.cos(radAngle) -\n                    totalTranslation.y * cubismmath_1.CubismMath.sin(radAngle);\n            totalTranslation.y =\n                totalTranslation.x * cubismmath_1.CubismMath.sin(radAngle) +\n                    totalTranslation.y * cubismmath_1.CubismMath.cos(radAngle);\n            updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);\n            for (var i = 0; i < currentSetting.outputCount; ++i) {\n                var particleIndex = currentOutput[i].vertexIndex;\n                if (particleIndex < 1 ||\n                    particleIndex >= currentSetting.particleCount) {\n                    break;\n                }\n                if (currentOutput[i].destinationParameterIndex == -1) {\n                    currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);\n                }\n                var translation = new cubismvector2_1.CubismVector2();\n                translation.x =\n                    currentParticles[particleIndex].position.x -\n                        currentParticles[particleIndex - 1].position.x;\n                translation.y =\n                    currentParticles[particleIndex].position.y -\n                        currentParticles[particleIndex - 1].position.y;\n                outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);\n                var destinationParameterIndex = currentOutput[i].destinationParameterIndex;\n                var outParameterValue = !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\n                    ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex)))\n                    : parameterValue.slice(destinationParameterIndex);\n                updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);\n                for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {\n                    parameterValue[offset] = outParameterValue[outParamIndex];\n                }\n            }\n        }\n    };\n    CubismPhysics.prototype.setOptions = function (options) {\n        this._options = options;\n    };\n    CubismPhysics.prototype.getOption = function () {\n        return this._options;\n    };\n    CubismPhysics.prototype.release = function () {\n        this._physicsRig = void 0;\n        this._physicsRig = null;\n    };\n    CubismPhysics.prototype.parse = function (physicsJson, size) {\n        this._physicsRig = new cubismphysicsinternal_1.CubismPhysicsRig();\n        var json = new cubismphysicsjson_1.CubismPhysicsJson(physicsJson, size);\n        this._physicsRig.gravity = json.getGravity();\n        this._physicsRig.wind = json.getWind();\n        this._physicsRig.subRigCount = json.getSubRigCount();\n        this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, cubismphysicsinternal_1.CubismPhysicsSubRig, true);\n        this._physicsRig.inputs.updateSize(json.getTotalInputCount(), cubismphysicsinternal_1.CubismPhysicsInput, true);\n        this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), cubismphysicsinternal_1.CubismPhysicsOutput, true);\n        this._physicsRig.particles.updateSize(json.getVertexCount(), cubismphysicsinternal_1.CubismPhysicsParticle, true);\n        var inputIndex = 0, outputIndex = 0, particleIndex = 0;\n        for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {\n            this._physicsRig.settings.at(i).normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);\n            this._physicsRig.settings.at(i).normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);\n            this._physicsRig.settings.at(i).normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);\n            this._physicsRig.settings.at(i).normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);\n            this._physicsRig.settings.at(i).normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);\n            this._physicsRig.settings.at(i).normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);\n            this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\n            this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\n            for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\n                this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\n                this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);\n                this._physicsRig.inputs.at(inputIndex + j).reflect = json.getInputReflect(i, j);\n                if (json.getInputType(i, j) == PhysicsTypeTagX) {\n                    this._physicsRig.inputs.at(inputIndex + j).type =\n                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;\n                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;\n                }\n                else if (json.getInputType(i, j) == PhysicsTypeTagY) {\n                    this._physicsRig.inputs.at(inputIndex + j).type =\n                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;\n                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;\n                }\n                else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\n                    this._physicsRig.inputs.at(inputIndex + j).type =\n                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;\n                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;\n                }\n                this._physicsRig.inputs.at(inputIndex + j).source.targetType =\n                    cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n                this._physicsRig.inputs.at(inputIndex + j).source.id = json.getInputSourceId(i, j);\n            }\n            inputIndex += this._physicsRig.settings.at(i).inputCount;\n            this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\n            this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\n            for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\n                this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex = -1;\n                this._physicsRig.outputs.at(outputIndex + j).vertexIndex = json.getOutputVertexIndex(i, j);\n                this._physicsRig.outputs.at(outputIndex + j).angleScale = json.getOutputAngleScale(i, j);\n                this._physicsRig.outputs.at(outputIndex + j).weight = json.getOutputWeight(i, j);\n                this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\n                    cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n                this._physicsRig.outputs.at(outputIndex + j).destination.id = json.getOutputDestinationId(i, j);\n                if (json.getOutputType(i, j) == PhysicsTypeTagX) {\n                    this._physicsRig.outputs.at(outputIndex + j).type =\n                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;\n                    this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationX;\n                    this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationX;\n                }\n                else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\n                    this._physicsRig.outputs.at(outputIndex + j).type =\n                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;\n                    this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationY;\n                    this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationY;\n                }\n                else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\n                    this._physicsRig.outputs.at(outputIndex + j).type =\n                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;\n                    this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputAngle;\n                    this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleAngle;\n                }\n                this._physicsRig.outputs.at(outputIndex + j).reflect = json.getOutputReflect(i, j);\n            }\n            outputIndex += this._physicsRig.settings.at(i).outputCount;\n            this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\n            this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\n            for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\n                this._physicsRig.particles.at(particleIndex + j).mobility = json.getParticleMobility(i, j);\n                this._physicsRig.particles.at(particleIndex + j).delay = json.getParticleDelay(i, j);\n                this._physicsRig.particles.at(particleIndex + j).acceleration = json.getParticleAcceleration(i, j);\n                this._physicsRig.particles.at(particleIndex + j).radius = json.getParticleRadius(i, j);\n                this._physicsRig.particles.at(particleIndex + j).position = json.getParticlePosition(i, j);\n            }\n            particleIndex += this._physicsRig.settings.at(i).particleCount;\n        }\n        this.initialize();\n        json.release();\n        json = void 0;\n        json = null;\n    };\n    CubismPhysics.prototype.initialize = function () {\n        var strand;\n        var currentSetting;\n        var radius;\n        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n            currentSetting = this._physicsRig.settings.at(settingIndex);\n            strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\n            strand[0].initialPosition = new cubismvector2_1.CubismVector2(0.0, 0.0);\n            strand[0].lastPosition = new cubismvector2_1.CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);\n            strand[0].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);\n            strand[0].lastGravity.y *= -1.0;\n            strand[0].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);\n            strand[0].force = new cubismvector2_1.CubismVector2(0.0, 0.0);\n            for (var i = 1; i < currentSetting.particleCount; ++i) {\n                radius = new cubismvector2_1.CubismVector2(0.0, 0.0);\n                radius.y = strand[i].radius;\n                strand[i].initialPosition = new cubismvector2_1.CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);\n                strand[i].position = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\n                strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\n                strand[i].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);\n                strand[i].lastGravity.y *= -1.0;\n                strand[i].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);\n                strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);\n            }\n        }\n    };\n    return CubismPhysics;\n}());\nexports.CubismPhysics = CubismPhysics;\nvar Options = (function () {\n    function Options() {\n        this.gravity = new cubismvector2_1.CubismVector2(0, 0);\n        this.wind = new cubismvector2_1.CubismVector2(0, 0);\n    }\n    return Options;\n}());\nexports.Options = Options;\nfunction sign(value) {\n    var ret = 0;\n    if (value > 0.0) {\n        ret = 1;\n    }\n    else if (value < 0.0) {\n        ret = -1;\n    }\n    return ret;\n}\nfunction getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\n    targetTranslation.x +=\n        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\n}\nfunction getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\n    targetTranslation.y +=\n        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\n}\nfunction getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {\n    targetAngle.angle +=\n        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;\n}\nfunction getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {\n    var outputValue = translation.x;\n    if (isInverted) {\n        outputValue *= -1.0;\n    }\n    return outputValue;\n}\nfunction getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {\n    var outputValue = translation.y;\n    if (isInverted) {\n        outputValue *= -1.0;\n    }\n    return outputValue;\n}\nfunction getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {\n    var outputValue;\n    if (particleIndex >= 2) {\n        parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);\n    }\n    else {\n        parentGravity = parentGravity.multiplyByScaler(-1.0);\n    }\n    outputValue = cubismmath_1.CubismMath.directionToRadian(parentGravity, translation);\n    if (isInverted) {\n        outputValue *= -1.0;\n    }\n    return outputValue;\n}\nfunction getRangeValue(min, max) {\n    var maxValue = cubismmath_1.CubismMath.max(min, max);\n    var minValue = cubismmath_1.CubismMath.min(min, max);\n    return cubismmath_1.CubismMath.abs(maxValue - minValue);\n}\nfunction getDefaultValue(min, max) {\n    var minValue = cubismmath_1.CubismMath.min(min, max);\n    return minValue + getRangeValue(min, max) / 2.0;\n}\nfunction getOutputScaleTranslationX(translationScale, angleScale) {\n    return JSON.parse(JSON.stringify(translationScale.x));\n}\nfunction getOutputScaleTranslationY(translationScale, angleScale) {\n    return JSON.parse(JSON.stringify(translationScale.y));\n}\nfunction getOutputScaleAngle(translationScale, angleScale) {\n    return JSON.parse(JSON.stringify(angleScale));\n}\nfunction updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {\n    var totalRadian;\n    var delay;\n    var radian;\n    var currentGravity;\n    var direction = new cubismvector2_1.CubismVector2(0.0, 0.0);\n    var velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);\n    var force = new cubismvector2_1.CubismVector2(0.0, 0.0);\n    var newDirection = new cubismvector2_1.CubismVector2(0.0, 0.0);\n    strand[0].position = new cubismvector2_1.CubismVector2(totalTranslation.x, totalTranslation.y);\n    totalRadian = cubismmath_1.CubismMath.degreesToRadian(totalAngle);\n    currentGravity = cubismmath_1.CubismMath.radianToDirection(totalRadian);\n    currentGravity.normalize();\n    for (var i = 1; i < strandCount; ++i) {\n        strand[i].force = currentGravity\n            .multiplyByScaler(strand[i].acceleration)\n            .add(windDirection);\n        strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].position.x, strand[i].position.y);\n        delay = strand[i].delay * deltaTimeSeconds * 30.0;\n        direction = strand[i].position.substract(strand[i - 1].position);\n        radian =\n            cubismmath_1.CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\n                airResistance;\n        direction.x =\n            cubismmath_1.CubismMath.cos(radian) * direction.x -\n                direction.y * cubismmath_1.CubismMath.sin(radian);\n        direction.y =\n            cubismmath_1.CubismMath.sin(radian) * direction.x +\n                direction.y * cubismmath_1.CubismMath.cos(radian);\n        strand[i].position = strand[i - 1].position.add(direction);\n        velocity = strand[i].velocity.multiplyByScaler(delay);\n        force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\n        strand[i].position = strand[i].position.add(velocity).add(force);\n        newDirection = strand[i].position.substract(strand[i - 1].position);\n        newDirection.normalize();\n        strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));\n        if (cubismmath_1.CubismMath.abs(strand[i].position.x) < thresholdValue) {\n            strand[i].position.x = 0.0;\n        }\n        if (delay != 0.0) {\n            strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\n            strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\n            strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);\n        }\n        strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);\n        strand[i].lastGravity = new cubismvector2_1.CubismVector2(currentGravity.x, currentGravity.y);\n    }\n}\nfunction updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {\n    var outputScale;\n    var value;\n    var weight;\n    outputScale = output.getScale(output.translationScale, output.angleScale);\n    value = translation * outputScale;\n    if (value < parameterValueMinimum) {\n        if (value < output.valueBelowMinimum) {\n            output.valueBelowMinimum = value;\n        }\n        value = parameterValueMinimum;\n    }\n    else if (value > parameterValueMaximum) {\n        if (value > output.valueExceededMaximum) {\n            output.valueExceededMaximum = value;\n        }\n        value = parameterValueMaximum;\n    }\n    weight = output.weight / MaximumWeight;\n    if (weight >= 1.0) {\n        parameterValue[0] = value;\n    }\n    else {\n        value = parameterValue[0] * (1.0 - weight) + value * weight;\n        parameterValue[0] = value;\n    }\n}\nfunction normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {\n    var result = 0.0;\n    var maxValue = cubismmath_1.CubismMath.max(parameterMaximum, parameterMinimum);\n    if (maxValue < value) {\n        value = maxValue;\n    }\n    var minValue = cubismmath_1.CubismMath.min(parameterMaximum, parameterMinimum);\n    if (minValue > value) {\n        value = minValue;\n    }\n    var minNormValue = cubismmath_1.CubismMath.min(normalizedMinimum, normalizedMaximum);\n    var maxNormValue = cubismmath_1.CubismMath.max(normalizedMinimum, normalizedMaximum);\n    var middleNormValue = normalizedDefault;\n    var middleValue = getDefaultValue(minValue, maxValue);\n    var paramValue = value - middleValue;\n    switch (sign(paramValue)) {\n        case 1: {\n            var nLength = maxNormValue - middleNormValue;\n            var pLength = maxValue - middleValue;\n            if (pLength != 0.0) {\n                result = paramValue * (nLength / pLength);\n                result += middleNormValue;\n            }\n            break;\n        }\n        case -1: {\n            var nLength = minNormValue - middleNormValue;\n            var pLength = minValue - middleValue;\n            if (pLength != 0.0) {\n                result = paramValue * (nLength / pLength);\n                result += middleNormValue;\n            }\n            break;\n        }\n        case 0: {\n            result = middleNormValue;\n            break;\n        }\n        default: {\n            break;\n        }\n    }\n    return isInverted ? result : result * -1.0;\n}\nvar $ = __importStar(__webpack_require__(/*! ./cubismphysics */ \"./Framework/src/physics/cubismphysics.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismPhysics = $.CubismPhysics;\n    Live2DCubismFramework.Options = $.Options;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/physics/cubismphysics.ts\n");

/***/ }),

/***/ "./Framework/src/physics/cubismphysicsinternal.ts":
/*!********************************************************!*\
  !*** ./Framework/src/physics/cubismphysicsinternal.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismPhysicsRig = exports.CubismPhysicsOutput = exports.CubismPhysicsInput = exports.CubismPhysicsSubRig = exports.CubismPhysicsParticle = exports.CubismPhysicsNormalization = exports.CubismPhysicsParameter = exports.PhysicsJsonEffectiveForces = exports.CubismPhysicsSource = exports.CubismPhysicsTargetType = void 0;\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar CubismPhysicsTargetType;\n(function (CubismPhysicsTargetType) {\n    CubismPhysicsTargetType[CubismPhysicsTargetType[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\n})(CubismPhysicsTargetType = exports.CubismPhysicsTargetType || (exports.CubismPhysicsTargetType = {}));\nvar CubismPhysicsSource;\n(function (CubismPhysicsSource) {\n    CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\n    CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\n    CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\n})(CubismPhysicsSource = exports.CubismPhysicsSource || (exports.CubismPhysicsSource = {}));\nvar PhysicsJsonEffectiveForces = (function () {\n    function PhysicsJsonEffectiveForces() {\n        this.gravity = new cubismvector2_1.CubismVector2(0, 0);\n        this.wind = new cubismvector2_1.CubismVector2(0, 0);\n    }\n    return PhysicsJsonEffectiveForces;\n}());\nexports.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;\nvar CubismPhysicsParameter = (function () {\n    function CubismPhysicsParameter() {\n    }\n    return CubismPhysicsParameter;\n}());\nexports.CubismPhysicsParameter = CubismPhysicsParameter;\nvar CubismPhysicsNormalization = (function () {\n    function CubismPhysicsNormalization() {\n    }\n    return CubismPhysicsNormalization;\n}());\nexports.CubismPhysicsNormalization = CubismPhysicsNormalization;\nvar CubismPhysicsParticle = (function () {\n    function CubismPhysicsParticle() {\n        this.initialPosition = new cubismvector2_1.CubismVector2(0, 0);\n        this.position = new cubismvector2_1.CubismVector2(0, 0);\n        this.lastPosition = new cubismvector2_1.CubismVector2(0, 0);\n        this.lastGravity = new cubismvector2_1.CubismVector2(0, 0);\n        this.force = new cubismvector2_1.CubismVector2(0, 0);\n        this.velocity = new cubismvector2_1.CubismVector2(0, 0);\n    }\n    return CubismPhysicsParticle;\n}());\nexports.CubismPhysicsParticle = CubismPhysicsParticle;\nvar CubismPhysicsSubRig = (function () {\n    function CubismPhysicsSubRig() {\n        this.normalizationPosition = new CubismPhysicsNormalization();\n        this.normalizationAngle = new CubismPhysicsNormalization();\n    }\n    return CubismPhysicsSubRig;\n}());\nexports.CubismPhysicsSubRig = CubismPhysicsSubRig;\nvar CubismPhysicsInput = (function () {\n    function CubismPhysicsInput() {\n        this.source = new CubismPhysicsParameter();\n    }\n    return CubismPhysicsInput;\n}());\nexports.CubismPhysicsInput = CubismPhysicsInput;\nvar CubismPhysicsOutput = (function () {\n    function CubismPhysicsOutput() {\n        this.destination = new CubismPhysicsParameter();\n        this.translationScale = new cubismvector2_1.CubismVector2(0, 0);\n    }\n    return CubismPhysicsOutput;\n}());\nexports.CubismPhysicsOutput = CubismPhysicsOutput;\nvar CubismPhysicsRig = (function () {\n    function CubismPhysicsRig() {\n        this.settings = new csmvector_1.csmVector();\n        this.inputs = new csmvector_1.csmVector();\n        this.outputs = new csmvector_1.csmVector();\n        this.particles = new csmvector_1.csmVector();\n        this.gravity = new cubismvector2_1.CubismVector2(0, 0);\n        this.wind = new cubismvector2_1.CubismVector2(0, 0);\n    }\n    return CubismPhysicsRig;\n}());\nexports.CubismPhysicsRig = CubismPhysicsRig;\nvar $ = __importStar(__webpack_require__(/*! ./cubismphysicsinternal */ \"./Framework/src/physics/cubismphysicsinternal.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismPhysicsInput = $.CubismPhysicsInput;\n    Live2DCubismFramework.CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n    Live2DCubismFramework.CubismPhysicsOutput = $.CubismPhysicsOutput;\n    Live2DCubismFramework.CubismPhysicsParameter = $.CubismPhysicsParameter;\n    Live2DCubismFramework.CubismPhysicsParticle = $.CubismPhysicsParticle;\n    Live2DCubismFramework.CubismPhysicsRig = $.CubismPhysicsRig;\n    Live2DCubismFramework.CubismPhysicsSource = $.CubismPhysicsSource;\n    Live2DCubismFramework.CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n    Live2DCubismFramework.CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n    Live2DCubismFramework.PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/physics/cubismphysicsinternal.ts\n");

/***/ }),

/***/ "./Framework/src/physics/cubismphysicsjson.ts":
/*!****************************************************!*\
  !*** ./Framework/src/physics/cubismphysicsjson.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismPhysicsJson = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\nvar Position = 'Position';\nvar X = 'X';\nvar Y = 'Y';\nvar Angle = 'Angle';\nvar Type = 'Type';\nvar Id = 'Id';\nvar Meta = 'Meta';\nvar EffectiveForces = 'EffectiveForces';\nvar TotalInputCount = 'TotalInputCount';\nvar TotalOutputCount = 'TotalOutputCount';\nvar PhysicsSettingCount = 'PhysicsSettingCount';\nvar Gravity = 'Gravity';\nvar Wind = 'Wind';\nvar VertexCount = 'VertexCount';\nvar PhysicsSettings = 'PhysicsSettings';\nvar Normalization = 'Normalization';\nvar Minimum = 'Minimum';\nvar Maximum = 'Maximum';\nvar Default = 'Default';\nvar Reflect = 'Reflect';\nvar Weight = 'Weight';\nvar Input = 'Input';\nvar Source = 'Source';\nvar Output = 'Output';\nvar Scale = 'Scale';\nvar VertexIndex = 'VertexIndex';\nvar Destination = 'Destination';\nvar Vertices = 'Vertices';\nvar Mobility = 'Mobility';\nvar Delay = 'Delay';\nvar Radius = 'Radius';\nvar Acceleration = 'Acceleration';\nvar CubismPhysicsJson = (function () {\n    function CubismPhysicsJson(buffer, size) {\n        this._json = cubismjson_1.CubismJson.create(buffer, size);\n    }\n    CubismPhysicsJson.prototype.release = function () {\n        cubismjson_1.CubismJson.delete(this._json);\n    };\n    CubismPhysicsJson.prototype.getGravity = function () {\n        var ret = new cubismvector2_1.CubismVector2(0, 0);\n        ret.x = this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(EffectiveForces)\n            .getValueByString(Gravity)\n            .getValueByString(X)\n            .toFloat();\n        ret.y = this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(EffectiveForces)\n            .getValueByString(Gravity)\n            .getValueByString(Y)\n            .toFloat();\n        return ret;\n    };\n    CubismPhysicsJson.prototype.getWind = function () {\n        var ret = new cubismvector2_1.CubismVector2(0, 0);\n        ret.x = this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(EffectiveForces)\n            .getValueByString(Wind)\n            .getValueByString(X)\n            .toFloat();\n        ret.y = this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(EffectiveForces)\n            .getValueByString(Wind)\n            .getValueByString(Y)\n            .toFloat();\n        return ret;\n    };\n    CubismPhysicsJson.prototype.getSubRigCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(PhysicsSettingCount)\n            .toInt();\n    };\n    CubismPhysicsJson.prototype.getTotalInputCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(TotalInputCount)\n            .toInt();\n    };\n    CubismPhysicsJson.prototype.getTotalOutputCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(TotalOutputCount)\n            .toInt();\n    };\n    CubismPhysicsJson.prototype.getVertexCount = function () {\n        return this._json\n            .getRoot()\n            .getValueByString(Meta)\n            .getValueByString(VertexCount)\n            .toInt();\n    };\n    CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Normalization)\n            .getValueByString(Position)\n            .getValueByString(Minimum)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Normalization)\n            .getValueByString(Position)\n            .getValueByString(Maximum)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Normalization)\n            .getValueByString(Position)\n            .getValueByString(Default)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Normalization)\n            .getValueByString(Angle)\n            .getValueByString(Minimum)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Normalization)\n            .getValueByString(Angle)\n            .getValueByString(Maximum)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Normalization)\n            .getValueByString(Angle)\n            .getValueByString(Default)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Input)\n            .getVector()\n            .getSize();\n    };\n    CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Input)\n            .getValueByIndex(inputIndex)\n            .getValueByString(Weight)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Input)\n            .getValueByIndex(inputIndex)\n            .getValueByString(Reflect)\n            .toBoolean();\n    };\n    CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Input)\n            .getValueByIndex(inputIndex)\n            .getValueByString(Type)\n            .getRawString();\n    };\n    CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {\n        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Input)\n            .getValueByIndex(inputIndex)\n            .getValueByString(Source)\n            .getValueByString(Id)\n            .getRawString());\n    };\n    CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getVector()\n            .getSize();\n    };\n    CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getValueByIndex(outputIndex)\n            .getValueByString(VertexIndex)\n            .toInt();\n    };\n    CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getValueByIndex(outputIndex)\n            .getValueByString(Scale)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getValueByIndex(outputIndex)\n            .getValueByString(Weight)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {\n        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getValueByIndex(outputIndex)\n            .getValueByString(Destination)\n            .getValueByString(Id)\n            .getRawString());\n    };\n    CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getValueByIndex(outputIndex)\n            .getValueByString(Type)\n            .getRawString();\n    };\n    CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Output)\n            .getValueByIndex(outputIndex)\n            .getValueByString(Reflect)\n            .toBoolean();\n    };\n    CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getVector()\n            .getSize();\n    };\n    CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getValueByIndex(vertexIndex)\n            .getValueByString(Mobility)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getValueByIndex(vertexIndex)\n            .getValueByString(Delay)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getValueByIndex(vertexIndex)\n            .getValueByString(Acceleration)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {\n        return this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getValueByIndex(vertexIndex)\n            .getValueByString(Radius)\n            .toFloat();\n    };\n    CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {\n        var ret = new cubismvector2_1.CubismVector2(0, 0);\n        ret.x = this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getValueByIndex(vertexIndex)\n            .getValueByString(Position)\n            .getValueByString(X)\n            .toFloat();\n        ret.y = this._json\n            .getRoot()\n            .getValueByString(PhysicsSettings)\n            .getValueByIndex(physicsSettingIndex)\n            .getValueByString(Vertices)\n            .getValueByIndex(vertexIndex)\n            .getValueByString(Position)\n            .getValueByString(Y)\n            .toFloat();\n        return ret;\n    };\n    return CubismPhysicsJson;\n}());\nexports.CubismPhysicsJson = CubismPhysicsJson;\nvar $ = __importStar(__webpack_require__(/*! ./cubismphysicsjson */ \"./Framework/src/physics/cubismphysicsjson.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismPhysicsJson = $.CubismPhysicsJson;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/physics/cubismphysicsjson.ts\n");

/***/ }),

/***/ "./Framework/src/rendering/cubismrenderer.ts":
/*!***************************************************!*\
  !*** ./Framework/src/rendering/cubismrenderer.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismTextureColor = exports.CubismBlendMode = exports.CubismRenderer = void 0;\nvar cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\nvar CubismRenderer = (function () {\n    function CubismRenderer() {\n        this._isCulling = false;\n        this._isPremultipliedAlpha = false;\n        this._anisortopy = 0.0;\n        this._model = null;\n        this._modelColor = new CubismTextureColor();\n        this._mvpMatrix4x4 = new cubismmatrix44_1.CubismMatrix44();\n        this._mvpMatrix4x4.loadIdentity();\n    }\n    CubismRenderer.create = function () {\n        return null;\n    };\n    CubismRenderer.delete = function (renderer) {\n        renderer = null;\n    };\n    CubismRenderer.prototype.initialize = function (model) {\n        this._model = model;\n    };\n    CubismRenderer.prototype.drawModel = function () {\n        if (this.getModel() == null)\n            return;\n        this.doDrawModel();\n    };\n    CubismRenderer.prototype.setMvpMatrix = function (matrix44) {\n        this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n    };\n    CubismRenderer.prototype.getMvpMatrix = function () {\n        return this._mvpMatrix4x4;\n    };\n    CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {\n        if (red < 0.0) {\n            red = 0.0;\n        }\n        else if (red > 1.0) {\n            red = 1.0;\n        }\n        if (green < 0.0) {\n            green = 0.0;\n        }\n        else if (green > 1.0) {\n            green = 1.0;\n        }\n        if (blue < 0.0) {\n            blue = 0.0;\n        }\n        else if (blue > 1.0) {\n            blue = 1.0;\n        }\n        if (alpha < 0.0) {\n            alpha = 0.0;\n        }\n        else if (alpha > 1.0) {\n            alpha = 1.0;\n        }\n        this._modelColor.R = red;\n        this._modelColor.G = green;\n        this._modelColor.B = blue;\n        this._modelColor.A = alpha;\n    };\n    CubismRenderer.prototype.getModelColor = function () {\n        return JSON.parse(JSON.stringify(this._modelColor));\n    };\n    CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {\n        this._isPremultipliedAlpha = enable;\n    };\n    CubismRenderer.prototype.isPremultipliedAlpha = function () {\n        return this._isPremultipliedAlpha;\n    };\n    CubismRenderer.prototype.setIsCulling = function (culling) {\n        this._isCulling = culling;\n    };\n    CubismRenderer.prototype.isCulling = function () {\n        return this._isCulling;\n    };\n    CubismRenderer.prototype.setAnisotropy = function (n) {\n        this._anisortopy = n;\n    };\n    CubismRenderer.prototype.getAnisotropy = function () {\n        return this._anisortopy;\n    };\n    CubismRenderer.prototype.getModel = function () {\n        return this._model;\n    };\n    return CubismRenderer;\n}());\nexports.CubismRenderer = CubismRenderer;\nvar CubismBlendMode;\n(function (CubismBlendMode) {\n    CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\n    CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\n    CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\n})(CubismBlendMode = exports.CubismBlendMode || (exports.CubismBlendMode = {}));\nvar CubismTextureColor = (function () {\n    function CubismTextureColor() {\n        this.R = 1.0;\n        this.G = 1.0;\n        this.B = 1.0;\n        this.A = 1.0;\n    }\n    return CubismTextureColor;\n}());\nexports.CubismTextureColor = CubismTextureColor;\nvar $ = __importStar(__webpack_require__(/*! ./cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismBlendMode = $.CubismBlendMode;\n    Live2DCubismFramework.CubismRenderer = $.CubismRenderer;\n    Live2DCubismFramework.CubismTextureColor = $.CubismTextureColor;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlci50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyLnRzPzdmZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuXG4vKipcbiAqIOODouODh+ODq+aPj+eUu+OCkuWHpueQhuOBmeOCi+ODrOODs+ODgOODqVxuICpcbiAqIOOCteODluOCr+ODqeOCueOBq+eSsOWig+S+neWtmOOBruaPj+eUu+WRveS7pOOCkuiomOi/sOOBmeOCi+OAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3ViaXNtUmVuZGVyZXIge1xuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GX44Gm5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4g44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21SZW5kZXJlciB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K544KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShyZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXIpOiB2b2lkIHtcbiAgICByZW5kZXJlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gICAqIOW8leaVsOOBq+a4oeOBl+OBn+ODouODh+ODq+OBi+OCieODrOODs+ODgOODqeOBruWIneacn+WMluWHpueQhuOBq+W/heimgeOBquaDheWgseOCkuWPluOCiuWHuuOBmeOBk+OBqOOBjOOBp+OBjeOCi1xuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGRyYXdNb2RlbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5nZXRNb2RlbCgpID09IG51bGwpIHJldHVybjtcblxuICAgIHRoaXMuZG9EcmF3TW9kZWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiX44KS44K744OD44OI44GZ44KLXG4gICAqIOmFjeWIl+OBr+ikh+ijveOBleOCjOOCi+OBruOBp+OAgeWFg+OBrumFjeWIl+OBr+WkluOBp+egtOajhOOBl+OBpuiJr+OBhFxuICAgKiBAcGFyYW0gbWF0cml4NDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICAgKi9cbiAgcHVibGljIHNldE12cE1hdHJpeChtYXRyaXg0NDogQ3ViaXNtTWF0cml4NDQpOiB2b2lkIHtcbiAgICB0aGlzLl9tdnBNYXRyaXg0eDQuc2V0TWF0cml4KG1hdHJpeDQ0LmdldEFycmF5KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0TXZwTWF0cml4KCk6IEN1YmlzbU1hdHJpeDQ0IHtcbiAgICByZXR1cm4gdGhpcy5fbXZwTWF0cml4NHg0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruiJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiDlkIToibIwLjB+MS4w44Gu6ZaT44Gn5oyH5a6a44GZ44KL77yIMS4w44GM5qiZ5rqW44Gu54q25oWL77yJXG4gICAqIEBwYXJhbSByZWQg6LWk44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqIEBwYXJhbSBncmVlbiDnt5Hjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGJsdWUg6Z2S44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqIEBwYXJhbSBhbHBoYSDOseODgeODo+ODs+ODjeODq+OBruWApFxuICAgKi9cbiAgcHVibGljIHNldE1vZGVsQ29sb3IoXG4gICAgcmVkOiBudW1iZXIsXG4gICAgZ3JlZW46IG51bWJlcixcbiAgICBibHVlOiBudW1iZXIsXG4gICAgYWxwaGE6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBpZiAocmVkIDwgMC4wKSB7XG4gICAgICByZWQgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChyZWQgPiAxLjApIHtcbiAgICAgIHJlZCA9IDEuMDtcbiAgICB9XG5cbiAgICBpZiAoZ3JlZW4gPCAwLjApIHtcbiAgICAgIGdyZWVuID0gMC4wO1xuICAgIH0gZWxzZSBpZiAoZ3JlZW4gPiAxLjApIHtcbiAgICAgIGdyZWVuID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChibHVlIDwgMC4wKSB7XG4gICAgICBibHVlID0gMC4wO1xuICAgIH0gZWxzZSBpZiAoYmx1ZSA+IDEuMCkge1xuICAgICAgYmx1ZSA9IDEuMDtcbiAgICB9XG5cbiAgICBpZiAoYWxwaGEgPCAwLjApIHtcbiAgICAgIGFscGhhID0gMC4wO1xuICAgIH0gZWxzZSBpZiAoYWxwaGEgPiAxLjApIHtcbiAgICAgIGFscGhhID0gMS4wO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsQ29sb3IuUiA9IHJlZDtcbiAgICB0aGlzLl9tb2RlbENvbG9yLkcgPSBncmVlbjtcbiAgICB0aGlzLl9tb2RlbENvbG9yLkIgPSBibHVlO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuQSA9IGFscGhhO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruiJsuOCkuWPluW+l+OBmeOCi1xuICAgKiDlkIToibIwLjB+MS4w44Gu6ZaT44Gn5oyH5a6a44GZ44KLKDEuMOOBjOaomea6luOBrueKtuaFiylcbiAgICpcbiAgICogQHJldHVybiBSR0JB44Gu44Kr44Op44O85oOF5aCxXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxDb2xvcigpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuX21vZGVsQ29sb3IpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfmuIjjgb/OseOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRJc1ByZW11bHRpcGxpZWRBbHBoYShlbmFibGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYSA9IGVuYWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfmuIjjgb/OseOBruacieWKueODu+eEoeWKueOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg5LmX566X5riI44G/44GuzrHmnInlirlcbiAgICogQHJldHVybiBmYWxzZSDkuZfnrpfmuIjjgb/jga7OseeEoeWKuVxuICAgKi9cbiAgcHVibGljIGlzUHJlbXVsdGlwbGllZEFscGhhKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6rjg7PjgrDvvIjniYfpnaLmj4/nlLvvvInjga7mnInlirnjg7vnhKHlirnjgpLjgrvjg4Pjg4jjgZnjgovjgIJcbiAgICog5pyJ5Yq544Gr44GZ44KL44Gq44KJdHJ1ZeOAgeeEoeWKueOBq+OBmeOCi+OBquOCiWZhbHNl44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0SXNDdWxsaW5nKGN1bGxpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc0N1bGxpbmcgPSBjdWxsaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuWPluW+l+OBmeOCi+OAglxuICAgKiBAcmV0dXJuIHRydWUg44Kr44Oq44Oz44Kw5pyJ5Yq5XG4gICAqIEByZXR1cm4gZmFsc2Ug44Kr44Oq44Oz44Kw54Sh5Yq5XG4gICAqL1xuICBwdWJsaWMgaXNDdWxsaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0N1bGxpbmc7XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXG4gICAqIOODkeODqeODoeODvOOCv+WApOOBruW9semfv+W6puOBr+ODrOODs+ODgOODqeOBruWun+ijheOBq+S+neWtmOOBmeOCi1xuICAgKiBAcGFyYW0gbiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICovXG4gIHB1YmxpYyBzZXRBbmlzb3Ryb3B5KG46IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2FuaXNvcnRvcHkgPSBuO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcmV0dXJuIOeVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv1xuICAgKi9cbiAgcHVibGljIGdldEFuaXNvdHJvcHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYW5pc29ydG9weTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6rjg7PjgrDjgZnjgovjg6Ljg4fjg6vjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6rjg7PjgrDjgZnjgovjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBDdWJpc21Nb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2lzQ3VsbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG4gICAgdGhpcy5fYW5pc29ydG9weSA9IDAuMDtcbiAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcblxuICAgIC8vIOWNmOS9jeihjOWIl+OBq+WIneacn+WMllxuICAgIHRoaXMuX212cE1hdHJpeDR4NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX212cE1hdHJpeDR4NC5sb2FkSWRlbnRpdHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vmj4/nlLvjga7lrp/oo4VcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkb0RyYXdNb2RlbCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgotcbiAgICog44Od44Oq44K044Oz44Oh44OD44K344Ol44Go44OG44Kv44K544OB44Oj55Wq5Y+344KS44K744OD44OI44Gn5rih44GZ44CCXG4gICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XG4gICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpemggueCueOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXG4gICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXG4gICAqIEBwYXJhbSBpbnZlcnRlZE1hc2sg44Oe44K544Kv5L2/55So5pmC44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55SoXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZHJhd01lc2goXG4gICAgdGV4dHVyZU5vOiBudW1iZXIsXG4gICAgaW5kZXhDb3VudDogbnVtYmVyLFxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgaW5kZXhBcnJheTogVWludDE2QXJyYXksXG4gICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkumWi+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlOiBGdW5jdGlvbjtcblxuICBwcm90ZWN0ZWQgX212cE1hdHJpeDR4NDogQ3ViaXNtTWF0cml4NDQ7IC8vIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgcHJvdGVjdGVkIF9tb2RlbENvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3I7IC8vIOODouODh+ODq+iHquS9k+OBruOCq+ODqeODvO+8iFJHQkHvvIlcbiAgcHJvdGVjdGVkIF9pc0N1bGxpbmc6IGJvb2xlYW47IC8vIOOCq+ODquODs+OCsOOBjOacieWKueOBquOCiXRydWVcbiAgcHJvdGVjdGVkIF9pc1ByZW11bHRpcGxpZWRBbHBoYTogYm9vbGVhbjsgLy8g5LmX566X5riI44G/zrHjgarjgol0cnVlXG4gIHByb3RlY3RlZCBfYW5pc29ydG9weTogYW55OyAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr9cbiAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOODrOODs+ODgOODquODs+OCsOWvvuixoeOBruODouODh+ODq1xufVxuXG5leHBvcnQgZW51bSBDdWJpc21CbGVuZE1vZGUge1xuICBDdWJpc21CbGVuZE1vZGVfTm9ybWFsID0gMCwgLy8g6YCa5bi4XG4gIEN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZSA9IDEsIC8vIOWKoOeul1xuICBDdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmUgPSAyIC8vIOS5l+eul1xufVxuXG4vKipcbiAqIOODhuOCr+OCueODgeODo+OBruiJsuOCklJHQkHjgafmibHjgYbjgZ/jgoHjga7jgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVRleHR1cmVDb2xvciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuUiA9IDEuMDtcbiAgICB0aGlzLkcgPSAxLjA7XG4gICAgdGhpcy5CID0gMS4wO1xuICAgIHRoaXMuQSA9IDEuMDtcbiAgfVxuXG4gIFI6IG51bWJlcjsgLy8g6LWk44OB44Oj44Oz44ON44OrXG4gIEc6IG51bWJlcjsgLy8g57eR44OB44Oj44Oz44ON44OrXG4gIEI6IG51bWJlcjsgLy8g6Z2S44OB44Oj44Oz44ON44OrXG4gIEE6IG51bWJlcjsgLy8gzrHjg4Hjg6Pjg7Pjg43jg6tcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcmVuZGVyZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUJsZW5kTW9kZSA9ICQuQ3ViaXNtQmxlbmRNb2RlO1xuICBleHBvcnQgdHlwZSBDdWJpc21CbGVuZE1vZGUgPSAkLkN1YmlzbUJsZW5kTW9kZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlcmVyID0gJC5DdWJpc21SZW5kZXJlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyZXIgPSAkLkN1YmlzbVJlbmRlcmVyO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtVGV4dHVyZUNvbG9yID0gJC5DdWJpc21UZXh0dXJlQ29sb3I7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVRleHR1cmVDb2xvciA9ICQuQ3ViaXNtVGV4dHVyZUNvbG9yO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT0E7QUFRQTtBQXdLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUE1S0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQVVBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQTBEQTtBQUFBO0FBN05BO0FBK05BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFBQTtBQWZBO0FBa0JBO0FBRUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/rendering/cubismrenderer.ts\n");

/***/ }),

/***/ "./Framework/src/rendering/cubismrenderer_webgl.ts":
/*!*********************************************************!*\
  !*** ./Framework/src/rendering/cubismrenderer_webgl.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismRenderer_WebGL = exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = exports.fragmentShaderSrcMaskPremultipliedAlpha = exports.fragmentShaderSrcPremultipliedAlpha = exports.vertexShaderSrcMasked = exports.vertexShaderSrc = exports.fragmentShaderSrcsetupMask = exports.vertexShaderSrcSetupMask = exports.ShaderNames = exports.CubismShaderSet = exports.CubismShader_WebGL = exports.CubismClippingContext = exports.CubismRenderTextureResource = exports.CubismClippingManager_WebGL = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"./Framework/src/type/csmmap.ts\");\nvar csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ \"./Framework/src/type/csmrectf.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\");\nvar ColorChannelCount = 4;\nvar shaderCount = 10;\nvar s_instance;\nvar s_viewport;\nvar s_fbo;\nvar CubismClippingManager_WebGL = (function () {\n    function CubismClippingManager_WebGL() {\n        this._maskRenderTexture = null;\n        this._colorBuffer = null;\n        this._currentFrameNo = 0;\n        this._clippingMaskBufferSize = 256;\n        this._clippingContextListForMask = new csmvector_1.csmVector();\n        this._clippingContextListForDraw = new csmvector_1.csmVector();\n        this._channelColors = new csmvector_1.csmVector();\n        this._tmpBoundsOnModel = new csmrectf_1.csmRect();\n        this._tmpMatrix = new cubismmatrix44_1.CubismMatrix44();\n        this._tmpMatrixForMask = new cubismmatrix44_1.CubismMatrix44();\n        this._tmpMatrixForDraw = new cubismmatrix44_1.CubismMatrix44();\n        this._maskTexture = null;\n        var tmp = new cubismrenderer_1.CubismTextureColor();\n        tmp.R = 1.0;\n        tmp.G = 0.0;\n        tmp.B = 0.0;\n        tmp.A = 0.0;\n        this._channelColors.pushBack(tmp);\n        tmp = new cubismrenderer_1.CubismTextureColor();\n        tmp.R = 0.0;\n        tmp.G = 1.0;\n        tmp.B = 0.0;\n        tmp.A = 0.0;\n        this._channelColors.pushBack(tmp);\n        tmp = new cubismrenderer_1.CubismTextureColor();\n        tmp.R = 0.0;\n        tmp.G = 0.0;\n        tmp.B = 1.0;\n        tmp.A = 0.0;\n        this._channelColors.pushBack(tmp);\n        tmp = new cubismrenderer_1.CubismTextureColor();\n        tmp.R = 0.0;\n        tmp.G = 0.0;\n        tmp.B = 0.0;\n        tmp.A = 1.0;\n        this._channelColors.pushBack(tmp);\n    }\n    CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {\n        return this._channelColors.at(channelNo);\n    };\n    CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {\n        var ret = 0;\n        if (this._maskTexture && this._maskTexture.texture != 0) {\n            this._maskTexture.frameNo = this._currentFrameNo;\n            ret = this._maskTexture.texture;\n        }\n        if (ret == 0) {\n            var size = this._clippingMaskBufferSize;\n            this._colorBuffer = this.gl.createTexture();\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n            ret = this.gl.createFramebuffer();\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n            this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);\n        }\n        return ret;\n    };\n    CubismClippingManager_WebGL.prototype.setGL = function (gl) {\n        this.gl = gl;\n    };\n    CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {\n        var clippedDrawTotalMinX = Number.MAX_VALUE;\n        var clippedDrawTotalMinY = Number.MAX_VALUE;\n        var clippedDrawTotalMaxX = Number.MIN_VALUE;\n        var clippedDrawTotalMaxY = Number.MIN_VALUE;\n        var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\n        for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\n            var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\n            var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\n            var drawableVertexes = model.getDrawableVertices(drawableIndex);\n            var minX = Number.MAX_VALUE;\n            var minY = Number.MAX_VALUE;\n            var maxX = Number.MIN_VALUE;\n            var maxY = Number.MIN_VALUE;\n            var loop = drawableVertexCount * live2dcubismframework_1.Constant.vertexStep;\n            for (var pi = live2dcubismframework_1.Constant.vertexOffset; pi < loop; pi += live2dcubismframework_1.Constant.vertexStep) {\n                var x = drawableVertexes[pi];\n                var y = drawableVertexes[pi + 1];\n                if (x < minX) {\n                    minX = x;\n                }\n                if (x > maxX) {\n                    maxX = x;\n                }\n                if (y < minY) {\n                    minY = y;\n                }\n                if (y > maxY) {\n                    maxY = y;\n                }\n            }\n            if (minX == Number.MAX_VALUE) {\n                continue;\n            }\n            if (minX < clippedDrawTotalMinX) {\n                clippedDrawTotalMinX = minX;\n            }\n            if (minY < clippedDrawTotalMinY) {\n                clippedDrawTotalMinY = minY;\n            }\n            if (maxX > clippedDrawTotalMaxX) {\n                clippedDrawTotalMaxX = maxX;\n            }\n            if (maxY > clippedDrawTotalMaxY) {\n                clippedDrawTotalMaxY = maxY;\n            }\n            if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n                clippingContext._allClippedDrawRect.x = 0.0;\n                clippingContext._allClippedDrawRect.y = 0.0;\n                clippingContext._allClippedDrawRect.width = 0.0;\n                clippingContext._allClippedDrawRect.height = 0.0;\n                clippingContext._isUsing = false;\n            }\n            else {\n                clippingContext._isUsing = true;\n                var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n                var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n                clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n                clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n                clippingContext._allClippedDrawRect.width = w;\n                clippingContext._allClippedDrawRect.height = h;\n            }\n        }\n    };\n    CubismClippingManager_WebGL.prototype.release = function () {\n        for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n            if (this._clippingContextListForMask.at(i)) {\n                this._clippingContextListForMask.at(i).release();\n                this._clippingContextListForMask.set(i, void 0);\n            }\n            this._clippingContextListForMask.set(i, null);\n        }\n        this._clippingContextListForMask = null;\n        for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\n            this._clippingContextListForDraw.set(i, null);\n        }\n        this._clippingContextListForDraw = null;\n        if (this._maskTexture) {\n            this.gl.deleteFramebuffer(this._maskTexture.texture);\n            this._maskTexture = null;\n        }\n        for (var i = 0; i < this._channelColors.getSize(); i++) {\n            this._channelColors.set(i, null);\n        }\n        this._channelColors = null;\n        this.gl.deleteTexture(this._colorBuffer);\n        this._colorBuffer = null;\n    };\n    CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {\n        for (var i = 0; i < drawableCount; i++) {\n            if (drawableMaskCounts[i] <= 0) {\n                this._clippingContextListForDraw.pushBack(null);\n                continue;\n            }\n            var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);\n            if (clippingContext == null) {\n                clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);\n                this._clippingContextListForMask.pushBack(clippingContext);\n            }\n            clippingContext.addClippedDrawable(i);\n            this._clippingContextListForDraw.pushBack(clippingContext);\n        }\n    };\n    CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {\n        this._currentFrameNo++;\n        var usingClipCount = 0;\n        for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\n            var cc = this._clippingContextListForMask.at(clipIndex);\n            this.calcClippedDrawTotalBounds(model, cc);\n            if (cc._isUsing) {\n                usingClipCount++;\n            }\n        }\n        if (usingClipCount > 0) {\n            this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);\n            this._maskRenderTexture = this.getMaskRenderTexture();\n            var modelToWorldF = renderer.getMvpMatrix();\n            renderer.preDraw();\n            this.setupLayoutBounds(usingClipCount);\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\n            this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\n                var clipContext = this._clippingContextListForMask.at(clipIndex);\n                var allClipedDrawRect = clipContext._allClippedDrawRect;\n                var layoutBoundsOnTex01 = clipContext._layoutBounds;\n                var MARGIN = 0.05;\n                this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n                this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);\n                var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n                var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n                {\n                    this._tmpMatrix.loadIdentity();\n                    {\n                        this._tmpMatrix.translateRelative(-1.0, -1.0);\n                        this._tmpMatrix.scaleRelative(2.0, 2.0);\n                    }\n                    {\n                        this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\n                        this._tmpMatrix.scaleRelative(scaleX, scaleY);\n                        this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\n                    }\n                    this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n                }\n                {\n                    this._tmpMatrix.loadIdentity();\n                    {\n                        this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\n                        this._tmpMatrix.scaleRelative(scaleX, scaleY);\n                        this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\n                    }\n                    this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n                }\n                clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n                clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n                var clipDrawCount = clipContext._clippingIdCount;\n                for (var i = 0; i < clipDrawCount; i++) {\n                    var clipDrawIndex = clipContext._clippingIdList[i];\n                    if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {\n                        continue;\n                    }\n                    renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\n                    renderer.setClippingContextBufferForMask(clipContext);\n                    renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal, false);\n                }\n            }\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n            renderer.setClippingContextBufferForMask(null);\n            this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);\n        }\n    };\n    CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {\n        for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n            var clippingContext = this._clippingContextListForMask.at(i);\n            var count = clippingContext._clippingIdCount;\n            if (count != drawableMaskCounts) {\n                continue;\n            }\n            var sameCount = 0;\n            for (var j = 0; j < count; j++) {\n                var clipId = clippingContext._clippingIdList[j];\n                for (var k = 0; k < count; k++) {\n                    if (drawableMasks[k] == clipId) {\n                        sameCount++;\n                        break;\n                    }\n                }\n            }\n            if (sameCount == count) {\n                return clippingContext;\n            }\n        }\n        return null;\n    };\n    CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {\n        var div = usingClipCount / ColorChannelCount;\n        var mod = usingClipCount % ColorChannelCount;\n        div = ~~div;\n        mod = ~~mod;\n        var curClipIndex = 0;\n        for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\n            var layoutCount = div + (channelNo < mod ? 1 : 0);\n            if (layoutCount == 0) {\n            }\n            else if (layoutCount == 1) {\n                var clipContext = this._clippingContextListForMask.at(curClipIndex++);\n                clipContext._layoutChannelNo = channelNo;\n                clipContext._layoutBounds.x = 0.0;\n                clipContext._layoutBounds.y = 0.0;\n                clipContext._layoutBounds.width = 1.0;\n                clipContext._layoutBounds.height = 1.0;\n            }\n            else if (layoutCount == 2) {\n                for (var i = 0; i < layoutCount; i++) {\n                    var xpos = i % 2;\n                    xpos = ~~xpos;\n                    var cc = this._clippingContextListForMask.at(curClipIndex++);\n                    cc._layoutChannelNo = channelNo;\n                    cc._layoutBounds.x = xpos * 0.5;\n                    cc._layoutBounds.y = 0.0;\n                    cc._layoutBounds.width = 0.5;\n                    cc._layoutBounds.height = 1.0;\n                }\n            }\n            else if (layoutCount <= 4) {\n                for (var i = 0; i < layoutCount; i++) {\n                    var xpos = i % 2;\n                    var ypos = i / 2;\n                    xpos = ~~xpos;\n                    ypos = ~~ypos;\n                    var cc = this._clippingContextListForMask.at(curClipIndex++);\n                    cc._layoutChannelNo = channelNo;\n                    cc._layoutBounds.x = xpos * 0.5;\n                    cc._layoutBounds.y = ypos * 0.5;\n                    cc._layoutBounds.width = 0.5;\n                    cc._layoutBounds.height = 0.5;\n                }\n            }\n            else if (layoutCount <= 9) {\n                for (var i = 0; i < layoutCount; i++) {\n                    var xpos = i % 3;\n                    var ypos = i / 3;\n                    xpos = ~~xpos;\n                    ypos = ~~ypos;\n                    var cc = this._clippingContextListForMask.at(curClipIndex++);\n                    cc._layoutChannelNo = channelNo;\n                    cc._layoutBounds.x = xpos / 3.0;\n                    cc._layoutBounds.y = ypos / 3.0;\n                    cc._layoutBounds.width = 1.0 / 3.0;\n                    cc._layoutBounds.height = 1.0 / 3.0;\n                }\n            }\n            else {\n                cubismdebug_1.CubismLogError('not supported mask count : {0}', layoutCount);\n            }\n        }\n    };\n    CubismClippingManager_WebGL.prototype.getColorBuffer = function () {\n        return this._colorBuffer;\n    };\n    CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {\n        return this._clippingContextListForDraw;\n    };\n    CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {\n        this._clippingMaskBufferSize = size;\n    };\n    CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {\n        return this._clippingMaskBufferSize;\n    };\n    return CubismClippingManager_WebGL;\n}());\nexports.CubismClippingManager_WebGL = CubismClippingManager_WebGL;\nvar CubismRenderTextureResource = (function () {\n    function CubismRenderTextureResource(frameNo, texture) {\n        this.frameNo = frameNo;\n        this.texture = texture;\n    }\n    return CubismRenderTextureResource;\n}());\nexports.CubismRenderTextureResource = CubismRenderTextureResource;\nvar CubismClippingContext = (function () {\n    function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {\n        this._owner = manager;\n        this._clippingIdList = clippingDrawableIndices;\n        this._clippingIdCount = clipCount;\n        this._allClippedDrawRect = new csmrectf_1.csmRect();\n        this._layoutBounds = new csmrectf_1.csmRect();\n        this._clippedDrawableIndexList = [];\n        this._matrixForMask = new cubismmatrix44_1.CubismMatrix44();\n        this._matrixForDraw = new cubismmatrix44_1.CubismMatrix44();\n    }\n    CubismClippingContext.prototype.release = function () {\n        if (this._layoutBounds != null) {\n            this._layoutBounds = null;\n        }\n        if (this._allClippedDrawRect != null) {\n            this._allClippedDrawRect = null;\n        }\n        if (this._clippedDrawableIndexList != null) {\n            this._clippedDrawableIndexList = null;\n        }\n    };\n    CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {\n        this._clippedDrawableIndexList.push(drawableIndex);\n    };\n    CubismClippingContext.prototype.getClippingManager = function () {\n        return this._owner;\n    };\n    CubismClippingContext.prototype.setGl = function (gl) {\n        this._owner.setGL(gl);\n    };\n    return CubismClippingContext;\n}());\nexports.CubismClippingContext = CubismClippingContext;\nvar CubismShader_WebGL = (function () {\n    function CubismShader_WebGL() {\n        this._shaderSets = new csmvector_1.csmVector();\n    }\n    CubismShader_WebGL.getInstance = function () {\n        if (s_instance == null) {\n            s_instance = new CubismShader_WebGL();\n            return s_instance;\n        }\n        return s_instance;\n    };\n    CubismShader_WebGL.deleteInstance = function () {\n        if (s_instance) {\n            s_instance.release();\n            s_instance = null;\n        }\n    };\n    CubismShader_WebGL.prototype.release = function () {\n        this.releaseShaderProgram();\n    };\n    CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\n        if (!isPremultipliedAlpha) {\n            cubismdebug_1.CubismLogError('NoPremultipliedAlpha is not allowed');\n        }\n        if (this._shaderSets.getSize() == 0) {\n            this.generateShaders();\n        }\n        var SRC_COLOR;\n        var DST_COLOR;\n        var SRC_ALPHA;\n        var DST_ALPHA;\n        if (renderer.getClippingContextBufferForMask() != null) {\n            var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);\n            this.gl.useProgram(shaderSet.shaderProgram);\n            this.gl.activeTexture(this.gl.TEXTURE0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n            this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n            if (bufferData.vertex == null) {\n                bufferData.vertex = this.gl.createBuffer();\n            }\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n            this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n            this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\n            if (bufferData.uv == null) {\n                bufferData.uv = this.gl.createBuffer();\n            }\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n            this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n            this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\n            var channelNo = renderer.getClippingContextBufferForMask()\n                ._layoutChannelNo;\n            var colorChannel = renderer\n                .getClippingContextBufferForMask()\n                .getClippingManager()\n                .getChannelFlagAsColor(channelNo);\n            this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\n            this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());\n            var rect = renderer.getClippingContextBufferForMask()\n                ._layoutBounds;\n            this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);\n            SRC_COLOR = this.gl.ZERO;\n            DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\n            SRC_ALPHA = this.gl.ZERO;\n            DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n        }\n        else {\n            var masked = renderer.getClippingContextBufferForDraw() != null;\n            var offset = masked ? (invertedMask ? 2 : 1) : 0;\n            var shaderSet = new CubismShaderSet();\n            switch (colorBlendMode) {\n                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal:\n                default:\n                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);\n                    SRC_COLOR = this.gl.ONE;\n                    DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n                    SRC_ALPHA = this.gl.ONE;\n                    DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n                    break;\n                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive:\n                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);\n                    SRC_COLOR = this.gl.ONE;\n                    DST_COLOR = this.gl.ONE;\n                    SRC_ALPHA = this.gl.ZERO;\n                    DST_ALPHA = this.gl.ONE;\n                    break;\n                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative:\n                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);\n                    SRC_COLOR = this.gl.DST_COLOR;\n                    DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n                    SRC_ALPHA = this.gl.ZERO;\n                    DST_ALPHA = this.gl.ONE;\n                    break;\n            }\n            this.gl.useProgram(shaderSet.shaderProgram);\n            if (bufferData.vertex == null) {\n                bufferData.vertex = this.gl.createBuffer();\n            }\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n            this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n            this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\n            if (bufferData.uv == null) {\n                bufferData.uv = this.gl.createBuffer();\n            }\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n            this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n            this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\n            if (masked) {\n                this.gl.activeTexture(this.gl.TEXTURE1);\n                var tex = renderer\n                    .getClippingContextBufferForDraw()\n                    .getClippingManager()\n                    .getColorBuffer();\n                this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n                this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());\n                var channelNo = renderer.getClippingContextBufferForDraw()\n                    ._layoutChannelNo;\n                var colorChannel = renderer\n                    .getClippingContextBufferForDraw()\n                    .getClippingManager()\n                    .getChannelFlagAsColor(channelNo);\n                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\n            }\n            this.gl.activeTexture(this.gl.TEXTURE0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n            this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n            this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());\n            this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);\n        }\n        if (bufferData.index == null) {\n            bufferData.index = this.gl.createBuffer();\n        }\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);\n        this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\n    };\n    CubismShader_WebGL.prototype.releaseShaderProgram = function () {\n        for (var i = 0; i < this._shaderSets.getSize(); i++) {\n            this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\n            this._shaderSets.at(i).shaderProgram = 0;\n            this._shaderSets.set(i, void 0);\n            this._shaderSets.set(i, null);\n        }\n    };\n    CubismShader_WebGL.prototype.generateShaders = function () {\n        for (var i = 0; i < shaderCount; i++) {\n            this._shaderSets.pushBack(new CubismShaderSet());\n        }\n        this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcSetupMask, exports.fragmentShaderSrcsetupMask);\n        this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrc, exports.fragmentShaderSrcPremultipliedAlpha);\n        this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskPremultipliedAlpha);\n        this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha);\n        this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\n        this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\n        this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\n        this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\n        this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\n        this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\n        this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');\n        this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');\n        this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');\n        this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');\n        this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');\n        this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');\n        this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');\n        this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');\n        this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');\n        this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');\n        this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');\n        this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');\n        this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');\n        this._shaderSets.at(3).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(3).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');\n        this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');\n        this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');\n        this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');\n        this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');\n        this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');\n        this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');\n        this._shaderSets.at(5).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(5).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');\n        this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');\n        this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');\n        this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');\n        this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(7).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');\n        this._shaderSets.at(7).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');\n        this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');\n        this._shaderSets.at(7).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(8).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');\n        this._shaderSets.at(8).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');\n        this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');\n        this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');\n        this._shaderSets.at(8).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(8).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(8).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');\n        this._shaderSets.at(9).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');\n        this._shaderSets.at(9).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');\n        this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');\n        this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');\n        this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');\n        this._shaderSets.at(9).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');\n        this._shaderSets.at(9).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');\n        this._shaderSets.at(9).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');\n    };\n    CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {\n        var shaderProgram = this.gl.createProgram();\n        var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);\n        if (!vertShader) {\n            cubismdebug_1.CubismLogError('Vertex shader compile error!');\n            return 0;\n        }\n        var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);\n        if (!fragShader) {\n            cubismdebug_1.CubismLogError('Vertex shader compile error!');\n            return 0;\n        }\n        this.gl.attachShader(shaderProgram, vertShader);\n        this.gl.attachShader(shaderProgram, fragShader);\n        this.gl.linkProgram(shaderProgram);\n        var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);\n        if (!linkStatus) {\n            cubismdebug_1.CubismLogError('Failed to link program: {0}', shaderProgram);\n            this.gl.deleteShader(vertShader);\n            vertShader = 0;\n            this.gl.deleteShader(fragShader);\n            fragShader = 0;\n            if (shaderProgram) {\n                this.gl.deleteProgram(shaderProgram);\n                shaderProgram = 0;\n            }\n            return 0;\n        }\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return shaderProgram;\n    };\n    CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {\n        var source = shaderSource;\n        var shader = this.gl.createShader(shaderType);\n        this.gl.shaderSource(shader, source);\n        this.gl.compileShader(shader);\n        if (!shader) {\n            var log = this.gl.getShaderInfoLog(shader);\n            cubismdebug_1.CubismLogError('Shader compile log: {0} ', log);\n        }\n        var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!status) {\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    CubismShader_WebGL.prototype.setGl = function (gl) {\n        this.gl = gl;\n    };\n    return CubismShader_WebGL;\n}());\nexports.CubismShader_WebGL = CubismShader_WebGL;\nvar CubismShaderSet = (function () {\n    function CubismShaderSet() {\n    }\n    return CubismShaderSet;\n}());\nexports.CubismShaderSet = CubismShaderSet;\nvar ShaderNames;\n(function (ShaderNames) {\n    ShaderNames[ShaderNames[\"ShaderNames_SetupMask\"] = 0] = \"ShaderNames_SetupMask\";\n    ShaderNames[ShaderNames[\"ShaderNames_NormalPremultipliedAlpha\"] = 1] = \"ShaderNames_NormalPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_NormalMaskedPremultipliedAlpha\"] = 2] = \"ShaderNames_NormalMaskedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\"] = 3] = \"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_AddPremultipliedAlpha\"] = 4] = \"ShaderNames_AddPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlpha\"] = 5] = \"ShaderNames_AddMaskedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlphaInverted\"] = 6] = \"ShaderNames_AddMaskedPremultipliedAlphaInverted\";\n    ShaderNames[ShaderNames[\"ShaderNames_MultPremultipliedAlpha\"] = 7] = \"ShaderNames_MultPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlpha\"] = 8] = \"ShaderNames_MultMaskedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlphaInverted\"] = 9] = \"ShaderNames_MultMaskedPremultipliedAlphaInverted\";\n})(ShaderNames = exports.ShaderNames || (exports.ShaderNames = {}));\nexports.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +\n    'attribute vec2     a_texCoord;' +\n    'varying vec2       v_texCoord;' +\n    'varying vec4       v_myPos;' +\n    'uniform mat4       u_clipMatrix;' +\n    'void main()' +\n    '{' +\n    '   gl_Position = u_clipMatrix * a_position;' +\n    '   v_myPos = u_clipMatrix * a_position;' +\n    '   v_texCoord = a_texCoord;' +\n    '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n    '}';\nexports.fragmentShaderSrcsetupMask = 'precision mediump float;' +\n    'varying vec2       v_texCoord;' +\n    'varying vec4       v_myPos;' +\n    'uniform vec4       u_baseColor;' +\n    'uniform vec4       u_channelFlag;' +\n    'uniform sampler2D  s_texture0;' +\n    'void main()' +\n    '{' +\n    '   float isInside = ' +\n    '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\n    '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\n    '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\n    '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\n    '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\n    '}';\nexports.vertexShaderSrc = 'attribute vec4     a_position;' +\n    'attribute vec2     a_texCoord;' +\n    'varying vec2       v_texCoord;' +\n    'uniform mat4       u_matrix;' +\n    'void main()' +\n    '{' +\n    '   gl_Position = u_matrix * a_position;' +\n    '   v_texCoord = a_texCoord;' +\n    '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n    '}';\nexports.vertexShaderSrcMasked = 'attribute vec4     a_position;' +\n    'attribute vec2     a_texCoord;' +\n    'varying vec2       v_texCoord;' +\n    'varying vec4       v_clipPos;' +\n    'uniform mat4       u_matrix;' +\n    'uniform mat4       u_clipMatrix;' +\n    'void main()' +\n    '{' +\n    '   gl_Position = u_matrix * a_position;' +\n    '   v_clipPos = u_clipMatrix * a_position;' +\n    '   v_texCoord = a_texCoord;' +\n    '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n    '}';\nexports.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +\n    'varying vec2       v_texCoord;' +\n    'uniform vec4       u_baseColor;' +\n    'uniform sampler2D  s_texture0;' +\n    'void main()' +\n    '{' +\n    '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\n    '}';\nexports.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +\n    'varying vec2       v_texCoord;' +\n    'varying vec4       v_clipPos;' +\n    'uniform vec4       u_baseColor;' +\n    'uniform vec4       u_channelFlag;' +\n    'uniform sampler2D  s_texture0;' +\n    'uniform sampler2D  s_texture1;' +\n    'void main()' +\n    '{' +\n    '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\n    '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\n    '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\n    '   col_formask = col_formask * maskVal;' +\n    '   gl_FragColor = col_formask;' +\n    '}';\nexports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +\n    'varying vec2 v_texCoord;' +\n    'varying vec4 v_clipPos;' +\n    'uniform sampler2D s_texture0;' +\n    'uniform sampler2D s_texture1;' +\n    'uniform vec4 u_channelFlag;' +\n    'uniform vec4 u_baseColor;' +\n    'void main()' +\n    '{' +\n    'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' +\n    'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\n    'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\n    'col_formask = col_formask * (1.0 - maskVal);' +\n    'gl_FragColor = col_formask;' +\n    '}';\nvar CubismRenderer_WebGL = (function (_super) {\n    __extends(CubismRenderer_WebGL, _super);\n    function CubismRenderer_WebGL() {\n        var _this = _super.call(this) || this;\n        _this._clippingContextBufferForMask = null;\n        _this._clippingContextBufferForDraw = null;\n        _this._clippingManager = new CubismClippingManager_WebGL();\n        _this.firstDraw = true;\n        _this._textures = new csmmap_1.csmMap();\n        _this._sortedDrawableIndexList = new csmvector_1.csmVector();\n        _this._bufferData = {\n            vertex: WebGLBuffer = null,\n            uv: WebGLBuffer = null,\n            index: WebGLBuffer = null\n        };\n        _this._textures.prepareCapacity(32, true);\n        return _this;\n    }\n    CubismRenderer_WebGL.prototype.initialize = function (model) {\n        if (model.isUsingMasking()) {\n            this._clippingManager = new CubismClippingManager_WebGL();\n            this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());\n        }\n        this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\n        _super.prototype.initialize.call(this, model);\n    };\n    CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {\n        this._textures.setValue(modelTextureNo, glTexture);\n    };\n    CubismRenderer_WebGL.prototype.getBindedTextures = function () {\n        return this._textures;\n    };\n    CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {\n        this._clippingManager.release();\n        this._clippingManager = void 0;\n        this._clippingManager = null;\n        this._clippingManager = new CubismClippingManager_WebGL();\n        this._clippingManager.setClippingMaskBufferSize(size);\n        this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());\n    };\n    CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {\n        return this._clippingManager.getClippingMaskBufferSize();\n    };\n    CubismRenderer_WebGL.prototype.release = function () {\n        this._clippingManager.release();\n        this._clippingManager = void 0;\n        this._clippingManager = null;\n        this.gl.deleteBuffer(this._bufferData.vertex);\n        this._bufferData.vertex = null;\n        this.gl.deleteBuffer(this._bufferData.uv);\n        this._bufferData.uv = null;\n        this.gl.deleteBuffer(this._bufferData.index);\n        this._bufferData.index = null;\n        this._bufferData = null;\n        this._textures = null;\n    };\n    CubismRenderer_WebGL.prototype.doDrawModel = function () {\n        if (this._clippingManager != null) {\n            this.preDraw();\n            this._clippingManager.setupClippingContext(this.getModel(), this);\n        }\n        this.preDraw();\n        var drawableCount = this.getModel().getDrawableCount();\n        var renderOrder = this.getModel().getDrawableRenderOrders();\n        for (var i = 0; i < drawableCount; ++i) {\n            var order = renderOrder[i];\n            this._sortedDrawableIndexList.set(order, i);\n        }\n        for (var i = 0; i < drawableCount; ++i) {\n            var drawableIndex = this._sortedDrawableIndexList.at(i);\n            if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\n                continue;\n            }\n            this.setClippingContextBufferForDraw(this._clippingManager != null\n                ? this._clippingManager\n                    .getClippingContextListForDraw()\n                    .at(drawableIndex)\n                : null);\n            this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\n            this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));\n        }\n    };\n    CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {\n        if (this.isCulling()) {\n            this.gl.enable(this.gl.CULL_FACE);\n        }\n        else {\n            this.gl.disable(this.gl.CULL_FACE);\n        }\n        this.gl.frontFace(this.gl.CCW);\n        var modelColorRGBA = this.getModelColor();\n        if (this.getClippingContextBufferForMask() == null) {\n            modelColorRGBA.A *= opacity;\n            if (this.isPremultipliedAlpha()) {\n                modelColorRGBA.R *= modelColorRGBA.A;\n                modelColorRGBA.G *= modelColorRGBA.A;\n                modelColorRGBA.B *= modelColorRGBA.A;\n            }\n        }\n        var drawtexture;\n        if (this._textures.getValue(textureNo) != null) {\n            drawtexture = this._textures.getValue(textureNo);\n        }\n        else {\n            drawtexture = null;\n        }\n        CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);\n        this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);\n        this.gl.useProgram(null);\n        this.setClippingContextBufferForDraw(null);\n        this.setClippingContextBufferForMask(null);\n    };\n    CubismRenderer_WebGL.doStaticRelease = function () {\n        CubismShader_WebGL.deleteInstance();\n    };\n    CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {\n        s_fbo = fbo;\n        s_viewport = viewport;\n    };\n    CubismRenderer_WebGL.prototype.preDraw = function () {\n        if (this.firstDraw) {\n            this.firstDraw = false;\n            this._anisortopy =\n                this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n                    this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\n                    this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\n        }\n        this.gl.disable(this.gl.SCISSOR_TEST);\n        this.gl.disable(this.gl.STENCIL_TEST);\n        this.gl.disable(this.gl.DEPTH_TEST);\n        this.gl.frontFace(this.gl.CW);\n        this.gl.enable(this.gl.BLEND);\n        this.gl.colorMask(true, true, true, true);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n    };\n    CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {\n        this._clippingContextBufferForMask = clip;\n    };\n    CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {\n        return this._clippingContextBufferForMask;\n    };\n    CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {\n        this._clippingContextBufferForDraw = clip;\n    };\n    CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {\n        return this._clippingContextBufferForDraw;\n    };\n    CubismRenderer_WebGL.prototype.startUp = function (gl) {\n        this.gl = gl;\n        this._clippingManager.setGL(gl);\n        CubismShader_WebGL.getInstance().setGl(gl);\n    };\n    return CubismRenderer_WebGL;\n}(cubismrenderer_1.CubismRenderer));\nexports.CubismRenderer_WebGL = CubismRenderer_WebGL;\ncubismrenderer_1.CubismRenderer.staticRelease = function () {\n    CubismRenderer_WebGL.doStaticRelease();\n};\nvar $ = __importStar(__webpack_require__(/*! ./cubismrenderer_webgl */ \"./Framework/src/rendering/cubismrenderer_webgl.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismClippingContext = $.CubismClippingContext;\n    Live2DCubismFramework.CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\n    Live2DCubismFramework.CubismRenderTextureResource = $.CubismRenderTextureResource;\n    Live2DCubismFramework.CubismRenderer_WebGL = $.CubismRenderer_WebGL;\n    Live2DCubismFramework.CubismShaderSet = $.CubismShaderSet;\n    Live2DCubismFramework.CubismShader_WebGL = $.CubismShader_WebGL;\n    Live2DCubismFramework.ShaderNames = $.ShaderNames;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/rendering/cubismrenderer_webgl.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmmap.ts":
/*!**************************************!*\
  !*** ./Framework/src/type/csmmap.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.iterator = exports.csmMap = exports.csmPair = void 0;\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar csmPair = (function () {\n    function csmPair(key, value) {\n        this.first = key == undefined ? null : key;\n        this.second = value == undefined ? null : value;\n    }\n    return csmPair;\n}());\nexports.csmPair = csmPair;\nvar csmMap = (function () {\n    function csmMap(size) {\n        if (size != undefined) {\n            if (size < 1) {\n                this._keyValues = [];\n                this._dummyValue = null;\n                this._size = 0;\n            }\n            else {\n                this._keyValues = new Array(size);\n                this._size = size;\n            }\n        }\n        else {\n            this._keyValues = [];\n            this._dummyValue = null;\n            this._size = 0;\n        }\n    }\n    csmMap.prototype.release = function () {\n        this.clear();\n    };\n    csmMap.prototype.appendKey = function (key) {\n        this.prepareCapacity(this._size + 1, false);\n        this._keyValues[this._size] = new csmPair(key);\n        this._size += 1;\n    };\n    csmMap.prototype.getValue = function (key) {\n        var found = -1;\n        for (var i = 0; i < this._size; i++) {\n            if (this._keyValues[i].first == key) {\n                found = i;\n                break;\n            }\n        }\n        if (found >= 0) {\n            return this._keyValues[found].second;\n        }\n        else {\n            this.appendKey(key);\n            return this._keyValues[this._size - 1].second;\n        }\n    };\n    csmMap.prototype.setValue = function (key, value) {\n        var found = -1;\n        for (var i = 0; i < this._size; i++) {\n            if (this._keyValues[i].first == key) {\n                found = i;\n                break;\n            }\n        }\n        if (found >= 0) {\n            this._keyValues[found].second = value;\n        }\n        else {\n            this.appendKey(key);\n            this._keyValues[this._size - 1].second = value;\n        }\n    };\n    csmMap.prototype.isExist = function (key) {\n        for (var i = 0; i < this._size; i++) {\n            if (this._keyValues[i].first == key) {\n                return true;\n            }\n        }\n        return false;\n    };\n    csmMap.prototype.clear = function () {\n        this._keyValues = void 0;\n        this._keyValues = null;\n        this._keyValues = [];\n        this._size = 0;\n    };\n    csmMap.prototype.getSize = function () {\n        return this._size;\n    };\n    csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {\n        if (newSize > this._keyValues.length) {\n            if (this._keyValues.length == 0) {\n                if (!fitToSize && newSize < csmMap.DefaultSize)\n                    newSize = csmMap.DefaultSize;\n                this._keyValues.length = newSize;\n            }\n            else {\n                if (!fitToSize && newSize < this._keyValues.length * 2)\n                    newSize = this._keyValues.length * 2;\n                this._keyValues.length = newSize;\n            }\n        }\n    };\n    csmMap.prototype.begin = function () {\n        var ite = new iterator(this, 0);\n        return ite;\n    };\n    csmMap.prototype.end = function () {\n        var ite = new iterator(this, this._size);\n        return ite;\n    };\n    csmMap.prototype.erase = function (ite) {\n        var index = ite._index;\n        if (index < 0 || this._size <= index) {\n            return ite;\n        }\n        this._keyValues.splice(index, 1);\n        --this._size;\n        var ite2 = new iterator(this, index);\n        return ite2;\n    };\n    csmMap.prototype.dumpAsInt = function () {\n        for (var i = 0; i < this._size; i++) {\n            cubismdebug_1.CubismLogDebug('{0} ,', this._keyValues[i]);\n            cubismdebug_1.CubismLogDebug('\\n');\n        }\n    };\n    csmMap.DefaultSize = 10;\n    return csmMap;\n}());\nexports.csmMap = csmMap;\nvar iterator = (function () {\n    function iterator(v, idx) {\n        this._map = v != undefined ? v : new csmMap();\n        this._index = idx != undefined ? idx : 0;\n    }\n    iterator.prototype.set = function (ite) {\n        this._index = ite._index;\n        this._map = ite._map;\n        return this;\n    };\n    iterator.prototype.preIncrement = function () {\n        ++this._index;\n        return this;\n    };\n    iterator.prototype.preDecrement = function () {\n        --this._index;\n        return this;\n    };\n    iterator.prototype.increment = function () {\n        var iteold = new iterator(this._map, this._index++);\n        return iteold;\n    };\n    iterator.prototype.decrement = function () {\n        var iteold = new iterator(this._map, this._index);\n        this._map = iteold._map;\n        this._index = iteold._index;\n        return this;\n    };\n    iterator.prototype.ptr = function () {\n        return this._map._keyValues[this._index];\n    };\n    iterator.prototype.notEqual = function (ite) {\n        return this._index != ite._index || this._map != ite._map;\n    };\n    return iterator;\n}());\nexports.iterator = iterator;\nvar $ = __importStar(__webpack_require__(/*! ./csmmap */ \"./Framework/src/type/csmmap.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.csmMap = $.csmMap;\n    Live2DCubismFramework.csmPair = $.csmPair;\n    Live2DCubismFramework.iterator = $.iterator;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/type/csmmap.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmrectf.ts":
/*!****************************************!*\
  !*** ./Framework/src/type/csmrectf.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.csmRect = void 0;\nvar csmRect = (function () {\n    function csmRect(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.width = w;\n        this.height = h;\n    }\n    csmRect.prototype.getCenterX = function () {\n        return this.x + 0.5 * this.width;\n    };\n    csmRect.prototype.getCenterY = function () {\n        return this.y + 0.5 * this.height;\n    };\n    csmRect.prototype.getRight = function () {\n        return this.x + this.width;\n    };\n    csmRect.prototype.getBottom = function () {\n        return this.y + this.height;\n    };\n    csmRect.prototype.setRect = function (r) {\n        this.x = r.x;\n        this.y = r.y;\n        this.width = r.width;\n        this.height = r.height;\n    };\n    csmRect.prototype.expand = function (w, h) {\n        this.x -= w;\n        this.y -= h;\n        this.width += w * 2.0;\n        this.height += h * 2.0;\n    };\n    return csmRect;\n}());\nexports.csmRect = csmRect;\nvar $ = __importStar(__webpack_require__(/*! ./csmrectf */ \"./Framework/src/type/csmrectf.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.csmRect = $.csmRect;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtcmVjdGYudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtcmVjdGYudHM/M2M5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOefqeW9ouW9oueKtu+8iOW6p+aomeODu+mVt+OBleOBr2Zsb2F05YCk77yJ44KS5a6a576p44GZ44KL44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBjc21SZWN0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0geCDlt6bnq69Y5bqn5qiZXG4gICAqIEBwYXJhbSB5IOS4iuerr1nluqfmqJlcbiAgICogQHBhcmFtIHcg5bmFXG4gICAqIEBwYXJhbSBoIOmrmOOBlVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHg/OiBudW1iZXIsIHk/OiBudW1iZXIsIHc/OiBudW1iZXIsIGg/OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53aWR0aCA9IHc7XG4gICAgdGhpcy5oZWlnaHQgPSBoO1xuICB9XG5cbiAgLyoqXG4gICAqIOefqeW9ouS4reWkruOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRDZW50ZXJYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueCArIDAuNSAqIHRoaXMud2lkdGg7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i5Lit5aSu44GuWeW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldENlbnRlclkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy55ICsgMC41ICogdGhpcy5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog5Y+z5YG044GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldFJpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XG4gIH1cblxuICAvKipcbiAgICog5LiL56uv44GuWeW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldEJvdHRvbSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLjgavlgKTjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHIg55+p5b2i44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc2V0UmVjdChyOiBjc21SZWN0KTogdm9pZCB7XG4gICAgdGhpcy54ID0gci54O1xuICAgIHRoaXMueSA9IHIueTtcbiAgICB0aGlzLndpZHRoID0gci53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHIuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOefqeW9ouS4reWkruOCkui7uOOBq+OBl+OBpue4puaoquOCkuaLoee4ruOBmeOCi1xuICAgKiBAcGFyYW0gdyDluYXmlrnlkJHjgavmi6HnuK7jgZnjgovph49cbiAgICogQHBhcmFtIGgg6auY44GV5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXG4gICAqL1xuICBwdWJsaWMgZXhwYW5kKHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgdGhpcy54IC09IHc7XG4gICAgdGhpcy55IC09IGg7XG4gICAgdGhpcy53aWR0aCArPSB3ICogMi4wO1xuICAgIHRoaXMuaGVpZ2h0ICs9IGggKiAyLjA7XG4gIH1cblxuICBwdWJsaWMgeDogbnVtYmVyOyAvLyDlt6bnq69Y5bqn5qiZXG4gIHB1YmxpYyB5OiBudW1iZXI7IC8vIOS4iuerr1nluqfmqJlcbiAgcHVibGljIHdpZHRoOiBudW1iZXI7IC8vIOW5hVxuICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7IC8vIOmrmOOBlVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc21yZWN0Zic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgY3NtUmVjdCA9ICQuY3NtUmVjdDtcbiAgZXhwb3J0IHR5cGUgY3NtUmVjdCA9ICQuY3NtUmVjdDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFBQTtBQXRFQTtBQXlFQTtBQUVBO0FBQUE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/type/csmrectf.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmstring.ts":
/*!*****************************************!*\
  !*** ./Framework/src/type/csmstring.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.csmString = void 0;\nvar csmString = (function () {\n    function csmString(s) {\n        this.s = s;\n    }\n    csmString.prototype.append = function (c, length) {\n        this.s += length !== undefined ? c.substr(0, length) : c;\n        return this;\n    };\n    csmString.prototype.expansion = function (length, v) {\n        for (var i = 0; i < length; i++) {\n            this.append(v);\n        }\n        return this;\n    };\n    csmString.prototype.getBytes = function () {\n        return encodeURIComponent(this.s).replace(/%../g, 'x').length;\n    };\n    csmString.prototype.getLength = function () {\n        return this.s.length;\n    };\n    csmString.prototype.isLess = function (s) {\n        return this.s < s.s;\n    };\n    csmString.prototype.isGreat = function (s) {\n        return this.s > s.s;\n    };\n    csmString.prototype.isEqual = function (s) {\n        return this.s == s;\n    };\n    csmString.prototype.isEmpty = function () {\n        return this.s.length == 0;\n    };\n    return csmString;\n}());\nexports.csmString = csmString;\nvar $ = __importStar(__webpack_require__(/*! ./csmstring */ \"./Framework/src/type/csmstring.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.csmString = $.csmString;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3Ntc3RyaW5nLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXN0cmluZy50cz9iNTllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICog5paH5a2X5YiX44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBjc21TdHJpbmcge1xuICAvKipcbiAgICog5paH5a2X5YiX44KS5b6M5pa544Gr6L+95Yqg44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBjIOi/veWKoOOBmeOCi+aWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIGFwcGVuZChjOiBzdHJpbmcsIGxlbmd0aD86IG51bWJlcik6IGNzbVN0cmluZyB7XG4gICAgdGhpcy5zICs9IGxlbmd0aCAhPT0gdW5kZWZpbmVkID8gYy5zdWJzdHIoMCwgbGVuZ3RoKSA6IGM7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfjgrXjgqTjgrrjgpLmi6HlvLXjgZfjgabmloflrZfjgpLln4vjgoHjgotcbiAgICogQHBhcmFtIGxlbmd0aCAgICDmi6HlvLXjgZnjgovmloflrZfmlbBcbiAgICogQHBhcmFtIHYgICAgICAgICDln4vjgoHjgovmloflrZdcbiAgICogQHJldHVybiDmm7TmlrDjgZXjgozjgZ/mloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBleHBhbnNpb24obGVuZ3RoOiBudW1iZXIsIHY6IHN0cmluZyk6IGNzbVN0cmluZyB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5hcHBlbmQodik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX44Gu6ZW344GV44KS44OQ44Kk44OI5pWw44Gn5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Qnl0ZXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucykucmVwbGFjZSgvJS4uL2csICd4JykubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OBrumVt+OBleOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnMubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+avlOi8gyA8XG4gICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxuICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWkp+OBjeOBhFxuICAgKi9cbiAgcHVibGljIGlzTGVzcyhzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zIDwgcy5zO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+avlOi8gyA+XG4gICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWkp+OBjeOBhFxuICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxuICAgKi9cbiAgcHVibGljIGlzR3JlYXQoczogY3NtU3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucyA+IHMucztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfmr5TovIMgPT1cbiAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44Go562J44GX44GEXG4gICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44Go55Ww44Gq44KLXG4gICAqL1xuICBwdWJsaWMgaXNFcXVhbChzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zID09IHM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX44GM56m644GL44Gp44GG44GLXG4gICAqIEByZXR1cm4gdHJ1ZTog56m644Gu5paH5a2X5YiXXG4gICAqIEByZXR1cm4gZmFsc2U6IOWApOOBjOioreWumuOBleOCjOOBpuOBhOOCi1xuICAgKi9cbiAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucy5sZW5ndGggPT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpIHtcbiAgICB0aGlzLnMgPSBzO1xuICB9XG5cbiAgczogc3RyaW5nO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc21zdHJpbmcnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbVN0cmluZyA9ICQuY3NtU3RyaW5nO1xuICBleHBvcnQgdHlwZSBjc21TdHJpbmcgPSAkLmNzbVN0cmluZztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBO0FBbUZBO0FBQ0E7QUFDQTtBQTlFQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVVBO0FBQUE7QUF4RkE7QUEyRkE7QUFFQTtBQUFBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/type/csmstring.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmvector.ts":
/*!*****************************************!*\
  !*** ./Framework/src/type/csmvector.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.iterator = exports.csmVector = void 0;\nvar csmVector = (function () {\n    function csmVector(initialCapacity) {\n        if (initialCapacity === void 0) { initialCapacity = 0; }\n        if (initialCapacity < 1) {\n            this._ptr = [];\n            this._capacity = 0;\n            this._size = 0;\n        }\n        else {\n            this._ptr = new Array(initialCapacity);\n            this._capacity = initialCapacity;\n            this._size = 0;\n        }\n    }\n    csmVector.prototype.at = function (index) {\n        return this._ptr[index];\n    };\n    csmVector.prototype.set = function (index, value) {\n        this._ptr[index] = value;\n    };\n    csmVector.prototype.get = function (offset) {\n        if (offset === void 0) { offset = 0; }\n        var ret = new Array();\n        for (var i = offset; i < this._size; i++) {\n            ret.push(this._ptr[i]);\n        }\n        return ret;\n    };\n    csmVector.prototype.pushBack = function (value) {\n        if (this._size >= this._capacity) {\n            this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);\n        }\n        this._ptr[this._size++] = value;\n    };\n    csmVector.prototype.clear = function () {\n        this._ptr.length = 0;\n        this._size = 0;\n    };\n    csmVector.prototype.getSize = function () {\n        return this._size;\n    };\n    csmVector.prototype.assign = function (newSize, value) {\n        var curSize = this._size;\n        if (curSize < newSize) {\n            this.prepareCapacity(newSize);\n        }\n        for (var i = 0; i < newSize; i++) {\n            this._ptr[i] = value;\n        }\n        this._size = newSize;\n    };\n    csmVector.prototype.resize = function (newSize, value) {\n        if (value === void 0) { value = null; }\n        this.updateSize(newSize, value, true);\n    };\n    csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {\n        if (value === void 0) { value = null; }\n        if (callPlacementNew === void 0) { callPlacementNew = true; }\n        var curSize = this._size;\n        if (curSize < newSize) {\n            this.prepareCapacity(newSize);\n            if (callPlacementNew) {\n                for (var i = this._size; i < newSize; i++) {\n                    if (typeof value == 'function') {\n                        this._ptr[i] = JSON.parse(JSON.stringify(new value()));\n                    }\n                    else {\n                        this._ptr[i] = value;\n                    }\n                }\n            }\n            else {\n                for (var i = this._size; i < newSize; i++) {\n                    this._ptr[i] = value;\n                }\n            }\n        }\n        else {\n            var sub = this._size - newSize;\n            this._ptr.splice(this._size - sub, sub);\n        }\n        this._size = newSize;\n    };\n    csmVector.prototype.insert = function (position, begin, end) {\n        var dstSi = position._index;\n        var srcSi = begin._index;\n        var srcEi = end._index;\n        var addCount = srcEi - srcSi;\n        this.prepareCapacity(this._size + addCount);\n        var addSize = this._size - dstSi;\n        if (addSize > 0) {\n            for (var i = 0; i < addSize; i++) {\n                this._ptr.splice(dstSi + i, 0, null);\n            }\n        }\n        for (var i = srcSi; i < srcEi; i++, dstSi++) {\n            this._ptr[dstSi] = begin._vector._ptr[i];\n        }\n        this._size = this._size + addCount;\n    };\n    csmVector.prototype.remove = function (index) {\n        if (index < 0 || this._size <= index) {\n            return false;\n        }\n        this._ptr.splice(index, 1);\n        --this._size;\n        return true;\n    };\n    csmVector.prototype.erase = function (ite) {\n        var index = ite._index;\n        if (index < 0 || this._size <= index) {\n            return ite;\n        }\n        this._ptr.splice(index, 1);\n        --this._size;\n        var ite2 = new iterator(this, index);\n        return ite2;\n    };\n    csmVector.prototype.prepareCapacity = function (newSize) {\n        if (newSize > this._capacity) {\n            if (this._capacity == 0) {\n                this._ptr = new Array(newSize);\n                this._capacity = newSize;\n            }\n            else {\n                this._ptr.length = newSize;\n                this._capacity = newSize;\n            }\n        }\n    };\n    csmVector.prototype.begin = function () {\n        var ite = this._size == 0 ? this.end() : new iterator(this, 0);\n        return ite;\n    };\n    csmVector.prototype.end = function () {\n        var ite = new iterator(this, this._size);\n        return ite;\n    };\n    csmVector.prototype.getOffset = function (offset) {\n        var newVector = new csmVector();\n        newVector._ptr = this.get(offset);\n        newVector._size = this.get(offset).length;\n        newVector._capacity = this.get(offset).length;\n        return newVector;\n    };\n    csmVector.s_defaultSize = 10;\n    return csmVector;\n}());\nexports.csmVector = csmVector;\nvar iterator = (function () {\n    function iterator(v, index) {\n        this._vector = v != undefined ? v : null;\n        this._index = index != undefined ? index : 0;\n    }\n    iterator.prototype.set = function (ite) {\n        this._index = ite._index;\n        this._vector = ite._vector;\n        return this;\n    };\n    iterator.prototype.preIncrement = function () {\n        ++this._index;\n        return this;\n    };\n    iterator.prototype.preDecrement = function () {\n        --this._index;\n        return this;\n    };\n    iterator.prototype.increment = function () {\n        var iteold = new iterator(this._vector, this._index++);\n        return iteold;\n    };\n    iterator.prototype.decrement = function () {\n        var iteold = new iterator(this._vector, this._index--);\n        return iteold;\n    };\n    iterator.prototype.ptr = function () {\n        return this._vector._ptr[this._index];\n    };\n    iterator.prototype.substitution = function (ite) {\n        this._index = ite._index;\n        this._vector = ite._vector;\n        return this;\n    };\n    iterator.prototype.notEqual = function (ite) {\n        return this._index != ite._index || this._vector != ite._vector;\n    };\n    return iterator;\n}());\nexports.iterator = iterator;\nvar $ = __importStar(__webpack_require__(/*! ./csmvector */ \"./Framework/src/type/csmvector.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.csmVector = $.csmVector;\n    Live2DCubismFramework.iterator = $.iterator;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/type/csmvector.ts\n");

/***/ }),

/***/ "./Framework/src/utils/cubismdebug.ts":
/*!********************************************!*\
  !*** ./Framework/src/utils/cubismdebug.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.CubismDebug = exports.CubismLogError = exports.CubismLogWarning = exports.CubismLogInfo = exports.CubismLogDebug = exports.CubismLogVerbose = exports.CSM_ASSERT = exports.CubismLogPrintIn = exports.CubismLogPrint = void 0;\nvar cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ \"./Framework/src/cubismframeworkconfig.ts\");\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nexports.CubismLogPrint = function (level, fmt, args) {\n    CubismDebug.print(level, '[CSM]' + fmt, args);\n};\nexports.CubismLogPrintIn = function (level, fmt, args) {\n    exports.CubismLogPrint(level, fmt + '\\n', args);\n};\nexports.CSM_ASSERT = function (expr) {\n    console.assert(expr);\n};\nif (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {\n    exports.CubismLogVerbose = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\n    };\n    exports.CubismLogDebug = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);\n    };\n    exports.CubismLogInfo = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\n    };\n    exports.CubismLogWarning = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n    };\n    exports.CubismLogError = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\n    };\n}\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {\n    exports.CubismLogDebug = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);\n    };\n    exports.CubismLogInfo = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\n    };\n    exports.CubismLogWarning = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n    };\n    exports.CubismLogError = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\n    };\n}\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {\n    exports.CubismLogInfo = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\n    };\n    exports.CubismLogWarning = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n    };\n    exports.CubismLogError = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\n    };\n}\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {\n    exports.CubismLogWarning = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n    };\n    exports.CubismLogError = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\n    };\n}\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {\n    exports.CubismLogError = function (fmt) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\n    };\n}\nvar CubismDebug = (function () {\n    function CubismDebug() {\n    }\n    CubismDebug.print = function (logLevel, format, args) {\n        if (logLevel < live2dcubismframework_1.CubismFramework.getLoggingLevel()) {\n            return;\n        }\n        var logPrint = live2dcubismframework_1.CubismFramework.coreLogFunction;\n        if (!logPrint)\n            return;\n        var buffer = format.replace(/\\{(\\d+)\\}/g, function (m, k) {\n            return args[k];\n        });\n        logPrint(buffer);\n    };\n    CubismDebug.dumpBytes = function (logLevel, data, length) {\n        for (var i = 0; i < length; i++) {\n            if (i % 16 == 0 && i > 0)\n                this.print(logLevel, '\\n');\n            else if (i % 8 == 0 && i > 0)\n                this.print(logLevel, '  ');\n            this.print(logLevel, '{0} ', [data[i] & 0xff]);\n        }\n        this.print(logLevel, '\\n');\n    };\n    return CubismDebug;\n}());\nexports.CubismDebug = CubismDebug;\nvar $ = __importStar(__webpack_require__(/*! ./cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismDebug = $.CubismDebug;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/utils/cubismdebug.ts\n");

/***/ }),

/***/ "./Framework/src/utils/cubismjson.ts":
/*!*******************************************!*\
  !*** ./Framework/src/utils/cubismjson.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Live2DCubismFramework = exports.JsonMap = exports.JsonArray = exports.JsonNullvalue = exports.JsonError = exports.JsonString = exports.JsonBoolean = exports.JsonFloat = exports.CubismJson = exports.Value = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"./Framework/src/type/csmmap.ts\");\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\nvar CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\nvar Value = (function () {\n    function Value() {\n    }\n    Value.prototype.getRawString = function (defaultValue, indent) {\n        return this.getString(defaultValue, indent);\n    };\n    Value.prototype.toInt = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = 0; }\n        return defaultValue;\n    };\n    Value.prototype.toFloat = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = 0; }\n        return defaultValue;\n    };\n    Value.prototype.toBoolean = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = false; }\n        return defaultValue;\n    };\n    Value.prototype.getSize = function () {\n        return 0;\n    };\n    Value.prototype.getArray = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = null; }\n        return defaultValue;\n    };\n    Value.prototype.getVector = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = new csmvector_1.csmVector(); }\n        return defaultValue;\n    };\n    Value.prototype.getMap = function (defaultValue) {\n        return defaultValue;\n    };\n    Value.prototype.getValueByIndex = function (index) {\n        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\n    };\n    Value.prototype.getValueByString = function (s) {\n        return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\n    };\n    Value.prototype.getKeys = function () {\n        return Value.s_dummyKeys;\n    };\n    Value.prototype.isError = function () {\n        return false;\n    };\n    Value.prototype.isNull = function () {\n        return false;\n    };\n    Value.prototype.isBool = function () {\n        return false;\n    };\n    Value.prototype.isFloat = function () {\n        return false;\n    };\n    Value.prototype.isString = function () {\n        return false;\n    };\n    Value.prototype.isArray = function () {\n        return false;\n    };\n    Value.prototype.isMap = function () {\n        return false;\n    };\n    Value.prototype.equals = function (value) {\n        return false;\n    };\n    Value.prototype.isStatic = function () {\n        return false;\n    };\n    Value.prototype.setErrorNotForClientCall = function (errorStr) {\n        return JsonError.errorValue;\n    };\n    Value.staticInitializeNotForClientCall = function () {\n        JsonBoolean.trueValue = new JsonBoolean(true);\n        JsonBoolean.falseValue = new JsonBoolean(false);\n        Value.errorValue = new JsonError('ERROR', true);\n        Value.nullValue = new JsonNullvalue();\n        Value.s_dummyKeys = new csmvector_1.csmVector();\n    };\n    Value.staticReleaseNotForClientCall = function () {\n        JsonBoolean.trueValue = null;\n        JsonBoolean.falseValue = null;\n        Value.errorValue = null;\n        Value.nullValue = null;\n        Value.s_dummyKeys = null;\n    };\n    return Value;\n}());\nexports.Value = Value;\nvar CubismJson = (function () {\n    function CubismJson(buffer, length) {\n        this._error = null;\n        this._lineCount = 0;\n        this._root = null;\n        if (buffer != undefined) {\n            this.parseBytes(buffer, length);\n        }\n    }\n    CubismJson.create = function (buffer, size) {\n        var json = new CubismJson();\n        var succeeded = json.parseBytes(buffer, size);\n        if (!succeeded) {\n            CubismJson.delete(json);\n            return null;\n        }\n        else {\n            return json;\n        }\n    };\n    CubismJson.delete = function (instance) {\n        instance = null;\n    };\n    CubismJson.prototype.getRoot = function () {\n        return this._root;\n    };\n    CubismJson.prototype.arrayBufferToString = function (buffer) {\n        var uint8Array = new Uint8Array(buffer);\n        var str = '';\n        for (var i = 0, len = uint8Array.length; i < len; ++i) {\n            str += '%' + this.pad(uint8Array[i].toString(16));\n        }\n        str = decodeURIComponent(str);\n        return str;\n    };\n    CubismJson.prototype.pad = function (n) {\n        return n.length < 2 ? '0' + n : n;\n    };\n    CubismJson.prototype.parseBytes = function (buffer, size) {\n        var endPos = new Array(1);\n        var decodeBuffer = this.arrayBufferToString(buffer);\n        this._root = this.parseValue(decodeBuffer, size, 0, endPos);\n        if (this._error) {\n            var strbuf = '\\0';\n            strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\n            this._root = new JsonString(strbuf);\n            cubismdebug_1.CubismLogInfo('{0}', this._root.getRawString());\n            return false;\n        }\n        else if (this._root == null) {\n            this._root = new JsonError(new csmstring_1.csmString(this._error), false);\n            return false;\n        }\n        return true;\n    };\n    CubismJson.prototype.getParseError = function () {\n        return this._error;\n    };\n    CubismJson.prototype.checkEndOfFile = function () {\n        return this._root.getArray()[1].equals('EOF');\n    };\n    CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {\n        if (this._error)\n            return null;\n        var o = null;\n        var i = begin;\n        var f;\n        for (; i < length; i++) {\n            var c = buffer[i];\n            switch (c) {\n                case '-':\n                case '.':\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9': {\n                    var afterString = new Array(1);\n                    f = live2dcubismframework_1.strtod(buffer.slice(i), afterString);\n                    outEndPos[0] = buffer.indexOf(afterString[0]);\n                    return new JsonFloat(f);\n                }\n                case '\"':\n                    return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));\n                case '[':\n                    o = this.parseArray(buffer, length, i + 1, outEndPos);\n                    return o;\n                case '{':\n                    o = this.parseObject(buffer, length, i + 1, outEndPos);\n                    return o;\n                case 'n':\n                    if (i + 3 < length) {\n                        o = new JsonNullvalue();\n                        outEndPos[0] = i + 4;\n                    }\n                    else {\n                        this._error = 'parse null';\n                    }\n                    return o;\n                case 't':\n                    if (i + 3 < length) {\n                        o = JsonBoolean.trueValue;\n                        outEndPos[0] = i + 4;\n                    }\n                    else {\n                        this._error = 'parse true';\n                    }\n                    return o;\n                case 'f':\n                    if (i + 4 < length) {\n                        o = JsonBoolean.falseValue;\n                        outEndPos[0] = i + 5;\n                    }\n                    else {\n                        this._error = \"illegal ',' position\";\n                    }\n                    return o;\n                case ',':\n                    this._error = \"illegal ',' position\";\n                    return null;\n                case ']':\n                    outEndPos[0] = i;\n                    return null;\n                case '\\n':\n                    this._lineCount++;\n                case ' ':\n                case '\\t':\n                case '\\r':\n                default:\n                    break;\n            }\n        }\n        this._error = 'illegal end of value';\n        return null;\n    };\n    CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {\n        if (this._error)\n            return null;\n        var i = begin;\n        var c, c2;\n        var ret = new csmstring_1.csmString('');\n        var bufStart = begin;\n        for (; i < length; i++) {\n            c = string[i];\n            switch (c) {\n                case '\"': {\n                    outEndPos[0] = i + 1;\n                    ret.append(string.slice(bufStart), i - bufStart);\n                    return ret.s;\n                }\n                case '//': {\n                    i++;\n                    if (i - 1 > bufStart) {\n                        ret.append(string.slice(bufStart), i - bufStart);\n                    }\n                    bufStart = i + 1;\n                    if (i < length) {\n                        c2 = string[i];\n                        switch (c2) {\n                            case '\\\\':\n                                ret.expansion(1, '\\\\');\n                                break;\n                            case '\"':\n                                ret.expansion(1, '\"');\n                                break;\n                            case '/':\n                                ret.expansion(1, '/');\n                                break;\n                            case 'b':\n                                ret.expansion(1, '\\b');\n                                break;\n                            case 'f':\n                                ret.expansion(1, '\\f');\n                                break;\n                            case 'n':\n                                ret.expansion(1, '\\n');\n                                break;\n                            case 'r':\n                                ret.expansion(1, '\\r');\n                                break;\n                            case 't':\n                                ret.expansion(1, '\\t');\n                                break;\n                            case 'u':\n                                this._error = 'parse string/unicord escape not supported';\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    else {\n                        this._error = 'parse string/escape error';\n                    }\n                }\n                default: {\n                    break;\n                }\n            }\n        }\n        this._error = 'parse string/illegal end';\n        return null;\n    };\n    CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {\n        if (this._error)\n            return null;\n        var ret = new JsonMap();\n        var key = '';\n        var i = begin;\n        var c = '';\n        var localRetEndPos2 = Array(1);\n        var ok = false;\n        for (; i < length; i++) {\n            FOR_LOOP: for (; i < length; i++) {\n                c = buffer[i];\n                switch (c) {\n                    case '\"':\n                        key = this.parseString(buffer, length, i + 1, localRetEndPos2);\n                        if (this._error) {\n                            return null;\n                        }\n                        i = localRetEndPos2[0];\n                        ok = true;\n                        break FOR_LOOP;\n                    case '}':\n                        outEndPos[0] = i + 1;\n                        return ret;\n                    case ':':\n                        this._error = \"illegal ':' position\";\n                        break;\n                    case '\\n':\n                        this._lineCount++;\n                    default:\n                        break;\n                }\n            }\n            if (!ok) {\n                this._error = 'key not found';\n                return null;\n            }\n            ok = false;\n            FOR_LOOP2: for (; i < length; i++) {\n                c = buffer[i];\n                switch (c) {\n                    case ':':\n                        ok = true;\n                        i++;\n                        break FOR_LOOP2;\n                    case '}':\n                        this._error = \"illegal '}' position\";\n                        break;\n                    case '\\n':\n                        this._lineCount++;\n                    default:\n                        break;\n                }\n            }\n            if (!ok) {\n                this._error = \"':' not found\";\n                return null;\n            }\n            var value = this.parseValue(buffer, length, i, localRetEndPos2);\n            if (this._error) {\n                return null;\n            }\n            i = localRetEndPos2[0];\n            ret.put(key, value);\n            FOR_LOOP3: for (; i < length; i++) {\n                c = buffer[i];\n                switch (c) {\n                    case ',':\n                        break FOR_LOOP3;\n                    case '}':\n                        outEndPos[0] = i + 1;\n                        return ret;\n                    case '\\n':\n                        this._lineCount++;\n                    default:\n                        break;\n                }\n            }\n        }\n        this._error = 'illegal end of perseObject';\n        return null;\n    };\n    CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {\n        if (this._error)\n            return null;\n        var ret = new JsonArray();\n        var i = begin;\n        var c;\n        var localRetEndpos2 = new Array(1);\n        for (; i < length; i++) {\n            var value = this.parseValue(buffer, length, i, localRetEndpos2);\n            if (this._error) {\n                return null;\n            }\n            i = localRetEndpos2[0];\n            if (value) {\n                ret.add(value);\n            }\n            FOR_LOOP: for (; i < length; i++) {\n                c = buffer[i];\n                switch (c) {\n                    case ',':\n                        break FOR_LOOP;\n                    case ']':\n                        outEndPos[0] = i + 1;\n                        return ret;\n                    case '\\n':\n                        ++this._lineCount;\n                    default:\n                        break;\n                }\n            }\n        }\n        ret = void 0;\n        this._error = 'illegal end of parseObject';\n        return null;\n    };\n    return CubismJson;\n}());\nexports.CubismJson = CubismJson;\nvar JsonFloat = (function (_super) {\n    __extends(JsonFloat, _super);\n    function JsonFloat(v) {\n        var _this = _super.call(this) || this;\n        _this._value = v;\n        return _this;\n    }\n    JsonFloat.prototype.isFloat = function () {\n        return true;\n    };\n    JsonFloat.prototype.getString = function (defaultValue, indent) {\n        var strbuf = '\\0';\n        this._value = parseFloat(strbuf);\n        this._stringBuffer = strbuf;\n        return this._stringBuffer;\n    };\n    JsonFloat.prototype.toInt = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = 0; }\n        return parseInt(this._value.toString());\n    };\n    JsonFloat.prototype.toFloat = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = 0.0; }\n        return this._value;\n    };\n    JsonFloat.prototype.equals = function (value) {\n        if ('number' === typeof value) {\n            if (Math.round(value)) {\n                return false;\n            }\n            else {\n                return value == this._value;\n            }\n        }\n        return false;\n    };\n    return JsonFloat;\n}(Value));\nexports.JsonFloat = JsonFloat;\nvar JsonBoolean = (function (_super) {\n    __extends(JsonBoolean, _super);\n    function JsonBoolean(v) {\n        var _this = _super.call(this) || this;\n        _this._boolValue = v;\n        return _this;\n    }\n    JsonBoolean.prototype.isBool = function () {\n        return true;\n    };\n    JsonBoolean.prototype.toBoolean = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = false; }\n        return this._boolValue;\n    };\n    JsonBoolean.prototype.getString = function (defaultValue, indent) {\n        this._stringBuffer = this._boolValue ? 'true' : 'false';\n        return this._stringBuffer;\n    };\n    JsonBoolean.prototype.equals = function (value) {\n        if ('boolean' === typeof value) {\n            return value == this._boolValue;\n        }\n        return false;\n    };\n    JsonBoolean.prototype.isStatic = function () {\n        return true;\n    };\n    return JsonBoolean;\n}(Value));\nexports.JsonBoolean = JsonBoolean;\nvar JsonString = (function (_super) {\n    __extends(JsonString, _super);\n    function JsonString(s) {\n        var _this = _super.call(this) || this;\n        if ('string' === typeof s) {\n            _this._stringBuffer = s;\n        }\n        if (s instanceof csmstring_1.csmString) {\n            _this._stringBuffer = s.s;\n        }\n        return _this;\n    }\n    JsonString.prototype.isString = function () {\n        return true;\n    };\n    JsonString.prototype.getString = function (defaultValue, indent) {\n        return this._stringBuffer;\n    };\n    JsonString.prototype.equals = function (value) {\n        if ('string' === typeof value) {\n            return this._stringBuffer == value;\n        }\n        if (value instanceof csmstring_1.csmString) {\n            return this._stringBuffer == value.s;\n        }\n        return false;\n    };\n    return JsonString;\n}(Value));\nexports.JsonString = JsonString;\nvar JsonError = (function (_super) {\n    __extends(JsonError, _super);\n    function JsonError(s, isStatic) {\n        var _this = this;\n        if ('string' === typeof s) {\n            _this = _super.call(this, s) || this;\n        }\n        else {\n            _this = _super.call(this, s) || this;\n        }\n        _this._isStatic = isStatic;\n        return _this;\n    }\n    JsonError.prototype.isStatic = function () {\n        return this._isStatic;\n    };\n    JsonError.prototype.setErrorNotForClientCall = function (s) {\n        this._stringBuffer = s;\n        return this;\n    };\n    JsonError.prototype.isError = function () {\n        return true;\n    };\n    return JsonError;\n}(JsonString));\nexports.JsonError = JsonError;\nvar JsonNullvalue = (function (_super) {\n    __extends(JsonNullvalue, _super);\n    function JsonNullvalue() {\n        var _this = _super.call(this) || this;\n        _this._stringBuffer = 'NullValue';\n        return _this;\n    }\n    JsonNullvalue.prototype.isNull = function () {\n        return true;\n    };\n    JsonNullvalue.prototype.getString = function (defaultValue, indent) {\n        return this._stringBuffer;\n    };\n    JsonNullvalue.prototype.isStatic = function () {\n        return true;\n    };\n    JsonNullvalue.prototype.setErrorNotForClientCall = function (s) {\n        this._stringBuffer = s;\n        return JsonError.nullValue;\n    };\n    return JsonNullvalue;\n}(Value));\nexports.JsonNullvalue = JsonNullvalue;\nvar JsonArray = (function (_super) {\n    __extends(JsonArray, _super);\n    function JsonArray() {\n        var _this = _super.call(this) || this;\n        _this._array = new csmvector_1.csmVector();\n        return _this;\n    }\n    JsonArray.prototype.release = function () {\n        for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {\n            var v = ite.ptr();\n            if (v && !v.isStatic()) {\n                v = void 0;\n                v = null;\n            }\n        }\n    };\n    JsonArray.prototype.isArray = function () {\n        return true;\n    };\n    JsonArray.prototype.getValueByIndex = function (index) {\n        if (index < 0 || this._array.getSize() <= index) {\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);\n        }\n        var v = this._array.at(index);\n        if (v == null) {\n            return Value.nullValue;\n        }\n        return v;\n    };\n    JsonArray.prototype.getValueByString = function (s) {\n        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\n    };\n    JsonArray.prototype.getString = function (defaultValue, indent) {\n        var stringBuffer = indent + '[\\n';\n        for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {\n            var v = ite.ptr();\n            this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\n        }\n        this._stringBuffer = stringBuffer + indent + ']\\n';\n        return this._stringBuffer;\n    };\n    JsonArray.prototype.add = function (v) {\n        this._array.pushBack(v);\n    };\n    JsonArray.prototype.getVector = function (defaultValue) {\n        if (defaultValue === void 0) { defaultValue = null; }\n        return this._array;\n    };\n    JsonArray.prototype.getSize = function () {\n        return this._array.getSize();\n    };\n    return JsonArray;\n}(Value));\nexports.JsonArray = JsonArray;\nvar JsonMap = (function (_super) {\n    __extends(JsonMap, _super);\n    function JsonMap() {\n        var _this = _super.call(this) || this;\n        _this._map = new csmmap_1.csmMap();\n        return _this;\n    }\n    JsonMap.prototype.release = function () {\n        var ite = this._map.begin();\n        while (ite.notEqual(this._map.end())) {\n            var v = ite.ptr().second;\n            if (v && !v.isStatic()) {\n                v = void 0;\n                v = null;\n            }\n            ite.preIncrement();\n        }\n    };\n    JsonMap.prototype.isMap = function () {\n        return true;\n    };\n    JsonMap.prototype.getValueByString = function (s) {\n        if (s instanceof csmstring_1.csmString) {\n            var ret = this._map.getValue(s.s);\n            if (ret == null) {\n                return Value.nullValue;\n            }\n            return ret;\n        }\n        for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {\n            if (iter.ptr().first == s) {\n                if (iter.ptr().second == null) {\n                    return Value.nullValue;\n                }\n                return iter.ptr().second;\n            }\n        }\n        return Value.nullValue;\n    };\n    JsonMap.prototype.getValueByIndex = function (index) {\n        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\n    };\n    JsonMap.prototype.getString = function (defaultValue, indent) {\n        this._stringBuffer = indent + '{\\n';\n        var ite = this._map.begin();\n        while (ite.notEqual(this._map.end())) {\n            var key = ite.ptr().first;\n            var v = ite.ptr().second;\n            this._stringBuffer +=\n                indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\n            ite.preIncrement();\n        }\n        this._stringBuffer += indent + '}\\n';\n        return this._stringBuffer;\n    };\n    JsonMap.prototype.getMap = function (defaultValue) {\n        return this._map;\n    };\n    JsonMap.prototype.put = function (key, v) {\n        this._map.setValue(key, v);\n    };\n    JsonMap.prototype.getKeys = function () {\n        if (!this._keys) {\n            this._keys = new csmvector_1.csmVector();\n            var ite = this._map.begin();\n            while (ite.notEqual(this._map.end())) {\n                var key = ite.ptr().first;\n                this._keys.pushBack(key);\n                ite.preIncrement();\n            }\n        }\n        return this._keys;\n    };\n    JsonMap.prototype.getSize = function () {\n        return this._keys.getSize();\n    };\n    return JsonMap;\n}(Value));\nexports.JsonMap = JsonMap;\nvar $ = __importStar(__webpack_require__(/*! ./cubismjson */ \"./Framework/src/utils/cubismjson.ts\"));\nvar Live2DCubismFramework;\n(function (Live2DCubismFramework) {\n    Live2DCubismFramework.CubismJson = $.CubismJson;\n    Live2DCubismFramework.JsonArray = $.JsonArray;\n    Live2DCubismFramework.JsonBoolean = $.JsonBoolean;\n    Live2DCubismFramework.JsonError = $.JsonError;\n    Live2DCubismFramework.JsonFloat = $.JsonFloat;\n    Live2DCubismFramework.JsonMap = $.JsonMap;\n    Live2DCubismFramework.JsonNullvalue = $.JsonNullvalue;\n    Live2DCubismFramework.JsonString = $.JsonString;\n    Live2DCubismFramework.Value = $.Value;\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/utils/cubismjson.ts\n");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      resolve(new Response(body, options))\n    }\n\n    xhr.onerror = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.ontimeout = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.onabort = function() {\n      reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    xhr.open(request.method, request.url, true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr && support.blob) {\n      xhr.responseType = 'blob'\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n");

/***/ }),

/***/ "./src/box2d/collision/b2_broad_phase.ts":
/*!***********************************************!*\
  !*** ./src/box2d/collision/b2_broad_phase.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2BroadPhase = exports.b2Pair = void 0;\nvar b2_dynamic_tree_1 = __webpack_require__(/*! ./b2_dynamic_tree */ \"./src/box2d/collision/b2_dynamic_tree.ts\");\nvar b2Pair = (function () {\n    function b2Pair(proxyA, proxyB) {\n        this.proxyA = proxyA;\n        this.proxyB = proxyB;\n    }\n    return b2Pair;\n}());\nexports.b2Pair = b2Pair;\nvar b2BroadPhase = (function () {\n    function b2BroadPhase() {\n        this.m_tree = new b2_dynamic_tree_1.b2DynamicTree();\n        this.m_proxyCount = 0;\n        this.m_moveCount = 0;\n        this.m_moveBuffer = [];\n        this.m_pairCount = 0;\n        this.m_pairBuffer = [];\n    }\n    b2BroadPhase.prototype.CreateProxy = function (aabb, userData) {\n        var proxy = this.m_tree.CreateProxy(aabb, userData);\n        ++this.m_proxyCount;\n        this.BufferMove(proxy);\n        return proxy;\n    };\n    b2BroadPhase.prototype.DestroyProxy = function (proxy) {\n        this.UnBufferMove(proxy);\n        --this.m_proxyCount;\n        this.m_tree.DestroyProxy(proxy);\n    };\n    b2BroadPhase.prototype.MoveProxy = function (proxy, aabb, displacement) {\n        var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);\n        if (buffer) {\n            this.BufferMove(proxy);\n        }\n    };\n    b2BroadPhase.prototype.TouchProxy = function (proxy) {\n        this.BufferMove(proxy);\n    };\n    b2BroadPhase.prototype.GetProxyCount = function () {\n        return this.m_proxyCount;\n    };\n    b2BroadPhase.prototype.UpdatePairs = function (callback) {\n        var _this = this;\n        this.m_pairCount = 0;\n        var _loop_1 = function (i) {\n            var queryProxy = this_1.m_moveBuffer[i];\n            if (queryProxy === null) {\n                return \"continue\";\n            }\n            var fatAABB = queryProxy.aabb;\n            this_1.m_tree.Query(fatAABB, function (proxy) {\n                if (proxy.m_id === queryProxy.m_id) {\n                    return true;\n                }\n                var moved = proxy.moved;\n                if (moved && proxy.m_id > queryProxy.m_id) {\n                    return true;\n                }\n                var proxyA;\n                var proxyB;\n                if (proxy.m_id < queryProxy.m_id) {\n                    proxyA = proxy;\n                    proxyB = queryProxy;\n                }\n                else {\n                    proxyA = queryProxy;\n                    proxyB = proxy;\n                }\n                if (_this.m_pairCount === _this.m_pairBuffer.length) {\n                    _this.m_pairBuffer[_this.m_pairCount] = new b2Pair(proxyA, proxyB);\n                }\n                else {\n                    var pair = _this.m_pairBuffer[_this.m_pairCount];\n                    pair.proxyA = proxyA;\n                    pair.proxyB = proxyB;\n                }\n                ++_this.m_pairCount;\n                return true;\n            });\n        };\n        var this_1 = this;\n        for (var i = 0; i < this.m_moveCount; ++i) {\n            _loop_1(i);\n        }\n        for (var i = 0; i < this.m_pairCount; ++i) {\n            var primaryPair = this.m_pairBuffer[i];\n            var userDataA = primaryPair.proxyA.userData;\n            var userDataB = primaryPair.proxyB.userData;\n            callback(userDataA, userDataB);\n        }\n        for (var i = 0; i < this.m_moveCount; ++i) {\n            var proxy = this.m_moveBuffer[i];\n            if (proxy === null) {\n                continue;\n            }\n            proxy.moved = false;\n        }\n        this.m_moveCount = 0;\n    };\n    b2BroadPhase.prototype.Query = function (aabb, callback) {\n        this.m_tree.Query(aabb, callback);\n    };\n    b2BroadPhase.prototype.QueryPoint = function (point, callback) {\n        this.m_tree.QueryPoint(point, callback);\n    };\n    b2BroadPhase.prototype.RayCast = function (input, callback) {\n        this.m_tree.RayCast(input, callback);\n    };\n    b2BroadPhase.prototype.GetTreeHeight = function () {\n        return this.m_tree.GetHeight();\n    };\n    b2BroadPhase.prototype.GetTreeBalance = function () {\n        return this.m_tree.GetMaxBalance();\n    };\n    b2BroadPhase.prototype.GetTreeQuality = function () {\n        return this.m_tree.GetAreaRatio();\n    };\n    b2BroadPhase.prototype.ShiftOrigin = function (newOrigin) {\n        this.m_tree.ShiftOrigin(newOrigin);\n    };\n    b2BroadPhase.prototype.BufferMove = function (proxy) {\n        this.m_moveBuffer[this.m_moveCount] = proxy;\n        ++this.m_moveCount;\n    };\n    b2BroadPhase.prototype.UnBufferMove = function (proxy) {\n        for (var i = 0; i < this.m_moveCount; ++i) {\n            if (this.m_moveBuffer[i] === proxy) {\n                this.m_moveBuffer[i] = null;\n            }\n        }\n    };\n    return b2BroadPhase;\n}());\nexports.b2BroadPhase = b2BroadPhase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_broad_phase.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_collide_circle.ts":
/*!**************************************************!*\
  !*** ./src/box2d/collision/b2_collide_circle.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2CollidePolygonAndCircle = exports.b2CollideCircles = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ./b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2CollideCircles_s_pA = new b2_math_1.b2Vec2();\nvar b2CollideCircles_s_pB = new b2_math_1.b2Vec2();\nfunction b2CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n    manifold.pointCount = 0;\n    var pA = b2_math_1.b2Transform.MulXV(xfA, circleA.m_p, b2CollideCircles_s_pA);\n    var pB = b2_math_1.b2Transform.MulXV(xfB, circleB.m_p, b2CollideCircles_s_pB);\n    var distSqr = b2_math_1.b2Vec2.DistanceSquaredVV(pA, pB);\n    var radius = circleA.m_radius + circleB.m_radius;\n    if (distSqr > radius * radius) {\n        return;\n    }\n    manifold.type = b2_collision_1.b2ManifoldType.e_circles;\n    manifold.localPoint.Copy(circleA.m_p);\n    manifold.localNormal.SetZero();\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    manifold.points[0].id.key = 0;\n}\nexports.b2CollideCircles = b2CollideCircles;\nvar b2CollidePolygonAndCircle_s_c = new b2_math_1.b2Vec2();\nvar b2CollidePolygonAndCircle_s_cLocal = new b2_math_1.b2Vec2();\nvar b2CollidePolygonAndCircle_s_faceCenter = new b2_math_1.b2Vec2();\nfunction b2CollidePolygonAndCircle(manifold, polygonA, xfA, circleB, xfB) {\n    manifold.pointCount = 0;\n    var c = b2_math_1.b2Transform.MulXV(xfB, circleB.m_p, b2CollidePolygonAndCircle_s_c);\n    var cLocal = b2_math_1.b2Transform.MulTXV(xfA, c, b2CollidePolygonAndCircle_s_cLocal);\n    var normalIndex = 0;\n    var separation = (-b2_settings_1.b2_maxFloat);\n    var radius = polygonA.m_radius + circleB.m_radius;\n    var vertexCount = polygonA.m_count;\n    var vertices = polygonA.m_vertices;\n    var normals = polygonA.m_normals;\n    for (var i = 0; i < vertexCount; ++i) {\n        var s = b2_math_1.b2Vec2.DotVV(normals[i], b2_math_1.b2Vec2.SubVV(cLocal, vertices[i], b2_math_1.b2Vec2.s_t0));\n        if (s > radius) {\n            return;\n        }\n        if (s > separation) {\n            separation = s;\n            normalIndex = i;\n        }\n    }\n    var vertIndex1 = normalIndex;\n    var vertIndex2 = (vertIndex1 + 1) % vertexCount;\n    var v1 = vertices[vertIndex1];\n    var v2 = vertices[vertIndex2];\n    if (separation < b2_settings_1.b2_epsilon) {\n        manifold.pointCount = 1;\n        manifold.type = b2_collision_1.b2ManifoldType.e_faceA;\n        manifold.localNormal.Copy(normals[normalIndex]);\n        b2_math_1.b2Vec2.MidVV(v1, v2, manifold.localPoint);\n        manifold.points[0].localPoint.Copy(circleB.m_p);\n        manifold.points[0].id.key = 0;\n        return;\n    }\n    var u1 = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(cLocal, v1, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(v2, v1, b2_math_1.b2Vec2.s_t1));\n    var u2 = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(cLocal, v2, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(v1, v2, b2_math_1.b2Vec2.s_t1));\n    if (u1 <= 0) {\n        if (b2_math_1.b2Vec2.DistanceSquaredVV(cLocal, v1) > radius * radius) {\n            return;\n        }\n        manifold.pointCount = 1;\n        manifold.type = b2_collision_1.b2ManifoldType.e_faceA;\n        b2_math_1.b2Vec2.SubVV(cLocal, v1, manifold.localNormal).SelfNormalize();\n        manifold.localPoint.Copy(v1);\n        manifold.points[0].localPoint.Copy(circleB.m_p);\n        manifold.points[0].id.key = 0;\n    }\n    else if (u2 <= 0) {\n        if (b2_math_1.b2Vec2.DistanceSquaredVV(cLocal, v2) > radius * radius) {\n            return;\n        }\n        manifold.pointCount = 1;\n        manifold.type = b2_collision_1.b2ManifoldType.e_faceA;\n        b2_math_1.b2Vec2.SubVV(cLocal, v2, manifold.localNormal).SelfNormalize();\n        manifold.localPoint.Copy(v2);\n        manifold.points[0].localPoint.Copy(circleB.m_p);\n        manifold.points[0].id.key = 0;\n    }\n    else {\n        var faceCenter = b2_math_1.b2Vec2.MidVV(v1, v2, b2CollidePolygonAndCircle_s_faceCenter);\n        var separation_1 = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(cLocal, faceCenter, b2_math_1.b2Vec2.s_t1), normals[vertIndex1]);\n        if (separation_1 > radius) {\n            return;\n        }\n        manifold.pointCount = 1;\n        manifold.type = b2_collision_1.b2ManifoldType.e_faceA;\n        manifold.localNormal.Copy(normals[vertIndex1]).SelfNormalize();\n        manifold.localPoint.Copy(faceCenter);\n        manifold.points[0].localPoint.Copy(circleB.m_p);\n        manifold.points[0].id.key = 0;\n    }\n}\nexports.b2CollidePolygonAndCircle = b2CollidePolygonAndCircle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvY29sbGlzaW9uL2IyX2NvbGxpZGVfY2lyY2xlLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2NvbGxpc2lvbi9iMl9jb2xsaWRlX2NpcmNsZS50cz9kZDBjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGIyX21heEZsb2F0LCBiMl9lcHNpbG9uIH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgYjJWZWMyLCBiMlRyYW5zZm9ybSB9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuaW1wb3J0IHsgYjJNYW5pZm9sZCwgYjJNYW5pZm9sZFR5cGUgfSBmcm9tIFwiLi9iMl9jb2xsaXNpb25cIjtcbmltcG9ydCB7IGIyQ2lyY2xlU2hhcGUgfSBmcm9tIFwiLi9iMl9jaXJjbGVfc2hhcGVcIjtcbmltcG9ydCB7IGIyUG9seWdvblNoYXBlIH0gZnJvbSBcIi4vYjJfcG9seWdvbl9zaGFwZVwiO1xuXG5jb25zdCBiMkNvbGxpZGVDaXJjbGVzX3NfcEE6IGIyVmVjMiA9IG5ldyBiMlZlYzIoKTtcbmNvbnN0IGIyQ29sbGlkZUNpcmNsZXNfc19wQjogYjJWZWMyID0gbmV3IGIyVmVjMigpO1xuZXhwb3J0IGZ1bmN0aW9uIGIyQ29sbGlkZUNpcmNsZXMobWFuaWZvbGQ6IGIyTWFuaWZvbGQsIGNpcmNsZUE6IGIyQ2lyY2xlU2hhcGUsIHhmQTogYjJUcmFuc2Zvcm0sIGNpcmNsZUI6IGIyQ2lyY2xlU2hhcGUsIHhmQjogYjJUcmFuc2Zvcm0pOiB2b2lkIHtcbiAgbWFuaWZvbGQucG9pbnRDb3VudCA9IDA7XG5cbiAgY29uc3QgcEE6IGIyVmVjMiA9IGIyVHJhbnNmb3JtLk11bFhWKHhmQSwgY2lyY2xlQS5tX3AsIGIyQ29sbGlkZUNpcmNsZXNfc19wQSk7XG4gIGNvbnN0IHBCOiBiMlZlYzIgPSBiMlRyYW5zZm9ybS5NdWxYVih4ZkIsIGNpcmNsZUIubV9wLCBiMkNvbGxpZGVDaXJjbGVzX3NfcEIpO1xuXG4gIGNvbnN0IGRpc3RTcXI6IG51bWJlciA9IGIyVmVjMi5EaXN0YW5jZVNxdWFyZWRWVihwQSwgcEIpO1xuICBjb25zdCByYWRpdXM6IG51bWJlciA9IGNpcmNsZUEubV9yYWRpdXMgKyBjaXJjbGVCLm1fcmFkaXVzO1xuICBpZiAoZGlzdFNxciA+IHJhZGl1cyAqIHJhZGl1cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG1hbmlmb2xkLnR5cGUgPSBiMk1hbmlmb2xkVHlwZS5lX2NpcmNsZXM7XG4gIG1hbmlmb2xkLmxvY2FsUG9pbnQuQ29weShjaXJjbGVBLm1fcCk7XG4gIG1hbmlmb2xkLmxvY2FsTm9ybWFsLlNldFplcm8oKTtcbiAgbWFuaWZvbGQucG9pbnRDb3VudCA9IDE7XG5cbiAgbWFuaWZvbGQucG9pbnRzWzBdLmxvY2FsUG9pbnQuQ29weShjaXJjbGVCLm1fcCk7XG4gIG1hbmlmb2xkLnBvaW50c1swXS5pZC5rZXkgPSAwO1xufVxuXG5jb25zdCBiMkNvbGxpZGVQb2x5Z29uQW5kQ2lyY2xlX3NfYzogYjJWZWMyID0gbmV3IGIyVmVjMigpO1xuY29uc3QgYjJDb2xsaWRlUG9seWdvbkFuZENpcmNsZV9zX2NMb2NhbDogYjJWZWMyID0gbmV3IGIyVmVjMigpO1xuY29uc3QgYjJDb2xsaWRlUG9seWdvbkFuZENpcmNsZV9zX2ZhY2VDZW50ZXI6IGIyVmVjMiA9IG5ldyBiMlZlYzIoKTtcbmV4cG9ydCBmdW5jdGlvbiBiMkNvbGxpZGVQb2x5Z29uQW5kQ2lyY2xlKG1hbmlmb2xkOiBiMk1hbmlmb2xkLCBwb2x5Z29uQTogYjJQb2x5Z29uU2hhcGUsIHhmQTogYjJUcmFuc2Zvcm0sIGNpcmNsZUI6IGIyQ2lyY2xlU2hhcGUsIHhmQjogYjJUcmFuc2Zvcm0pOiB2b2lkIHtcbiAgbWFuaWZvbGQucG9pbnRDb3VudCA9IDA7XG5cbiAgLy8gQ29tcHV0ZSBjaXJjbGUgcG9zaXRpb24gaW4gdGhlIGZyYW1lIG9mIHRoZSBwb2x5Z29uLlxuICBjb25zdCBjOiBiMlZlYzIgPSBiMlRyYW5zZm9ybS5NdWxYVih4ZkIsIGNpcmNsZUIubV9wLCBiMkNvbGxpZGVQb2x5Z29uQW5kQ2lyY2xlX3NfYyk7XG4gIGNvbnN0IGNMb2NhbDogYjJWZWMyID0gYjJUcmFuc2Zvcm0uTXVsVFhWKHhmQSwgYywgYjJDb2xsaWRlUG9seWdvbkFuZENpcmNsZV9zX2NMb2NhbCk7XG5cbiAgLy8gRmluZCB0aGUgbWluIHNlcGFyYXRpbmcgZWRnZS5cbiAgbGV0IG5vcm1hbEluZGV4OiBudW1iZXIgPSAwO1xuICBsZXQgc2VwYXJhdGlvbjogbnVtYmVyID0gKC1iMl9tYXhGbG9hdCk7XG4gIGNvbnN0IHJhZGl1czogbnVtYmVyID0gcG9seWdvbkEubV9yYWRpdXMgKyBjaXJjbGVCLm1fcmFkaXVzO1xuICBjb25zdCB2ZXJ0ZXhDb3VudDogbnVtYmVyID0gcG9seWdvbkEubV9jb3VudDtcbiAgY29uc3QgdmVydGljZXM6IGIyVmVjMltdID0gcG9seWdvbkEubV92ZXJ0aWNlcztcbiAgY29uc3Qgbm9ybWFsczogYjJWZWMyW10gPSBwb2x5Z29uQS5tX25vcm1hbHM7XG5cbiAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHZlcnRleENvdW50OyArK2kpIHtcbiAgICBjb25zdCBzOiBudW1iZXIgPSBiMlZlYzIuRG90VlYobm9ybWFsc1tpXSwgYjJWZWMyLlN1YlZWKGNMb2NhbCwgdmVydGljZXNbaV0sIGIyVmVjMi5zX3QwKSk7XG5cbiAgICBpZiAocyA+IHJhZGl1cykge1xuICAgICAgLy8gRWFybHkgb3V0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzID4gc2VwYXJhdGlvbikge1xuICAgICAgc2VwYXJhdGlvbiA9IHM7XG4gICAgICBub3JtYWxJbmRleCA9IGk7XG4gICAgfVxuICB9XG5cbiAgLy8gVmVydGljZXMgdGhhdCBzdWJ0ZW5kIHRoZSBpbmNpZGVudCBmYWNlLlxuICBjb25zdCB2ZXJ0SW5kZXgxOiBudW1iZXIgPSBub3JtYWxJbmRleDtcbiAgY29uc3QgdmVydEluZGV4MjogbnVtYmVyID0gKHZlcnRJbmRleDEgKyAxKSAlIHZlcnRleENvdW50O1xuICBjb25zdCB2MTogYjJWZWMyID0gdmVydGljZXNbdmVydEluZGV4MV07XG4gIGNvbnN0IHYyOiBiMlZlYzIgPSB2ZXJ0aWNlc1t2ZXJ0SW5kZXgyXTtcblxuICAvLyBJZiB0aGUgY2VudGVyIGlzIGluc2lkZSB0aGUgcG9seWdvbiAuLi5cbiAgaWYgKHNlcGFyYXRpb24gPCBiMl9lcHNpbG9uKSB7XG4gICAgbWFuaWZvbGQucG9pbnRDb3VudCA9IDE7XG4gICAgbWFuaWZvbGQudHlwZSA9IGIyTWFuaWZvbGRUeXBlLmVfZmFjZUE7XG4gICAgbWFuaWZvbGQubG9jYWxOb3JtYWwuQ29weShub3JtYWxzW25vcm1hbEluZGV4XSk7XG4gICAgYjJWZWMyLk1pZFZWKHYxLCB2MiwgbWFuaWZvbGQubG9jYWxQb2ludCk7XG4gICAgbWFuaWZvbGQucG9pbnRzWzBdLmxvY2FsUG9pbnQuQ29weShjaXJjbGVCLm1fcCk7XG4gICAgbWFuaWZvbGQucG9pbnRzWzBdLmlkLmtleSA9IDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ29tcHV0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xuICBjb25zdCB1MTogbnVtYmVyID0gYjJWZWMyLkRvdFZWKGIyVmVjMi5TdWJWVihjTG9jYWwsIHYxLCBiMlZlYzIuc190MCksIGIyVmVjMi5TdWJWVih2MiwgdjEsIGIyVmVjMi5zX3QxKSk7XG4gIGNvbnN0IHUyOiBudW1iZXIgPSBiMlZlYzIuRG90VlYoYjJWZWMyLlN1YlZWKGNMb2NhbCwgdjIsIGIyVmVjMi5zX3QwKSwgYjJWZWMyLlN1YlZWKHYxLCB2MiwgYjJWZWMyLnNfdDEpKTtcbiAgaWYgKHUxIDw9IDApIHtcbiAgICBpZiAoYjJWZWMyLkRpc3RhbmNlU3F1YXJlZFZWKGNMb2NhbCwgdjEpID4gcmFkaXVzICogcmFkaXVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWFuaWZvbGQucG9pbnRDb3VudCA9IDE7XG4gICAgbWFuaWZvbGQudHlwZSA9IGIyTWFuaWZvbGRUeXBlLmVfZmFjZUE7XG4gICAgYjJWZWMyLlN1YlZWKGNMb2NhbCwgdjEsIG1hbmlmb2xkLmxvY2FsTm9ybWFsKS5TZWxmTm9ybWFsaXplKCk7XG4gICAgbWFuaWZvbGQubG9jYWxQb2ludC5Db3B5KHYxKTtcbiAgICBtYW5pZm9sZC5wb2ludHNbMF0ubG9jYWxQb2ludC5Db3B5KGNpcmNsZUIubV9wKTtcbiAgICBtYW5pZm9sZC5wb2ludHNbMF0uaWQua2V5ID0gMDtcbiAgfSBlbHNlIGlmICh1MiA8PSAwKSB7XG4gICAgaWYgKGIyVmVjMi5EaXN0YW5jZVNxdWFyZWRWVihjTG9jYWwsIHYyKSA+IHJhZGl1cyAqIHJhZGl1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1hbmlmb2xkLnBvaW50Q291bnQgPSAxO1xuICAgIG1hbmlmb2xkLnR5cGUgPSBiMk1hbmlmb2xkVHlwZS5lX2ZhY2VBO1xuICAgIGIyVmVjMi5TdWJWVihjTG9jYWwsIHYyLCBtYW5pZm9sZC5sb2NhbE5vcm1hbCkuU2VsZk5vcm1hbGl6ZSgpO1xuICAgIG1hbmlmb2xkLmxvY2FsUG9pbnQuQ29weSh2Mik7XG4gICAgbWFuaWZvbGQucG9pbnRzWzBdLmxvY2FsUG9pbnQuQ29weShjaXJjbGVCLm1fcCk7XG4gICAgbWFuaWZvbGQucG9pbnRzWzBdLmlkLmtleSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZmFjZUNlbnRlcjogYjJWZWMyID0gYjJWZWMyLk1pZFZWKHYxLCB2MiwgYjJDb2xsaWRlUG9seWdvbkFuZENpcmNsZV9zX2ZhY2VDZW50ZXIpO1xuICAgIGNvbnN0IHNlcGFyYXRpb24gPSBiMlZlYzIuRG90VlYoYjJWZWMyLlN1YlZWKGNMb2NhbCwgZmFjZUNlbnRlciwgYjJWZWMyLnNfdDEpLCBub3JtYWxzW3ZlcnRJbmRleDFdKTtcbiAgICBpZiAoc2VwYXJhdGlvbiA+IHJhZGl1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1hbmlmb2xkLnBvaW50Q291bnQgPSAxO1xuICAgIG1hbmlmb2xkLnR5cGUgPSBiMk1hbmlmb2xkVHlwZS5lX2ZhY2VBO1xuICAgIG1hbmlmb2xkLmxvY2FsTm9ybWFsLkNvcHkobm9ybWFsc1t2ZXJ0SW5kZXgxXSkuU2VsZk5vcm1hbGl6ZSgpO1xuICAgIG1hbmlmb2xkLmxvY2FsUG9pbnQuQ29weShmYWNlQ2VudGVyKTtcbiAgICBtYW5pZm9sZC5wb2ludHNbMF0ubG9jYWxQb2ludC5Db3B5KGNpcmNsZUIubV9wKTtcbiAgICBtYW5pZm9sZC5wb2ludHNbMF0uaWQua2V5ID0gMDtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFuQkE7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXJGQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_collide_circle.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_collide_edge.ts":
/*!************************************************!*\
  !*** ./src/box2d/collision/b2_collide_edge.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2CollideEdgeAndPolygon = exports.b2CollideEdgeAndCircle = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ./b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_collision_2 = __webpack_require__(/*! ./b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2CollideEdgeAndCircle_s_Q = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_e = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_d = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_e1 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_e2 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_P = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_n = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndCircle_s_id = new b2_collision_1.b2ContactID();\nfunction b2CollideEdgeAndCircle(manifold, edgeA, xfA, circleB, xfB) {\n    manifold.pointCount = 0;\n    var Q = b2_math_1.b2Transform.MulTXV(xfA, b2_math_1.b2Transform.MulXV(xfB, circleB.m_p, b2_math_1.b2Vec2.s_t0), b2CollideEdgeAndCircle_s_Q);\n    var A = edgeA.m_vertex1;\n    var B = edgeA.m_vertex2;\n    var e = b2_math_1.b2Vec2.SubVV(B, A, b2CollideEdgeAndCircle_s_e);\n    var n = b2CollideEdgeAndCircle_s_n.Set(e.y, -e.x);\n    var offset = b2_math_1.b2Vec2.DotVV(n, b2_math_1.b2Vec2.SubVV(Q, A, b2_math_1.b2Vec2.s_t0));\n    var oneSided = edgeA.m_oneSided;\n    if (oneSided && offset < 0.0) {\n        return;\n    }\n    var u = b2_math_1.b2Vec2.DotVV(e, b2_math_1.b2Vec2.SubVV(B, Q, b2_math_1.b2Vec2.s_t0));\n    var v = b2_math_1.b2Vec2.DotVV(e, b2_math_1.b2Vec2.SubVV(Q, A, b2_math_1.b2Vec2.s_t0));\n    var radius = edgeA.m_radius + circleB.m_radius;\n    var id = b2CollideEdgeAndCircle_s_id;\n    id.cf.indexB = 0;\n    id.cf.typeB = b2_collision_1.b2ContactFeatureType.e_vertex;\n    if (v <= 0) {\n        var P_1 = A;\n        var d_1 = b2_math_1.b2Vec2.SubVV(Q, P_1, b2CollideEdgeAndCircle_s_d);\n        var dd_1 = b2_math_1.b2Vec2.DotVV(d_1, d_1);\n        if (dd_1 > radius * radius) {\n            return;\n        }\n        if (edgeA.m_oneSided) {\n            var A1 = edgeA.m_vertex0;\n            var B1 = A;\n            var e1 = b2_math_1.b2Vec2.SubVV(B1, A1, b2CollideEdgeAndCircle_s_e1);\n            var u1 = b2_math_1.b2Vec2.DotVV(e1, b2_math_1.b2Vec2.SubVV(B1, Q, b2_math_1.b2Vec2.s_t0));\n            if (u1 > 0) {\n                return;\n            }\n        }\n        id.cf.indexA = 0;\n        id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_vertex;\n        manifold.pointCount = 1;\n        manifold.type = b2_collision_2.b2ManifoldType.e_circles;\n        manifold.localNormal.SetZero();\n        manifold.localPoint.Copy(P_1);\n        manifold.points[0].id.Copy(id);\n        manifold.points[0].localPoint.Copy(circleB.m_p);\n        return;\n    }\n    if (u <= 0) {\n        var P_2 = B;\n        var d_2 = b2_math_1.b2Vec2.SubVV(Q, P_2, b2CollideEdgeAndCircle_s_d);\n        var dd_2 = b2_math_1.b2Vec2.DotVV(d_2, d_2);\n        if (dd_2 > radius * radius) {\n            return;\n        }\n        if (edgeA.m_oneSided) {\n            var B2 = edgeA.m_vertex3;\n            var A2 = B;\n            var e2 = b2_math_1.b2Vec2.SubVV(B2, A2, b2CollideEdgeAndCircle_s_e2);\n            var v2 = b2_math_1.b2Vec2.DotVV(e2, b2_math_1.b2Vec2.SubVV(Q, A2, b2_math_1.b2Vec2.s_t0));\n            if (v2 > 0) {\n                return;\n            }\n        }\n        id.cf.indexA = 1;\n        id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_vertex;\n        manifold.pointCount = 1;\n        manifold.type = b2_collision_2.b2ManifoldType.e_circles;\n        manifold.localNormal.SetZero();\n        manifold.localPoint.Copy(P_2);\n        manifold.points[0].id.Copy(id);\n        manifold.points[0].localPoint.Copy(circleB.m_p);\n        return;\n    }\n    var den = b2_math_1.b2Vec2.DotVV(e, e);\n    var P = b2CollideEdgeAndCircle_s_P;\n    P.x = (1 / den) * (u * A.x + v * B.x);\n    P.y = (1 / den) * (u * A.y + v * B.y);\n    var d = b2_math_1.b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\n    var dd = b2_math_1.b2Vec2.DotVV(d, d);\n    if (dd > radius * radius) {\n        return;\n    }\n    if (offset < 0) {\n        n.Set(-n.x, -n.y);\n    }\n    n.Normalize();\n    id.cf.indexA = 0;\n    id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_face;\n    manifold.pointCount = 1;\n    manifold.type = b2_collision_2.b2ManifoldType.e_faceA;\n    manifold.localNormal.Copy(n);\n    manifold.localPoint.Copy(A);\n    manifold.points[0].id.Copy(id);\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n}\nexports.b2CollideEdgeAndCircle = b2CollideEdgeAndCircle;\nvar b2EPAxisType;\n(function (b2EPAxisType) {\n    b2EPAxisType[b2EPAxisType[\"e_unknown\"] = 0] = \"e_unknown\";\n    b2EPAxisType[b2EPAxisType[\"e_edgeA\"] = 1] = \"e_edgeA\";\n    b2EPAxisType[b2EPAxisType[\"e_edgeB\"] = 2] = \"e_edgeB\";\n})(b2EPAxisType || (b2EPAxisType = {}));\nvar b2EPAxis = (function () {\n    function b2EPAxis() {\n        this.normal = new b2_math_1.b2Vec2();\n        this.type = b2EPAxisType.e_unknown;\n        this.index = 0;\n        this.separation = 0;\n    }\n    return b2EPAxis;\n}());\nvar b2TempPolygon = (function () {\n    function b2TempPolygon() {\n        this.vertices = [];\n        this.normals = [];\n        this.count = 0;\n    }\n    return b2TempPolygon;\n}());\nvar b2ReferenceFace = (function () {\n    function b2ReferenceFace() {\n        this.i1 = 0;\n        this.i2 = 0;\n        this.v1 = new b2_math_1.b2Vec2();\n        this.v2 = new b2_math_1.b2Vec2();\n        this.normal = new b2_math_1.b2Vec2();\n        this.sideNormal1 = new b2_math_1.b2Vec2();\n        this.sideOffset1 = 0;\n        this.sideNormal2 = new b2_math_1.b2Vec2();\n        this.sideOffset2 = 0;\n    }\n    return b2ReferenceFace;\n}());\nvar b2ComputeEdgeSeparation_s_axis = new b2EPAxis();\nvar b2ComputeEdgeSeparation_s_axes = [new b2_math_1.b2Vec2(), new b2_math_1.b2Vec2()];\nfunction b2ComputeEdgeSeparation(polygonB, v1, normal1) {\n    var axis = b2ComputeEdgeSeparation_s_axis;\n    axis.type = b2EPAxisType.e_edgeA;\n    axis.index = -1;\n    axis.separation = -Number.MAX_VALUE;\n    axis.normal.SetZero();\n    var axes = b2ComputeEdgeSeparation_s_axes;\n    axes[0].Copy(normal1);\n    axes[1].Copy(normal1).SelfNeg();\n    for (var j = 0; j < 2; ++j) {\n        var sj = Number.MAX_VALUE;\n        for (var i = 0; i < polygonB.count; ++i) {\n            var si = b2_math_1.b2Vec2.DotVV(axes[j], b2_math_1.b2Vec2.SubVV(polygonB.vertices[i], v1, b2_math_1.b2Vec2.s_t0));\n            if (si < sj) {\n                sj = si;\n            }\n        }\n        if (sj > axis.separation) {\n            axis.index = j;\n            axis.separation = sj;\n            axis.normal.Copy(axes[j]);\n        }\n    }\n    return axis;\n}\nvar b2ComputePolygonSeparation_s_axis = new b2EPAxis();\nvar b2ComputePolygonSeparation_s_n = new b2_math_1.b2Vec2();\nfunction b2ComputePolygonSeparation(polygonB, v1, v2) {\n    var axis = b2ComputePolygonSeparation_s_axis;\n    axis.type = b2EPAxisType.e_unknown;\n    axis.index = -1;\n    axis.separation = -Number.MAX_VALUE;\n    axis.normal.SetZero();\n    for (var i = 0; i < polygonB.count; ++i) {\n        var n = b2_math_1.b2Vec2.NegV(polygonB.normals[i], b2ComputePolygonSeparation_s_n);\n        var s1 = b2_math_1.b2Vec2.DotVV(n, b2_math_1.b2Vec2.SubVV(polygonB.vertices[i], v1, b2_math_1.b2Vec2.s_t0));\n        var s2 = b2_math_1.b2Vec2.DotVV(n, b2_math_1.b2Vec2.SubVV(polygonB.vertices[i], v2, b2_math_1.b2Vec2.s_t0));\n        var s = b2_math_1.b2Min(s1, s2);\n        if (s > axis.separation) {\n            axis.type = b2EPAxisType.e_edgeB;\n            axis.index = i;\n            axis.separation = s;\n            axis.normal.Copy(n);\n        }\n    }\n    return axis;\n}\nvar b2CollideEdgeAndPolygon_s_xf = new b2_math_1.b2Transform();\nvar b2CollideEdgeAndPolygon_s_centroidB = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_edge1 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_normal1 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_edge0 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_normal0 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_edge2 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_normal2 = new b2_math_1.b2Vec2();\nvar b2CollideEdgeAndPolygon_s_tempPolygonB = new b2TempPolygon();\nvar b2CollideEdgeAndPolygon_s_ref = new b2ReferenceFace();\nvar b2CollideEdgeAndPolygon_s_clipPoints = [new b2_collision_2.b2ClipVertex(), new b2_collision_2.b2ClipVertex()];\nvar b2CollideEdgeAndPolygon_s_clipPoints1 = [new b2_collision_2.b2ClipVertex(), new b2_collision_2.b2ClipVertex()];\nvar b2CollideEdgeAndPolygon_s_clipPoints2 = [new b2_collision_2.b2ClipVertex(), new b2_collision_2.b2ClipVertex()];\nfunction b2CollideEdgeAndPolygon(manifold, edgeA, xfA, polygonB, xfB) {\n    manifold.pointCount = 0;\n    var xf = b2_math_1.b2Transform.MulTXX(xfA, xfB, b2CollideEdgeAndPolygon_s_xf);\n    var centroidB = b2_math_1.b2Transform.MulXV(xf, polygonB.m_centroid, b2CollideEdgeAndPolygon_s_centroidB);\n    var v1 = edgeA.m_vertex1;\n    var v2 = edgeA.m_vertex2;\n    var edge1 = b2_math_1.b2Vec2.SubVV(v2, v1, b2CollideEdgeAndPolygon_s_edge1);\n    edge1.Normalize();\n    var normal1 = b2CollideEdgeAndPolygon_s_normal1.Set(edge1.y, -edge1.x);\n    var offset1 = b2_math_1.b2Vec2.DotVV(normal1, b2_math_1.b2Vec2.SubVV(centroidB, v1, b2_math_1.b2Vec2.s_t0));\n    var oneSided = edgeA.m_oneSided;\n    if (oneSided && offset1 < 0.0) {\n        return;\n    }\n    var tempPolygonB = b2CollideEdgeAndPolygon_s_tempPolygonB;\n    tempPolygonB.count = polygonB.m_count;\n    for (var i = 0; i < polygonB.m_count; ++i) {\n        if (tempPolygonB.vertices.length <= i) {\n            tempPolygonB.vertices.push(new b2_math_1.b2Vec2());\n        }\n        if (tempPolygonB.normals.length <= i) {\n            tempPolygonB.normals.push(new b2_math_1.b2Vec2());\n        }\n        b2_math_1.b2Transform.MulXV(xf, polygonB.m_vertices[i], tempPolygonB.vertices[i]);\n        b2_math_1.b2Rot.MulRV(xf.q, polygonB.m_normals[i], tempPolygonB.normals[i]);\n    }\n    var radius = polygonB.m_radius + edgeA.m_radius;\n    var edgeAxis = b2ComputeEdgeSeparation(tempPolygonB, v1, normal1);\n    if (edgeAxis.separation > radius) {\n        return;\n    }\n    var polygonAxis = b2ComputePolygonSeparation(tempPolygonB, v1, v2);\n    if (polygonAxis.separation > radius) {\n        return;\n    }\n    var k_relativeTol = 0.98;\n    var k_absoluteTol = 0.001;\n    var primaryAxis;\n    if (polygonAxis.separation - radius > k_relativeTol * (edgeAxis.separation - radius) + k_absoluteTol) {\n        primaryAxis = polygonAxis;\n    }\n    else {\n        primaryAxis = edgeAxis;\n    }\n    if (oneSided) {\n        var edge0 = b2_math_1.b2Vec2.SubVV(v1, edgeA.m_vertex0, b2CollideEdgeAndPolygon_s_edge0);\n        edge0.Normalize();\n        var normal0 = b2CollideEdgeAndPolygon_s_normal0.Set(edge0.y, -edge0.x);\n        var convex1 = b2_math_1.b2Vec2.CrossVV(edge0, edge1) >= 0.0;\n        var edge2 = b2_math_1.b2Vec2.SubVV(edgeA.m_vertex3, v2, b2CollideEdgeAndPolygon_s_edge2);\n        edge2.Normalize();\n        var normal2 = b2CollideEdgeAndPolygon_s_normal2.Set(edge2.y, -edge2.x);\n        var convex2 = b2_math_1.b2Vec2.CrossVV(edge1, edge2) >= 0.0;\n        var sinTol = 0.1;\n        var side1 = b2_math_1.b2Vec2.DotVV(primaryAxis.normal, edge1) <= 0.0;\n        if (side1) {\n            if (convex1) {\n                if (b2_math_1.b2Vec2.CrossVV(primaryAxis.normal, normal0) > sinTol) {\n                    return;\n                }\n            }\n            else {\n                primaryAxis = edgeAxis;\n            }\n        }\n        else {\n            if (convex2) {\n                if (b2_math_1.b2Vec2.CrossVV(normal2, primaryAxis.normal) > sinTol) {\n                    return;\n                }\n            }\n            else {\n                primaryAxis = edgeAxis;\n            }\n        }\n    }\n    var clipPoints = b2CollideEdgeAndPolygon_s_clipPoints;\n    var ref = b2CollideEdgeAndPolygon_s_ref;\n    if (primaryAxis.type === b2EPAxisType.e_edgeA) {\n        manifold.type = b2_collision_2.b2ManifoldType.e_faceA;\n        var bestIndex = 0;\n        var bestValue = b2_math_1.b2Vec2.DotVV(primaryAxis.normal, tempPolygonB.normals[0]);\n        for (var i = 1; i < tempPolygonB.count; ++i) {\n            var value = b2_math_1.b2Vec2.DotVV(primaryAxis.normal, tempPolygonB.normals[i]);\n            if (value < bestValue) {\n                bestValue = value;\n                bestIndex = i;\n            }\n        }\n        var i1 = bestIndex;\n        var i2 = i1 + 1 < tempPolygonB.count ? i1 + 1 : 0;\n        clipPoints[0].v.Copy(tempPolygonB.vertices[i1]);\n        clipPoints[0].id.cf.indexA = 0;\n        clipPoints[0].id.cf.indexB = i1;\n        clipPoints[0].id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_face;\n        clipPoints[0].id.cf.typeB = b2_collision_1.b2ContactFeatureType.e_vertex;\n        clipPoints[1].v.Copy(tempPolygonB.vertices[i2]);\n        clipPoints[1].id.cf.indexA = 0;\n        clipPoints[1].id.cf.indexB = i2;\n        clipPoints[1].id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_face;\n        clipPoints[1].id.cf.typeB = b2_collision_1.b2ContactFeatureType.e_vertex;\n        ref.i1 = 0;\n        ref.i2 = 1;\n        ref.v1.Copy(v1);\n        ref.v2.Copy(v2);\n        ref.normal.Copy(primaryAxis.normal);\n        ref.sideNormal1.Copy(edge1).SelfNeg();\n        ref.sideNormal2.Copy(edge1);\n    }\n    else {\n        manifold.type = b2_collision_2.b2ManifoldType.e_faceB;\n        clipPoints[0].v.Copy(v2);\n        clipPoints[0].id.cf.indexA = 1;\n        clipPoints[0].id.cf.indexB = primaryAxis.index;\n        clipPoints[0].id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_vertex;\n        clipPoints[0].id.cf.typeB = b2_collision_1.b2ContactFeatureType.e_face;\n        clipPoints[1].v.Copy(v1);\n        clipPoints[1].id.cf.indexA = 0;\n        clipPoints[1].id.cf.indexB = primaryAxis.index;\n        clipPoints[1].id.cf.typeA = b2_collision_1.b2ContactFeatureType.e_vertex;\n        clipPoints[1].id.cf.typeB = b2_collision_1.b2ContactFeatureType.e_face;\n        ref.i1 = primaryAxis.index;\n        ref.i2 = ref.i1 + 1 < tempPolygonB.count ? ref.i1 + 1 : 0;\n        ref.v1.Copy(tempPolygonB.vertices[ref.i1]);\n        ref.v2.Copy(tempPolygonB.vertices[ref.i2]);\n        ref.normal.Copy(tempPolygonB.normals[ref.i1]);\n        ref.sideNormal1.Set(ref.normal.y, -ref.normal.x);\n        ref.sideNormal2.Copy(ref.sideNormal1).SelfNeg();\n    }\n    ref.sideOffset1 = b2_math_1.b2Vec2.DotVV(ref.sideNormal1, ref.v1);\n    ref.sideOffset2 = b2_math_1.b2Vec2.DotVV(ref.sideNormal2, ref.v2);\n    var clipPoints1 = b2CollideEdgeAndPolygon_s_clipPoints1;\n    var clipPoints2 = b2CollideEdgeAndPolygon_s_clipPoints2;\n    var np;\n    np = b2_collision_2.b2ClipSegmentToLine(clipPoints1, clipPoints, ref.sideNormal1, ref.sideOffset1, ref.i1);\n    if (np < b2_settings_1.b2_maxManifoldPoints) {\n        return;\n    }\n    np = b2_collision_2.b2ClipSegmentToLine(clipPoints2, clipPoints1, ref.sideNormal2, ref.sideOffset2, ref.i2);\n    if (np < b2_settings_1.b2_maxManifoldPoints) {\n        return;\n    }\n    if (primaryAxis.type === b2EPAxisType.e_edgeA) {\n        manifold.localNormal.Copy(ref.normal);\n        manifold.localPoint.Copy(ref.v1);\n    }\n    else {\n        manifold.localNormal.Copy(polygonB.m_normals[ref.i1]);\n        manifold.localPoint.Copy(polygonB.m_vertices[ref.i1]);\n    }\n    var pointCount = 0;\n    for (var i = 0; i < b2_settings_1.b2_maxManifoldPoints; ++i) {\n        var separation = b2_math_1.b2Vec2.DotVV(ref.normal, b2_math_1.b2Vec2.SubVV(clipPoints2[i].v, ref.v1, b2_math_1.b2Vec2.s_t0));\n        if (separation <= radius) {\n            var cp = manifold.points[pointCount];\n            if (primaryAxis.type === b2EPAxisType.e_edgeA) {\n                b2_math_1.b2Transform.MulTXV(xf, clipPoints2[i].v, cp.localPoint);\n                cp.id.Copy(clipPoints2[i].id);\n            }\n            else {\n                cp.localPoint.Copy(clipPoints2[i].v);\n                cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n                cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n                cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n                cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n            }\n            ++pointCount;\n        }\n    }\n    manifold.pointCount = pointCount;\n}\nexports.b2CollideEdgeAndPolygon = b2CollideEdgeAndPolygon;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_collide_edge.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_collide_polygon.ts":
/*!***************************************************!*\
  !*** ./src/box2d/collision/b2_collide_polygon.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2CollidePolygons = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ./b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2FindMaxSeparation_s_xf = new b2_math_1.b2Transform();\nvar b2FindMaxSeparation_s_n = new b2_math_1.b2Vec2();\nvar b2FindMaxSeparation_s_v1 = new b2_math_1.b2Vec2();\nfunction b2FindMaxSeparation(edgeIndex, poly1, xf1, poly2, xf2) {\n    var count1 = poly1.m_count;\n    var count2 = poly2.m_count;\n    var n1s = poly1.m_normals;\n    var v1s = poly1.m_vertices;\n    var v2s = poly2.m_vertices;\n    var xf = b2_math_1.b2Transform.MulTXX(xf2, xf1, b2FindMaxSeparation_s_xf);\n    var bestIndex = 0;\n    var maxSeparation = -b2_settings_1.b2_maxFloat;\n    for (var i = 0; i < count1; ++i) {\n        var n = b2_math_1.b2Rot.MulRV(xf.q, n1s[i], b2FindMaxSeparation_s_n);\n        var v1 = b2_math_1.b2Transform.MulXV(xf, v1s[i], b2FindMaxSeparation_s_v1);\n        var si = b2_settings_1.b2_maxFloat;\n        for (var j = 0; j < count2; ++j) {\n            var sij = b2_math_1.b2Vec2.DotVV(n, b2_math_1.b2Vec2.SubVV(v2s[j], v1, b2_math_1.b2Vec2.s_t0));\n            if (sij < si) {\n                si = sij;\n            }\n        }\n        if (si > maxSeparation) {\n            maxSeparation = si;\n            bestIndex = i;\n        }\n    }\n    edgeIndex[0] = bestIndex;\n    return maxSeparation;\n}\nvar b2FindIncidentEdge_s_normal1 = new b2_math_1.b2Vec2();\nfunction b2FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n    var normals1 = poly1.m_normals;\n    var count2 = poly2.m_count;\n    var vertices2 = poly2.m_vertices;\n    var normals2 = poly2.m_normals;\n    var normal1 = b2_math_1.b2Rot.MulTRV(xf2.q, b2_math_1.b2Rot.MulRV(xf1.q, normals1[edge1], b2_math_1.b2Vec2.s_t0), b2FindIncidentEdge_s_normal1);\n    var index = 0;\n    var minDot = b2_settings_1.b2_maxFloat;\n    for (var i = 0; i < count2; ++i) {\n        var dot = b2_math_1.b2Vec2.DotVV(normal1, normals2[i]);\n        if (dot < minDot) {\n            minDot = dot;\n            index = i;\n        }\n    }\n    var i1 = index;\n    var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n    var c0 = c[0];\n    b2_math_1.b2Transform.MulXV(xf2, vertices2[i1], c0.v);\n    var cf0 = c0.id.cf;\n    cf0.indexA = edge1;\n    cf0.indexB = i1;\n    cf0.typeA = b2_collision_1.b2ContactFeatureType.e_face;\n    cf0.typeB = b2_collision_1.b2ContactFeatureType.e_vertex;\n    var c1 = c[1];\n    b2_math_1.b2Transform.MulXV(xf2, vertices2[i2], c1.v);\n    var cf1 = c1.id.cf;\n    cf1.indexA = edge1;\n    cf1.indexB = i2;\n    cf1.typeA = b2_collision_1.b2ContactFeatureType.e_face;\n    cf1.typeB = b2_collision_1.b2ContactFeatureType.e_vertex;\n}\nvar b2CollidePolygons_s_incidentEdge = [new b2_collision_1.b2ClipVertex(), new b2_collision_1.b2ClipVertex()];\nvar b2CollidePolygons_s_clipPoints1 = [new b2_collision_1.b2ClipVertex(), new b2_collision_1.b2ClipVertex()];\nvar b2CollidePolygons_s_clipPoints2 = [new b2_collision_1.b2ClipVertex(), new b2_collision_1.b2ClipVertex()];\nvar b2CollidePolygons_s_edgeA = [0];\nvar b2CollidePolygons_s_edgeB = [0];\nvar b2CollidePolygons_s_localTangent = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_localNormal = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_planePoint = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_normal = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_tangent = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_ntangent = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_v11 = new b2_math_1.b2Vec2();\nvar b2CollidePolygons_s_v12 = new b2_math_1.b2Vec2();\nfunction b2CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n    manifold.pointCount = 0;\n    var totalRadius = polyA.m_radius + polyB.m_radius;\n    var edgeA = b2CollidePolygons_s_edgeA;\n    edgeA[0] = 0;\n    var separationA = b2FindMaxSeparation(edgeA, polyA, xfA, polyB, xfB);\n    if (separationA > totalRadius) {\n        return;\n    }\n    var edgeB = b2CollidePolygons_s_edgeB;\n    edgeB[0] = 0;\n    var separationB = b2FindMaxSeparation(edgeB, polyB, xfB, polyA, xfA);\n    if (separationB > totalRadius) {\n        return;\n    }\n    var poly1;\n    var poly2;\n    var xf1, xf2;\n    var edge1 = 0;\n    var flip = 0;\n    var k_tol = 0.1 * b2_settings_1.b2_linearSlop;\n    if (separationB > separationA + k_tol) {\n        poly1 = polyB;\n        poly2 = polyA;\n        xf1 = xfB;\n        xf2 = xfA;\n        edge1 = edgeB[0];\n        manifold.type = b2_collision_1.b2ManifoldType.e_faceB;\n        flip = 1;\n    }\n    else {\n        poly1 = polyA;\n        poly2 = polyB;\n        xf1 = xfA;\n        xf2 = xfB;\n        edge1 = edgeA[0];\n        manifold.type = b2_collision_1.b2ManifoldType.e_faceA;\n        flip = 0;\n    }\n    var incidentEdge = b2CollidePolygons_s_incidentEdge;\n    b2FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n    var count1 = poly1.m_count;\n    var vertices1 = poly1.m_vertices;\n    var iv1 = edge1;\n    var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n    var local_v11 = vertices1[iv1];\n    var local_v12 = vertices1[iv2];\n    var localTangent = b2_math_1.b2Vec2.SubVV(local_v12, local_v11, b2CollidePolygons_s_localTangent);\n    localTangent.Normalize();\n    var localNormal = b2_math_1.b2Vec2.CrossVOne(localTangent, b2CollidePolygons_s_localNormal);\n    var planePoint = b2_math_1.b2Vec2.MidVV(local_v11, local_v12, b2CollidePolygons_s_planePoint);\n    var tangent = b2_math_1.b2Rot.MulRV(xf1.q, localTangent, b2CollidePolygons_s_tangent);\n    var normal = b2_math_1.b2Vec2.CrossVOne(tangent, b2CollidePolygons_s_normal);\n    var v11 = b2_math_1.b2Transform.MulXV(xf1, local_v11, b2CollidePolygons_s_v11);\n    var v12 = b2_math_1.b2Transform.MulXV(xf1, local_v12, b2CollidePolygons_s_v12);\n    var frontOffset = b2_math_1.b2Vec2.DotVV(normal, v11);\n    var sideOffset1 = -b2_math_1.b2Vec2.DotVV(tangent, v11) + totalRadius;\n    var sideOffset2 = b2_math_1.b2Vec2.DotVV(tangent, v12) + totalRadius;\n    var clipPoints1 = b2CollidePolygons_s_clipPoints1;\n    var clipPoints2 = b2CollidePolygons_s_clipPoints2;\n    var np;\n    var ntangent = b2_math_1.b2Vec2.NegV(tangent, b2CollidePolygons_s_ntangent);\n    np = b2_collision_1.b2ClipSegmentToLine(clipPoints1, incidentEdge, ntangent, sideOffset1, iv1);\n    if (np < 2) {\n        return;\n    }\n    np = b2_collision_1.b2ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);\n    if (np < 2) {\n        return;\n    }\n    manifold.localNormal.Copy(localNormal);\n    manifold.localPoint.Copy(planePoint);\n    var pointCount = 0;\n    for (var i = 0; i < b2_settings_1.b2_maxManifoldPoints; ++i) {\n        var cv = clipPoints2[i];\n        var separation = b2_math_1.b2Vec2.DotVV(normal, cv.v) - frontOffset;\n        if (separation <= totalRadius) {\n            var cp = manifold.points[pointCount];\n            b2_math_1.b2Transform.MulTXV(xf2, cv.v, cp.localPoint);\n            cp.id.Copy(cv.id);\n            if (flip) {\n                var cf = cp.id.cf;\n                cp.id.cf.indexA = cf.indexB;\n                cp.id.cf.indexB = cf.indexA;\n                cp.id.cf.typeA = cf.typeB;\n                cp.id.cf.typeB = cf.typeA;\n            }\n            ++pointCount;\n        }\n    }\n    manifold.pointCount = pointCount;\n}\nexports.b2CollidePolygons = b2CollidePolygons;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_collide_polygon.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_collision.ts":
/*!*********************************************!*\
  !*** ./src/box2d/collision/b2_collision.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2TestOverlapShape = exports.b2ClipSegmentToLine = exports.b2TestOverlapAABB = exports.b2AABB = exports.b2RayCastOutput = exports.b2RayCastInput = exports.b2ClipVertex = exports.b2GetPointStates = exports.b2PointState = exports.b2WorldManifold = exports.b2Manifold = exports.b2ManifoldType = exports.b2ManifoldPoint = exports.b2ContactID = exports.b2ContactFeature = exports.b2ContactFeatureType = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_distance_1 = __webpack_require__(/*! ./b2_distance */ \"./src/box2d/collision/b2_distance.ts\");\nvar b2ContactFeatureType;\n(function (b2ContactFeatureType) {\n    b2ContactFeatureType[b2ContactFeatureType[\"e_vertex\"] = 0] = \"e_vertex\";\n    b2ContactFeatureType[b2ContactFeatureType[\"e_face\"] = 1] = \"e_face\";\n})(b2ContactFeatureType = exports.b2ContactFeatureType || (exports.b2ContactFeatureType = {}));\nvar b2ContactFeature = (function () {\n    function b2ContactFeature() {\n        this._key = 0;\n        this._key_invalid = false;\n        this._indexA = 0;\n        this._indexB = 0;\n        this._typeA = 0;\n        this._typeB = 0;\n    }\n    Object.defineProperty(b2ContactFeature.prototype, \"key\", {\n        get: function () {\n            if (this._key_invalid) {\n                this._key_invalid = false;\n                this._key = this._indexA | (this._indexB << 8) | (this._typeA << 16) | (this._typeB << 24);\n            }\n            return this._key;\n        },\n        set: function (value) {\n            this._key = value;\n            this._key_invalid = false;\n            this._indexA = this._key & 0xff;\n            this._indexB = (this._key >> 8) & 0xff;\n            this._typeA = (this._key >> 16) & 0xff;\n            this._typeB = (this._key >> 24) & 0xff;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2ContactFeature.prototype, \"indexA\", {\n        get: function () {\n            return this._indexA;\n        },\n        set: function (value) {\n            this._indexA = value;\n            this._key_invalid = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2ContactFeature.prototype, \"indexB\", {\n        get: function () {\n            return this._indexB;\n        },\n        set: function (value) {\n            this._indexB = value;\n            this._key_invalid = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2ContactFeature.prototype, \"typeA\", {\n        get: function () {\n            return this._typeA;\n        },\n        set: function (value) {\n            this._typeA = value;\n            this._key_invalid = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2ContactFeature.prototype, \"typeB\", {\n        get: function () {\n            return this._typeB;\n        },\n        set: function (value) {\n            this._typeB = value;\n            this._key_invalid = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return b2ContactFeature;\n}());\nexports.b2ContactFeature = b2ContactFeature;\nvar b2ContactID = (function () {\n    function b2ContactID() {\n        this.cf = new b2ContactFeature();\n    }\n    b2ContactID.prototype.Copy = function (o) {\n        this.key = o.key;\n        return this;\n    };\n    b2ContactID.prototype.Clone = function () {\n        return new b2ContactID().Copy(this);\n    };\n    Object.defineProperty(b2ContactID.prototype, \"key\", {\n        get: function () {\n            return this.cf.key;\n        },\n        set: function (value) {\n            this.cf.key = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return b2ContactID;\n}());\nexports.b2ContactID = b2ContactID;\nvar b2ManifoldPoint = (function () {\n    function b2ManifoldPoint() {\n        this.localPoint = new b2_math_1.b2Vec2();\n        this.normalImpulse = 0;\n        this.tangentImpulse = 0;\n        this.id = new b2ContactID();\n    }\n    b2ManifoldPoint.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2ManifoldPoint(); });\n    };\n    b2ManifoldPoint.prototype.Reset = function () {\n        this.localPoint.SetZero();\n        this.normalImpulse = 0;\n        this.tangentImpulse = 0;\n        this.id.key = 0;\n    };\n    b2ManifoldPoint.prototype.Copy = function (o) {\n        this.localPoint.Copy(o.localPoint);\n        this.normalImpulse = o.normalImpulse;\n        this.tangentImpulse = o.tangentImpulse;\n        this.id.Copy(o.id);\n        return this;\n    };\n    return b2ManifoldPoint;\n}());\nexports.b2ManifoldPoint = b2ManifoldPoint;\nvar b2ManifoldType;\n(function (b2ManifoldType) {\n    b2ManifoldType[b2ManifoldType[\"e_unknown\"] = -1] = \"e_unknown\";\n    b2ManifoldType[b2ManifoldType[\"e_circles\"] = 0] = \"e_circles\";\n    b2ManifoldType[b2ManifoldType[\"e_faceA\"] = 1] = \"e_faceA\";\n    b2ManifoldType[b2ManifoldType[\"e_faceB\"] = 2] = \"e_faceB\";\n})(b2ManifoldType = exports.b2ManifoldType || (exports.b2ManifoldType = {}));\nvar b2Manifold = (function () {\n    function b2Manifold() {\n        this.points = b2ManifoldPoint.MakeArray(b2_settings_1.b2_maxManifoldPoints);\n        this.localNormal = new b2_math_1.b2Vec2();\n        this.localPoint = new b2_math_1.b2Vec2();\n        this.type = b2ManifoldType.e_unknown;\n        this.pointCount = 0;\n    }\n    b2Manifold.prototype.Reset = function () {\n        for (var i = 0; i < b2_settings_1.b2_maxManifoldPoints; ++i) {\n            this.points[i].Reset();\n        }\n        this.localNormal.SetZero();\n        this.localPoint.SetZero();\n        this.type = b2ManifoldType.e_unknown;\n        this.pointCount = 0;\n    };\n    b2Manifold.prototype.Copy = function (o) {\n        this.pointCount = o.pointCount;\n        for (var i = 0; i < b2_settings_1.b2_maxManifoldPoints; ++i) {\n            this.points[i].Copy(o.points[i]);\n        }\n        this.localNormal.Copy(o.localNormal);\n        this.localPoint.Copy(o.localPoint);\n        this.type = o.type;\n        return this;\n    };\n    b2Manifold.prototype.Clone = function () {\n        return new b2Manifold().Copy(this);\n    };\n    return b2Manifold;\n}());\nexports.b2Manifold = b2Manifold;\nvar b2WorldManifold = (function () {\n    function b2WorldManifold() {\n        this.normal = new b2_math_1.b2Vec2();\n        this.points = b2_math_1.b2Vec2.MakeArray(b2_settings_1.b2_maxManifoldPoints);\n        this.separations = b2_settings_1.b2MakeNumberArray(b2_settings_1.b2_maxManifoldPoints);\n    }\n    b2WorldManifold.prototype.Initialize = function (manifold, xfA, radiusA, xfB, radiusB) {\n        if (manifold.pointCount === 0) {\n            return;\n        }\n        switch (manifold.type) {\n            case b2ManifoldType.e_circles: {\n                this.normal.Set(1, 0);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_pointA);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, manifold.points[0].localPoint, b2WorldManifold.Initialize_s_pointB);\n                if (b2_math_1.b2Vec2.DistanceSquaredVV(pointA, pointB) > b2_settings_1.b2_epsilon_sq) {\n                    b2_math_1.b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\n                }\n                var cA = b2_math_1.b2Vec2.AddVMulSV(pointA, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);\n                var cB = b2_math_1.b2Vec2.SubVMulSV(pointB, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);\n                b2_math_1.b2Vec2.MidVV(cA, cB, this.points[0]);\n                this.separations[0] = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(cB, cA, b2_math_1.b2Vec2.s_t0), this.normal);\n                break;\n            }\n            case b2ManifoldType.e_faceA: {\n                b2_math_1.b2Rot.MulRV(xfA.q, manifold.localNormal, this.normal);\n                var planePoint = b2_math_1.b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);\n                for (var i = 0; i < manifold.pointCount; ++i) {\n                    var clipPoint = b2_math_1.b2Transform.MulXV(xfB, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);\n                    var s = radiusA - b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(clipPoint, planePoint, b2_math_1.b2Vec2.s_t0), this.normal);\n                    var cA = b2_math_1.b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cA);\n                    var cB = b2_math_1.b2Vec2.SubVMulSV(clipPoint, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);\n                    b2_math_1.b2Vec2.MidVV(cA, cB, this.points[i]);\n                    this.separations[i] = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(cB, cA, b2_math_1.b2Vec2.s_t0), this.normal);\n                }\n                break;\n            }\n            case b2ManifoldType.e_faceB: {\n                b2_math_1.b2Rot.MulRV(xfB.q, manifold.localNormal, this.normal);\n                var planePoint = b2_math_1.b2Transform.MulXV(xfB, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);\n                for (var i = 0; i < manifold.pointCount; ++i) {\n                    var clipPoint = b2_math_1.b2Transform.MulXV(xfA, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);\n                    var s = radiusB - b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(clipPoint, planePoint, b2_math_1.b2Vec2.s_t0), this.normal);\n                    var cB = b2_math_1.b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cB);\n                    var cA = b2_math_1.b2Vec2.SubVMulSV(clipPoint, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);\n                    b2_math_1.b2Vec2.MidVV(cA, cB, this.points[i]);\n                    this.separations[i] = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(cA, cB, b2_math_1.b2Vec2.s_t0), this.normal);\n                }\n                this.normal.SelfNeg();\n                break;\n            }\n        }\n    };\n    b2WorldManifold.Initialize_s_pointA = new b2_math_1.b2Vec2();\n    b2WorldManifold.Initialize_s_pointB = new b2_math_1.b2Vec2();\n    b2WorldManifold.Initialize_s_cA = new b2_math_1.b2Vec2();\n    b2WorldManifold.Initialize_s_cB = new b2_math_1.b2Vec2();\n    b2WorldManifold.Initialize_s_planePoint = new b2_math_1.b2Vec2();\n    b2WorldManifold.Initialize_s_clipPoint = new b2_math_1.b2Vec2();\n    return b2WorldManifold;\n}());\nexports.b2WorldManifold = b2WorldManifold;\nvar b2PointState;\n(function (b2PointState) {\n    b2PointState[b2PointState[\"b2_nullState\"] = 0] = \"b2_nullState\";\n    b2PointState[b2PointState[\"b2_addState\"] = 1] = \"b2_addState\";\n    b2PointState[b2PointState[\"b2_persistState\"] = 2] = \"b2_persistState\";\n    b2PointState[b2PointState[\"b2_removeState\"] = 3] = \"b2_removeState\";\n})(b2PointState = exports.b2PointState || (exports.b2PointState = {}));\nfunction b2GetPointStates(state1, state2, manifold1, manifold2) {\n    var i;\n    for (i = 0; i < manifold1.pointCount; ++i) {\n        var id = manifold1.points[i].id;\n        var key = id.key;\n        state1[i] = b2PointState.b2_removeState;\n        for (var j = 0, jct = manifold2.pointCount; j < jct; ++j) {\n            if (manifold2.points[j].id.key === key) {\n                state1[i] = b2PointState.b2_persistState;\n                break;\n            }\n        }\n    }\n    for (; i < b2_settings_1.b2_maxManifoldPoints; ++i) {\n        state1[i] = b2PointState.b2_nullState;\n    }\n    for (i = 0; i < manifold2.pointCount; ++i) {\n        var id = manifold2.points[i].id;\n        var key = id.key;\n        state2[i] = b2PointState.b2_addState;\n        for (var j = 0, jct = manifold1.pointCount; j < jct; ++j) {\n            if (manifold1.points[j].id.key === key) {\n                state2[i] = b2PointState.b2_persistState;\n                break;\n            }\n        }\n    }\n    for (; i < b2_settings_1.b2_maxManifoldPoints; ++i) {\n        state2[i] = b2PointState.b2_nullState;\n    }\n}\nexports.b2GetPointStates = b2GetPointStates;\nvar b2ClipVertex = (function () {\n    function b2ClipVertex() {\n        this.v = new b2_math_1.b2Vec2();\n        this.id = new b2ContactID();\n    }\n    b2ClipVertex.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2ClipVertex(); });\n    };\n    b2ClipVertex.prototype.Copy = function (other) {\n        this.v.Copy(other.v);\n        this.id.Copy(other.id);\n        return this;\n    };\n    return b2ClipVertex;\n}());\nexports.b2ClipVertex = b2ClipVertex;\nvar b2RayCastInput = (function () {\n    function b2RayCastInput() {\n        this.p1 = new b2_math_1.b2Vec2();\n        this.p2 = new b2_math_1.b2Vec2();\n        this.maxFraction = 1;\n    }\n    b2RayCastInput.prototype.Copy = function (o) {\n        this.p1.Copy(o.p1);\n        this.p2.Copy(o.p2);\n        this.maxFraction = o.maxFraction;\n        return this;\n    };\n    return b2RayCastInput;\n}());\nexports.b2RayCastInput = b2RayCastInput;\nvar b2RayCastOutput = (function () {\n    function b2RayCastOutput() {\n        this.normal = new b2_math_1.b2Vec2();\n        this.fraction = 0;\n    }\n    b2RayCastOutput.prototype.Copy = function (o) {\n        this.normal.Copy(o.normal);\n        this.fraction = o.fraction;\n        return this;\n    };\n    return b2RayCastOutput;\n}());\nexports.b2RayCastOutput = b2RayCastOutput;\nvar b2AABB = (function () {\n    function b2AABB() {\n        this.lowerBound = new b2_math_1.b2Vec2();\n        this.upperBound = new b2_math_1.b2Vec2();\n        this.m_cache_center = new b2_math_1.b2Vec2();\n        this.m_cache_extent = new b2_math_1.b2Vec2();\n    }\n    b2AABB.prototype.Copy = function (o) {\n        this.lowerBound.Copy(o.lowerBound);\n        this.upperBound.Copy(o.upperBound);\n        return this;\n    };\n    b2AABB.prototype.IsValid = function () {\n        if (!this.lowerBound.IsValid()) {\n            return false;\n        }\n        if (!this.upperBound.IsValid()) {\n            return false;\n        }\n        if (this.upperBound.x < this.lowerBound.x) {\n            return false;\n        }\n        if (this.upperBound.y < this.lowerBound.y) {\n            return false;\n        }\n        return true;\n    };\n    b2AABB.prototype.GetCenter = function () {\n        return b2_math_1.b2Vec2.MidVV(this.lowerBound, this.upperBound, this.m_cache_center);\n    };\n    b2AABB.prototype.GetExtents = function () {\n        return b2_math_1.b2Vec2.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent);\n    };\n    b2AABB.prototype.GetPerimeter = function () {\n        var wx = this.upperBound.x - this.lowerBound.x;\n        var wy = this.upperBound.y - this.lowerBound.y;\n        return 2 * (wx + wy);\n    };\n    b2AABB.prototype.Combine1 = function (aabb) {\n        this.lowerBound.x = b2_math_1.b2Min(this.lowerBound.x, aabb.lowerBound.x);\n        this.lowerBound.y = b2_math_1.b2Min(this.lowerBound.y, aabb.lowerBound.y);\n        this.upperBound.x = b2_math_1.b2Max(this.upperBound.x, aabb.upperBound.x);\n        this.upperBound.y = b2_math_1.b2Max(this.upperBound.y, aabb.upperBound.y);\n        return this;\n    };\n    b2AABB.prototype.Combine2 = function (aabb1, aabb2) {\n        this.lowerBound.x = b2_math_1.b2Min(aabb1.lowerBound.x, aabb2.lowerBound.x);\n        this.lowerBound.y = b2_math_1.b2Min(aabb1.lowerBound.y, aabb2.lowerBound.y);\n        this.upperBound.x = b2_math_1.b2Max(aabb1.upperBound.x, aabb2.upperBound.x);\n        this.upperBound.y = b2_math_1.b2Max(aabb1.upperBound.y, aabb2.upperBound.y);\n        return this;\n    };\n    b2AABB.Combine = function (aabb1, aabb2, out) {\n        out.Combine2(aabb1, aabb2);\n        return out;\n    };\n    b2AABB.prototype.Contains = function (aabb) {\n        var result = true;\n        result = result && this.lowerBound.x <= aabb.lowerBound.x;\n        result = result && this.lowerBound.y <= aabb.lowerBound.y;\n        result = result && aabb.upperBound.x <= this.upperBound.x;\n        result = result && aabb.upperBound.y <= this.upperBound.y;\n        return result;\n    };\n    b2AABB.prototype.RayCast = function (output, input) {\n        var tmin = (-b2_settings_1.b2_maxFloat);\n        var tmax = b2_settings_1.b2_maxFloat;\n        var p_x = input.p1.x;\n        var p_y = input.p1.y;\n        var d_x = input.p2.x - input.p1.x;\n        var d_y = input.p2.y - input.p1.y;\n        var absD_x = b2_math_1.b2Abs(d_x);\n        var absD_y = b2_math_1.b2Abs(d_y);\n        var normal = output.normal;\n        if (absD_x < b2_settings_1.b2_epsilon) {\n            if (p_x < this.lowerBound.x || this.upperBound.x < p_x) {\n                return false;\n            }\n        }\n        else {\n            var inv_d = 1 / d_x;\n            var t1 = (this.lowerBound.x - p_x) * inv_d;\n            var t2 = (this.upperBound.x - p_x) * inv_d;\n            var s = (-1);\n            if (t1 > t2) {\n                var t3 = t1;\n                t1 = t2;\n                t2 = t3;\n                s = 1;\n            }\n            if (t1 > tmin) {\n                normal.x = s;\n                normal.y = 0;\n                tmin = t1;\n            }\n            tmax = b2_math_1.b2Min(tmax, t2);\n            if (tmin > tmax) {\n                return false;\n            }\n        }\n        if (absD_y < b2_settings_1.b2_epsilon) {\n            if (p_y < this.lowerBound.y || this.upperBound.y < p_y) {\n                return false;\n            }\n        }\n        else {\n            var inv_d = 1 / d_y;\n            var t1 = (this.lowerBound.y - p_y) * inv_d;\n            var t2 = (this.upperBound.y - p_y) * inv_d;\n            var s = (-1);\n            if (t1 > t2) {\n                var t3 = t1;\n                t1 = t2;\n                t2 = t3;\n                s = 1;\n            }\n            if (t1 > tmin) {\n                normal.x = 0;\n                normal.y = s;\n                tmin = t1;\n            }\n            tmax = b2_math_1.b2Min(tmax, t2);\n            if (tmin > tmax) {\n                return false;\n            }\n        }\n        if (tmin < 0 || input.maxFraction < tmin) {\n            return false;\n        }\n        output.fraction = tmin;\n        return true;\n    };\n    b2AABB.prototype.TestContain = function (point) {\n        if (point.x < this.lowerBound.x || this.upperBound.x < point.x) {\n            return false;\n        }\n        if (point.y < this.lowerBound.y || this.upperBound.y < point.y) {\n            return false;\n        }\n        return true;\n    };\n    b2AABB.prototype.TestOverlap = function (other) {\n        if (this.upperBound.x < other.lowerBound.x) {\n            return false;\n        }\n        if (this.upperBound.y < other.lowerBound.y) {\n            return false;\n        }\n        if (other.upperBound.x < this.lowerBound.x) {\n            return false;\n        }\n        if (other.upperBound.y < this.lowerBound.y) {\n            return false;\n        }\n        return true;\n    };\n    return b2AABB;\n}());\nexports.b2AABB = b2AABB;\nfunction b2TestOverlapAABB(a, b) {\n    if (a.upperBound.x < b.lowerBound.x) {\n        return false;\n    }\n    if (a.upperBound.y < b.lowerBound.y) {\n        return false;\n    }\n    if (b.upperBound.x < a.lowerBound.x) {\n        return false;\n    }\n    if (b.upperBound.y < a.lowerBound.y) {\n        return false;\n    }\n    return true;\n}\nexports.b2TestOverlapAABB = b2TestOverlapAABB;\nfunction b2ClipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n    var count = 0;\n    var vIn0 = vIn[0];\n    var vIn1 = vIn[1];\n    var distance0 = b2_math_1.b2Vec2.DotVV(normal, vIn0.v) - offset;\n    var distance1 = b2_math_1.b2Vec2.DotVV(normal, vIn1.v) - offset;\n    if (distance0 <= 0) {\n        vOut[count++].Copy(vIn0);\n    }\n    if (distance1 <= 0) {\n        vOut[count++].Copy(vIn1);\n    }\n    if (distance0 * distance1 < 0) {\n        var interp = distance0 / (distance0 - distance1);\n        var v = vOut[count].v;\n        v.x = vIn0.v.x + interp * (vIn1.v.x - vIn0.v.x);\n        v.y = vIn0.v.y + interp * (vIn1.v.y - vIn0.v.y);\n        var id = vOut[count].id;\n        id.cf.indexA = vertexIndexA;\n        id.cf.indexB = vIn0.id.cf.indexB;\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\n        id.cf.typeB = b2ContactFeatureType.e_face;\n        ++count;\n    }\n    return count;\n}\nexports.b2ClipSegmentToLine = b2ClipSegmentToLine;\nvar b2TestOverlapShape_s_input = new b2_distance_1.b2DistanceInput();\nvar b2TestOverlapShape_s_simplexCache = new b2_distance_1.b2SimplexCache();\nvar b2TestOverlapShape_s_output = new b2_distance_1.b2DistanceOutput();\nfunction b2TestOverlapShape(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n    var input = b2TestOverlapShape_s_input.Reset();\n    input.proxyA.SetShape(shapeA, indexA);\n    input.proxyB.SetShape(shapeB, indexB);\n    input.transformA.Copy(xfA);\n    input.transformB.Copy(xfB);\n    input.useRadii = true;\n    var simplexCache = b2TestOverlapShape_s_simplexCache.Reset();\n    simplexCache.count = 0;\n    var output = b2TestOverlapShape_s_output.Reset();\n    b2_distance_1.b2Distance(output, simplexCache, input);\n    return output.distance < 10 * b2_settings_1.b2_epsilon;\n}\nexports.b2TestOverlapShape = b2TestOverlapShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_collision.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_distance.ts":
/*!********************************************!*\
  !*** ./src/box2d/collision/b2_distance.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ShapeCast = exports.b2Distance = exports.b2Simplex = exports.b2SimplexVertex = exports.b2_gjk_reset = exports.b2_gjkMaxIters = exports.b2_gjkIters = exports.b2_gjkCalls = exports.b2ShapeCastOutput = exports.b2ShapeCastInput = exports.b2DistanceOutput = exports.b2DistanceInput = exports.b2SimplexCache = exports.b2DistanceProxy = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2DistanceProxy = (function () {\n    function b2DistanceProxy() {\n        this.m_buffer = b2_math_1.b2Vec2.MakeArray(2);\n        this.m_vertices = this.m_buffer;\n        this.m_count = 0;\n        this.m_radius = 0;\n    }\n    b2DistanceProxy.prototype.Copy = function (other) {\n        if (other.m_vertices === other.m_buffer) {\n            this.m_vertices = this.m_buffer;\n            this.m_buffer[0].Copy(other.m_buffer[0]);\n            this.m_buffer[1].Copy(other.m_buffer[1]);\n        }\n        else {\n            this.m_vertices = other.m_vertices;\n        }\n        this.m_count = other.m_count;\n        this.m_radius = other.m_radius;\n        return this;\n    };\n    b2DistanceProxy.prototype.Reset = function () {\n        this.m_vertices = this.m_buffer;\n        this.m_count = 0;\n        this.m_radius = 0;\n        return this;\n    };\n    b2DistanceProxy.prototype.SetShape = function (shape, index) {\n        shape.SetupDistanceProxy(this, index);\n    };\n    b2DistanceProxy.prototype.SetVerticesRadius = function (vertices, count, radius) {\n        this.m_vertices = vertices;\n        this.m_count = count;\n        this.m_radius = radius;\n    };\n    b2DistanceProxy.prototype.GetSupport = function (d) {\n        var bestIndex = 0;\n        var bestValue = b2_math_1.b2Vec2.DotVV(this.m_vertices[0], d);\n        for (var i = 1; i < this.m_count; ++i) {\n            var value = b2_math_1.b2Vec2.DotVV(this.m_vertices[i], d);\n            if (value > bestValue) {\n                bestIndex = i;\n                bestValue = value;\n            }\n        }\n        return bestIndex;\n    };\n    b2DistanceProxy.prototype.GetSupportVertex = function (d) {\n        var bestIndex = 0;\n        var bestValue = b2_math_1.b2Vec2.DotVV(this.m_vertices[0], d);\n        for (var i = 1; i < this.m_count; ++i) {\n            var value = b2_math_1.b2Vec2.DotVV(this.m_vertices[i], d);\n            if (value > bestValue) {\n                bestIndex = i;\n                bestValue = value;\n            }\n        }\n        return this.m_vertices[bestIndex];\n    };\n    b2DistanceProxy.prototype.GetVertexCount = function () {\n        return this.m_count;\n    };\n    b2DistanceProxy.prototype.GetVertex = function (index) {\n        return this.m_vertices[index];\n    };\n    return b2DistanceProxy;\n}());\nexports.b2DistanceProxy = b2DistanceProxy;\nvar b2SimplexCache = (function () {\n    function b2SimplexCache() {\n        this.metric = 0;\n        this.count = 0;\n        this.indexA = [0, 0, 0];\n        this.indexB = [0, 0, 0];\n    }\n    b2SimplexCache.prototype.Reset = function () {\n        this.metric = 0;\n        this.count = 0;\n        return this;\n    };\n    return b2SimplexCache;\n}());\nexports.b2SimplexCache = b2SimplexCache;\nvar b2DistanceInput = (function () {\n    function b2DistanceInput() {\n        this.proxyA = new b2DistanceProxy();\n        this.proxyB = new b2DistanceProxy();\n        this.transformA = new b2_math_1.b2Transform();\n        this.transformB = new b2_math_1.b2Transform();\n        this.useRadii = false;\n    }\n    b2DistanceInput.prototype.Reset = function () {\n        this.proxyA.Reset();\n        this.proxyB.Reset();\n        this.transformA.SetIdentity();\n        this.transformB.SetIdentity();\n        this.useRadii = false;\n        return this;\n    };\n    return b2DistanceInput;\n}());\nexports.b2DistanceInput = b2DistanceInput;\nvar b2DistanceOutput = (function () {\n    function b2DistanceOutput() {\n        this.pointA = new b2_math_1.b2Vec2();\n        this.pointB = new b2_math_1.b2Vec2();\n        this.distance = 0;\n        this.iterations = 0;\n    }\n    b2DistanceOutput.prototype.Reset = function () {\n        this.pointA.SetZero();\n        this.pointB.SetZero();\n        this.distance = 0;\n        this.iterations = 0;\n        return this;\n    };\n    return b2DistanceOutput;\n}());\nexports.b2DistanceOutput = b2DistanceOutput;\nvar b2ShapeCastInput = (function () {\n    function b2ShapeCastInput() {\n        this.proxyA = new b2DistanceProxy();\n        this.proxyB = new b2DistanceProxy();\n        this.transformA = new b2_math_1.b2Transform();\n        this.transformB = new b2_math_1.b2Transform();\n        this.translationB = new b2_math_1.b2Vec2();\n    }\n    return b2ShapeCastInput;\n}());\nexports.b2ShapeCastInput = b2ShapeCastInput;\nvar b2ShapeCastOutput = (function () {\n    function b2ShapeCastOutput() {\n        this.point = new b2_math_1.b2Vec2();\n        this.normal = new b2_math_1.b2Vec2();\n        this.lambda = 0.0;\n        this.iterations = 0;\n    }\n    return b2ShapeCastOutput;\n}());\nexports.b2ShapeCastOutput = b2ShapeCastOutput;\nexports.b2_gjkCalls = 0;\nexports.b2_gjkIters = 0;\nexports.b2_gjkMaxIters = 0;\nfunction b2_gjk_reset() {\n    exports.b2_gjkCalls = 0;\n    exports.b2_gjkIters = 0;\n    exports.b2_gjkMaxIters = 0;\n}\nexports.b2_gjk_reset = b2_gjk_reset;\nvar b2SimplexVertex = (function () {\n    function b2SimplexVertex() {\n        this.wA = new b2_math_1.b2Vec2();\n        this.wB = new b2_math_1.b2Vec2();\n        this.w = new b2_math_1.b2Vec2();\n        this.a = 0;\n        this.indexA = 0;\n        this.indexB = 0;\n    }\n    b2SimplexVertex.prototype.Copy = function (other) {\n        this.wA.Copy(other.wA);\n        this.wB.Copy(other.wB);\n        this.w.Copy(other.w);\n        this.a = other.a;\n        this.indexA = other.indexA;\n        this.indexB = other.indexB;\n        return this;\n    };\n    return b2SimplexVertex;\n}());\nexports.b2SimplexVertex = b2SimplexVertex;\nvar b2Simplex = (function () {\n    function b2Simplex() {\n        this.m_v1 = new b2SimplexVertex();\n        this.m_v2 = new b2SimplexVertex();\n        this.m_v3 = new b2SimplexVertex();\n        this.m_vertices = [];\n        this.m_count = 0;\n        this.m_vertices[0] = this.m_v1;\n        this.m_vertices[1] = this.m_v2;\n        this.m_vertices[2] = this.m_v3;\n    }\n    b2Simplex.prototype.ReadCache = function (cache, proxyA, transformA, proxyB, transformB) {\n        this.m_count = cache.count;\n        var vertices = this.m_vertices;\n        for (var i = 0; i < this.m_count; ++i) {\n            var v = vertices[i];\n            v.indexA = cache.indexA[i];\n            v.indexB = cache.indexB[i];\n            var wALocal = proxyA.GetVertex(v.indexA);\n            var wBLocal = proxyB.GetVertex(v.indexB);\n            b2_math_1.b2Transform.MulXV(transformA, wALocal, v.wA);\n            b2_math_1.b2Transform.MulXV(transformB, wBLocal, v.wB);\n            b2_math_1.b2Vec2.SubVV(v.wB, v.wA, v.w);\n            v.a = 0;\n        }\n        if (this.m_count > 1) {\n            var metric1 = cache.metric;\n            var metric2 = this.GetMetric();\n            if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < b2_settings_1.b2_epsilon) {\n                this.m_count = 0;\n            }\n        }\n        if (this.m_count === 0) {\n            var v = vertices[0];\n            v.indexA = 0;\n            v.indexB = 0;\n            var wALocal = proxyA.GetVertex(0);\n            var wBLocal = proxyB.GetVertex(0);\n            b2_math_1.b2Transform.MulXV(transformA, wALocal, v.wA);\n            b2_math_1.b2Transform.MulXV(transformB, wBLocal, v.wB);\n            b2_math_1.b2Vec2.SubVV(v.wB, v.wA, v.w);\n            v.a = 1;\n            this.m_count = 1;\n        }\n    };\n    b2Simplex.prototype.WriteCache = function (cache) {\n        cache.metric = this.GetMetric();\n        cache.count = this.m_count;\n        var vertices = this.m_vertices;\n        for (var i = 0; i < this.m_count; ++i) {\n            cache.indexA[i] = vertices[i].indexA;\n            cache.indexB[i] = vertices[i].indexB;\n        }\n    };\n    b2Simplex.prototype.GetSearchDirection = function (out) {\n        switch (this.m_count) {\n            case 1:\n                return b2_math_1.b2Vec2.NegV(this.m_v1.w, out);\n            case 2: {\n                var e12 = b2_math_1.b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, out);\n                var sgn = b2_math_1.b2Vec2.CrossVV(e12, b2_math_1.b2Vec2.NegV(this.m_v1.w, b2_math_1.b2Vec2.s_t0));\n                if (sgn > 0) {\n                    return b2_math_1.b2Vec2.CrossOneV(e12, out);\n                }\n                else {\n                    return b2_math_1.b2Vec2.CrossVOne(e12, out);\n                }\n            }\n            default:\n                return out.SetZero();\n        }\n    };\n    b2Simplex.prototype.GetClosestPoint = function (out) {\n        switch (this.m_count) {\n            case 0:\n                return out.SetZero();\n            case 1:\n                return out.Copy(this.m_v1.w);\n            case 2:\n                return out.Set(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);\n            case 3:\n                return out.SetZero();\n            default:\n                return out.SetZero();\n        }\n    };\n    b2Simplex.prototype.GetWitnessPoints = function (pA, pB) {\n        switch (this.m_count) {\n            case 0:\n                break;\n            case 1:\n                pA.Copy(this.m_v1.wA);\n                pB.Copy(this.m_v1.wB);\n                break;\n            case 2:\n                pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;\n                pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;\n                pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;\n                pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;\n                break;\n            case 3:\n                pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;\n                pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;\n                break;\n            default:\n                break;\n        }\n    };\n    b2Simplex.prototype.GetMetric = function () {\n        switch (this.m_count) {\n            case 0:\n                return 0;\n            case 1:\n                return 0;\n            case 2:\n                return b2_math_1.b2Vec2.DistanceVV(this.m_v1.w, this.m_v2.w);\n            case 3:\n                return b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(this.m_v3.w, this.m_v1.w, b2_math_1.b2Vec2.s_t1));\n            default:\n                return 0;\n        }\n    };\n    b2Simplex.prototype.Solve2 = function () {\n        var w1 = this.m_v1.w;\n        var w2 = this.m_v2.w;\n        var e12 = b2_math_1.b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\n        var d12_2 = (-b2_math_1.b2Vec2.DotVV(w1, e12));\n        if (d12_2 <= 0) {\n            this.m_v1.a = 1;\n            this.m_count = 1;\n            return;\n        }\n        var d12_1 = b2_math_1.b2Vec2.DotVV(w2, e12);\n        if (d12_1 <= 0) {\n            this.m_v2.a = 1;\n            this.m_count = 1;\n            this.m_v1.Copy(this.m_v2);\n            return;\n        }\n        var inv_d12 = 1 / (d12_1 + d12_2);\n        this.m_v1.a = d12_1 * inv_d12;\n        this.m_v2.a = d12_2 * inv_d12;\n        this.m_count = 2;\n    };\n    b2Simplex.prototype.Solve3 = function () {\n        var w1 = this.m_v1.w;\n        var w2 = this.m_v2.w;\n        var w3 = this.m_v3.w;\n        var e12 = b2_math_1.b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\n        var w1e12 = b2_math_1.b2Vec2.DotVV(w1, e12);\n        var w2e12 = b2_math_1.b2Vec2.DotVV(w2, e12);\n        var d12_1 = w2e12;\n        var d12_2 = (-w1e12);\n        var e13 = b2_math_1.b2Vec2.SubVV(w3, w1, b2Simplex.s_e13);\n        var w1e13 = b2_math_1.b2Vec2.DotVV(w1, e13);\n        var w3e13 = b2_math_1.b2Vec2.DotVV(w3, e13);\n        var d13_1 = w3e13;\n        var d13_2 = (-w1e13);\n        var e23 = b2_math_1.b2Vec2.SubVV(w3, w2, b2Simplex.s_e23);\n        var w2e23 = b2_math_1.b2Vec2.DotVV(w2, e23);\n        var w3e23 = b2_math_1.b2Vec2.DotVV(w3, e23);\n        var d23_1 = w3e23;\n        var d23_2 = (-w2e23);\n        var n123 = b2_math_1.b2Vec2.CrossVV(e12, e13);\n        var d123_1 = n123 * b2_math_1.b2Vec2.CrossVV(w2, w3);\n        var d123_2 = n123 * b2_math_1.b2Vec2.CrossVV(w3, w1);\n        var d123_3 = n123 * b2_math_1.b2Vec2.CrossVV(w1, w2);\n        if (d12_2 <= 0 && d13_2 <= 0) {\n            this.m_v1.a = 1;\n            this.m_count = 1;\n            return;\n        }\n        if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {\n            var inv_d12 = 1 / (d12_1 + d12_2);\n            this.m_v1.a = d12_1 * inv_d12;\n            this.m_v2.a = d12_2 * inv_d12;\n            this.m_count = 2;\n            return;\n        }\n        if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {\n            var inv_d13 = 1 / (d13_1 + d13_2);\n            this.m_v1.a = d13_1 * inv_d13;\n            this.m_v3.a = d13_2 * inv_d13;\n            this.m_count = 2;\n            this.m_v2.Copy(this.m_v3);\n            return;\n        }\n        if (d12_1 <= 0 && d23_2 <= 0) {\n            this.m_v2.a = 1;\n            this.m_count = 1;\n            this.m_v1.Copy(this.m_v2);\n            return;\n        }\n        if (d13_1 <= 0 && d23_1 <= 0) {\n            this.m_v3.a = 1;\n            this.m_count = 1;\n            this.m_v1.Copy(this.m_v3);\n            return;\n        }\n        if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {\n            var inv_d23 = 1 / (d23_1 + d23_2);\n            this.m_v2.a = d23_1 * inv_d23;\n            this.m_v3.a = d23_2 * inv_d23;\n            this.m_count = 2;\n            this.m_v1.Copy(this.m_v3);\n            return;\n        }\n        var inv_d123 = 1 / (d123_1 + d123_2 + d123_3);\n        this.m_v1.a = d123_1 * inv_d123;\n        this.m_v2.a = d123_2 * inv_d123;\n        this.m_v3.a = d123_3 * inv_d123;\n        this.m_count = 3;\n    };\n    b2Simplex.s_e12 = new b2_math_1.b2Vec2();\n    b2Simplex.s_e13 = new b2_math_1.b2Vec2();\n    b2Simplex.s_e23 = new b2_math_1.b2Vec2();\n    return b2Simplex;\n}());\nexports.b2Simplex = b2Simplex;\nvar b2Distance_s_simplex = new b2Simplex();\nvar b2Distance_s_saveA = [0, 0, 0];\nvar b2Distance_s_saveB = [0, 0, 0];\nvar b2Distance_s_p = new b2_math_1.b2Vec2();\nvar b2Distance_s_d = new b2_math_1.b2Vec2();\nvar b2Distance_s_normal = new b2_math_1.b2Vec2();\nvar b2Distance_s_supportA = new b2_math_1.b2Vec2();\nvar b2Distance_s_supportB = new b2_math_1.b2Vec2();\nfunction b2Distance(output, cache, input) {\n    ++exports.b2_gjkCalls;\n    var proxyA = input.proxyA;\n    var proxyB = input.proxyB;\n    var transformA = input.transformA;\n    var transformB = input.transformB;\n    var simplex = b2Distance_s_simplex;\n    simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);\n    var vertices = simplex.m_vertices;\n    var k_maxIters = 20;\n    var saveA = b2Distance_s_saveA;\n    var saveB = b2Distance_s_saveB;\n    var saveCount = 0;\n    var iter = 0;\n    while (iter < k_maxIters) {\n        saveCount = simplex.m_count;\n        for (var i = 0; i < saveCount; ++i) {\n            saveA[i] = vertices[i].indexA;\n            saveB[i] = vertices[i].indexB;\n        }\n        switch (simplex.m_count) {\n            case 1:\n                break;\n            case 2:\n                simplex.Solve2();\n                break;\n            case 3:\n                simplex.Solve3();\n                break;\n            default:\n                break;\n        }\n        if (simplex.m_count === 3) {\n            break;\n        }\n        var d = simplex.GetSearchDirection(b2Distance_s_d);\n        if (d.LengthSquared() < b2_settings_1.b2_epsilon_sq) {\n            break;\n        }\n        var vertex = vertices[simplex.m_count];\n        vertex.indexA = proxyA.GetSupport(b2_math_1.b2Rot.MulTRV(transformA.q, b2_math_1.b2Vec2.NegV(d, b2_math_1.b2Vec2.s_t0), b2Distance_s_supportA));\n        b2_math_1.b2Transform.MulXV(transformA, proxyA.GetVertex(vertex.indexA), vertex.wA);\n        vertex.indexB = proxyB.GetSupport(b2_math_1.b2Rot.MulTRV(transformB.q, d, b2Distance_s_supportB));\n        b2_math_1.b2Transform.MulXV(transformB, proxyB.GetVertex(vertex.indexB), vertex.wB);\n        b2_math_1.b2Vec2.SubVV(vertex.wB, vertex.wA, vertex.w);\n        ++iter;\n        ++exports.b2_gjkIters;\n        var duplicate = false;\n        for (var i = 0; i < saveCount; ++i) {\n            if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\n                duplicate = true;\n                break;\n            }\n        }\n        if (duplicate) {\n            break;\n        }\n        ++simplex.m_count;\n    }\n    exports.b2_gjkMaxIters = b2_math_1.b2Max(exports.b2_gjkMaxIters, iter);\n    simplex.GetWitnessPoints(output.pointA, output.pointB);\n    output.distance = b2_math_1.b2Vec2.DistanceVV(output.pointA, output.pointB);\n    output.iterations = iter;\n    simplex.WriteCache(cache);\n    if (input.useRadii) {\n        var rA = proxyA.m_radius;\n        var rB = proxyB.m_radius;\n        if (output.distance > (rA + rB) && output.distance > b2_settings_1.b2_epsilon) {\n            output.distance -= rA + rB;\n            var normal = b2_math_1.b2Vec2.SubVV(output.pointB, output.pointA, b2Distance_s_normal);\n            normal.Normalize();\n            output.pointA.SelfMulAdd(rA, normal);\n            output.pointB.SelfMulSub(rB, normal);\n        }\n        else {\n            var p = b2_math_1.b2Vec2.MidVV(output.pointA, output.pointB, b2Distance_s_p);\n            output.pointA.Copy(p);\n            output.pointB.Copy(p);\n            output.distance = 0;\n        }\n    }\n}\nexports.b2Distance = b2Distance;\nvar b2ShapeCast_s_n = new b2_math_1.b2Vec2();\nvar b2ShapeCast_s_simplex = new b2Simplex();\nvar b2ShapeCast_s_wA = new b2_math_1.b2Vec2();\nvar b2ShapeCast_s_wB = new b2_math_1.b2Vec2();\nvar b2ShapeCast_s_v = new b2_math_1.b2Vec2();\nvar b2ShapeCast_s_p = new b2_math_1.b2Vec2();\nvar b2ShapeCast_s_pointA = new b2_math_1.b2Vec2();\nvar b2ShapeCast_s_pointB = new b2_math_1.b2Vec2();\nfunction b2ShapeCast(output, input) {\n    output.iterations = 0;\n    output.lambda = 1.0;\n    output.normal.SetZero();\n    output.point.SetZero();\n    var proxyA = input.proxyA;\n    var proxyB = input.proxyB;\n    var radiusA = b2_math_1.b2Max(proxyA.m_radius, b2_settings_1.b2_polygonRadius);\n    var radiusB = b2_math_1.b2Max(proxyB.m_radius, b2_settings_1.b2_polygonRadius);\n    var radius = radiusA + radiusB;\n    var xfA = input.transformA;\n    var xfB = input.transformB;\n    var r = input.translationB;\n    var n = b2ShapeCast_s_n.Set(0.0, 0.0);\n    var lambda = 0.0;\n    var simplex = b2ShapeCast_s_simplex;\n    simplex.m_count = 0;\n    var vertices = simplex.m_vertices;\n    var indexA = proxyA.GetSupport(b2_math_1.b2Rot.MulTRV(xfA.q, b2_math_1.b2Vec2.NegV(r, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0));\n    var wA = b2_math_1.b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);\n    var indexB = proxyB.GetSupport(b2_math_1.b2Rot.MulTRV(xfB.q, r, b2_math_1.b2Vec2.s_t0));\n    var wB = b2_math_1.b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);\n    var v = b2_math_1.b2Vec2.SubVV(wA, wB, b2ShapeCast_s_v);\n    var sigma = b2_math_1.b2Max(b2_settings_1.b2_polygonRadius, radius - b2_settings_1.b2_polygonRadius);\n    var tolerance = 0.5 * b2_settings_1.b2_linearSlop;\n    var k_maxIters = 20;\n    var iter = 0;\n    while (iter < k_maxIters && v.Length() - sigma > tolerance) {\n        output.iterations += 1;\n        indexA = proxyA.GetSupport(b2_math_1.b2Rot.MulTRV(xfA.q, b2_math_1.b2Vec2.NegV(v, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0));\n        wA = b2_math_1.b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);\n        indexB = proxyB.GetSupport(b2_math_1.b2Rot.MulTRV(xfB.q, v, b2_math_1.b2Vec2.s_t0));\n        wB = b2_math_1.b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);\n        var p = b2_math_1.b2Vec2.SubVV(wA, wB, b2ShapeCast_s_p);\n        v.Normalize();\n        var vp = b2_math_1.b2Vec2.DotVV(v, p);\n        var vr = b2_math_1.b2Vec2.DotVV(v, r);\n        if (vp - sigma > lambda * vr) {\n            if (vr <= 0.0) {\n                return false;\n            }\n            lambda = (vp - sigma) / vr;\n            if (lambda > 1.0) {\n                return false;\n            }\n            n.Copy(v).SelfNeg();\n            simplex.m_count = 0;\n        }\n        var vertex = vertices[simplex.m_count];\n        vertex.indexA = indexB;\n        vertex.wA.Copy(wB).SelfMulAdd(lambda, r);\n        vertex.indexB = indexA;\n        vertex.wB.Copy(wA);\n        vertex.w.Copy(vertex.wB).SelfSub(vertex.wA);\n        vertex.a = 1.0;\n        simplex.m_count += 1;\n        switch (simplex.m_count) {\n            case 1:\n                break;\n            case 2:\n                simplex.Solve2();\n                break;\n            case 3:\n                simplex.Solve3();\n                break;\n            default:\n        }\n        if (simplex.m_count === 3) {\n            return false;\n        }\n        simplex.GetClosestPoint(v);\n        ++iter;\n    }\n    if (iter === 0) {\n        return false;\n    }\n    var pointA = b2ShapeCast_s_pointA;\n    var pointB = b2ShapeCast_s_pointB;\n    simplex.GetWitnessPoints(pointA, pointB);\n    if (v.LengthSquared() > 0.0) {\n        n.Copy(v).SelfNeg();\n        n.Normalize();\n    }\n    output.normal.Copy(n);\n    output.lambda = lambda;\n    output.iterations = iter;\n    return true;\n}\nexports.b2ShapeCast = b2ShapeCast;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_distance.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_dynamic_tree.ts":
/*!************************************************!*\
  !*** ./src/box2d/collision/b2_dynamic_tree.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2DynamicTree = exports.b2TreeNode = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_growable_stack_1 = __webpack_require__(/*! ../common/b2_growable_stack */ \"./src/box2d/common/b2_growable_stack.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ./b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nfunction verify(value) {\n    if (value === null) {\n        throw new Error();\n    }\n    return value;\n}\nvar b2TreeNode = (function () {\n    function b2TreeNode(id) {\n        if (id === void 0) { id = 0; }\n        this.m_id = 0;\n        this.aabb = new b2_collision_1.b2AABB();\n        this._userData = null;\n        this.parent = null;\n        this.child1 = null;\n        this.child2 = null;\n        this.height = 0;\n        this.moved = false;\n        this.m_id = id;\n    }\n    Object.defineProperty(b2TreeNode.prototype, \"userData\", {\n        get: function () {\n            if (this._userData === null) {\n                throw new Error();\n            }\n            return this._userData;\n        },\n        set: function (value) {\n            if (this._userData !== null) {\n                throw new Error();\n            }\n            this._userData = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    b2TreeNode.prototype.Reset = function () {\n        this._userData = null;\n    };\n    b2TreeNode.prototype.IsLeaf = function () {\n        return this.child1 === null;\n    };\n    return b2TreeNode;\n}());\nexports.b2TreeNode = b2TreeNode;\nvar b2DynamicTree = (function () {\n    function b2DynamicTree() {\n        this.m_root = null;\n        this.m_freeList = null;\n        this.m_insertionCount = 0;\n        this.m_stack = new b2_growable_stack_1.b2GrowableStack(256);\n    }\n    b2DynamicTree.prototype.Query = function (aabb, callback) {\n        var stack = this.m_stack.Reset();\n        stack.Push(this.m_root);\n        while (stack.GetCount() > 0) {\n            var node = stack.Pop();\n            if (node === null) {\n                continue;\n            }\n            if (node.aabb.TestOverlap(aabb)) {\n                if (node.IsLeaf()) {\n                    var proceed = callback(node);\n                    if (!proceed) {\n                        return;\n                    }\n                }\n                else {\n                    stack.Push(node.child1);\n                    stack.Push(node.child2);\n                }\n            }\n        }\n    };\n    b2DynamicTree.prototype.QueryPoint = function (point, callback) {\n        var stack = this.m_stack.Reset();\n        stack.Push(this.m_root);\n        while (stack.GetCount() > 0) {\n            var node = stack.Pop();\n            if (node === null) {\n                continue;\n            }\n            if (node.aabb.TestContain(point)) {\n                if (node.IsLeaf()) {\n                    var proceed = callback(node);\n                    if (!proceed) {\n                        return;\n                    }\n                }\n                else {\n                    stack.Push(node.child1);\n                    stack.Push(node.child2);\n                }\n            }\n        }\n    };\n    b2DynamicTree.prototype.RayCast = function (input, callback) {\n        var p1 = input.p1;\n        var p2 = input.p2;\n        var r = b2_math_1.b2Vec2.SubVV(p2, p1, b2DynamicTree.s_r);\n        r.Normalize();\n        var v = b2_math_1.b2Vec2.CrossOneV(r, b2DynamicTree.s_v);\n        var abs_v = b2_math_1.b2Vec2.AbsV(v, b2DynamicTree.s_abs_v);\n        var maxFraction = input.maxFraction;\n        var segmentAABB = b2DynamicTree.s_segmentAABB;\n        var t_x = p1.x + maxFraction * (p2.x - p1.x);\n        var t_y = p1.y + maxFraction * (p2.y - p1.y);\n        segmentAABB.lowerBound.x = b2_math_1.b2Min(p1.x, t_x);\n        segmentAABB.lowerBound.y = b2_math_1.b2Min(p1.y, t_y);\n        segmentAABB.upperBound.x = b2_math_1.b2Max(p1.x, t_x);\n        segmentAABB.upperBound.y = b2_math_1.b2Max(p1.y, t_y);\n        var stack = this.m_stack.Reset();\n        stack.Push(this.m_root);\n        while (stack.GetCount() > 0) {\n            var node = stack.Pop();\n            if (node === null) {\n                continue;\n            }\n            if (!b2_collision_1.b2TestOverlapAABB(node.aabb, segmentAABB)) {\n                continue;\n            }\n            var c = node.aabb.GetCenter();\n            var h = node.aabb.GetExtents();\n            var separation = b2_math_1.b2Abs(b2_math_1.b2Vec2.DotVV(v, b2_math_1.b2Vec2.SubVV(p1, c, b2_math_1.b2Vec2.s_t0))) - b2_math_1.b2Vec2.DotVV(abs_v, h);\n            if (separation > 0) {\n                continue;\n            }\n            if (node.IsLeaf()) {\n                var subInput = b2DynamicTree.s_subInput;\n                subInput.p1.Copy(input.p1);\n                subInput.p2.Copy(input.p2);\n                subInput.maxFraction = maxFraction;\n                var value = callback(subInput, node);\n                if (value === 0) {\n                    return;\n                }\n                if (value > 0) {\n                    maxFraction = value;\n                    t_x = p1.x + maxFraction * (p2.x - p1.x);\n                    t_y = p1.y + maxFraction * (p2.y - p1.y);\n                    segmentAABB.lowerBound.x = b2_math_1.b2Min(p1.x, t_x);\n                    segmentAABB.lowerBound.y = b2_math_1.b2Min(p1.y, t_y);\n                    segmentAABB.upperBound.x = b2_math_1.b2Max(p1.x, t_x);\n                    segmentAABB.upperBound.y = b2_math_1.b2Max(p1.y, t_y);\n                }\n            }\n            else {\n                stack.Push(node.child1);\n                stack.Push(node.child2);\n            }\n        }\n    };\n    b2DynamicTree.prototype.AllocateNode = function () {\n        if (this.m_freeList !== null) {\n            var node = this.m_freeList;\n            this.m_freeList = node.parent;\n            node.parent = null;\n            node.child1 = null;\n            node.child2 = null;\n            node.height = 0;\n            node.moved = false;\n            return node;\n        }\n        return new b2TreeNode(b2DynamicTree.s_node_id++);\n    };\n    b2DynamicTree.prototype.FreeNode = function (node) {\n        node.parent = this.m_freeList;\n        node.child1 = null;\n        node.child2 = null;\n        node.height = -1;\n        node.Reset();\n        this.m_freeList = node;\n    };\n    b2DynamicTree.prototype.CreateProxy = function (aabb, userData) {\n        var node = this.AllocateNode();\n        var r_x = b2_settings_1.b2_aabbExtension;\n        var r_y = b2_settings_1.b2_aabbExtension;\n        node.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\n        node.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\n        node.aabb.upperBound.x = aabb.upperBound.x + r_x;\n        node.aabb.upperBound.y = aabb.upperBound.y + r_y;\n        node.userData = userData;\n        node.height = 0;\n        node.moved = true;\n        this.InsertLeaf(node);\n        return node;\n    };\n    b2DynamicTree.prototype.DestroyProxy = function (node) {\n        this.RemoveLeaf(node);\n        this.FreeNode(node);\n    };\n    b2DynamicTree.prototype.MoveProxy = function (node, aabb, displacement) {\n        var fatAABB = b2DynamicTree.MoveProxy_s_fatAABB;\n        var r_x = b2_settings_1.b2_aabbExtension;\n        var r_y = b2_settings_1.b2_aabbExtension;\n        fatAABB.lowerBound.x = aabb.lowerBound.x - r_x;\n        fatAABB.lowerBound.y = aabb.lowerBound.y - r_y;\n        fatAABB.upperBound.x = aabb.upperBound.x + r_x;\n        fatAABB.upperBound.y = aabb.upperBound.y + r_y;\n        var d_x = b2_settings_1.b2_aabbMultiplier * displacement.x;\n        var d_y = b2_settings_1.b2_aabbMultiplier * displacement.y;\n        if (d_x < 0.0) {\n            fatAABB.lowerBound.x += d_x;\n        }\n        else {\n            fatAABB.upperBound.x += d_x;\n        }\n        if (d_y < 0.0) {\n            fatAABB.lowerBound.y += d_y;\n        }\n        else {\n            fatAABB.upperBound.y += d_y;\n        }\n        var treeAABB = node.aabb;\n        if (treeAABB.Contains(aabb)) {\n            var hugeAABB = b2DynamicTree.MoveProxy_s_hugeAABB;\n            hugeAABB.lowerBound.x = fatAABB.lowerBound.x - 4.0 * r_x;\n            hugeAABB.lowerBound.y = fatAABB.lowerBound.y - 4.0 * r_y;\n            hugeAABB.upperBound.x = fatAABB.upperBound.x + 4.0 * r_x;\n            hugeAABB.upperBound.y = fatAABB.upperBound.y + 4.0 * r_y;\n            if (hugeAABB.Contains(treeAABB)) {\n                return false;\n            }\n        }\n        this.RemoveLeaf(node);\n        node.aabb.Copy(fatAABB);\n        this.InsertLeaf(node);\n        node.moved = true;\n        return true;\n    };\n    b2DynamicTree.prototype.InsertLeaf = function (leaf) {\n        ++this.m_insertionCount;\n        if (this.m_root === null) {\n            this.m_root = leaf;\n            this.m_root.parent = null;\n            return;\n        }\n        var leafAABB = leaf.aabb;\n        var sibling = this.m_root;\n        while (!sibling.IsLeaf()) {\n            var child1 = verify(sibling.child1);\n            var child2 = verify(sibling.child2);\n            var area = sibling.aabb.GetPerimeter();\n            var combinedAABB = b2DynamicTree.s_combinedAABB;\n            combinedAABB.Combine2(sibling.aabb, leafAABB);\n            var combinedArea = combinedAABB.GetPerimeter();\n            var cost = 2 * combinedArea;\n            var inheritanceCost = 2 * (combinedArea - area);\n            var cost1 = void 0;\n            var aabb = b2DynamicTree.s_aabb;\n            var oldArea = void 0;\n            var newArea = void 0;\n            if (child1.IsLeaf()) {\n                aabb.Combine2(leafAABB, child1.aabb);\n                cost1 = aabb.GetPerimeter() + inheritanceCost;\n            }\n            else {\n                aabb.Combine2(leafAABB, child1.aabb);\n                oldArea = child1.aabb.GetPerimeter();\n                newArea = aabb.GetPerimeter();\n                cost1 = (newArea - oldArea) + inheritanceCost;\n            }\n            var cost2 = void 0;\n            if (child2.IsLeaf()) {\n                aabb.Combine2(leafAABB, child2.aabb);\n                cost2 = aabb.GetPerimeter() + inheritanceCost;\n            }\n            else {\n                aabb.Combine2(leafAABB, child2.aabb);\n                oldArea = child2.aabb.GetPerimeter();\n                newArea = aabb.GetPerimeter();\n                cost2 = newArea - oldArea + inheritanceCost;\n            }\n            if (cost < cost1 && cost < cost2) {\n                break;\n            }\n            if (cost1 < cost2) {\n                sibling = child1;\n            }\n            else {\n                sibling = child2;\n            }\n        }\n        var oldParent = sibling.parent;\n        var newParent = this.AllocateNode();\n        newParent.parent = oldParent;\n        newParent.aabb.Combine2(leafAABB, sibling.aabb);\n        newParent.height = sibling.height + 1;\n        if (oldParent !== null) {\n            if (oldParent.child1 === sibling) {\n                oldParent.child1 = newParent;\n            }\n            else {\n                oldParent.child2 = newParent;\n            }\n            newParent.child1 = sibling;\n            newParent.child2 = leaf;\n            sibling.parent = newParent;\n            leaf.parent = newParent;\n        }\n        else {\n            newParent.child1 = sibling;\n            newParent.child2 = leaf;\n            sibling.parent = newParent;\n            leaf.parent = newParent;\n            this.m_root = newParent;\n        }\n        var node = leaf.parent;\n        while (node !== null) {\n            node = this.Balance(node);\n            var child1 = verify(node.child1);\n            var child2 = verify(node.child2);\n            node.height = 1 + b2_math_1.b2Max(child1.height, child2.height);\n            node.aabb.Combine2(child1.aabb, child2.aabb);\n            node = node.parent;\n        }\n    };\n    b2DynamicTree.prototype.RemoveLeaf = function (leaf) {\n        if (leaf === this.m_root) {\n            this.m_root = null;\n            return;\n        }\n        var parent = verify(leaf.parent);\n        var grandParent = parent && parent.parent;\n        var sibling = verify(parent.child1 === leaf ? parent.child2 : parent.child1);\n        if (grandParent !== null) {\n            if (grandParent.child1 === parent) {\n                grandParent.child1 = sibling;\n            }\n            else {\n                grandParent.child2 = sibling;\n            }\n            sibling.parent = grandParent;\n            this.FreeNode(parent);\n            var index = grandParent;\n            while (index !== null) {\n                index = this.Balance(index);\n                var child1 = verify(index.child1);\n                var child2 = verify(index.child2);\n                index.aabb.Combine2(child1.aabb, child2.aabb);\n                index.height = 1 + b2_math_1.b2Max(child1.height, child2.height);\n                index = index.parent;\n            }\n        }\n        else {\n            this.m_root = sibling;\n            sibling.parent = null;\n            this.FreeNode(parent);\n        }\n    };\n    b2DynamicTree.prototype.Balance = function (A) {\n        if (A.IsLeaf() || A.height < 2) {\n            return A;\n        }\n        var B = verify(A.child1);\n        var C = verify(A.child2);\n        var balance = C.height - B.height;\n        if (balance > 1) {\n            var F = verify(C.child1);\n            var G = verify(C.child2);\n            C.child1 = A;\n            C.parent = A.parent;\n            A.parent = C;\n            if (C.parent !== null) {\n                if (C.parent.child1 === A) {\n                    C.parent.child1 = C;\n                }\n                else {\n                    C.parent.child2 = C;\n                }\n            }\n            else {\n                this.m_root = C;\n            }\n            if (F.height > G.height) {\n                C.child2 = F;\n                A.child2 = G;\n                G.parent = A;\n                A.aabb.Combine2(B.aabb, G.aabb);\n                C.aabb.Combine2(A.aabb, F.aabb);\n                A.height = 1 + b2_math_1.b2Max(B.height, G.height);\n                C.height = 1 + b2_math_1.b2Max(A.height, F.height);\n            }\n            else {\n                C.child2 = G;\n                A.child2 = F;\n                F.parent = A;\n                A.aabb.Combine2(B.aabb, F.aabb);\n                C.aabb.Combine2(A.aabb, G.aabb);\n                A.height = 1 + b2_math_1.b2Max(B.height, F.height);\n                C.height = 1 + b2_math_1.b2Max(A.height, G.height);\n            }\n            return C;\n        }\n        if (balance < -1) {\n            var D = verify(B.child1);\n            var E = verify(B.child2);\n            B.child1 = A;\n            B.parent = A.parent;\n            A.parent = B;\n            if (B.parent !== null) {\n                if (B.parent.child1 === A) {\n                    B.parent.child1 = B;\n                }\n                else {\n                    B.parent.child2 = B;\n                }\n            }\n            else {\n                this.m_root = B;\n            }\n            if (D.height > E.height) {\n                B.child2 = D;\n                A.child1 = E;\n                E.parent = A;\n                A.aabb.Combine2(C.aabb, E.aabb);\n                B.aabb.Combine2(A.aabb, D.aabb);\n                A.height = 1 + b2_math_1.b2Max(C.height, E.height);\n                B.height = 1 + b2_math_1.b2Max(A.height, D.height);\n            }\n            else {\n                B.child2 = E;\n                A.child1 = D;\n                D.parent = A;\n                A.aabb.Combine2(C.aabb, D.aabb);\n                B.aabb.Combine2(A.aabb, E.aabb);\n                A.height = 1 + b2_math_1.b2Max(C.height, D.height);\n                B.height = 1 + b2_math_1.b2Max(A.height, E.height);\n            }\n            return B;\n        }\n        return A;\n    };\n    b2DynamicTree.prototype.GetHeight = function () {\n        if (this.m_root === null) {\n            return 0;\n        }\n        return this.m_root.height;\n    };\n    b2DynamicTree.GetAreaNode = function (node) {\n        if (node === null) {\n            return 0;\n        }\n        if (node.IsLeaf()) {\n            return 0;\n        }\n        var area = node.aabb.GetPerimeter();\n        area += b2DynamicTree.GetAreaNode(node.child1);\n        area += b2DynamicTree.GetAreaNode(node.child2);\n        return area;\n    };\n    b2DynamicTree.prototype.GetAreaRatio = function () {\n        if (this.m_root === null) {\n            return 0;\n        }\n        var root = this.m_root;\n        var rootArea = root.aabb.GetPerimeter();\n        var totalArea = b2DynamicTree.GetAreaNode(this.m_root);\n        return totalArea / rootArea;\n    };\n    b2DynamicTree.ComputeHeightNode = function (node) {\n        if (node === null) {\n            return 0;\n        }\n        if (node.IsLeaf()) {\n            return 0;\n        }\n        var height1 = b2DynamicTree.ComputeHeightNode(node.child1);\n        var height2 = b2DynamicTree.ComputeHeightNode(node.child2);\n        return 1 + b2_math_1.b2Max(height1, height2);\n    };\n    b2DynamicTree.prototype.ComputeHeight = function () {\n        var height = b2DynamicTree.ComputeHeightNode(this.m_root);\n        return height;\n    };\n    b2DynamicTree.prototype.ValidateStructure = function (node) {\n        if (node === null) {\n            return;\n        }\n        if (node === this.m_root) {\n        }\n        if (node.IsLeaf()) {\n            return;\n        }\n        var child1 = verify(node.child1);\n        var child2 = verify(node.child2);\n        this.ValidateStructure(child1);\n        this.ValidateStructure(child2);\n    };\n    b2DynamicTree.prototype.ValidateMetrics = function (node) {\n        if (node === null) {\n            return;\n        }\n        if (node.IsLeaf()) {\n            return;\n        }\n        var child1 = verify(node.child1);\n        var child2 = verify(node.child2);\n        var aabb = b2DynamicTree.s_aabb;\n        aabb.Combine2(child1.aabb, child2.aabb);\n        this.ValidateMetrics(child1);\n        this.ValidateMetrics(child2);\n    };\n    b2DynamicTree.prototype.Validate = function () {\n    };\n    b2DynamicTree.GetMaxBalanceNode = function (node, maxBalance) {\n        if (node === null) {\n            return maxBalance;\n        }\n        if (node.height <= 1) {\n            return maxBalance;\n        }\n        var child1 = verify(node.child1);\n        var child2 = verify(node.child2);\n        var balance = b2_math_1.b2Abs(child2.height - child1.height);\n        return b2_math_1.b2Max(maxBalance, balance);\n    };\n    b2DynamicTree.prototype.GetMaxBalance = function () {\n        var maxBalance = b2DynamicTree.GetMaxBalanceNode(this.m_root, 0);\n        return maxBalance;\n    };\n    b2DynamicTree.prototype.RebuildBottomUp = function () {\n        this.Validate();\n    };\n    b2DynamicTree.ShiftOriginNode = function (node, newOrigin) {\n        if (node === null) {\n            return;\n        }\n        if (node.height <= 1) {\n            return;\n        }\n        var child1 = node.child1;\n        var child2 = node.child2;\n        b2DynamicTree.ShiftOriginNode(child1, newOrigin);\n        b2DynamicTree.ShiftOriginNode(child2, newOrigin);\n        node.aabb.lowerBound.SelfSub(newOrigin);\n        node.aabb.upperBound.SelfSub(newOrigin);\n    };\n    b2DynamicTree.prototype.ShiftOrigin = function (newOrigin) {\n        b2DynamicTree.ShiftOriginNode(this.m_root, newOrigin);\n    };\n    b2DynamicTree.s_r = new b2_math_1.b2Vec2();\n    b2DynamicTree.s_v = new b2_math_1.b2Vec2();\n    b2DynamicTree.s_abs_v = new b2_math_1.b2Vec2();\n    b2DynamicTree.s_segmentAABB = new b2_collision_1.b2AABB();\n    b2DynamicTree.s_subInput = new b2_collision_1.b2RayCastInput();\n    b2DynamicTree.s_combinedAABB = new b2_collision_1.b2AABB();\n    b2DynamicTree.s_aabb = new b2_collision_1.b2AABB();\n    b2DynamicTree.s_node_id = 0;\n    b2DynamicTree.MoveProxy_s_fatAABB = new b2_collision_1.b2AABB();\n    b2DynamicTree.MoveProxy_s_hugeAABB = new b2_collision_1.b2AABB();\n    return b2DynamicTree;\n}());\nexports.b2DynamicTree = b2DynamicTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_dynamic_tree.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_edge_shape.ts":
/*!**********************************************!*\
  !*** ./src/box2d/collision/b2_edge_shape.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2EdgeShape = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_shape_1 = __webpack_require__(/*! ./b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2EdgeShape = (function (_super) {\n    __extends(b2EdgeShape, _super);\n    function b2EdgeShape() {\n        var _this = _super.call(this, b2_shape_1.b2ShapeType.e_edgeShape, b2_settings_1.b2_polygonRadius) || this;\n        _this.m_vertex1 = new b2_math_1.b2Vec2();\n        _this.m_vertex2 = new b2_math_1.b2Vec2();\n        _this.m_vertex0 = new b2_math_1.b2Vec2();\n        _this.m_vertex3 = new b2_math_1.b2Vec2();\n        _this.m_oneSided = false;\n        return _this;\n    }\n    b2EdgeShape.prototype.SetOneSided = function (v0, v1, v2, v3) {\n        this.m_vertex0.Copy(v0);\n        this.m_vertex1.Copy(v1);\n        this.m_vertex2.Copy(v2);\n        this.m_vertex3.Copy(v3);\n        this.m_oneSided = true;\n        return this;\n    };\n    b2EdgeShape.prototype.SetTwoSided = function (v1, v2) {\n        this.m_vertex1.Copy(v1);\n        this.m_vertex2.Copy(v2);\n        this.m_oneSided = false;\n        return this;\n    };\n    b2EdgeShape.prototype.Clone = function () {\n        return new b2EdgeShape().Copy(this);\n    };\n    b2EdgeShape.prototype.Copy = function (other) {\n        _super.prototype.Copy.call(this, other);\n        this.m_vertex1.Copy(other.m_vertex1);\n        this.m_vertex2.Copy(other.m_vertex2);\n        this.m_vertex0.Copy(other.m_vertex0);\n        this.m_vertex3.Copy(other.m_vertex3);\n        this.m_oneSided = other.m_oneSided;\n        return this;\n    };\n    b2EdgeShape.prototype.GetChildCount = function () {\n        return 1;\n    };\n    b2EdgeShape.prototype.TestPoint = function (xf, p) {\n        return false;\n    };\n    b2EdgeShape.prototype.ComputeDistance = function (xf, p, normal, childIndex) {\n        var v1 = b2_math_1.b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeDistance_s_v1);\n        var v2 = b2_math_1.b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeDistance_s_v2);\n        var d = b2_math_1.b2Vec2.SubVV(p, v1, b2EdgeShape.ComputeDistance_s_d);\n        var s = b2_math_1.b2Vec2.SubVV(v2, v1, b2EdgeShape.ComputeDistance_s_s);\n        var ds = b2_math_1.b2Vec2.DotVV(d, s);\n        if (ds > 0) {\n            var s2 = b2_math_1.b2Vec2.DotVV(s, s);\n            if (ds > s2) {\n                b2_math_1.b2Vec2.SubVV(p, v2, d);\n            }\n            else {\n                d.SelfMulSub(ds / s2, s);\n            }\n        }\n        normal.Copy(d);\n        return normal.Normalize();\n    };\n    b2EdgeShape.prototype.RayCast = function (output, input, xf, childIndex) {\n        var p1 = b2_math_1.b2Transform.MulTXV(xf, input.p1, b2EdgeShape.RayCast_s_p1);\n        var p2 = b2_math_1.b2Transform.MulTXV(xf, input.p2, b2EdgeShape.RayCast_s_p2);\n        var d = b2_math_1.b2Vec2.SubVV(p2, p1, b2EdgeShape.RayCast_s_d);\n        var v1 = this.m_vertex1;\n        var v2 = this.m_vertex2;\n        var e = b2_math_1.b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_e);\n        var normal = output.normal.Set(e.y, -e.x).SelfNormalize();\n        var numerator = b2_math_1.b2Vec2.DotVV(normal, b2_math_1.b2Vec2.SubVV(v1, p1, b2_math_1.b2Vec2.s_t0));\n        if (this.m_oneSided && numerator > 0.0) {\n            return false;\n        }\n        var denominator = b2_math_1.b2Vec2.DotVV(normal, d);\n        if (denominator === 0) {\n            return false;\n        }\n        var t = numerator / denominator;\n        if (t < 0 || input.maxFraction < t) {\n            return false;\n        }\n        var q = b2_math_1.b2Vec2.AddVMulSV(p1, t, d, b2EdgeShape.RayCast_s_q);\n        var r = b2_math_1.b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_r);\n        var rr = b2_math_1.b2Vec2.DotVV(r, r);\n        if (rr === 0) {\n            return false;\n        }\n        var s = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(q, v1, b2_math_1.b2Vec2.s_t0), r) / rr;\n        if (s < 0 || 1 < s) {\n            return false;\n        }\n        output.fraction = t;\n        b2_math_1.b2Rot.MulRV(xf.q, output.normal, output.normal);\n        if (numerator > 0) {\n            output.normal.SelfNeg();\n        }\n        return true;\n    };\n    b2EdgeShape.prototype.ComputeAABB = function (aabb, xf, childIndex) {\n        var v1 = b2_math_1.b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeAABB_s_v1);\n        var v2 = b2_math_1.b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeAABB_s_v2);\n        b2_math_1.b2Vec2.MinV(v1, v2, aabb.lowerBound);\n        b2_math_1.b2Vec2.MaxV(v1, v2, aabb.upperBound);\n        var r = this.m_radius;\n        aabb.lowerBound.SelfSubXY(r, r);\n        aabb.upperBound.SelfAddXY(r, r);\n    };\n    b2EdgeShape.prototype.ComputeMass = function (massData, density) {\n        massData.mass = 0;\n        b2_math_1.b2Vec2.MidVV(this.m_vertex1, this.m_vertex2, massData.center);\n        massData.I = 0;\n    };\n    b2EdgeShape.prototype.SetupDistanceProxy = function (proxy, index) {\n        proxy.m_vertices = proxy.m_buffer;\n        proxy.m_vertices[0].Copy(this.m_vertex1);\n        proxy.m_vertices[1].Copy(this.m_vertex2);\n        proxy.m_count = 2;\n        proxy.m_radius = this.m_radius;\n    };\n    b2EdgeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n        c.SetZero();\n        return 0;\n    };\n    b2EdgeShape.prototype.Dump = function (log) {\n        log(\"    const shape: b2EdgeShape = new b2EdgeShape();\\n\");\n        log(\"    shape.m_radius = %.15f;\\n\", this.m_radius);\n        log(\"    shape.m_vertex0.Set(%.15f, %.15f);\\n\", this.m_vertex0.x, this.m_vertex0.y);\n        log(\"    shape.m_vertex1.Set(%.15f, %.15f);\\n\", this.m_vertex1.x, this.m_vertex1.y);\n        log(\"    shape.m_vertex2.Set(%.15f, %.15f);\\n\", this.m_vertex2.x, this.m_vertex2.y);\n        log(\"    shape.m_vertex3.Set(%.15f, %.15f);\\n\", this.m_vertex3.x, this.m_vertex3.y);\n        log(\"    shape.m_oneSided = %s;\\n\", this.m_oneSided);\n    };\n    b2EdgeShape.ComputeDistance_s_v1 = new b2_math_1.b2Vec2();\n    b2EdgeShape.ComputeDistance_s_v2 = new b2_math_1.b2Vec2();\n    b2EdgeShape.ComputeDistance_s_d = new b2_math_1.b2Vec2();\n    b2EdgeShape.ComputeDistance_s_s = new b2_math_1.b2Vec2();\n    b2EdgeShape.RayCast_s_p1 = new b2_math_1.b2Vec2();\n    b2EdgeShape.RayCast_s_p2 = new b2_math_1.b2Vec2();\n    b2EdgeShape.RayCast_s_d = new b2_math_1.b2Vec2();\n    b2EdgeShape.RayCast_s_e = new b2_math_1.b2Vec2();\n    b2EdgeShape.RayCast_s_q = new b2_math_1.b2Vec2();\n    b2EdgeShape.RayCast_s_r = new b2_math_1.b2Vec2();\n    b2EdgeShape.ComputeAABB_s_v1 = new b2_math_1.b2Vec2();\n    b2EdgeShape.ComputeAABB_s_v2 = new b2_math_1.b2Vec2();\n    return b2EdgeShape;\n}(b2_shape_1.b2Shape));\nexports.b2EdgeShape = b2EdgeShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_edge_shape.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_polygon_shape.ts":
/*!*************************************************!*\
  !*** ./src/box2d/collision/b2_polygon_shape.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2PolygonShape = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_shape_1 = __webpack_require__(/*! ./b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2_shape_2 = __webpack_require__(/*! ./b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2PolygonShape = (function (_super) {\n    __extends(b2PolygonShape, _super);\n    function b2PolygonShape() {\n        var _this = _super.call(this, b2_shape_2.b2ShapeType.e_polygonShape, b2_settings_1.b2_polygonRadius) || this;\n        _this.m_centroid = new b2_math_1.b2Vec2(0, 0);\n        _this.m_vertices = [];\n        _this.m_normals = [];\n        _this.m_count = 0;\n        return _this;\n    }\n    b2PolygonShape.prototype.Clone = function () {\n        return new b2PolygonShape().Copy(this);\n    };\n    b2PolygonShape.prototype.Copy = function (other) {\n        _super.prototype.Copy.call(this, other);\n        this.m_centroid.Copy(other.m_centroid);\n        this.m_count = other.m_count;\n        this.m_vertices = b2_math_1.b2Vec2.MakeArray(this.m_count);\n        this.m_normals = b2_math_1.b2Vec2.MakeArray(this.m_count);\n        for (var i = 0; i < this.m_count; ++i) {\n            this.m_vertices[i].Copy(other.m_vertices[i]);\n            this.m_normals[i].Copy(other.m_normals[i]);\n        }\n        return this;\n    };\n    b2PolygonShape.prototype.GetChildCount = function () {\n        return 1;\n    };\n    b2PolygonShape.prototype.Set = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (typeof args[0][0] === \"number\") {\n            var vertices_1 = args[0];\n            if (vertices_1.length % 2 !== 0) {\n                throw new Error();\n            }\n            return this._Set(function (index) { return ({ x: vertices_1[index * 2], y: vertices_1[index * 2 + 1] }); }, vertices_1.length / 2);\n        }\n        else {\n            var vertices_2 = args[0];\n            var count = args[1] || vertices_2.length;\n            return this._Set(function (index) { return vertices_2[index]; }, count);\n        }\n    };\n    b2PolygonShape.prototype._Set = function (vertices, count) {\n        if (count < 3) {\n            return this.SetAsBox(1, 1);\n        }\n        var n = count;\n        var ps = [];\n        for (var i = 0; i < n; ++i) {\n            var v = vertices(i);\n            var unique = true;\n            for (var j = 0; j < ps.length; ++j) {\n                if (b2_math_1.b2Vec2.DistanceSquaredVV(v, ps[j]) < ((0.5 * b2_settings_1.b2_linearSlop) * (0.5 * b2_settings_1.b2_linearSlop))) {\n                    unique = false;\n                    break;\n                }\n            }\n            if (unique) {\n                ps.push(v);\n            }\n        }\n        n = ps.length;\n        if (n < 3) {\n            return this.SetAsBox(1.0, 1.0);\n        }\n        var i0 = 0;\n        var x0 = ps[0].x;\n        for (var i = 1; i < n; ++i) {\n            var x = ps[i].x;\n            if (x > x0 || (x === x0 && ps[i].y < ps[i0].y)) {\n                i0 = i;\n                x0 = x;\n            }\n        }\n        var hull = [];\n        var m = 0;\n        var ih = i0;\n        for (;;) {\n            hull[m] = ih;\n            var ie = 0;\n            for (var j = 1; j < n; ++j) {\n                if (ie === ih) {\n                    ie = j;\n                    continue;\n                }\n                var r = b2_math_1.b2Vec2.SubVV(ps[ie], ps[hull[m]], b2PolygonShape.Set_s_r);\n                var v = b2_math_1.b2Vec2.SubVV(ps[j], ps[hull[m]], b2PolygonShape.Set_s_v);\n                var c = b2_math_1.b2Vec2.CrossVV(r, v);\n                if (c < 0) {\n                    ie = j;\n                }\n                if (c === 0 && v.LengthSquared() > r.LengthSquared()) {\n                    ie = j;\n                }\n            }\n            ++m;\n            ih = ie;\n            if (ie === i0) {\n                break;\n            }\n        }\n        this.m_count = m;\n        this.m_vertices = b2_math_1.b2Vec2.MakeArray(this.m_count);\n        this.m_normals = b2_math_1.b2Vec2.MakeArray(this.m_count);\n        for (var i = 0; i < m; ++i) {\n            this.m_vertices[i].Copy(ps[hull[i]]);\n        }\n        for (var i = 0; i < m; ++i) {\n            var vertexi1 = this.m_vertices[i];\n            var vertexi2 = this.m_vertices[(i + 1) % m];\n            var edge = b2_math_1.b2Vec2.SubVV(vertexi2, vertexi1, b2_math_1.b2Vec2.s_t0);\n            b2_math_1.b2Vec2.CrossVOne(edge, this.m_normals[i]).SelfNormalize();\n        }\n        b2PolygonShape.ComputeCentroid(this.m_vertices, m, this.m_centroid);\n        return this;\n    };\n    b2PolygonShape.prototype.SetAsBox = function (hx, hy, center, angle) {\n        if (angle === void 0) { angle = 0; }\n        this.m_count = 4;\n        this.m_vertices = b2_math_1.b2Vec2.MakeArray(this.m_count);\n        this.m_normals = b2_math_1.b2Vec2.MakeArray(this.m_count);\n        this.m_vertices[0].Set((-hx), (-hy));\n        this.m_vertices[1].Set(hx, (-hy));\n        this.m_vertices[2].Set(hx, hy);\n        this.m_vertices[3].Set((-hx), hy);\n        this.m_normals[0].Set(0, (-1));\n        this.m_normals[1].Set(1, 0);\n        this.m_normals[2].Set(0, 1);\n        this.m_normals[3].Set((-1), 0);\n        this.m_centroid.SetZero();\n        if (center) {\n            this.m_centroid.Copy(center);\n            var xf = new b2_math_1.b2Transform();\n            xf.SetPosition(center);\n            xf.SetRotationAngle(angle);\n            for (var i = 0; i < this.m_count; ++i) {\n                b2_math_1.b2Transform.MulXV(xf, this.m_vertices[i], this.m_vertices[i]);\n                b2_math_1.b2Rot.MulRV(xf.q, this.m_normals[i], this.m_normals[i]);\n            }\n        }\n        return this;\n    };\n    b2PolygonShape.prototype.TestPoint = function (xf, p) {\n        var pLocal = b2_math_1.b2Transform.MulTXV(xf, p, b2PolygonShape.TestPoint_s_pLocal);\n        for (var i = 0; i < this.m_count; ++i) {\n            var dot = b2_math_1.b2Vec2.DotVV(this.m_normals[i], b2_math_1.b2Vec2.SubVV(pLocal, this.m_vertices[i], b2_math_1.b2Vec2.s_t0));\n            if (dot > 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    b2PolygonShape.prototype.ComputeDistance = function (xf, p, normal, childIndex) {\n        var pLocal = b2_math_1.b2Transform.MulTXV(xf, p, b2PolygonShape.ComputeDistance_s_pLocal);\n        var maxDistance = -b2_settings_1.b2_maxFloat;\n        var normalForMaxDistance = b2PolygonShape.ComputeDistance_s_normalForMaxDistance.Copy(pLocal);\n        for (var i = 0; i < this.m_count; ++i) {\n            var dot = b2_math_1.b2Vec2.DotVV(this.m_normals[i], b2_math_1.b2Vec2.SubVV(pLocal, this.m_vertices[i], b2_math_1.b2Vec2.s_t0));\n            if (dot > maxDistance) {\n                maxDistance = dot;\n                normalForMaxDistance.Copy(this.m_normals[i]);\n            }\n        }\n        if (maxDistance > 0) {\n            var minDistance = b2PolygonShape.ComputeDistance_s_minDistance.Copy(normalForMaxDistance);\n            var minDistance2 = maxDistance * maxDistance;\n            for (var i = 0; i < this.m_count; ++i) {\n                var distance = b2_math_1.b2Vec2.SubVV(pLocal, this.m_vertices[i], b2PolygonShape.ComputeDistance_s_distance);\n                var distance2 = distance.LengthSquared();\n                if (minDistance2 > distance2) {\n                    minDistance.Copy(distance);\n                    minDistance2 = distance2;\n                }\n            }\n            b2_math_1.b2Rot.MulRV(xf.q, minDistance, normal);\n            normal.Normalize();\n            return Math.sqrt(minDistance2);\n        }\n        else {\n            b2_math_1.b2Rot.MulRV(xf.q, normalForMaxDistance, normal);\n            return maxDistance;\n        }\n    };\n    b2PolygonShape.prototype.RayCast = function (output, input, xf, childIndex) {\n        var p1 = b2_math_1.b2Transform.MulTXV(xf, input.p1, b2PolygonShape.RayCast_s_p1);\n        var p2 = b2_math_1.b2Transform.MulTXV(xf, input.p2, b2PolygonShape.RayCast_s_p2);\n        var d = b2_math_1.b2Vec2.SubVV(p2, p1, b2PolygonShape.RayCast_s_d);\n        var lower = 0, upper = input.maxFraction;\n        var index = -1;\n        for (var i = 0; i < this.m_count; ++i) {\n            var numerator = b2_math_1.b2Vec2.DotVV(this.m_normals[i], b2_math_1.b2Vec2.SubVV(this.m_vertices[i], p1, b2_math_1.b2Vec2.s_t0));\n            var denominator = b2_math_1.b2Vec2.DotVV(this.m_normals[i], d);\n            if (denominator === 0) {\n                if (numerator < 0) {\n                    return false;\n                }\n            }\n            else {\n                if (denominator < 0 && numerator < lower * denominator) {\n                    lower = numerator / denominator;\n                    index = i;\n                }\n                else if (denominator > 0 && numerator < upper * denominator) {\n                    upper = numerator / denominator;\n                }\n            }\n            if (upper < lower) {\n                return false;\n            }\n        }\n        if (index >= 0) {\n            output.fraction = lower;\n            b2_math_1.b2Rot.MulRV(xf.q, this.m_normals[index], output.normal);\n            return true;\n        }\n        return false;\n    };\n    b2PolygonShape.prototype.ComputeAABB = function (aabb, xf, childIndex) {\n        var lower = b2_math_1.b2Transform.MulXV(xf, this.m_vertices[0], aabb.lowerBound);\n        var upper = aabb.upperBound.Copy(lower);\n        for (var i = 0; i < this.m_count; ++i) {\n            var v = b2_math_1.b2Transform.MulXV(xf, this.m_vertices[i], b2PolygonShape.ComputeAABB_s_v);\n            b2_math_1.b2Vec2.MinV(v, lower, lower);\n            b2_math_1.b2Vec2.MaxV(v, upper, upper);\n        }\n        var r = this.m_radius;\n        lower.SelfSubXY(r, r);\n        upper.SelfAddXY(r, r);\n    };\n    b2PolygonShape.prototype.ComputeMass = function (massData, density) {\n        var center = b2PolygonShape.ComputeMass_s_center.SetZero();\n        var area = 0;\n        var I = 0;\n        var s = b2PolygonShape.ComputeMass_s_s.Copy(this.m_vertices[0]);\n        var k_inv3 = 1 / 3;\n        for (var i = 0; i < this.m_count; ++i) {\n            var e1 = b2_math_1.b2Vec2.SubVV(this.m_vertices[i], s, b2PolygonShape.ComputeMass_s_e1);\n            var e2 = b2_math_1.b2Vec2.SubVV(this.m_vertices[(i + 1) % this.m_count], s, b2PolygonShape.ComputeMass_s_e2);\n            var D = b2_math_1.b2Vec2.CrossVV(e1, e2);\n            var triangleArea = 0.5 * D;\n            area += triangleArea;\n            center.SelfAdd(b2_math_1.b2Vec2.MulSV(triangleArea * k_inv3, b2_math_1.b2Vec2.AddVV(e1, e2, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t1));\n            var ex1 = e1.x;\n            var ey1 = e1.y;\n            var ex2 = e2.x;\n            var ey2 = e2.y;\n            var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n            var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n            I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n        }\n        massData.mass = density * area;\n        center.SelfMul(1 / area);\n        b2_math_1.b2Vec2.AddVV(center, s, massData.center);\n        massData.I = density * I;\n        massData.I += massData.mass * (b2_math_1.b2Vec2.DotVV(massData.center, massData.center) - b2_math_1.b2Vec2.DotVV(center, center));\n    };\n    b2PolygonShape.prototype.Validate = function () {\n        for (var i = 0; i < this.m_count; ++i) {\n            var i1 = i;\n            var i2 = (i + 1) % this.m_count;\n            var p = this.m_vertices[i1];\n            var e = b2_math_1.b2Vec2.SubVV(this.m_vertices[i2], p, b2PolygonShape.Validate_s_e);\n            for (var j = 0; j < this.m_count; ++j) {\n                if (j === i1 || j === i2) {\n                    continue;\n                }\n                var v = b2_math_1.b2Vec2.SubVV(this.m_vertices[j], p, b2PolygonShape.Validate_s_v);\n                var c = b2_math_1.b2Vec2.CrossVV(e, v);\n                if (c < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    b2PolygonShape.prototype.SetupDistanceProxy = function (proxy, index) {\n        proxy.m_vertices = this.m_vertices;\n        proxy.m_count = this.m_count;\n        proxy.m_radius = this.m_radius;\n    };\n    b2PolygonShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n        var normalL = b2_math_1.b2Rot.MulTRV(xf.q, normal, b2PolygonShape.ComputeSubmergedArea_s_normalL);\n        var offsetL = offset - b2_math_1.b2Vec2.DotVV(normal, xf.p);\n        var depths = [];\n        var diveCount = 0;\n        var intoIndex = -1;\n        var outoIndex = -1;\n        var lastSubmerged = false;\n        for (var i_1 = 0; i_1 < this.m_count; ++i_1) {\n            depths[i_1] = b2_math_1.b2Vec2.DotVV(normalL, this.m_vertices[i_1]) - offsetL;\n            var isSubmerged = depths[i_1] < (-b2_settings_1.b2_epsilon);\n            if (i_1 > 0) {\n                if (isSubmerged) {\n                    if (!lastSubmerged) {\n                        intoIndex = i_1 - 1;\n                        diveCount++;\n                    }\n                }\n                else {\n                    if (lastSubmerged) {\n                        outoIndex = i_1 - 1;\n                        diveCount++;\n                    }\n                }\n            }\n            lastSubmerged = isSubmerged;\n        }\n        switch (diveCount) {\n            case 0:\n                if (lastSubmerged) {\n                    var md = b2PolygonShape.ComputeSubmergedArea_s_md;\n                    this.ComputeMass(md, 1);\n                    b2_math_1.b2Transform.MulXV(xf, md.center, c);\n                    return md.mass;\n                }\n                else {\n                    return 0;\n                }\n            case 1:\n                if (intoIndex === (-1)) {\n                    intoIndex = this.m_count - 1;\n                }\n                else {\n                    outoIndex = this.m_count - 1;\n                }\n                break;\n        }\n        var intoIndex2 = ((intoIndex + 1) % this.m_count);\n        var outoIndex2 = ((outoIndex + 1) % this.m_count);\n        var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);\n        var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);\n        var intoVec = b2PolygonShape.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);\n        var outoVec = b2PolygonShape.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);\n        var area = 0;\n        var center = b2PolygonShape.ComputeSubmergedArea_s_center.SetZero();\n        var p2 = this.m_vertices[intoIndex2];\n        var p3;\n        var i = intoIndex2;\n        while (i !== outoIndex2) {\n            i = (i + 1) % this.m_count;\n            if (i === outoIndex2) {\n                p3 = outoVec;\n            }\n            else {\n                p3 = this.m_vertices[i];\n            }\n            var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));\n            area += triangleArea;\n            center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;\n            center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;\n            p2 = p3;\n        }\n        center.SelfMul(1 / area);\n        b2_math_1.b2Transform.MulXV(xf, center, c);\n        return area;\n    };\n    b2PolygonShape.prototype.Dump = function (log) {\n        log(\"    const shape: b2PolygonShape = new b2PolygonShape();\\n\");\n        log(\"    const vs: b2Vec2[] = [];\\n\");\n        for (var i = 0; i < this.m_count; ++i) {\n            log(\"    vs[%d] = new b2Vec2(%.15f, %.15f);\\n\", i, this.m_vertices[i].x, this.m_vertices[i].y);\n        }\n        log(\"    shape.Set(vs, %d);\\n\", this.m_count);\n    };\n    b2PolygonShape.ComputeCentroid = function (vs, count, out) {\n        var c = out;\n        c.SetZero();\n        var area = 0;\n        var s = b2PolygonShape.ComputeCentroid_s_s.Copy(vs[0]);\n        var inv3 = 1 / 3;\n        for (var i = 0; i < count; ++i) {\n            var p1 = b2_math_1.b2Vec2.SubVV(vs[0], s, b2PolygonShape.ComputeCentroid_s_p1);\n            var p2 = b2_math_1.b2Vec2.SubVV(vs[i], s, b2PolygonShape.ComputeCentroid_s_p2);\n            var p3 = b2_math_1.b2Vec2.SubVV(vs[(i + 1) % count], s, b2PolygonShape.ComputeCentroid_s_p3);\n            var e1 = b2_math_1.b2Vec2.SubVV(p2, p1, b2PolygonShape.ComputeCentroid_s_e1);\n            var e2 = b2_math_1.b2Vec2.SubVV(p3, p1, b2PolygonShape.ComputeCentroid_s_e2);\n            var D = b2_math_1.b2Vec2.CrossVV(e1, e2);\n            var triangleArea = 0.5 * D;\n            area += triangleArea;\n            c.x += triangleArea * inv3 * (p1.x + p2.x + p3.x);\n            c.y += triangleArea * inv3 * (p1.y + p2.y + p3.y);\n        }\n        c.x = (1 / area) * c.x + s.x;\n        c.y = (1 / area) * c.y + s.y;\n        return c;\n    };\n    b2PolygonShape.Set_s_r = new b2_math_1.b2Vec2();\n    b2PolygonShape.Set_s_v = new b2_math_1.b2Vec2();\n    b2PolygonShape.TestPoint_s_pLocal = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeDistance_s_pLocal = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeDistance_s_normalForMaxDistance = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeDistance_s_minDistance = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeDistance_s_distance = new b2_math_1.b2Vec2();\n    b2PolygonShape.RayCast_s_p1 = new b2_math_1.b2Vec2();\n    b2PolygonShape.RayCast_s_p2 = new b2_math_1.b2Vec2();\n    b2PolygonShape.RayCast_s_d = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeAABB_s_v = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeMass_s_center = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeMass_s_s = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeMass_s_e1 = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeMass_s_e2 = new b2_math_1.b2Vec2();\n    b2PolygonShape.Validate_s_e = new b2_math_1.b2Vec2();\n    b2PolygonShape.Validate_s_v = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeSubmergedArea_s_normalL = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeSubmergedArea_s_md = new b2_shape_1.b2MassData();\n    b2PolygonShape.ComputeSubmergedArea_s_intoVec = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeSubmergedArea_s_outoVec = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeSubmergedArea_s_center = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeCentroid_s_s = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeCentroid_s_p1 = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeCentroid_s_p2 = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeCentroid_s_p3 = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeCentroid_s_e1 = new b2_math_1.b2Vec2();\n    b2PolygonShape.ComputeCentroid_s_e2 = new b2_math_1.b2Vec2();\n    return b2PolygonShape;\n}(b2_shape_2.b2Shape));\nexports.b2PolygonShape = b2PolygonShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_polygon_shape.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_shape.ts":
/*!*****************************************!*\
  !*** ./src/box2d/collision/b2_shape.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Shape = exports.b2ShapeType = exports.b2MassData = void 0;\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2MassData = (function () {\n    function b2MassData() {\n        this.mass = 0;\n        this.center = new b2_math_1.b2Vec2(0, 0);\n        this.I = 0;\n    }\n    return b2MassData;\n}());\nexports.b2MassData = b2MassData;\nvar b2ShapeType;\n(function (b2ShapeType) {\n    b2ShapeType[b2ShapeType[\"e_unknown\"] = -1] = \"e_unknown\";\n    b2ShapeType[b2ShapeType[\"e_circleShape\"] = 0] = \"e_circleShape\";\n    b2ShapeType[b2ShapeType[\"e_edgeShape\"] = 1] = \"e_edgeShape\";\n    b2ShapeType[b2ShapeType[\"e_polygonShape\"] = 2] = \"e_polygonShape\";\n    b2ShapeType[b2ShapeType[\"e_chainShape\"] = 3] = \"e_chainShape\";\n    b2ShapeType[b2ShapeType[\"e_shapeTypeCount\"] = 4] = \"e_shapeTypeCount\";\n})(b2ShapeType = exports.b2ShapeType || (exports.b2ShapeType = {}));\nvar b2Shape = (function () {\n    function b2Shape(type, radius) {\n        this.m_type = b2ShapeType.e_unknown;\n        this.m_radius = 0;\n        this.m_type = type;\n        this.m_radius = radius;\n    }\n    b2Shape.prototype.Copy = function (other) {\n        this.m_radius = other.m_radius;\n        return this;\n    };\n    b2Shape.prototype.GetType = function () {\n        return this.m_type;\n    };\n    return b2Shape;\n}());\nexports.b2Shape = b2Shape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvY29sbGlzaW9uL2IyX3NoYXBlLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2NvbGxpc2lvbi9iMl9zaGFwZS50cz9hYmIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEVyaW4gQ2F0dG8gaHR0cDovL3d3dy5ib3gyZC5vcmdcbipcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4qIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4qIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG4qL1xuXG4vLyBERUJVRzogaW1wb3J0IHsgYjJBc3NlcnQgfSBmcm9tIFwiLi4vY29tbW9uL2IyX3NldHRpbmdzXCI7XG5pbXBvcnQgeyBiMlZlYzIsIGIyVHJhbnNmb3JtLCBYWSB9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuaW1wb3J0IHsgYjJBQUJCLCBiMlJheUNhc3RJbnB1dCwgYjJSYXlDYXN0T3V0cHV0IH0gZnJvbSBcIi4vYjJfY29sbGlzaW9uXCI7XG5pbXBvcnQgeyBiMkRpc3RhbmNlUHJveHkgfSBmcm9tIFwiLi9iMl9kaXN0YW5jZVwiO1xuXG4vLy8gVGhpcyBob2xkcyB0aGUgbWFzcyBkYXRhIGNvbXB1dGVkIGZvciBhIHNoYXBlLlxuZXhwb3J0IGNsYXNzIGIyTWFzc0RhdGEge1xuICAvLy8gVGhlIG1hc3Mgb2YgdGhlIHNoYXBlLCB1c3VhbGx5IGluIGtpbG9ncmFtcy5cbiAgcHVibGljIG1hc3M6IG51bWJlciA9IDA7XG5cbiAgLy8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgc2hhcGUncyBjZW50cm9pZCByZWxhdGl2ZSB0byB0aGUgc2hhcGUncyBvcmlnaW4uXG4gIHB1YmxpYyByZWFkb25seSBjZW50ZXI6IGIyVmVjMiA9IG5ldyBiMlZlYzIoMCwgMCk7XG5cbiAgLy8vIFRoZSByb3RhdGlvbmFsIGluZXJ0aWEgb2YgdGhlIHNoYXBlIGFib3V0IHRoZSBsb2NhbCBvcmlnaW4uXG4gIHB1YmxpYyBJOiBudW1iZXIgPSAwO1xufVxuXG5leHBvcnQgZW51bSBiMlNoYXBlVHlwZSB7XG4gIGVfdW5rbm93biA9IC0xLFxuICBlX2NpcmNsZVNoYXBlID0gMCxcbiAgZV9lZGdlU2hhcGUgPSAxLFxuICBlX3BvbHlnb25TaGFwZSA9IDIsXG4gIGVfY2hhaW5TaGFwZSA9IDMsXG4gIGVfc2hhcGVUeXBlQ291bnQgPSA0LFxufVxuXG4vLy8gQSBzaGFwZSBpcyB1c2VkIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLiBZb3UgY2FuIGNyZWF0ZSBhIHNoYXBlIGhvd2V2ZXIgeW91IGxpa2UuXG4vLy8gU2hhcGVzIHVzZWQgZm9yIHNpbXVsYXRpb24gaW4gYjJXb3JsZCBhcmUgY3JlYXRlZCBhdXRvbWF0aWNhbGx5IHdoZW4gYSBiMkZpeHR1cmVcbi8vLyBpcyBjcmVhdGVkLiBTaGFwZXMgbWF5IGVuY2Fwc3VsYXRlIGEgb25lIG9yIG1vcmUgY2hpbGQgc2hhcGVzLlxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIGIyU2hhcGUge1xuICBwdWJsaWMgcmVhZG9ubHkgbV90eXBlOiBiMlNoYXBlVHlwZSA9IGIyU2hhcGVUeXBlLmVfdW5rbm93bjtcblxuXHQvLy8gUmFkaXVzIG9mIGEgc2hhcGUuIEZvciBwb2x5Z29uYWwgc2hhcGVzIHRoaXMgbXVzdCBiZSBiMl9wb2x5Z29uUmFkaXVzLiBUaGVyZSBpcyBubyBzdXBwb3J0IGZvclxuXHQvLy8gbWFraW5nIHJvdW5kZWQgcG9seWdvbnMuXG4gIHB1YmxpYyBtX3JhZGl1czogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3Rvcih0eXBlOiBiMlNoYXBlVHlwZSwgcmFkaXVzOiBudW1iZXIpIHtcbiAgICB0aGlzLm1fdHlwZSA9IHR5cGU7XG4gICAgdGhpcy5tX3JhZGl1cyA9IHJhZGl1cztcbiAgfVxuXG4gIC8vLyBDbG9uZSB0aGUgY29uY3JldGUgc2hhcGUuXG4gIHB1YmxpYyBhYnN0cmFjdCBDbG9uZSgpOiBiMlNoYXBlO1xuXG4gIHB1YmxpYyBDb3B5KG90aGVyOiBiMlNoYXBlKTogYjJTaGFwZSB7XG4gICAgLy8gREVCVUc6IGIyQXNzZXJ0KHRoaXMubV90eXBlID09PSBvdGhlci5tX3R5cGUpO1xuICAgIHRoaXMubV9yYWRpdXMgPSBvdGhlci5tX3JhZGl1cztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vLyBHZXQgdGhlIHR5cGUgb2YgdGhpcyBzaGFwZS4gWW91IGNhbiB1c2UgdGhpcyB0byBkb3duIGNhc3QgdG8gdGhlIGNvbmNyZXRlIHNoYXBlLlxuICAvLy8gQHJldHVybiB0aGUgc2hhcGUgdHlwZS5cbiAgcHVibGljIEdldFR5cGUoKTogYjJTaGFwZVR5cGUge1xuICAgIHJldHVybiB0aGlzLm1fdHlwZTtcbiAgfVxuXG4gIC8vLyBHZXQgdGhlIG51bWJlciBvZiBjaGlsZCBwcmltaXRpdmVzLlxuICBwdWJsaWMgYWJzdHJhY3QgR2V0Q2hpbGRDb3VudCgpOiBudW1iZXI7XG5cbiAgLy8vIFRlc3QgYSBwb2ludCBmb3IgY29udGFpbm1lbnQgaW4gdGhpcyBzaGFwZS4gVGhpcyBvbmx5IHdvcmtzIGZvciBjb252ZXggc2hhcGVzLlxuICAvLy8gQHBhcmFtIHhmIHRoZSBzaGFwZSB3b3JsZCB0cmFuc2Zvcm0uXG4gIC8vLyBAcGFyYW0gcCBhIHBvaW50IGluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICBwdWJsaWMgYWJzdHJhY3QgVGVzdFBvaW50KHhmOiBiMlRyYW5zZm9ybSwgcDogWFkpOiBib29sZWFuO1xuXG4gIC8vICNpZiBCMl9FTkFCTEVfUEFSVElDTEVcbiAgLy8vIENvbXB1dGUgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGN1cnJlbnQgc2hhcGUgdG8gdGhlIHNwZWNpZmllZCBwb2ludC4gVGhpcyBvbmx5IHdvcmtzIGZvciBjb252ZXggc2hhcGVzLlxuICAvLy8gQHBhcmFtIHhmIHRoZSBzaGFwZSB3b3JsZCB0cmFuc2Zvcm0uXG4gIC8vLyBAcGFyYW0gcCBhIHBvaW50IGluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICAvLy8gQHBhcmFtIGRpc3RhbmNlIHJldHVybnMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGN1cnJlbnQgc2hhcGUuXG4gIC8vLyBAcGFyYW0gbm9ybWFsIHJldHVybnMgdGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0aGUgZGlzdGFuY2UgaW5jcmVhc2VzLlxuICBwdWJsaWMgYWJzdHJhY3QgQ29tcHV0ZURpc3RhbmNlKHhmOiBiMlRyYW5zZm9ybSwgcDogYjJWZWMyLCBub3JtYWw6IGIyVmVjMiwgY2hpbGRJbmRleDogbnVtYmVyKTogbnVtYmVyO1xuICAvLyAjZW5kaWZcblxuICAvLy8gQ2FzdCBhIHJheSBhZ2FpbnN0IGEgY2hpbGQgc2hhcGUuXG4gIC8vLyBAcGFyYW0gb3V0cHV0IHRoZSByYXktY2FzdCByZXN1bHRzLlxuICAvLy8gQHBhcmFtIGlucHV0IHRoZSByYXktY2FzdCBpbnB1dCBwYXJhbWV0ZXJzLlxuICAvLy8gQHBhcmFtIHRyYW5zZm9ybSB0aGUgdHJhbnNmb3JtIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHNoYXBlLlxuICAvLy8gQHBhcmFtIGNoaWxkSW5kZXggdGhlIGNoaWxkIHNoYXBlIGluZGV4XG4gIHB1YmxpYyBhYnN0cmFjdCBSYXlDYXN0KG91dHB1dDogYjJSYXlDYXN0T3V0cHV0LCBpbnB1dDogYjJSYXlDYXN0SW5wdXQsIHRyYW5zZm9ybTogYjJUcmFuc2Zvcm0sIGNoaWxkSW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG5cbiAgLy8vIEdpdmVuIGEgdHJhbnNmb3JtLCBjb21wdXRlIHRoZSBhc3NvY2lhdGVkIGF4aXMgYWxpZ25lZCBib3VuZGluZyBib3ggZm9yIGEgY2hpbGQgc2hhcGUuXG4gIC8vLyBAcGFyYW0gYWFiYiByZXR1cm5zIHRoZSBheGlzIGFsaWduZWQgYm94LlxuICAvLy8gQHBhcmFtIHhmIHRoZSB3b3JsZCB0cmFuc2Zvcm0gb2YgdGhlIHNoYXBlLlxuICAvLy8gQHBhcmFtIGNoaWxkSW5kZXggdGhlIGNoaWxkIHNoYXBlXG4gIHB1YmxpYyBhYnN0cmFjdCBDb21wdXRlQUFCQihhYWJiOiBiMkFBQkIsIHhmOiBiMlRyYW5zZm9ybSwgY2hpbGRJbmRleDogbnVtYmVyKTogdm9pZDtcblxuICAvLy8gQ29tcHV0ZSB0aGUgbWFzcyBwcm9wZXJ0aWVzIG9mIHRoaXMgc2hhcGUgdXNpbmcgaXRzIGRpbWVuc2lvbnMgYW5kIGRlbnNpdHkuXG4gIC8vLyBUaGUgaW5lcnRpYSB0ZW5zb3IgaXMgY29tcHV0ZWQgYWJvdXQgdGhlIGxvY2FsIG9yaWdpbi5cbiAgLy8vIEBwYXJhbSBtYXNzRGF0YSByZXR1cm5zIHRoZSBtYXNzIGRhdGEgZm9yIHRoaXMgc2hhcGUuXG4gIC8vLyBAcGFyYW0gZGVuc2l0eSB0aGUgZGVuc2l0eSBpbiBraWxvZ3JhbXMgcGVyIG1ldGVyIHNxdWFyZWQuXG4gIHB1YmxpYyBhYnN0cmFjdCBDb21wdXRlTWFzcyhtYXNzRGF0YTogYjJNYXNzRGF0YSwgZGVuc2l0eTogbnVtYmVyKTogdm9pZDtcblxuICBwdWJsaWMgYWJzdHJhY3QgU2V0dXBEaXN0YW5jZVByb3h5KHByb3h5OiBiMkRpc3RhbmNlUHJveHksIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBDb21wdXRlU3VibWVyZ2VkQXJlYShub3JtYWw6IGIyVmVjMiwgb2Zmc2V0OiBudW1iZXIsIHhmOiBiMlRyYW5zZm9ybSwgYzogYjJWZWMyKTogbnVtYmVyO1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBEdW1wKGxvZzogKGZvcm1hdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXSwibWFwcGluZ3MiOiI7OztBQW1CQTtBQUtBO0FBQUE7QUFFQTtBQUdBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFUQTtBQVdBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBT0E7QUFOQTtBQUlBO0FBR0E7QUFDQTtBQUNBO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUEyQ0E7QUFBQTtBQXBFQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_shape.ts\n");

/***/ }),

/***/ "./src/box2d/collision/b2_time_of_impact.ts":
/*!**************************************************!*\
  !*** ./src/box2d/collision/b2_time_of_impact.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2TimeOfImpact = exports.b2SeparationFunction = exports.b2SeparationFunctionType = exports.b2TOIOutput = exports.b2TOIOutputState = exports.b2TOIInput = exports.b2_toi_reset = exports.b2_toiMaxRootIters = exports.b2_toiRootIters = exports.b2_toiMaxIters = exports.b2_toiIters = exports.b2_toiCalls = exports.b2_toiMaxTime = exports.b2_toiTime = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_timer_1 = __webpack_require__(/*! ../common/b2_timer */ \"./src/box2d/common/b2_timer.ts\");\nvar b2_distance_1 = __webpack_require__(/*! ./b2_distance */ \"./src/box2d/collision/b2_distance.ts\");\nexports.b2_toiTime = 0;\nexports.b2_toiMaxTime = 0;\nexports.b2_toiCalls = 0;\nexports.b2_toiIters = 0;\nexports.b2_toiMaxIters = 0;\nexports.b2_toiRootIters = 0;\nexports.b2_toiMaxRootIters = 0;\nfunction b2_toi_reset() {\n    exports.b2_toiTime = 0;\n    exports.b2_toiMaxTime = 0;\n    exports.b2_toiCalls = 0;\n    exports.b2_toiIters = 0;\n    exports.b2_toiMaxIters = 0;\n    exports.b2_toiRootIters = 0;\n    exports.b2_toiMaxRootIters = 0;\n}\nexports.b2_toi_reset = b2_toi_reset;\nvar b2TimeOfImpact_s_xfA = new b2_math_1.b2Transform();\nvar b2TimeOfImpact_s_xfB = new b2_math_1.b2Transform();\nvar b2TimeOfImpact_s_pointA = new b2_math_1.b2Vec2();\nvar b2TimeOfImpact_s_pointB = new b2_math_1.b2Vec2();\nvar b2TimeOfImpact_s_normal = new b2_math_1.b2Vec2();\nvar b2TimeOfImpact_s_axisA = new b2_math_1.b2Vec2();\nvar b2TimeOfImpact_s_axisB = new b2_math_1.b2Vec2();\nvar b2TOIInput = (function () {\n    function b2TOIInput() {\n        this.proxyA = new b2_distance_1.b2DistanceProxy();\n        this.proxyB = new b2_distance_1.b2DistanceProxy();\n        this.sweepA = new b2_math_1.b2Sweep();\n        this.sweepB = new b2_math_1.b2Sweep();\n        this.tMax = 0;\n    }\n    return b2TOIInput;\n}());\nexports.b2TOIInput = b2TOIInput;\nvar b2TOIOutputState;\n(function (b2TOIOutputState) {\n    b2TOIOutputState[b2TOIOutputState[\"e_unknown\"] = 0] = \"e_unknown\";\n    b2TOIOutputState[b2TOIOutputState[\"e_failed\"] = 1] = \"e_failed\";\n    b2TOIOutputState[b2TOIOutputState[\"e_overlapped\"] = 2] = \"e_overlapped\";\n    b2TOIOutputState[b2TOIOutputState[\"e_touching\"] = 3] = \"e_touching\";\n    b2TOIOutputState[b2TOIOutputState[\"e_separated\"] = 4] = \"e_separated\";\n})(b2TOIOutputState = exports.b2TOIOutputState || (exports.b2TOIOutputState = {}));\nvar b2TOIOutput = (function () {\n    function b2TOIOutput() {\n        this.state = b2TOIOutputState.e_unknown;\n        this.t = 0;\n    }\n    return b2TOIOutput;\n}());\nexports.b2TOIOutput = b2TOIOutput;\nvar b2SeparationFunctionType;\n(function (b2SeparationFunctionType) {\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_unknown\"] = -1] = \"e_unknown\";\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_points\"] = 0] = \"e_points\";\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_faceA\"] = 1] = \"e_faceA\";\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_faceB\"] = 2] = \"e_faceB\";\n})(b2SeparationFunctionType = exports.b2SeparationFunctionType || (exports.b2SeparationFunctionType = {}));\nvar b2SeparationFunction = (function () {\n    function b2SeparationFunction() {\n        this.m_sweepA = new b2_math_1.b2Sweep();\n        this.m_sweepB = new b2_math_1.b2Sweep();\n        this.m_type = b2SeparationFunctionType.e_unknown;\n        this.m_localPoint = new b2_math_1.b2Vec2();\n        this.m_axis = new b2_math_1.b2Vec2();\n    }\n    b2SeparationFunction.prototype.Initialize = function (cache, proxyA, sweepA, proxyB, sweepB, t1) {\n        this.m_proxyA = proxyA;\n        this.m_proxyB = proxyB;\n        var count = cache.count;\n        this.m_sweepA.Copy(sweepA);\n        this.m_sweepB.Copy(sweepB);\n        var xfA = b2TimeOfImpact_s_xfA;\n        var xfB = b2TimeOfImpact_s_xfB;\n        this.m_sweepA.GetTransform(xfA, t1);\n        this.m_sweepB.GetTransform(xfB, t1);\n        if (count === 1) {\n            this.m_type = b2SeparationFunctionType.e_points;\n            var localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\n            var localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\n            var pointA = b2_math_1.b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n            var pointB = b2_math_1.b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n            b2_math_1.b2Vec2.SubVV(pointB, pointA, this.m_axis);\n            var s = this.m_axis.Normalize();\n            this.m_localPoint.SetZero();\n            return s;\n        }\n        else if (cache.indexA[0] === cache.indexA[1]) {\n            this.m_type = b2SeparationFunctionType.e_faceB;\n            var localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\n            var localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\n            b2_math_1.b2Vec2.CrossVOne(b2_math_1.b2Vec2.SubVV(localPointB2, localPointB1, b2_math_1.b2Vec2.s_t0), this.m_axis).SelfNormalize();\n            var normal = b2_math_1.b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\n            b2_math_1.b2Vec2.MidVV(localPointB1, localPointB2, this.m_localPoint);\n            var pointB = b2_math_1.b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\n            var localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\n            var pointA = b2_math_1.b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n            var s = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointA, pointB, b2_math_1.b2Vec2.s_t0), normal);\n            if (s < 0) {\n                this.m_axis.SelfNeg();\n                s = -s;\n            }\n            return s;\n        }\n        else {\n            this.m_type = b2SeparationFunctionType.e_faceA;\n            var localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\n            var localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\n            b2_math_1.b2Vec2.CrossVOne(b2_math_1.b2Vec2.SubVV(localPointA2, localPointA1, b2_math_1.b2Vec2.s_t0), this.m_axis).SelfNormalize();\n            var normal = b2_math_1.b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\n            b2_math_1.b2Vec2.MidVV(localPointA1, localPointA2, this.m_localPoint);\n            var pointA = b2_math_1.b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\n            var localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\n            var pointB = b2_math_1.b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n            var s = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointB, pointA, b2_math_1.b2Vec2.s_t0), normal);\n            if (s < 0) {\n                this.m_axis.SelfNeg();\n                s = -s;\n            }\n            return s;\n        }\n    };\n    b2SeparationFunction.prototype.FindMinSeparation = function (indexA, indexB, t) {\n        var xfA = b2TimeOfImpact_s_xfA;\n        var xfB = b2TimeOfImpact_s_xfB;\n        this.m_sweepA.GetTransform(xfA, t);\n        this.m_sweepB.GetTransform(xfB, t);\n        switch (this.m_type) {\n            case b2SeparationFunctionType.e_points: {\n                var axisA = b2_math_1.b2Rot.MulTRV(xfA.q, this.m_axis, b2TimeOfImpact_s_axisA);\n                var axisB = b2_math_1.b2Rot.MulTRV(xfB.q, b2_math_1.b2Vec2.NegV(this.m_axis, b2_math_1.b2Vec2.s_t0), b2TimeOfImpact_s_axisB);\n                indexA[0] = this.m_proxyA.GetSupport(axisA);\n                indexB[0] = this.m_proxyB.GetSupport(axisB);\n                var localPointA = this.m_proxyA.GetVertex(indexA[0]);\n                var localPointB = this.m_proxyB.GetVertex(indexB[0]);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n                var separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointB, pointA, b2_math_1.b2Vec2.s_t0), this.m_axis);\n                return separation;\n            }\n            case b2SeparationFunctionType.e_faceA: {\n                var normal = b2_math_1.b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\n                var axisB = b2_math_1.b2Rot.MulTRV(xfB.q, b2_math_1.b2Vec2.NegV(normal, b2_math_1.b2Vec2.s_t0), b2TimeOfImpact_s_axisB);\n                indexA[0] = -1;\n                indexB[0] = this.m_proxyB.GetSupport(axisB);\n                var localPointB = this.m_proxyB.GetVertex(indexB[0]);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n                var separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointB, pointA, b2_math_1.b2Vec2.s_t0), normal);\n                return separation;\n            }\n            case b2SeparationFunctionType.e_faceB: {\n                var normal = b2_math_1.b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\n                var axisA = b2_math_1.b2Rot.MulTRV(xfA.q, b2_math_1.b2Vec2.NegV(normal, b2_math_1.b2Vec2.s_t0), b2TimeOfImpact_s_axisA);\n                indexB[0] = -1;\n                indexA[0] = this.m_proxyA.GetSupport(axisA);\n                var localPointA = this.m_proxyA.GetVertex(indexA[0]);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n                var separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointA, pointB, b2_math_1.b2Vec2.s_t0), normal);\n                return separation;\n            }\n            default:\n                indexA[0] = -1;\n                indexB[0] = -1;\n                return 0;\n        }\n    };\n    b2SeparationFunction.prototype.Evaluate = function (indexA, indexB, t) {\n        var xfA = b2TimeOfImpact_s_xfA;\n        var xfB = b2TimeOfImpact_s_xfB;\n        this.m_sweepA.GetTransform(xfA, t);\n        this.m_sweepB.GetTransform(xfB, t);\n        switch (this.m_type) {\n            case b2SeparationFunctionType.e_points: {\n                var localPointA = this.m_proxyA.GetVertex(indexA);\n                var localPointB = this.m_proxyB.GetVertex(indexB);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n                var separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointB, pointA, b2_math_1.b2Vec2.s_t0), this.m_axis);\n                return separation;\n            }\n            case b2SeparationFunctionType.e_faceA: {\n                var normal = b2_math_1.b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\n                var localPointB = this.m_proxyB.GetVertex(indexB);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n                var separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointB, pointA, b2_math_1.b2Vec2.s_t0), normal);\n                return separation;\n            }\n            case b2SeparationFunctionType.e_faceB: {\n                var normal = b2_math_1.b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\n                var pointB = b2_math_1.b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\n                var localPointA = this.m_proxyA.GetVertex(indexA);\n                var pointA = b2_math_1.b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n                var separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointA, pointB, b2_math_1.b2Vec2.s_t0), normal);\n                return separation;\n            }\n            default:\n                return 0;\n        }\n    };\n    return b2SeparationFunction;\n}());\nexports.b2SeparationFunction = b2SeparationFunction;\nvar b2TimeOfImpact_s_timer = new b2_timer_1.b2Timer();\nvar b2TimeOfImpact_s_cache = new b2_distance_1.b2SimplexCache();\nvar b2TimeOfImpact_s_distanceInput = new b2_distance_1.b2DistanceInput();\nvar b2TimeOfImpact_s_distanceOutput = new b2_distance_1.b2DistanceOutput();\nvar b2TimeOfImpact_s_fcn = new b2SeparationFunction();\nvar b2TimeOfImpact_s_indexA = [0];\nvar b2TimeOfImpact_s_indexB = [0];\nvar b2TimeOfImpact_s_sweepA = new b2_math_1.b2Sweep();\nvar b2TimeOfImpact_s_sweepB = new b2_math_1.b2Sweep();\nfunction b2TimeOfImpact(output, input) {\n    var timer = b2TimeOfImpact_s_timer.Reset();\n    ++exports.b2_toiCalls;\n    output.state = b2TOIOutputState.e_unknown;\n    output.t = input.tMax;\n    var proxyA = input.proxyA;\n    var proxyB = input.proxyB;\n    var maxVertices = b2_math_1.b2Max(b2_settings_1.b2_maxPolygonVertices, b2_math_1.b2Max(proxyA.m_count, proxyB.m_count));\n    var sweepA = b2TimeOfImpact_s_sweepA.Copy(input.sweepA);\n    var sweepB = b2TimeOfImpact_s_sweepB.Copy(input.sweepB);\n    sweepA.Normalize();\n    sweepB.Normalize();\n    var tMax = input.tMax;\n    var totalRadius = proxyA.m_radius + proxyB.m_radius;\n    var target = b2_math_1.b2Max(b2_settings_1.b2_linearSlop, totalRadius - 3 * b2_settings_1.b2_linearSlop);\n    var tolerance = 0.25 * b2_settings_1.b2_linearSlop;\n    var t1 = 0;\n    var k_maxIterations = 20;\n    var iter = 0;\n    var cache = b2TimeOfImpact_s_cache;\n    cache.count = 0;\n    var distanceInput = b2TimeOfImpact_s_distanceInput;\n    distanceInput.proxyA.Copy(input.proxyA);\n    distanceInput.proxyB.Copy(input.proxyB);\n    distanceInput.useRadii = false;\n    for (;;) {\n        var xfA = b2TimeOfImpact_s_xfA;\n        var xfB = b2TimeOfImpact_s_xfB;\n        sweepA.GetTransform(xfA, t1);\n        sweepB.GetTransform(xfB, t1);\n        distanceInput.transformA.Copy(xfA);\n        distanceInput.transformB.Copy(xfB);\n        var distanceOutput = b2TimeOfImpact_s_distanceOutput;\n        b2_distance_1.b2Distance(distanceOutput, cache, distanceInput);\n        if (distanceOutput.distance <= 0) {\n            output.state = b2TOIOutputState.e_overlapped;\n            output.t = 0;\n            break;\n        }\n        if (distanceOutput.distance < target + tolerance) {\n            output.state = b2TOIOutputState.e_touching;\n            output.t = t1;\n            break;\n        }\n        var fcn = b2TimeOfImpact_s_fcn;\n        fcn.Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n        var done = false;\n        var t2 = tMax;\n        var pushBackIter = 0;\n        for (;;) {\n            var indexA = b2TimeOfImpact_s_indexA;\n            var indexB = b2TimeOfImpact_s_indexB;\n            var s2 = fcn.FindMinSeparation(indexA, indexB, t2);\n            if (s2 > (target + tolerance)) {\n                output.state = b2TOIOutputState.e_separated;\n                output.t = tMax;\n                done = true;\n                break;\n            }\n            if (s2 > (target - tolerance)) {\n                t1 = t2;\n                break;\n            }\n            var s1 = fcn.Evaluate(indexA[0], indexB[0], t1);\n            if (s1 < (target - tolerance)) {\n                output.state = b2TOIOutputState.e_failed;\n                output.t = t1;\n                done = true;\n                break;\n            }\n            if (s1 <= (target + tolerance)) {\n                output.state = b2TOIOutputState.e_touching;\n                output.t = t1;\n                done = true;\n                break;\n            }\n            var rootIterCount = 0;\n            var a1 = t1;\n            var a2 = t2;\n            for (;;) {\n                var t = 0;\n                if (rootIterCount & 1) {\n                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n                }\n                else {\n                    t = 0.5 * (a1 + a2);\n                }\n                ++rootIterCount;\n                ++exports.b2_toiRootIters;\n                var s = fcn.Evaluate(indexA[0], indexB[0], t);\n                if (b2_math_1.b2Abs(s - target) < tolerance) {\n                    t2 = t;\n                    break;\n                }\n                if (s > target) {\n                    a1 = t;\n                    s1 = s;\n                }\n                else {\n                    a2 = t;\n                    s2 = s;\n                }\n                if (rootIterCount === 50) {\n                    break;\n                }\n            }\n            exports.b2_toiMaxRootIters = b2_math_1.b2Max(exports.b2_toiMaxRootIters, rootIterCount);\n            ++pushBackIter;\n            if (pushBackIter === maxVertices) {\n                break;\n            }\n        }\n        ++iter;\n        ++exports.b2_toiIters;\n        if (done) {\n            break;\n        }\n        if (iter === k_maxIterations) {\n            output.state = b2TOIOutputState.e_failed;\n            output.t = t1;\n            break;\n        }\n    }\n    exports.b2_toiMaxIters = b2_math_1.b2Max(exports.b2_toiMaxIters, iter);\n    var time = timer.GetMilliseconds();\n    exports.b2_toiMaxTime = b2_math_1.b2Max(exports.b2_toiMaxTime, time);\n    exports.b2_toiTime += time;\n}\nexports.b2TimeOfImpact = b2TimeOfImpact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/collision/b2_time_of_impact.ts\n");

/***/ }),

/***/ "./src/box2d/common/b2_common.ts":
/*!***************************************!*\
  !*** ./src/box2d/common/b2_common.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2MakeNumberArray = exports.b2MakeNullArray = exports.b2MakeArray = exports.b2ParseUInt = exports.b2ParseInt = exports.b2_commit = exports.b2_branch = exports.b2_version = exports.b2Version = exports.b2_angularSleepTolerance = exports.b2_linearSleepTolerance = exports.b2_timeToSleep = exports.b2_barrierCollisionTime = exports.b2_minParticleSystemBufferCapacity = exports.b2_maxTriadDistanceSquared = exports.b2_maxTriadDistance = exports.b2_maxParticleForce = exports.b2_maxParticlePressure = exports.b2_minParticleWeight = exports.b2_particleStride = exports.b2_maxParticleIndex = exports.b2_invalidParticleIndex = exports.b2_toiBaumgarte = exports.b2_baumgarte = exports.b2_maxRotationSquared = exports.b2_maxRotation = exports.b2_maxTranslationSquared = exports.b2_maxTranslation = exports.b2_maxAngularCorrection = exports.b2_maxLinearCorrection = exports.b2_maxTOIContacts = exports.b2_maxSubSteps = exports.b2_polygonRadius = exports.b2_angularSlop = exports.b2_linearSlop = exports.b2_aabbMultiplier = exports.b2_aabbExtension = exports.b2_maxManifoldPoints = exports.b2_maxPolygonVertices = exports.b2_lengthUnitsPerMeter = exports.b2_pi = exports.b2_epsilon_sq = exports.b2_epsilon = exports.b2_maxFloat = exports.b2Maybe = exports.b2Assert = void 0;\nfunction b2Assert(condition) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (!condition) {\n        throw new (Error.bind.apply(Error, __spreadArrays([void 0], args)))();\n    }\n}\nexports.b2Assert = b2Assert;\nfunction b2Maybe(value, def) {\n    return value !== undefined ? value : def;\n}\nexports.b2Maybe = b2Maybe;\nexports.b2_maxFloat = 1E+37;\nexports.b2_epsilon = 1E-5;\nexports.b2_epsilon_sq = (exports.b2_epsilon * exports.b2_epsilon);\nexports.b2_pi = 3.14159265359;\nexports.b2_lengthUnitsPerMeter = 1.0;\nexports.b2_maxPolygonVertices = 8;\nexports.b2_maxManifoldPoints = 2;\nexports.b2_aabbExtension = 0.1 * exports.b2_lengthUnitsPerMeter;\nexports.b2_aabbMultiplier = 4;\nexports.b2_linearSlop = 0.005 * exports.b2_lengthUnitsPerMeter;\nexports.b2_angularSlop = 2 / 180 * exports.b2_pi;\nexports.b2_polygonRadius = 2 * exports.b2_linearSlop;\nexports.b2_maxSubSteps = 8;\nexports.b2_maxTOIContacts = 32;\nexports.b2_maxLinearCorrection = 0.2 * exports.b2_lengthUnitsPerMeter;\nexports.b2_maxAngularCorrection = 8 / 180 * exports.b2_pi;\nexports.b2_maxTranslation = 2 * exports.b2_lengthUnitsPerMeter;\nexports.b2_maxTranslationSquared = exports.b2_maxTranslation * exports.b2_maxTranslation;\nexports.b2_maxRotation = 0.5 * exports.b2_pi;\nexports.b2_maxRotationSquared = exports.b2_maxRotation * exports.b2_maxRotation;\nexports.b2_baumgarte = 0.2;\nexports.b2_toiBaumgarte = 0.75;\nexports.b2_invalidParticleIndex = -1;\nexports.b2_maxParticleIndex = 0x7FFFFFFF;\nexports.b2_particleStride = 0.75;\nexports.b2_minParticleWeight = 1.0;\nexports.b2_maxParticlePressure = 0.25;\nexports.b2_maxParticleForce = 0.5;\nexports.b2_maxTriadDistance = 2.0 * exports.b2_lengthUnitsPerMeter;\nexports.b2_maxTriadDistanceSquared = (exports.b2_maxTriadDistance * exports.b2_maxTriadDistance);\nexports.b2_minParticleSystemBufferCapacity = 256;\nexports.b2_barrierCollisionTime = 2.5;\nexports.b2_timeToSleep = 0.5;\nexports.b2_linearSleepTolerance = 0.01 * exports.b2_lengthUnitsPerMeter;\nexports.b2_angularSleepTolerance = 2 / 180 * exports.b2_pi;\nvar b2Version = (function () {\n    function b2Version(major, minor, revision) {\n        if (major === void 0) { major = 0; }\n        if (minor === void 0) { minor = 0; }\n        if (revision === void 0) { revision = 0; }\n        this.major = 0;\n        this.minor = 0;\n        this.revision = 0;\n        this.major = major;\n        this.minor = minor;\n        this.revision = revision;\n    }\n    b2Version.prototype.toString = function () {\n        return this.major + \".\" + this.minor + \".\" + this.revision;\n    };\n    return b2Version;\n}());\nexports.b2Version = b2Version;\nexports.b2_version = new b2Version(2, 4, 1);\nexports.b2_branch = \"master\";\nexports.b2_commit = \"9ebbbcd960ad424e03e5de6e66a40764c16f51bc\";\nfunction b2ParseInt(v) {\n    return parseInt(v, 10);\n}\nexports.b2ParseInt = b2ParseInt;\nfunction b2ParseUInt(v) {\n    return Math.abs(parseInt(v, 10));\n}\nexports.b2ParseUInt = b2ParseUInt;\nfunction b2MakeArray(length, init) {\n    var a = new Array(length);\n    for (var i = 0; i < length; ++i) {\n        a[i] = init(i);\n    }\n    return a;\n}\nexports.b2MakeArray = b2MakeArray;\nfunction b2MakeNullArray(length) {\n    var a = new Array(length);\n    for (var i = 0; i < length; ++i) {\n        a[i] = null;\n    }\n    return a;\n}\nexports.b2MakeNullArray = b2MakeNullArray;\nfunction b2MakeNumberArray(length, init) {\n    if (init === void 0) { init = 0; }\n    var a = new Array(length);\n    for (var i = 0; i < length; ++i) {\n        a[i] = init;\n    }\n    return a;\n}\nexports.b2MakeNumberArray = b2MakeNumberArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/common/b2_common.ts\n");

/***/ }),

/***/ "./src/box2d/common/b2_draw.ts":
/*!*************************************!*\
  !*** ./src/box2d/common/b2_draw.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Draw = exports.b2DrawFlags = exports.b2TypedColor = exports.b2Color = void 0;\nvar b2Color = (function () {\n    function b2Color(r, g, b, a) {\n        if (r === void 0) { r = 0.5; }\n        if (g === void 0) { g = 0.5; }\n        if (b === void 0) { b = 0.5; }\n        if (a === void 0) { a = 1.0; }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    b2Color.prototype.Clone = function () {\n        return new b2Color().Copy(this);\n    };\n    b2Color.prototype.Copy = function (other) {\n        this.r = other.r;\n        this.g = other.g;\n        this.b = other.b;\n        this.a = other.a;\n        return this;\n    };\n    b2Color.prototype.IsEqual = function (color) {\n        return (this.r === color.r) && (this.g === color.g) && (this.b === color.b) && (this.a === color.a);\n    };\n    b2Color.prototype.IsZero = function () {\n        return (this.r === 0) && (this.g === 0) && (this.b === 0) && (this.a === 0);\n    };\n    b2Color.prototype.Set = function (r, g, b, a) {\n        if (a === void 0) { a = this.a; }\n        this.SetRGBA(r, g, b, a);\n    };\n    b2Color.prototype.SetByteRGB = function (r, g, b) {\n        this.r = r / 0xff;\n        this.g = g / 0xff;\n        this.b = b / 0xff;\n        return this;\n    };\n    b2Color.prototype.SetByteRGBA = function (r, g, b, a) {\n        this.r = r / 0xff;\n        this.g = g / 0xff;\n        this.b = b / 0xff;\n        this.a = a / 0xff;\n        return this;\n    };\n    b2Color.prototype.SetRGB = function (rr, gg, bb) {\n        this.r = rr;\n        this.g = gg;\n        this.b = bb;\n        return this;\n    };\n    b2Color.prototype.SetRGBA = function (rr, gg, bb, aa) {\n        this.r = rr;\n        this.g = gg;\n        this.b = bb;\n        this.a = aa;\n        return this;\n    };\n    b2Color.prototype.SelfAdd = function (color) {\n        this.r += color.r;\n        this.g += color.g;\n        this.b += color.b;\n        this.a += color.a;\n        return this;\n    };\n    b2Color.prototype.Add = function (color, out) {\n        out.r = this.r + color.r;\n        out.g = this.g + color.g;\n        out.b = this.b + color.b;\n        out.a = this.a + color.a;\n        return out;\n    };\n    b2Color.prototype.SelfSub = function (color) {\n        this.r -= color.r;\n        this.g -= color.g;\n        this.b -= color.b;\n        this.a -= color.a;\n        return this;\n    };\n    b2Color.prototype.Sub = function (color, out) {\n        out.r = this.r - color.r;\n        out.g = this.g - color.g;\n        out.b = this.b - color.b;\n        out.a = this.a - color.a;\n        return out;\n    };\n    b2Color.prototype.SelfMul = function (s) {\n        this.r *= s;\n        this.g *= s;\n        this.b *= s;\n        this.a *= s;\n        return this;\n    };\n    b2Color.prototype.Mul = function (s, out) {\n        out.r = this.r * s;\n        out.g = this.g * s;\n        out.b = this.b * s;\n        out.a = this.a * s;\n        return out;\n    };\n    b2Color.prototype.Mix = function (mixColor, strength) {\n        b2Color.MixColors(this, mixColor, strength);\n    };\n    b2Color.MixColors = function (colorA, colorB, strength) {\n        var dr = (strength * (colorB.r - colorA.r));\n        var dg = (strength * (colorB.g - colorA.g));\n        var db = (strength * (colorB.b - colorA.b));\n        var da = (strength * (colorB.a - colorA.a));\n        colorA.r += dr;\n        colorA.g += dg;\n        colorA.b += db;\n        colorA.a += da;\n        colorB.r -= dr;\n        colorB.g -= dg;\n        colorB.b -= db;\n        colorB.a -= da;\n    };\n    b2Color.prototype.MakeStyleString = function (alpha) {\n        if (alpha === void 0) { alpha = this.a; }\n        return b2Color.MakeStyleString(this.r, this.g, this.b, alpha);\n    };\n    b2Color.MakeStyleString = function (r, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        r *= 255;\n        g *= 255;\n        b *= 255;\n        if (a < 1) {\n            return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n        }\n        else {\n            return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n        }\n    };\n    b2Color.ZERO = new b2Color(0, 0, 0, 0);\n    b2Color.RED = new b2Color(1, 0, 0);\n    b2Color.GREEN = new b2Color(0, 1, 0);\n    b2Color.BLUE = new b2Color(0, 0, 1);\n    return b2Color;\n}());\nexports.b2Color = b2Color;\nvar b2TypedColor = (function () {\n    function b2TypedColor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof Float32Array) {\n            if (args[0].length !== 4) {\n                throw new Error();\n            }\n            this.data = args[0];\n        }\n        else {\n            var rr = typeof args[0] === \"number\" ? args[0] : 0.5;\n            var gg = typeof args[1] === \"number\" ? args[1] : 0.5;\n            var bb = typeof args[2] === \"number\" ? args[2] : 0.5;\n            var aa = typeof args[3] === \"number\" ? args[3] : 1.0;\n            this.data = new Float32Array([rr, gg, bb, aa]);\n        }\n    }\n    Object.defineProperty(b2TypedColor.prototype, \"r\", {\n        get: function () { return this.data[0]; },\n        set: function (value) { this.data[0] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2TypedColor.prototype, \"g\", {\n        get: function () { return this.data[1]; },\n        set: function (value) { this.data[1] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2TypedColor.prototype, \"b\", {\n        get: function () { return this.data[2]; },\n        set: function (value) { this.data[2] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2TypedColor.prototype, \"a\", {\n        get: function () { return this.data[3]; },\n        set: function (value) { this.data[3] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    b2TypedColor.prototype.Clone = function () {\n        return new b2TypedColor(new Float32Array(this.data));\n    };\n    b2TypedColor.prototype.Copy = function (other) {\n        if (other instanceof b2TypedColor) {\n            this.data.set(other.data);\n        }\n        else {\n            this.r = other.r;\n            this.g = other.g;\n            this.b = other.b;\n            this.a = other.a;\n        }\n        return this;\n    };\n    b2TypedColor.prototype.IsEqual = function (color) {\n        return (this.r === color.r) && (this.g === color.g) && (this.b === color.b) && (this.a === color.a);\n    };\n    b2TypedColor.prototype.IsZero = function () {\n        return (this.r === 0) && (this.g === 0) && (this.b === 0) && (this.a === 0);\n    };\n    b2TypedColor.prototype.Set = function (r, g, b, a) {\n        if (a === void 0) { a = this.a; }\n        this.SetRGBA(r, g, b, a);\n    };\n    b2TypedColor.prototype.SetByteRGB = function (r, g, b) {\n        this.r = r / 0xff;\n        this.g = g / 0xff;\n        this.b = b / 0xff;\n        return this;\n    };\n    b2TypedColor.prototype.SetByteRGBA = function (r, g, b, a) {\n        this.r = r / 0xff;\n        this.g = g / 0xff;\n        this.b = b / 0xff;\n        this.a = a / 0xff;\n        return this;\n    };\n    b2TypedColor.prototype.SetRGB = function (rr, gg, bb) {\n        this.r = rr;\n        this.g = gg;\n        this.b = bb;\n        return this;\n    };\n    b2TypedColor.prototype.SetRGBA = function (rr, gg, bb, aa) {\n        this.r = rr;\n        this.g = gg;\n        this.b = bb;\n        this.a = aa;\n        return this;\n    };\n    b2TypedColor.prototype.SelfAdd = function (color) {\n        this.r += color.r;\n        this.g += color.g;\n        this.b += color.b;\n        this.a += color.a;\n        return this;\n    };\n    b2TypedColor.prototype.Add = function (color, out) {\n        out.r = this.r + color.r;\n        out.g = this.g + color.g;\n        out.b = this.b + color.b;\n        out.a = this.a + color.a;\n        return out;\n    };\n    b2TypedColor.prototype.SelfSub = function (color) {\n        this.r -= color.r;\n        this.g -= color.g;\n        this.b -= color.b;\n        this.a -= color.a;\n        return this;\n    };\n    b2TypedColor.prototype.Sub = function (color, out) {\n        out.r = this.r - color.r;\n        out.g = this.g - color.g;\n        out.b = this.b - color.b;\n        out.a = this.a - color.a;\n        return out;\n    };\n    b2TypedColor.prototype.SelfMul = function (s) {\n        this.r *= s;\n        this.g *= s;\n        this.b *= s;\n        this.a *= s;\n        return this;\n    };\n    b2TypedColor.prototype.Mul = function (s, out) {\n        out.r = this.r * s;\n        out.g = this.g * s;\n        out.b = this.b * s;\n        out.a = this.a * s;\n        return out;\n    };\n    b2TypedColor.prototype.Mix = function (mixColor, strength) {\n        b2Color.MixColors(this, mixColor, strength);\n    };\n    b2TypedColor.prototype.MakeStyleString = function (alpha) {\n        if (alpha === void 0) { alpha = this.a; }\n        return b2Color.MakeStyleString(this.r, this.g, this.b, alpha);\n    };\n    return b2TypedColor;\n}());\nexports.b2TypedColor = b2TypedColor;\nvar b2DrawFlags;\n(function (b2DrawFlags) {\n    b2DrawFlags[b2DrawFlags[\"e_none\"] = 0] = \"e_none\";\n    b2DrawFlags[b2DrawFlags[\"e_shapeBit\"] = 1] = \"e_shapeBit\";\n    b2DrawFlags[b2DrawFlags[\"e_jointBit\"] = 2] = \"e_jointBit\";\n    b2DrawFlags[b2DrawFlags[\"e_aabbBit\"] = 4] = \"e_aabbBit\";\n    b2DrawFlags[b2DrawFlags[\"e_pairBit\"] = 8] = \"e_pairBit\";\n    b2DrawFlags[b2DrawFlags[\"e_centerOfMassBit\"] = 16] = \"e_centerOfMassBit\";\n    b2DrawFlags[b2DrawFlags[\"e_particleBit\"] = 32] = \"e_particleBit\";\n    b2DrawFlags[b2DrawFlags[\"e_controllerBit\"] = 64] = \"e_controllerBit\";\n    b2DrawFlags[b2DrawFlags[\"e_all\"] = 63] = \"e_all\";\n})(b2DrawFlags = exports.b2DrawFlags || (exports.b2DrawFlags = {}));\nvar b2Draw = (function () {\n    function b2Draw() {\n        this.m_drawFlags = 0;\n    }\n    b2Draw.prototype.SetFlags = function (flags) {\n        this.m_drawFlags = flags;\n    };\n    b2Draw.prototype.GetFlags = function () {\n        return this.m_drawFlags;\n    };\n    b2Draw.prototype.AppendFlags = function (flags) {\n        this.m_drawFlags |= flags;\n    };\n    b2Draw.prototype.ClearFlags = function (flags) {\n        this.m_drawFlags &= ~flags;\n    };\n    return b2Draw;\n}());\nexports.b2Draw = b2Draw;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/common/b2_draw.ts\n");

/***/ }),

/***/ "./src/box2d/common/b2_growable_stack.ts":
/*!***********************************************!*\
  !*** ./src/box2d/common/b2_growable_stack.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2GrowableStack = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ./b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2GrowableStack = (function () {\n    function b2GrowableStack(N) {\n        this.m_stack = [];\n        this.m_count = 0;\n        this.m_stack = b2_settings_1.b2MakeArray(N, function (index) { return null; });\n        this.m_count = 0;\n    }\n    b2GrowableStack.prototype.Reset = function () {\n        this.m_count = 0;\n        return this;\n    };\n    b2GrowableStack.prototype.Push = function (element) {\n        this.m_stack[this.m_count] = element;\n        this.m_count++;\n    };\n    b2GrowableStack.prototype.Pop = function () {\n        this.m_count--;\n        var element = this.m_stack[this.m_count];\n        this.m_stack[this.m_count] = null;\n        return element;\n    };\n    b2GrowableStack.prototype.GetCount = function () {\n        return this.m_count;\n    };\n    return b2GrowableStack;\n}());\nexports.b2GrowableStack = b2GrowableStack;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvY29tbW9uL2IyX2dyb3dhYmxlX3N0YWNrLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2NvbW1vbi9iMl9ncm93YWJsZV9zdGFjay50cz84OWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAxMCBFcmluIENhdHRvIGh0dHA6Ly93d3cuYm94MmQub3JnXG4qXG4qIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4qIHdhcnJhbnR5LiAgSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4qIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuKiBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuKiBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiogMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiogbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuKi9cblxuLy8gREVCVUc6IGltcG9ydCB7IGIyQXNzZXJ0IH0gZnJvbSBcIi4vYjJfc2V0dGluZ3NcIjtcbmltcG9ydCB7IGIyTWFrZUFycmF5IH0gZnJvbSBcIi4vYjJfc2V0dGluZ3NcIjtcblxuLy8vIFRoaXMgaXMgYSBncm93YWJsZSBMSUZPIHN0YWNrIHdpdGggYW4gaW5pdGlhbCBjYXBhY2l0eSBvZiBOLlxuLy8vIElmIHRoZSBzdGFjayBzaXplIGV4Y2VlZHMgdGhlIGluaXRpYWwgY2FwYWNpdHksIHRoZSBoZWFwIGlzIHVzZWRcbi8vLyB0byBpbmNyZWFzZSB0aGUgc2l6ZSBvZiB0aGUgc3RhY2suXG5cbmV4cG9ydCBjbGFzcyBiMkdyb3dhYmxlU3RhY2s8VD4ge1xuICBwdWJsaWMgbV9zdGFjazogQXJyYXk8VCB8IG51bGw+ID0gW107XG4gIHB1YmxpYyBtX2NvdW50OiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKE46IG51bWJlcikge1xuICAgIHRoaXMubV9zdGFjayA9IGIyTWFrZUFycmF5KE4sIChpbmRleCkgPT4gbnVsbCk7XG4gICAgdGhpcy5tX2NvdW50ID0gMDtcbiAgfVxuXG4gIHB1YmxpYyBSZXNldCgpOiB0aGlzIHtcbiAgICB0aGlzLm1fY291bnQgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIFB1c2goZWxlbWVudDogVCk6IHZvaWQge1xuICAgIHRoaXMubV9zdGFja1t0aGlzLm1fY291bnRdID0gZWxlbWVudDtcbiAgICB0aGlzLm1fY291bnQrKztcbiAgfVxuXG4gIHB1YmxpYyBQb3AoKTogVCB8IG51bGwge1xuICAgIC8vIERFQlVHOiBiMkFzc2VydCh0aGlzLm1fY291bnQgPiAwKTtcbiAgICB0aGlzLm1fY291bnQtLTtcbiAgICBjb25zdCBlbGVtZW50OiBUIHwgbnVsbCA9IHRoaXMubV9zdGFja1t0aGlzLm1fY291bnRdO1xuICAgIHRoaXMubV9zdGFja1t0aGlzLm1fY291bnRdID0gbnVsbDtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBHZXRDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm1fY291bnQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7O0FBbUJBO0FBTUE7QUFJQTtBQUhBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQTlCQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/common/b2_growable_stack.ts\n");

/***/ }),

/***/ "./src/box2d/common/b2_math.ts":
/*!*************************************!*\
  !*** ./src/box2d/common/b2_math.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Sweep = exports.b2Transform = exports.b2Rot = exports.b2Mat33 = exports.b2Mat22 = exports.b2Vec3 = exports.b2TypedVec2 = exports.b2Vec2_zero = exports.b2Vec2 = exports.b2RandomRange = exports.b2Random = exports.b2IsPowerOfTwo = exports.b2NextPowerOfTwo = exports.b2Atan2 = exports.b2Asin = exports.b2Acos = exports.b2Sin = exports.b2Cos = exports.b2RadToDeg = exports.b2DegToRad = exports.b2Pow = exports.b2Sqrt = exports.b2InvSqrt = exports.b2Sq = exports.b2IsValid = exports.b2Swap = exports.b2Clamp = exports.b2Max = exports.b2Min = exports.b2Abs = exports.b2_two_pi = exports.b2_180_over_pi = exports.b2_pi_over_180 = void 0;\nvar b2_common_1 = __webpack_require__(/*! ./b2_common */ \"./src/box2d/common/b2_common.ts\");\nexports.b2_pi_over_180 = b2_common_1.b2_pi / 180;\nexports.b2_180_over_pi = 180 / b2_common_1.b2_pi;\nexports.b2_two_pi = 2 * b2_common_1.b2_pi;\nexports.b2Abs = Math.abs;\nfunction b2Min(a, b) { return a < b ? a : b; }\nexports.b2Min = b2Min;\nfunction b2Max(a, b) { return a > b ? a : b; }\nexports.b2Max = b2Max;\nfunction b2Clamp(a, lo, hi) {\n    return (a < lo) ? (lo) : ((a > hi) ? (hi) : (a));\n}\nexports.b2Clamp = b2Clamp;\nfunction b2Swap(a, b) {\n    var tmp = a[0];\n    a[0] = b[0];\n    b[0] = tmp;\n}\nexports.b2Swap = b2Swap;\nexports.b2IsValid = isFinite;\nfunction b2Sq(n) {\n    return n * n;\n}\nexports.b2Sq = b2Sq;\nfunction b2InvSqrt(n) {\n    return 1 / Math.sqrt(n);\n}\nexports.b2InvSqrt = b2InvSqrt;\nexports.b2Sqrt = Math.sqrt;\nexports.b2Pow = Math.pow;\nfunction b2DegToRad(degrees) {\n    return degrees * exports.b2_pi_over_180;\n}\nexports.b2DegToRad = b2DegToRad;\nfunction b2RadToDeg(radians) {\n    return radians * exports.b2_180_over_pi;\n}\nexports.b2RadToDeg = b2RadToDeg;\nexports.b2Cos = Math.cos;\nexports.b2Sin = Math.sin;\nexports.b2Acos = Math.acos;\nexports.b2Asin = Math.asin;\nexports.b2Atan2 = Math.atan2;\nfunction b2NextPowerOfTwo(x) {\n    x |= (x >> 1) & 0x7FFFFFFF;\n    x |= (x >> 2) & 0x3FFFFFFF;\n    x |= (x >> 4) & 0x0FFFFFFF;\n    x |= (x >> 8) & 0x00FFFFFF;\n    x |= (x >> 16) & 0x0000FFFF;\n    return x + 1;\n}\nexports.b2NextPowerOfTwo = b2NextPowerOfTwo;\nfunction b2IsPowerOfTwo(x) {\n    return x > 0 && (x & (x - 1)) === 0;\n}\nexports.b2IsPowerOfTwo = b2IsPowerOfTwo;\nfunction b2Random() {\n    return Math.random() * 2 - 1;\n}\nexports.b2Random = b2Random;\nfunction b2RandomRange(lo, hi) {\n    return (hi - lo) * Math.random() + lo;\n}\nexports.b2RandomRange = b2RandomRange;\nvar b2Vec2 = (function () {\n    function b2Vec2(x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        this.x = x;\n        this.y = y;\n    }\n    b2Vec2.prototype.Clone = function () {\n        return new b2Vec2(this.x, this.y);\n    };\n    b2Vec2.prototype.SetZero = function () {\n        this.x = 0;\n        this.y = 0;\n        return this;\n    };\n    b2Vec2.prototype.Set = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    b2Vec2.prototype.Copy = function (other) {\n        this.x = other.x;\n        this.y = other.y;\n        return this;\n    };\n    b2Vec2.prototype.SelfAdd = function (v) {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    };\n    b2Vec2.prototype.SelfAddXY = function (x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    };\n    b2Vec2.prototype.SelfSub = function (v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    };\n    b2Vec2.prototype.SelfSubXY = function (x, y) {\n        this.x -= x;\n        this.y -= y;\n        return this;\n    };\n    b2Vec2.prototype.SelfMul = function (s) {\n        this.x *= s;\n        this.y *= s;\n        return this;\n    };\n    b2Vec2.prototype.SelfMulAdd = function (s, v) {\n        this.x += s * v.x;\n        this.y += s * v.y;\n        return this;\n    };\n    b2Vec2.prototype.SelfMulSub = function (s, v) {\n        this.x -= s * v.x;\n        this.y -= s * v.y;\n        return this;\n    };\n    b2Vec2.prototype.Dot = function (v) {\n        return this.x * v.x + this.y * v.y;\n    };\n    b2Vec2.prototype.Cross = function (v) {\n        return this.x * v.y - this.y * v.x;\n    };\n    b2Vec2.prototype.Length = function () {\n        var x = this.x, y = this.y;\n        return Math.sqrt(x * x + y * y);\n    };\n    b2Vec2.prototype.LengthSquared = function () {\n        var x = this.x, y = this.y;\n        return (x * x + y * y);\n    };\n    b2Vec2.prototype.Normalize = function () {\n        var length = this.Length();\n        if (length >= b2_common_1.b2_epsilon) {\n            var inv_length = 1 / length;\n            this.x *= inv_length;\n            this.y *= inv_length;\n        }\n        return length;\n    };\n    b2Vec2.prototype.SelfNormalize = function () {\n        var length = this.Length();\n        if (length >= b2_common_1.b2_epsilon) {\n            var inv_length = 1 / length;\n            this.x *= inv_length;\n            this.y *= inv_length;\n        }\n        return this;\n    };\n    b2Vec2.prototype.SelfRotate = function (radians) {\n        var c = Math.cos(radians);\n        var s = Math.sin(radians);\n        var x = this.x;\n        this.x = c * x - s * this.y;\n        this.y = s * x + c * this.y;\n        return this;\n    };\n    b2Vec2.prototype.SelfRotateCosSin = function (c, s) {\n        var x = this.x;\n        this.x = c * x - s * this.y;\n        this.y = s * x + c * this.y;\n        return this;\n    };\n    b2Vec2.prototype.IsValid = function () {\n        return isFinite(this.x) && isFinite(this.y);\n    };\n    b2Vec2.prototype.SelfCrossVS = function (s) {\n        var x = this.x;\n        this.x = s * this.y;\n        this.y = -s * x;\n        return this;\n    };\n    b2Vec2.prototype.SelfCrossSV = function (s) {\n        var x = this.x;\n        this.x = -s * this.y;\n        this.y = s * x;\n        return this;\n    };\n    b2Vec2.prototype.SelfMinV = function (v) {\n        this.x = b2Min(this.x, v.x);\n        this.y = b2Min(this.y, v.y);\n        return this;\n    };\n    b2Vec2.prototype.SelfMaxV = function (v) {\n        this.x = b2Max(this.x, v.x);\n        this.y = b2Max(this.y, v.y);\n        return this;\n    };\n    b2Vec2.prototype.SelfAbs = function () {\n        this.x = exports.b2Abs(this.x);\n        this.y = exports.b2Abs(this.y);\n        return this;\n    };\n    b2Vec2.prototype.SelfNeg = function () {\n        this.x = (-this.x);\n        this.y = (-this.y);\n        return this;\n    };\n    b2Vec2.prototype.SelfSkew = function () {\n        var x = this.x;\n        this.x = -this.y;\n        this.y = x;\n        return this;\n    };\n    b2Vec2.MakeArray = function (length) {\n        return b2_common_1.b2MakeArray(length, function (i) { return new b2Vec2(); });\n    };\n    b2Vec2.AbsV = function (v, out) {\n        out.x = exports.b2Abs(v.x);\n        out.y = exports.b2Abs(v.y);\n        return out;\n    };\n    b2Vec2.MinV = function (a, b, out) {\n        out.x = b2Min(a.x, b.x);\n        out.y = b2Min(a.y, b.y);\n        return out;\n    };\n    b2Vec2.MaxV = function (a, b, out) {\n        out.x = b2Max(a.x, b.x);\n        out.y = b2Max(a.y, b.y);\n        return out;\n    };\n    b2Vec2.ClampV = function (v, lo, hi, out) {\n        out.x = b2Clamp(v.x, lo.x, hi.x);\n        out.y = b2Clamp(v.y, lo.y, hi.y);\n        return out;\n    };\n    b2Vec2.RotateV = function (v, radians, out) {\n        var v_x = v.x, v_y = v.y;\n        var c = Math.cos(radians);\n        var s = Math.sin(radians);\n        out.x = c * v_x - s * v_y;\n        out.y = s * v_x + c * v_y;\n        return out;\n    };\n    b2Vec2.DotVV = function (a, b) {\n        return a.x * b.x + a.y * b.y;\n    };\n    b2Vec2.CrossVV = function (a, b) {\n        return a.x * b.y - a.y * b.x;\n    };\n    b2Vec2.CrossVS = function (v, s, out) {\n        var v_x = v.x;\n        out.x = s * v.y;\n        out.y = -s * v_x;\n        return out;\n    };\n    b2Vec2.CrossVOne = function (v, out) {\n        var v_x = v.x;\n        out.x = v.y;\n        out.y = -v_x;\n        return out;\n    };\n    b2Vec2.CrossSV = function (s, v, out) {\n        var v_x = v.x;\n        out.x = -s * v.y;\n        out.y = s * v_x;\n        return out;\n    };\n    b2Vec2.CrossOneV = function (v, out) {\n        var v_x = v.x;\n        out.x = -v.y;\n        out.y = v_x;\n        return out;\n    };\n    b2Vec2.AddVV = function (a, b, out) { out.x = a.x + b.x; out.y = a.y + b.y; return out; };\n    b2Vec2.SubVV = function (a, b, out) { out.x = a.x - b.x; out.y = a.y - b.y; return out; };\n    b2Vec2.MulSV = function (s, v, out) { out.x = v.x * s; out.y = v.y * s; return out; };\n    b2Vec2.MulVS = function (v, s, out) { out.x = v.x * s; out.y = v.y * s; return out; };\n    b2Vec2.AddVMulSV = function (a, s, b, out) { out.x = a.x + (s * b.x); out.y = a.y + (s * b.y); return out; };\n    b2Vec2.SubVMulSV = function (a, s, b, out) { out.x = a.x - (s * b.x); out.y = a.y - (s * b.y); return out; };\n    b2Vec2.AddVCrossSV = function (a, s, v, out) {\n        var v_x = v.x;\n        out.x = a.x - (s * v.y);\n        out.y = a.y + (s * v_x);\n        return out;\n    };\n    b2Vec2.MidVV = function (a, b, out) { out.x = (a.x + b.x) * 0.5; out.y = (a.y + b.y) * 0.5; return out; };\n    b2Vec2.ExtVV = function (a, b, out) { out.x = (b.x - a.x) * 0.5; out.y = (b.y - a.y) * 0.5; return out; };\n    b2Vec2.IsEqualToV = function (a, b) {\n        return a.x === b.x && a.y === b.y;\n    };\n    b2Vec2.DistanceVV = function (a, b) {\n        var c_x = a.x - b.x;\n        var c_y = a.y - b.y;\n        return Math.sqrt(c_x * c_x + c_y * c_y);\n    };\n    b2Vec2.DistanceSquaredVV = function (a, b) {\n        var c_x = a.x - b.x;\n        var c_y = a.y - b.y;\n        return (c_x * c_x + c_y * c_y);\n    };\n    b2Vec2.NegV = function (v, out) { out.x = -v.x; out.y = -v.y; return out; };\n    b2Vec2.ZERO = new b2Vec2(0, 0);\n    b2Vec2.UNITX = new b2Vec2(1, 0);\n    b2Vec2.UNITY = new b2Vec2(0, 1);\n    b2Vec2.s_t0 = new b2Vec2();\n    b2Vec2.s_t1 = new b2Vec2();\n    b2Vec2.s_t2 = new b2Vec2();\n    b2Vec2.s_t3 = new b2Vec2();\n    return b2Vec2;\n}());\nexports.b2Vec2 = b2Vec2;\nexports.b2Vec2_zero = new b2Vec2(0, 0);\nvar b2TypedVec2 = (function () {\n    function b2TypedVec2() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof Float32Array) {\n            if (args[0].length !== 2) {\n                throw new Error();\n            }\n            this.data = args[0];\n        }\n        else {\n            var x = typeof args[0] === \"number\" ? args[0] : 0;\n            var y = typeof args[1] === \"number\" ? args[1] : 0;\n            this.data = new Float32Array([x, y]);\n        }\n    }\n    Object.defineProperty(b2TypedVec2.prototype, \"x\", {\n        get: function () { return this.data[0]; },\n        set: function (value) { this.data[0] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2TypedVec2.prototype, \"y\", {\n        get: function () { return this.data[1]; },\n        set: function (value) { this.data[1] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    b2TypedVec2.prototype.Clone = function () {\n        return new b2TypedVec2(new Float32Array(this.data));\n    };\n    b2TypedVec2.prototype.SetZero = function () {\n        this.x = 0;\n        this.y = 0;\n        return this;\n    };\n    b2TypedVec2.prototype.Set = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    b2TypedVec2.prototype.Copy = function (other) {\n        if (other instanceof b2TypedVec2) {\n            this.data.set(other.data);\n        }\n        else {\n            this.x = other.x;\n            this.y = other.y;\n        }\n        return this;\n    };\n    b2TypedVec2.prototype.SelfAdd = function (v) {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfAddXY = function (x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfSub = function (v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfSubXY = function (x, y) {\n        this.x -= x;\n        this.y -= y;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfMul = function (s) {\n        this.x *= s;\n        this.y *= s;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfMulAdd = function (s, v) {\n        this.x += s * v.x;\n        this.y += s * v.y;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfMulSub = function (s, v) {\n        this.x -= s * v.x;\n        this.y -= s * v.y;\n        return this;\n    };\n    b2TypedVec2.prototype.Dot = function (v) {\n        return this.x * v.x + this.y * v.y;\n    };\n    b2TypedVec2.prototype.Cross = function (v) {\n        return this.x * v.y - this.y * v.x;\n    };\n    b2TypedVec2.prototype.Length = function () {\n        var x = this.x, y = this.y;\n        return Math.sqrt(x * x + y * y);\n    };\n    b2TypedVec2.prototype.LengthSquared = function () {\n        var x = this.x, y = this.y;\n        return (x * x + y * y);\n    };\n    b2TypedVec2.prototype.Normalize = function () {\n        var length = this.Length();\n        if (length >= b2_common_1.b2_epsilon) {\n            var inv_length = 1 / length;\n            this.x *= inv_length;\n            this.y *= inv_length;\n        }\n        return length;\n    };\n    b2TypedVec2.prototype.SelfNormalize = function () {\n        var length = this.Length();\n        if (length >= b2_common_1.b2_epsilon) {\n            var inv_length = 1 / length;\n            this.x *= inv_length;\n            this.y *= inv_length;\n        }\n        return this;\n    };\n    b2TypedVec2.prototype.SelfRotate = function (radians) {\n        var c = Math.cos(radians);\n        var s = Math.sin(radians);\n        var x = this.x;\n        this.x = c * x - s * this.y;\n        this.y = s * x + c * this.y;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfRotateCosSin = function (c, s) {\n        var x = this.x;\n        this.x = c * x - s * this.y;\n        this.y = s * x + c * this.y;\n        return this;\n    };\n    b2TypedVec2.prototype.IsValid = function () {\n        return isFinite(this.x) && isFinite(this.y);\n    };\n    b2TypedVec2.prototype.SelfCrossVS = function (s) {\n        var x = this.x;\n        this.x = s * this.y;\n        this.y = -s * x;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfCrossSV = function (s) {\n        var x = this.x;\n        this.x = -s * this.y;\n        this.y = s * x;\n        return this;\n    };\n    b2TypedVec2.prototype.SelfMinV = function (v) {\n        this.x = b2Min(this.x, v.x);\n        this.y = b2Min(this.y, v.y);\n        return this;\n    };\n    b2TypedVec2.prototype.SelfMaxV = function (v) {\n        this.x = b2Max(this.x, v.x);\n        this.y = b2Max(this.y, v.y);\n        return this;\n    };\n    b2TypedVec2.prototype.SelfAbs = function () {\n        this.x = exports.b2Abs(this.x);\n        this.y = exports.b2Abs(this.y);\n        return this;\n    };\n    b2TypedVec2.prototype.SelfNeg = function () {\n        this.x = (-this.x);\n        this.y = (-this.y);\n        return this;\n    };\n    b2TypedVec2.prototype.SelfSkew = function () {\n        var x = this.x;\n        this.x = -this.y;\n        this.y = x;\n        return this;\n    };\n    return b2TypedVec2;\n}());\nexports.b2TypedVec2 = b2TypedVec2;\nvar b2Vec3 = (function () {\n    function b2Vec3() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof Float32Array) {\n            if (args[0].length !== 3) {\n                throw new Error();\n            }\n            this.data = args[0];\n        }\n        else {\n            var x = typeof args[0] === \"number\" ? args[0] : 0;\n            var y = typeof args[1] === \"number\" ? args[1] : 0;\n            var z = typeof args[2] === \"number\" ? args[2] : 0;\n            this.data = new Float32Array([x, y, z]);\n        }\n    }\n    Object.defineProperty(b2Vec3.prototype, \"x\", {\n        get: function () { return this.data[0]; },\n        set: function (value) { this.data[0] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2Vec3.prototype, \"y\", {\n        get: function () { return this.data[1]; },\n        set: function (value) { this.data[1] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(b2Vec3.prototype, \"z\", {\n        get: function () { return this.data[2]; },\n        set: function (value) { this.data[2] = value; },\n        enumerable: false,\n        configurable: true\n    });\n    b2Vec3.prototype.Clone = function () {\n        return new b2Vec3(this.x, this.y, this.z);\n    };\n    b2Vec3.prototype.SetZero = function () {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        return this;\n    };\n    b2Vec3.prototype.SetXYZ = function (x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    };\n    b2Vec3.prototype.Copy = function (other) {\n        this.x = other.x;\n        this.y = other.y;\n        this.z = other.z;\n        return this;\n    };\n    b2Vec3.prototype.SelfNeg = function () {\n        this.x = (-this.x);\n        this.y = (-this.y);\n        this.z = (-this.z);\n        return this;\n    };\n    b2Vec3.prototype.SelfAdd = function (v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        return this;\n    };\n    b2Vec3.prototype.SelfAddXYZ = function (x, y, z) {\n        this.x += x;\n        this.y += y;\n        this.z += z;\n        return this;\n    };\n    b2Vec3.prototype.SelfSub = function (v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        return this;\n    };\n    b2Vec3.prototype.SelfSubXYZ = function (x, y, z) {\n        this.x -= x;\n        this.y -= y;\n        this.z -= z;\n        return this;\n    };\n    b2Vec3.prototype.SelfMul = function (s) {\n        this.x *= s;\n        this.y *= s;\n        this.z *= s;\n        return this;\n    };\n    b2Vec3.DotV3V3 = function (a, b) {\n        return a.x * b.x + a.y * b.y + a.z * b.z;\n    };\n    b2Vec3.CrossV3V3 = function (a, b, out) {\n        var a_x = a.x, a_y = a.y, a_z = a.z;\n        var b_x = b.x, b_y = b.y, b_z = b.z;\n        out.x = a_y * b_z - a_z * b_y;\n        out.y = a_z * b_x - a_x * b_z;\n        out.z = a_x * b_y - a_y * b_x;\n        return out;\n    };\n    b2Vec3.ZERO = new b2Vec3(0, 0, 0);\n    b2Vec3.s_t0 = new b2Vec3();\n    return b2Vec3;\n}());\nexports.b2Vec3 = b2Vec3;\nvar b2Mat22 = (function () {\n    function b2Mat22() {\n        this.ex = new b2Vec2(1, 0);\n        this.ey = new b2Vec2(0, 1);\n    }\n    b2Mat22.prototype.Clone = function () {\n        return new b2Mat22().Copy(this);\n    };\n    b2Mat22.FromVV = function (c1, c2) {\n        return new b2Mat22().SetVV(c1, c2);\n    };\n    b2Mat22.FromSSSS = function (r1c1, r1c2, r2c1, r2c2) {\n        return new b2Mat22().SetSSSS(r1c1, r1c2, r2c1, r2c2);\n    };\n    b2Mat22.FromAngle = function (radians) {\n        return new b2Mat22().SetAngle(radians);\n    };\n    b2Mat22.prototype.SetSSSS = function (r1c1, r1c2, r2c1, r2c2) {\n        this.ex.Set(r1c1, r2c1);\n        this.ey.Set(r1c2, r2c2);\n        return this;\n    };\n    b2Mat22.prototype.SetVV = function (c1, c2) {\n        this.ex.Copy(c1);\n        this.ey.Copy(c2);\n        return this;\n    };\n    b2Mat22.prototype.SetAngle = function (radians) {\n        var c = Math.cos(radians);\n        var s = Math.sin(radians);\n        this.ex.Set(c, s);\n        this.ey.Set(-s, c);\n        return this;\n    };\n    b2Mat22.prototype.Copy = function (other) {\n        this.ex.Copy(other.ex);\n        this.ey.Copy(other.ey);\n        return this;\n    };\n    b2Mat22.prototype.SetIdentity = function () {\n        this.ex.Set(1, 0);\n        this.ey.Set(0, 1);\n        return this;\n    };\n    b2Mat22.prototype.SetZero = function () {\n        this.ex.SetZero();\n        this.ey.SetZero();\n        return this;\n    };\n    b2Mat22.prototype.GetAngle = function () {\n        return Math.atan2(this.ex.y, this.ex.x);\n    };\n    b2Mat22.prototype.GetInverse = function (out) {\n        var a = this.ex.x;\n        var b = this.ey.x;\n        var c = this.ex.y;\n        var d = this.ey.y;\n        var det = a * d - b * c;\n        if (det !== 0) {\n            det = 1 / det;\n        }\n        out.ex.x = det * d;\n        out.ey.x = (-det * b);\n        out.ex.y = (-det * c);\n        out.ey.y = det * a;\n        return out;\n    };\n    b2Mat22.prototype.Solve = function (b_x, b_y, out) {\n        var a11 = this.ex.x, a12 = this.ey.x;\n        var a21 = this.ex.y, a22 = this.ey.y;\n        var det = a11 * a22 - a12 * a21;\n        if (det !== 0) {\n            det = 1 / det;\n        }\n        out.x = det * (a22 * b_x - a12 * b_y);\n        out.y = det * (a11 * b_y - a21 * b_x);\n        return out;\n    };\n    b2Mat22.prototype.SelfAbs = function () {\n        this.ex.SelfAbs();\n        this.ey.SelfAbs();\n        return this;\n    };\n    b2Mat22.prototype.SelfInv = function () {\n        this.GetInverse(this);\n        return this;\n    };\n    b2Mat22.prototype.SelfAddM = function (M) {\n        this.ex.SelfAdd(M.ex);\n        this.ey.SelfAdd(M.ey);\n        return this;\n    };\n    b2Mat22.prototype.SelfSubM = function (M) {\n        this.ex.SelfSub(M.ex);\n        this.ey.SelfSub(M.ey);\n        return this;\n    };\n    b2Mat22.AbsM = function (M, out) {\n        var M_ex = M.ex, M_ey = M.ey;\n        out.ex.x = exports.b2Abs(M_ex.x);\n        out.ex.y = exports.b2Abs(M_ex.y);\n        out.ey.x = exports.b2Abs(M_ey.x);\n        out.ey.y = exports.b2Abs(M_ey.y);\n        return out;\n    };\n    b2Mat22.MulMV = function (M, v, out) {\n        var M_ex = M.ex, M_ey = M.ey;\n        var v_x = v.x, v_y = v.y;\n        out.x = M_ex.x * v_x + M_ey.x * v_y;\n        out.y = M_ex.y * v_x + M_ey.y * v_y;\n        return out;\n    };\n    b2Mat22.MulTMV = function (M, v, out) {\n        var M_ex = M.ex, M_ey = M.ey;\n        var v_x = v.x, v_y = v.y;\n        out.x = M_ex.x * v_x + M_ex.y * v_y;\n        out.y = M_ey.x * v_x + M_ey.y * v_y;\n        return out;\n    };\n    b2Mat22.AddMM = function (A, B, out) {\n        var A_ex = A.ex, A_ey = A.ey;\n        var B_ex = B.ex, B_ey = B.ey;\n        out.ex.x = A_ex.x + B_ex.x;\n        out.ex.y = A_ex.y + B_ex.y;\n        out.ey.x = A_ey.x + B_ey.x;\n        out.ey.y = A_ey.y + B_ey.y;\n        return out;\n    };\n    b2Mat22.MulMM = function (A, B, out) {\n        var A_ex_x = A.ex.x, A_ex_y = A.ex.y;\n        var A_ey_x = A.ey.x, A_ey_y = A.ey.y;\n        var B_ex_x = B.ex.x, B_ex_y = B.ex.y;\n        var B_ey_x = B.ey.x, B_ey_y = B.ey.y;\n        out.ex.x = A_ex_x * B_ex_x + A_ey_x * B_ex_y;\n        out.ex.y = A_ex_y * B_ex_x + A_ey_y * B_ex_y;\n        out.ey.x = A_ex_x * B_ey_x + A_ey_x * B_ey_y;\n        out.ey.y = A_ex_y * B_ey_x + A_ey_y * B_ey_y;\n        return out;\n    };\n    b2Mat22.MulTMM = function (A, B, out) {\n        var A_ex_x = A.ex.x, A_ex_y = A.ex.y;\n        var A_ey_x = A.ey.x, A_ey_y = A.ey.y;\n        var B_ex_x = B.ex.x, B_ex_y = B.ex.y;\n        var B_ey_x = B.ey.x, B_ey_y = B.ey.y;\n        out.ex.x = A_ex_x * B_ex_x + A_ex_y * B_ex_y;\n        out.ex.y = A_ey_x * B_ex_x + A_ey_y * B_ex_y;\n        out.ey.x = A_ex_x * B_ey_x + A_ex_y * B_ey_y;\n        out.ey.y = A_ey_x * B_ey_x + A_ey_y * B_ey_y;\n        return out;\n    };\n    b2Mat22.IDENTITY = new b2Mat22();\n    return b2Mat22;\n}());\nexports.b2Mat22 = b2Mat22;\nvar b2Mat33 = (function () {\n    function b2Mat33() {\n        this.data = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n        this.ex = new b2Vec3(this.data.subarray(0, 3));\n        this.ey = new b2Vec3(this.data.subarray(3, 6));\n        this.ez = new b2Vec3(this.data.subarray(6, 9));\n    }\n    b2Mat33.prototype.Clone = function () {\n        return new b2Mat33().Copy(this);\n    };\n    b2Mat33.prototype.SetVVV = function (c1, c2, c3) {\n        this.ex.Copy(c1);\n        this.ey.Copy(c2);\n        this.ez.Copy(c3);\n        return this;\n    };\n    b2Mat33.prototype.Copy = function (other) {\n        this.ex.Copy(other.ex);\n        this.ey.Copy(other.ey);\n        this.ez.Copy(other.ez);\n        return this;\n    };\n    b2Mat33.prototype.SetIdentity = function () {\n        this.ex.SetXYZ(1, 0, 0);\n        this.ey.SetXYZ(0, 1, 0);\n        this.ez.SetXYZ(0, 0, 1);\n        return this;\n    };\n    b2Mat33.prototype.SetZero = function () {\n        this.ex.SetZero();\n        this.ey.SetZero();\n        this.ez.SetZero();\n        return this;\n    };\n    b2Mat33.prototype.SelfAddM = function (M) {\n        this.ex.SelfAdd(M.ex);\n        this.ey.SelfAdd(M.ey);\n        this.ez.SelfAdd(M.ez);\n        return this;\n    };\n    b2Mat33.prototype.Solve33 = function (b_x, b_y, b_z, out) {\n        var a11 = this.ex.x, a21 = this.ex.y, a31 = this.ex.z;\n        var a12 = this.ey.x, a22 = this.ey.y, a32 = this.ey.z;\n        var a13 = this.ez.x, a23 = this.ez.y, a33 = this.ez.z;\n        var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);\n        if (det !== 0) {\n            det = 1 / det;\n        }\n        out.x = det * (b_x * (a22 * a33 - a32 * a23) + b_y * (a32 * a13 - a12 * a33) + b_z * (a12 * a23 - a22 * a13));\n        out.y = det * (a11 * (b_y * a33 - b_z * a23) + a21 * (b_z * a13 - b_x * a33) + a31 * (b_x * a23 - b_y * a13));\n        out.z = det * (a11 * (a22 * b_z - a32 * b_y) + a21 * (a32 * b_x - a12 * b_z) + a31 * (a12 * b_y - a22 * b_x));\n        return out;\n    };\n    b2Mat33.prototype.Solve22 = function (b_x, b_y, out) {\n        var a11 = this.ex.x, a12 = this.ey.x;\n        var a21 = this.ex.y, a22 = this.ey.y;\n        var det = a11 * a22 - a12 * a21;\n        if (det !== 0) {\n            det = 1 / det;\n        }\n        out.x = det * (a22 * b_x - a12 * b_y);\n        out.y = det * (a11 * b_y - a21 * b_x);\n        return out;\n    };\n    b2Mat33.prototype.GetInverse22 = function (M) {\n        var a = this.ex.x, b = this.ey.x, c = this.ex.y, d = this.ey.y;\n        var det = a * d - b * c;\n        if (det !== 0) {\n            det = 1 / det;\n        }\n        M.ex.x = det * d;\n        M.ey.x = -det * b;\n        M.ex.z = 0;\n        M.ex.y = -det * c;\n        M.ey.y = det * a;\n        M.ey.z = 0;\n        M.ez.x = 0;\n        M.ez.y = 0;\n        M.ez.z = 0;\n    };\n    b2Mat33.prototype.GetSymInverse33 = function (M) {\n        var det = b2Vec3.DotV3V3(this.ex, b2Vec3.CrossV3V3(this.ey, this.ez, b2Vec3.s_t0));\n        if (det !== 0) {\n            det = 1 / det;\n        }\n        var a11 = this.ex.x, a12 = this.ey.x, a13 = this.ez.x;\n        var a22 = this.ey.y, a23 = this.ez.y;\n        var a33 = this.ez.z;\n        M.ex.x = det * (a22 * a33 - a23 * a23);\n        M.ex.y = det * (a13 * a23 - a12 * a33);\n        M.ex.z = det * (a12 * a23 - a13 * a22);\n        M.ey.x = M.ex.y;\n        M.ey.y = det * (a11 * a33 - a13 * a13);\n        M.ey.z = det * (a13 * a12 - a11 * a23);\n        M.ez.x = M.ex.z;\n        M.ez.y = M.ey.z;\n        M.ez.z = det * (a11 * a22 - a12 * a12);\n    };\n    b2Mat33.MulM33V3 = function (A, v, out) {\n        var v_x = v.x, v_y = v.y, v_z = v.z;\n        out.x = A.ex.x * v_x + A.ey.x * v_y + A.ez.x * v_z;\n        out.y = A.ex.y * v_x + A.ey.y * v_y + A.ez.y * v_z;\n        out.z = A.ex.z * v_x + A.ey.z * v_y + A.ez.z * v_z;\n        return out;\n    };\n    b2Mat33.MulM33XYZ = function (A, x, y, z, out) {\n        out.x = A.ex.x * x + A.ey.x * y + A.ez.x * z;\n        out.y = A.ex.y * x + A.ey.y * y + A.ez.y * z;\n        out.z = A.ex.z * x + A.ey.z * y + A.ez.z * z;\n        return out;\n    };\n    b2Mat33.MulM33V2 = function (A, v, out) {\n        var v_x = v.x, v_y = v.y;\n        out.x = A.ex.x * v_x + A.ey.x * v_y;\n        out.y = A.ex.y * v_x + A.ey.y * v_y;\n        return out;\n    };\n    b2Mat33.MulM33XY = function (A, x, y, out) {\n        out.x = A.ex.x * x + A.ey.x * y;\n        out.y = A.ex.y * x + A.ey.y * y;\n        return out;\n    };\n    b2Mat33.IDENTITY = new b2Mat33();\n    return b2Mat33;\n}());\nexports.b2Mat33 = b2Mat33;\nvar b2Rot = (function () {\n    function b2Rot(angle) {\n        if (angle === void 0) { angle = 0; }\n        this.s = 0;\n        this.c = 1;\n        if (angle) {\n            this.s = Math.sin(angle);\n            this.c = Math.cos(angle);\n        }\n    }\n    b2Rot.prototype.Clone = function () {\n        return new b2Rot().Copy(this);\n    };\n    b2Rot.prototype.Copy = function (other) {\n        this.s = other.s;\n        this.c = other.c;\n        return this;\n    };\n    b2Rot.prototype.SetAngle = function (angle) {\n        this.s = Math.sin(angle);\n        this.c = Math.cos(angle);\n        return this;\n    };\n    b2Rot.prototype.SetIdentity = function () {\n        this.s = 0;\n        this.c = 1;\n        return this;\n    };\n    b2Rot.prototype.GetAngle = function () {\n        return Math.atan2(this.s, this.c);\n    };\n    b2Rot.prototype.GetXAxis = function (out) {\n        out.x = this.c;\n        out.y = this.s;\n        return out;\n    };\n    b2Rot.prototype.GetYAxis = function (out) {\n        out.x = -this.s;\n        out.y = this.c;\n        return out;\n    };\n    b2Rot.MulRR = function (q, r, out) {\n        var q_c = q.c, q_s = q.s;\n        var r_c = r.c, r_s = r.s;\n        out.s = q_s * r_c + q_c * r_s;\n        out.c = q_c * r_c - q_s * r_s;\n        return out;\n    };\n    b2Rot.MulTRR = function (q, r, out) {\n        var q_c = q.c, q_s = q.s;\n        var r_c = r.c, r_s = r.s;\n        out.s = q_c * r_s - q_s * r_c;\n        out.c = q_c * r_c + q_s * r_s;\n        return out;\n    };\n    b2Rot.MulRV = function (q, v, out) {\n        var q_c = q.c, q_s = q.s;\n        var v_x = v.x, v_y = v.y;\n        out.x = q_c * v_x - q_s * v_y;\n        out.y = q_s * v_x + q_c * v_y;\n        return out;\n    };\n    b2Rot.MulTRV = function (q, v, out) {\n        var q_c = q.c, q_s = q.s;\n        var v_x = v.x, v_y = v.y;\n        out.x = q_c * v_x + q_s * v_y;\n        out.y = -q_s * v_x + q_c * v_y;\n        return out;\n    };\n    b2Rot.IDENTITY = new b2Rot();\n    return b2Rot;\n}());\nexports.b2Rot = b2Rot;\nvar b2Transform = (function () {\n    function b2Transform() {\n        this.p = new b2Vec2();\n        this.q = new b2Rot();\n    }\n    b2Transform.prototype.Clone = function () {\n        return new b2Transform().Copy(this);\n    };\n    b2Transform.prototype.Copy = function (other) {\n        this.p.Copy(other.p);\n        this.q.Copy(other.q);\n        return this;\n    };\n    b2Transform.prototype.SetIdentity = function () {\n        this.p.SetZero();\n        this.q.SetIdentity();\n        return this;\n    };\n    b2Transform.prototype.SetPositionRotation = function (position, q) {\n        this.p.Copy(position);\n        this.q.Copy(q);\n        return this;\n    };\n    b2Transform.prototype.SetPositionAngle = function (pos, a) {\n        this.p.Copy(pos);\n        this.q.SetAngle(a);\n        return this;\n    };\n    b2Transform.prototype.SetPosition = function (position) {\n        this.p.Copy(position);\n        return this;\n    };\n    b2Transform.prototype.SetPositionXY = function (x, y) {\n        this.p.Set(x, y);\n        return this;\n    };\n    b2Transform.prototype.SetRotation = function (rotation) {\n        this.q.Copy(rotation);\n        return this;\n    };\n    b2Transform.prototype.SetRotationAngle = function (radians) {\n        this.q.SetAngle(radians);\n        return this;\n    };\n    b2Transform.prototype.GetPosition = function () {\n        return this.p;\n    };\n    b2Transform.prototype.GetRotation = function () {\n        return this.q;\n    };\n    b2Transform.prototype.GetRotationAngle = function () {\n        return this.q.GetAngle();\n    };\n    b2Transform.prototype.GetAngle = function () {\n        return this.q.GetAngle();\n    };\n    b2Transform.MulXV = function (T, v, out) {\n        var T_q_c = T.q.c, T_q_s = T.q.s;\n        var v_x = v.x, v_y = v.y;\n        out.x = (T_q_c * v_x - T_q_s * v_y) + T.p.x;\n        out.y = (T_q_s * v_x + T_q_c * v_y) + T.p.y;\n        return out;\n    };\n    b2Transform.MulTXV = function (T, v, out) {\n        var T_q_c = T.q.c, T_q_s = T.q.s;\n        var p_x = v.x - T.p.x;\n        var p_y = v.y - T.p.y;\n        out.x = (T_q_c * p_x + T_q_s * p_y);\n        out.y = (-T_q_s * p_x + T_q_c * p_y);\n        return out;\n    };\n    b2Transform.MulXX = function (A, B, out) {\n        b2Rot.MulRR(A.q, B.q, out.q);\n        b2Vec2.AddVV(b2Rot.MulRV(A.q, B.p, out.p), A.p, out.p);\n        return out;\n    };\n    b2Transform.MulTXX = function (A, B, out) {\n        b2Rot.MulTRR(A.q, B.q, out.q);\n        b2Rot.MulTRV(A.q, b2Vec2.SubVV(B.p, A.p, out.p), out.p);\n        return out;\n    };\n    b2Transform.IDENTITY = new b2Transform();\n    return b2Transform;\n}());\nexports.b2Transform = b2Transform;\nvar b2Sweep = (function () {\n    function b2Sweep() {\n        this.localCenter = new b2Vec2();\n        this.c0 = new b2Vec2();\n        this.c = new b2Vec2();\n        this.a0 = 0;\n        this.a = 0;\n        this.alpha0 = 0;\n    }\n    b2Sweep.prototype.Clone = function () {\n        return new b2Sweep().Copy(this);\n    };\n    b2Sweep.prototype.Copy = function (other) {\n        this.localCenter.Copy(other.localCenter);\n        this.c0.Copy(other.c0);\n        this.c.Copy(other.c);\n        this.a0 = other.a0;\n        this.a = other.a;\n        this.alpha0 = other.alpha0;\n        return this;\n    };\n    b2Sweep.prototype.GetTransform = function (xf, beta) {\n        xf.p.x = (1.0 - beta) * this.c0.x + beta * this.c.x;\n        xf.p.y = (1.0 - beta) * this.c0.y + beta * this.c.y;\n        var angle = (1.0 - beta) * this.a0 + beta * this.a;\n        xf.q.SetAngle(angle);\n        xf.p.SelfSub(b2Rot.MulRV(xf.q, this.localCenter, b2Vec2.s_t0));\n        return xf;\n    };\n    b2Sweep.prototype.Advance = function (alpha) {\n        var beta = (alpha - this.alpha0) / (1 - this.alpha0);\n        var one_minus_beta = (1 - beta);\n        this.c0.x = one_minus_beta * this.c0.x + beta * this.c.x;\n        this.c0.y = one_minus_beta * this.c0.y + beta * this.c.y;\n        this.a0 = one_minus_beta * this.a0 + beta * this.a;\n        this.alpha0 = alpha;\n    };\n    b2Sweep.prototype.Normalize = function () {\n        var d = exports.b2_two_pi * Math.floor(this.a0 / exports.b2_two_pi);\n        this.a0 -= d;\n        this.a -= d;\n    };\n    return b2Sweep;\n}());\nexports.b2Sweep = b2Sweep;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/common/b2_math.ts\n");

/***/ }),

/***/ "./src/box2d/common/b2_settings.ts":
/*!*****************************************!*\
  !*** ./src/box2d/common/b2_settings.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Log = exports.b2Free = exports.b2Alloc = void 0;\nfunction b2Alloc(size) {\n    return null;\n}\nexports.b2Alloc = b2Alloc;\nfunction b2Free(mem) {\n}\nexports.b2Free = b2Free;\nfunction b2Log(message) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n}\nexports.b2Log = b2Log;\n__exportStar(__webpack_require__(/*! ./b2_common */ \"./src/box2d/common/b2_common.ts\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvY29tbW9uL2IyX3NldHRpbmdzLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2NvbW1vbi9iMl9zZXR0aW5ncy50cz9jZTNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDkgRXJpbiBDYXR0byBodHRwOi8vd3d3LmJveDJkLm9yZ1xyXG4qXHJcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcclxuKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXHJcbiogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcclxuKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XHJcbiogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxyXG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XHJcbiogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcclxuKiBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcclxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxyXG4qIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXHJcbiogbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxyXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcbiovXHJcblxyXG4vLy8gQGZpbGVcclxuLy8vIFNldHRpbmdzIHRoYXQgY2FuIGJlIG92ZXJyaWRlbiBmb3IgeW91ciBhcHBsaWNhdGlvblxyXG4vLy9cclxuXHJcbi8vIFR1bmFibGUgQ29uc3RhbnRzXHJcblxyXG4vLy8gWW91IGNhbiB1c2UgdGhpcyB0byBjaGFuZ2UgdGhlIGxlbmd0aCBzY2FsZSB1c2VkIGJ5IHlvdXIgZ2FtZS5cclxuLy8vIEZvciBleGFtcGxlIGZvciBpbmNoZXMgeW91IGNvdWxkIHVzZSAzOS40LlxyXG4vLyBleHBvcnQgY29uc3QgYjJfbGVuZ3RoVW5pdHNQZXJNZXRlcjogbnVtYmVyID0gMS4wO1xyXG5cclxuLy8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiB2ZXJ0aWNlcyBvbiBhIGNvbnZleCBwb2x5Z29uLiBZb3UgY2Fubm90IGluY3JlYXNlXHJcbi8vLyB0aGlzIHRvbyBtdWNoIGJlY2F1c2UgYjJCbG9ja0FsbG9jYXRvciBoYXMgYSBtYXhpbXVtIG9iamVjdCBzaXplLlxyXG4vLyBleHBvcnQgY29uc3QgYjJfbWF4UG9seWdvblZlcnRpY2VzOiBudW1iZXIgPSA4O1xyXG5cclxuLy8gTWVtb3J5IEFsbG9jYXRpb25cclxuXHJcbi8vLyBJbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiB0byB1c2UgeW91ciBvd24gbWVtb3J5IGFsbG9jYXRvci5cclxuZXhwb3J0IGZ1bmN0aW9uIGIyQWxsb2Moc2l6ZTogbnVtYmVyKTogYW55IHtcclxuICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLy8vIElmIHlvdSBpbXBsZW1lbnQgYjJBbGxvYywgeW91IHNob3VsZCBhbHNvIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uLlxyXG5leHBvcnQgZnVuY3Rpb24gYjJGcmVlKG1lbTogYW55KTogdm9pZCB7XHJcbn1cclxuXHJcbi8vLyBMb2dnaW5nIGZ1bmN0aW9uLlxyXG5leHBvcnQgZnVuY3Rpb24gYjJMb2cobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gIC8vIGNvbnNvbGUubG9nKG1lc3NhZ2UsIC4uLmFyZ3MpO1xyXG59XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9iMl9jb21tb25cIjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBbUNBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQURBO0FBSUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFGQTtBQUlBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/box2d/common/b2_settings.ts\n");

/***/ }),

/***/ "./src/box2d/common/b2_timer.ts":
/*!**************************************!*\
  !*** ./src/box2d/common/b2_timer.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Counter = exports.b2Timer = void 0;\nvar b2Timer = (function () {\n    function b2Timer() {\n        this.m_start = Date.now();\n    }\n    b2Timer.prototype.Reset = function () {\n        this.m_start = Date.now();\n        return this;\n    };\n    b2Timer.prototype.GetMilliseconds = function () {\n        return Date.now() - this.m_start;\n    };\n    return b2Timer;\n}());\nexports.b2Timer = b2Timer;\nvar b2Counter = (function () {\n    function b2Counter() {\n        this.m_count = 0;\n        this.m_min_count = 0;\n        this.m_max_count = 0;\n    }\n    b2Counter.prototype.GetCount = function () {\n        return this.m_count;\n    };\n    b2Counter.prototype.GetMinCount = function () {\n        return this.m_min_count;\n    };\n    b2Counter.prototype.GetMaxCount = function () {\n        return this.m_max_count;\n    };\n    b2Counter.prototype.ResetCount = function () {\n        var count = this.m_count;\n        this.m_count = 0;\n        return count;\n    };\n    b2Counter.prototype.ResetMinCount = function () {\n        this.m_min_count = 0;\n    };\n    b2Counter.prototype.ResetMaxCount = function () {\n        this.m_max_count = 0;\n    };\n    b2Counter.prototype.Increment = function () {\n        this.m_count++;\n        if (this.m_max_count < this.m_count) {\n            this.m_max_count = this.m_count;\n        }\n    };\n    b2Counter.prototype.Decrement = function () {\n        this.m_count--;\n        if (this.m_min_count > this.m_count) {\n            this.m_min_count = this.m_count;\n        }\n    };\n    return b2Counter;\n}());\nexports.b2Counter = b2Counter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvY29tbW9uL2IyX3RpbWVyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2NvbW1vbi9iMl90aW1lci50cz9iMDNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAxMSBFcmluIENhdHRvIGh0dHA6Ly9ib3gyZC5vcmdcbipcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4qIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4qIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG4qL1xuXG4vLy8gVGltZXIgZm9yIHByb2ZpbGluZy4gVGhpcyBoYXMgcGxhdGZvcm0gc3BlY2lmaWMgY29kZSBhbmQgbWF5XG4vLy8gbm90IHdvcmsgb24gZXZlcnkgcGxhdGZvcm0uXG5leHBvcnQgY2xhc3MgYjJUaW1lciB7XG4gIHB1YmxpYyBtX3N0YXJ0OiBudW1iZXIgPSBEYXRlLm5vdygpO1xuXG4gIC8vLyBSZXNldCB0aGUgdGltZXIuXG4gIHB1YmxpYyBSZXNldCgpOiBiMlRpbWVyIHtcbiAgICB0aGlzLm1fc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8vIEdldCB0aGUgdGltZSBzaW5jZSBjb25zdHJ1Y3Rpb24gb3IgdGhlIGxhc3QgcmVzZXQuXG4gIHB1YmxpYyBHZXRNaWxsaXNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMubV9zdGFydDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgYjJDb3VudGVyIHtcbiAgcHVibGljIG1fY291bnQ6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBtX21pbl9jb3VudDogbnVtYmVyID0gMDtcbiAgcHVibGljIG1fbWF4X2NvdW50OiBudW1iZXIgPSAwO1xuXG4gIHB1YmxpYyBHZXRDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm1fY291bnQ7XG4gIH1cblxuICBwdWJsaWMgR2V0TWluQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5tX21pbl9jb3VudDtcbiAgfVxuXG4gIHB1YmxpYyBHZXRNYXhDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm1fbWF4X2NvdW50O1xuICB9XG5cbiAgcHVibGljIFJlc2V0Q291bnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5tX2NvdW50O1xuICAgIHRoaXMubV9jb3VudCA9IDA7XG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgcHVibGljIFJlc2V0TWluQ291bnQoKTogdm9pZCB7XG4gICAgdGhpcy5tX21pbl9jb3VudCA9IDA7XG4gIH1cblxuICBwdWJsaWMgUmVzZXRNYXhDb3VudCgpOiB2b2lkIHtcbiAgICB0aGlzLm1fbWF4X2NvdW50ID0gMDtcbiAgfVxuXG4gIHB1YmxpYyBJbmNyZW1lbnQoKTogdm9pZCB7XG4gICAgdGhpcy5tX2NvdW50Kys7XG5cbiAgICBpZiAodGhpcy5tX21heF9jb3VudCA8IHRoaXMubV9jb3VudCkge1xuICAgICAgdGhpcy5tX21heF9jb3VudCA9IHRoaXMubV9jb3VudDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgRGVjcmVtZW50KCk6IHZvaWQge1xuICAgIHRoaXMubV9jb3VudC0tO1xuXG4gICAgaWYgKHRoaXMubV9taW5fY291bnQgPiB0aGlzLm1fY291bnQpIHtcbiAgICAgIHRoaXMubV9taW5fY291bnQgPSB0aGlzLm1fY291bnQ7XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7OztBQW9CQTtBQUFBO0FBQ0E7QUFZQTtBQVRBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWJBO0FBZUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQTJDQTtBQXpDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQTlDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/common/b2_timer.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_area_joint.ts":
/*!*********************************************!*\
  !*** ./src/box2d/dynamics/b2_area_joint.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2AreaJoint = exports.b2AreaJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2_distance_joint_1 = __webpack_require__(/*! ./b2_distance_joint */ \"./src/box2d/dynamics/b2_distance_joint.ts\");\nvar b2AreaJointDef = (function (_super) {\n    __extends(b2AreaJointDef, _super);\n    function b2AreaJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_areaJoint) || this;\n        _this.bodies = [];\n        _this.stiffness = 0;\n        _this.damping = 0;\n        return _this;\n    }\n    b2AreaJointDef.prototype.AddBody = function (body) {\n        this.bodies.push(body);\n        if (this.bodies.length === 1) {\n            this.bodyA = body;\n        }\n        else if (this.bodies.length === 2) {\n            this.bodyB = body;\n        }\n    };\n    return b2AreaJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2AreaJointDef = b2AreaJointDef;\nvar b2AreaJoint = (function (_super) {\n    __extends(b2AreaJoint, _super);\n    function b2AreaJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_stiffness = 0;\n        _this.m_damping = 0;\n        _this.m_impulse = 0;\n        _this.m_targetArea = 0;\n        _this.m_delta = new b2_math_1.b2Vec2();\n        _this.m_bodies = def.bodies;\n        _this.m_stiffness = b2_settings_1.b2Maybe(def.stiffness, 0);\n        _this.m_damping = b2_settings_1.b2Maybe(def.damping, 0);\n        _this.m_targetLengths = b2_settings_1.b2MakeNumberArray(def.bodies.length);\n        _this.m_normals = b2_math_1.b2Vec2.MakeArray(def.bodies.length);\n        _this.m_joints = [];\n        _this.m_deltas = b2_math_1.b2Vec2.MakeArray(def.bodies.length);\n        var djd = new b2_distance_joint_1.b2DistanceJointDef();\n        djd.stiffness = _this.m_stiffness;\n        djd.damping = _this.m_damping;\n        _this.m_targetArea = 0;\n        for (var i = 0; i < _this.m_bodies.length; ++i) {\n            var body = _this.m_bodies[i];\n            var next = _this.m_bodies[(i + 1) % _this.m_bodies.length];\n            var body_c = body.GetWorldCenter();\n            var next_c = next.GetWorldCenter();\n            _this.m_targetLengths[i] = b2_math_1.b2Vec2.DistanceVV(body_c, next_c);\n            _this.m_targetArea += b2_math_1.b2Vec2.CrossVV(body_c, next_c);\n            djd.Initialize(body, next, body_c, next_c);\n            _this.m_joints[i] = body.GetWorld().CreateJoint(djd);\n        }\n        _this.m_targetArea *= 0.5;\n        return _this;\n    }\n    b2AreaJoint.prototype.GetAnchorA = function (out) {\n        return out;\n    };\n    b2AreaJoint.prototype.GetAnchorB = function (out) {\n        return out;\n    };\n    b2AreaJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        return out;\n    };\n    b2AreaJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return 0;\n    };\n    b2AreaJoint.prototype.SetStiffness = function (stiffness) {\n        this.m_stiffness = stiffness;\n        for (var i = 0; i < this.m_joints.length; ++i) {\n            this.m_joints[i].SetStiffness(stiffness);\n        }\n    };\n    b2AreaJoint.prototype.GetStiffness = function () {\n        return this.m_stiffness;\n    };\n    b2AreaJoint.prototype.SetDamping = function (damping) {\n        this.m_damping = damping;\n        for (var i = 0; i < this.m_joints.length; ++i) {\n            this.m_joints[i].SetDamping(damping);\n        }\n    };\n    b2AreaJoint.prototype.GetDamping = function () {\n        return this.m_damping;\n    };\n    b2AreaJoint.prototype.Dump = function (log) {\n        log(\"Area joint dumping is not supported.\\n\");\n    };\n    b2AreaJoint.prototype.InitVelocityConstraints = function (data) {\n        for (var i = 0; i < this.m_bodies.length; ++i) {\n            var prev = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];\n            var next = this.m_bodies[(i + 1) % this.m_bodies.length];\n            var prev_c = data.positions[prev.m_islandIndex].c;\n            var next_c = data.positions[next.m_islandIndex].c;\n            var delta = this.m_deltas[i];\n            b2_math_1.b2Vec2.SubVV(next_c, prev_c, delta);\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse *= data.step.dtRatio;\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var body = this.m_bodies[i];\n                var body_v = data.velocities[body.m_islandIndex].v;\n                var delta = this.m_deltas[i];\n                body_v.x += body.m_invMass * delta.y * 0.5 * this.m_impulse;\n                body_v.y += body.m_invMass * -delta.x * 0.5 * this.m_impulse;\n            }\n        }\n        else {\n            this.m_impulse = 0;\n        }\n    };\n    b2AreaJoint.prototype.SolveVelocityConstraints = function (data) {\n        var dotMassSum = 0;\n        var crossMassSum = 0;\n        for (var i = 0; i < this.m_bodies.length; ++i) {\n            var body = this.m_bodies[i];\n            var body_v = data.velocities[body.m_islandIndex].v;\n            var delta = this.m_deltas[i];\n            dotMassSum += delta.LengthSquared() / body.GetMass();\n            crossMassSum += b2_math_1.b2Vec2.CrossVV(body_v, delta);\n        }\n        var lambda = -2 * crossMassSum / dotMassSum;\n        this.m_impulse += lambda;\n        for (var i = 0; i < this.m_bodies.length; ++i) {\n            var body = this.m_bodies[i];\n            var body_v = data.velocities[body.m_islandIndex].v;\n            var delta = this.m_deltas[i];\n            body_v.x += body.m_invMass * delta.y * 0.5 * lambda;\n            body_v.y += body.m_invMass * -delta.x * 0.5 * lambda;\n        }\n    };\n    b2AreaJoint.prototype.SolvePositionConstraints = function (data) {\n        var perimeter = 0;\n        var area = 0;\n        for (var i = 0; i < this.m_bodies.length; ++i) {\n            var body = this.m_bodies[i];\n            var next = this.m_bodies[(i + 1) % this.m_bodies.length];\n            var body_c = data.positions[body.m_islandIndex].c;\n            var next_c = data.positions[next.m_islandIndex].c;\n            var delta = b2_math_1.b2Vec2.SubVV(next_c, body_c, this.m_delta);\n            var dist = delta.Length();\n            if (dist < b2_settings_1.b2_epsilon) {\n                dist = 1;\n            }\n            this.m_normals[i].x = delta.y / dist;\n            this.m_normals[i].y = -delta.x / dist;\n            perimeter += dist;\n            area += b2_math_1.b2Vec2.CrossVV(body_c, next_c);\n        }\n        area *= 0.5;\n        var deltaArea = this.m_targetArea - area;\n        var toExtrude = 0.5 * deltaArea / perimeter;\n        var done = true;\n        for (var i = 0; i < this.m_bodies.length; ++i) {\n            var body = this.m_bodies[i];\n            var body_c = data.positions[body.m_islandIndex].c;\n            var next_i = (i + 1) % this.m_bodies.length;\n            var delta = b2_math_1.b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);\n            delta.SelfMul(toExtrude);\n            var norm_sq = delta.LengthSquared();\n            if (norm_sq > b2_math_1.b2Sq(b2_settings_1.b2_maxLinearCorrection)) {\n                delta.SelfMul(b2_settings_1.b2_maxLinearCorrection / b2_math_1.b2Sqrt(norm_sq));\n            }\n            if (norm_sq > b2_math_1.b2Sq(b2_settings_1.b2_linearSlop)) {\n                done = false;\n            }\n            body_c.x += delta.x;\n            body_c.y += delta.y;\n        }\n        return done;\n    };\n    return b2AreaJoint;\n}(b2_joint_1.b2Joint));\nexports.b2AreaJoint = b2AreaJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_area_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_body.ts":
/*!***************************************!*\
  !*** ./src/box2d/dynamics/b2_body.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Body = exports.b2BodyDef = exports.b2BodyType = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_shape_1 = __webpack_require__(/*! ../collision/b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2_fixture_1 = __webpack_require__(/*! ./b2_fixture */ \"./src/box2d/dynamics/b2_fixture.ts\");\nvar b2BodyType;\n(function (b2BodyType) {\n    b2BodyType[b2BodyType[\"b2_unknown\"] = -1] = \"b2_unknown\";\n    b2BodyType[b2BodyType[\"b2_staticBody\"] = 0] = \"b2_staticBody\";\n    b2BodyType[b2BodyType[\"b2_kinematicBody\"] = 1] = \"b2_kinematicBody\";\n    b2BodyType[b2BodyType[\"b2_dynamicBody\"] = 2] = \"b2_dynamicBody\";\n})(b2BodyType = exports.b2BodyType || (exports.b2BodyType = {}));\nvar b2BodyDef = (function () {\n    function b2BodyDef() {\n        this.type = b2BodyType.b2_staticBody;\n        this.position = new b2_math_1.b2Vec2(0, 0);\n        this.angle = 0;\n        this.linearVelocity = new b2_math_1.b2Vec2(0, 0);\n        this.angularVelocity = 0;\n        this.linearDamping = 0;\n        this.angularDamping = 0;\n        this.allowSleep = true;\n        this.awake = true;\n        this.fixedRotation = false;\n        this.bullet = false;\n        this.enabled = true;\n        this.userData = null;\n        this.gravityScale = 1;\n    }\n    return b2BodyDef;\n}());\nexports.b2BodyDef = b2BodyDef;\nvar b2Body = (function () {\n    function b2Body(bd, world) {\n        this.m_type = b2BodyType.b2_staticBody;\n        this.m_islandFlag = false;\n        this.m_awakeFlag = false;\n        this.m_autoSleepFlag = false;\n        this.m_bulletFlag = false;\n        this.m_fixedRotationFlag = false;\n        this.m_enabledFlag = false;\n        this.m_toiFlag = false;\n        this.m_islandIndex = 0;\n        this.m_xf = new b2_math_1.b2Transform();\n        this.m_xf0 = new b2_math_1.b2Transform();\n        this.m_sweep = new b2_math_1.b2Sweep();\n        this.m_linearVelocity = new b2_math_1.b2Vec2();\n        this.m_angularVelocity = 0;\n        this.m_force = new b2_math_1.b2Vec2();\n        this.m_torque = 0;\n        this.m_prev = null;\n        this.m_next = null;\n        this.m_fixtureList = null;\n        this.m_fixtureCount = 0;\n        this.m_jointList = null;\n        this.m_contactList = null;\n        this.m_mass = 1;\n        this.m_invMass = 1;\n        this.m_I = 0;\n        this.m_invI = 0;\n        this.m_linearDamping = 0;\n        this.m_angularDamping = 0;\n        this.m_gravityScale = 1;\n        this.m_sleepTime = 0;\n        this.m_userData = null;\n        this.m_controllerList = null;\n        this.m_controllerCount = 0;\n        this.m_bulletFlag = b2_settings_1.b2Maybe(bd.bullet, false);\n        this.m_fixedRotationFlag = b2_settings_1.b2Maybe(bd.fixedRotation, false);\n        this.m_autoSleepFlag = b2_settings_1.b2Maybe(bd.allowSleep, true);\n        if (b2_settings_1.b2Maybe(bd.awake, true) && b2_settings_1.b2Maybe(bd.type, b2BodyType.b2_staticBody) !== b2BodyType.b2_staticBody) {\n            this.m_awakeFlag = true;\n        }\n        this.m_enabledFlag = b2_settings_1.b2Maybe(bd.enabled, true);\n        this.m_world = world;\n        this.m_xf.p.Copy(b2_settings_1.b2Maybe(bd.position, b2_math_1.b2Vec2.ZERO));\n        this.m_xf.q.SetAngle(b2_settings_1.b2Maybe(bd.angle, 0));\n        this.m_xf0.Copy(this.m_xf);\n        this.m_sweep.localCenter.SetZero();\n        this.m_sweep.c0.Copy(this.m_xf.p);\n        this.m_sweep.c.Copy(this.m_xf.p);\n        this.m_sweep.a0 = this.m_sweep.a = this.m_xf.q.GetAngle();\n        this.m_sweep.alpha0 = 0;\n        this.m_linearVelocity.Copy(b2_settings_1.b2Maybe(bd.linearVelocity, b2_math_1.b2Vec2.ZERO));\n        this.m_angularVelocity = b2_settings_1.b2Maybe(bd.angularVelocity, 0);\n        this.m_linearDamping = b2_settings_1.b2Maybe(bd.linearDamping, 0);\n        this.m_angularDamping = b2_settings_1.b2Maybe(bd.angularDamping, 0);\n        this.m_gravityScale = b2_settings_1.b2Maybe(bd.gravityScale, 1);\n        this.m_force.SetZero();\n        this.m_torque = 0;\n        this.m_sleepTime = 0;\n        this.m_type = b2_settings_1.b2Maybe(bd.type, b2BodyType.b2_staticBody);\n        this.m_mass = 0;\n        this.m_invMass = 0;\n        this.m_I = 0;\n        this.m_invI = 0;\n        this.m_userData = bd.userData;\n        this.m_fixtureList = null;\n        this.m_fixtureCount = 0;\n        this.m_controllerList = null;\n        this.m_controllerCount = 0;\n    }\n    b2Body.prototype.CreateFixture = function (a, b) {\n        if (b === void 0) { b = 0; }\n        if (a instanceof b2_shape_1.b2Shape) {\n            return this.CreateFixtureShapeDensity(a, b);\n        }\n        else {\n            return this.CreateFixtureDef(a);\n        }\n    };\n    b2Body.prototype.CreateFixtureDef = function (def) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        var fixture = new b2_fixture_1.b2Fixture(this, def);\n        if (this.m_enabledFlag) {\n            fixture.CreateProxies();\n        }\n        fixture.m_next = this.m_fixtureList;\n        this.m_fixtureList = fixture;\n        ++this.m_fixtureCount;\n        if (fixture.m_density > 0) {\n            this.ResetMassData();\n        }\n        this.m_world.m_newContacts = true;\n        return fixture;\n    };\n    b2Body.prototype.CreateFixtureShapeDensity = function (shape, density) {\n        if (density === void 0) { density = 0; }\n        var def = b2Body.CreateFixtureShapeDensity_s_def;\n        def.shape = shape;\n        def.density = density;\n        return this.CreateFixtureDef(def);\n    };\n    b2Body.prototype.DestroyFixture = function (fixture) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        var node = this.m_fixtureList;\n        var ppF = null;\n        while (node !== null) {\n            if (node === fixture) {\n                if (ppF) {\n                    ppF.m_next = fixture.m_next;\n                }\n                else {\n                    this.m_fixtureList = fixture.m_next;\n                }\n                break;\n            }\n            ppF = node;\n            node = node.m_next;\n        }\n        var edge = this.m_contactList;\n        while (edge) {\n            var c = edge.contact;\n            edge = edge.next;\n            var fixtureA = c.GetFixtureA();\n            var fixtureB = c.GetFixtureB();\n            if (fixture === fixtureA || fixture === fixtureB) {\n                this.m_world.m_contactManager.Destroy(c);\n            }\n        }\n        if (this.m_enabledFlag) {\n            fixture.DestroyProxies();\n        }\n        fixture.m_next = null;\n        fixture.Reset();\n        --this.m_fixtureCount;\n        this.ResetMassData();\n    };\n    b2Body.prototype.SetTransformVec = function (position, angle) {\n        this.SetTransformXY(position.x, position.y, angle);\n    };\n    b2Body.prototype.SetTransformXY = function (x, y, angle) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        this.m_xf.q.SetAngle(angle);\n        this.m_xf.p.Set(x, y);\n        this.m_xf0.Copy(this.m_xf);\n        b2_math_1.b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\n        this.m_sweep.a = angle;\n        this.m_sweep.c0.Copy(this.m_sweep.c);\n        this.m_sweep.a0 = angle;\n        for (var f = this.m_fixtureList; f; f = f.m_next) {\n            f.SynchronizeProxies(this.m_xf, this.m_xf);\n        }\n        this.m_world.m_newContacts = true;\n    };\n    b2Body.prototype.SetTransform = function (xf) {\n        this.SetTransformVec(xf.p, xf.GetAngle());\n    };\n    b2Body.prototype.GetTransform = function () {\n        return this.m_xf;\n    };\n    b2Body.prototype.GetPosition = function () {\n        return this.m_xf.p;\n    };\n    b2Body.prototype.SetPosition = function (position) {\n        this.SetTransformVec(position, this.GetAngle());\n    };\n    b2Body.prototype.SetPositionXY = function (x, y) {\n        this.SetTransformXY(x, y, this.GetAngle());\n    };\n    b2Body.prototype.GetAngle = function () {\n        return this.m_sweep.a;\n    };\n    b2Body.prototype.SetAngle = function (angle) {\n        this.SetTransformVec(this.GetPosition(), angle);\n    };\n    b2Body.prototype.GetWorldCenter = function () {\n        return this.m_sweep.c;\n    };\n    b2Body.prototype.GetLocalCenter = function () {\n        return this.m_sweep.localCenter;\n    };\n    b2Body.prototype.SetLinearVelocity = function (v) {\n        if (this.m_type === b2BodyType.b2_staticBody) {\n            return;\n        }\n        if (b2_math_1.b2Vec2.DotVV(v, v) > 0) {\n            this.SetAwake(true);\n        }\n        this.m_linearVelocity.Copy(v);\n    };\n    b2Body.prototype.GetLinearVelocity = function () {\n        return this.m_linearVelocity;\n    };\n    b2Body.prototype.SetAngularVelocity = function (w) {\n        if (this.m_type === b2BodyType.b2_staticBody) {\n            return;\n        }\n        if (w * w > 0) {\n            this.SetAwake(true);\n        }\n        this.m_angularVelocity = w;\n    };\n    b2Body.prototype.GetAngularVelocity = function () {\n        return this.m_angularVelocity;\n    };\n    b2Body.prototype.GetDefinition = function (bd) {\n        bd.type = this.GetType();\n        bd.allowSleep = this.m_autoSleepFlag;\n        bd.angle = this.GetAngle();\n        bd.angularDamping = this.m_angularDamping;\n        bd.gravityScale = this.m_gravityScale;\n        bd.angularVelocity = this.m_angularVelocity;\n        bd.fixedRotation = this.m_fixedRotationFlag;\n        bd.bullet = this.m_bulletFlag;\n        bd.awake = this.m_awakeFlag;\n        bd.linearDamping = this.m_linearDamping;\n        bd.linearVelocity.Copy(this.GetLinearVelocity());\n        bd.position.Copy(this.GetPosition());\n        bd.userData = this.GetUserData();\n        return bd;\n    };\n    b2Body.prototype.ApplyForce = function (force, point, wake) {\n        if (wake === void 0) { wake = true; }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        if (wake && !this.m_awakeFlag) {\n            this.SetAwake(true);\n        }\n        if (this.m_awakeFlag) {\n            this.m_force.x += force.x;\n            this.m_force.y += force.y;\n            this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);\n        }\n    };\n    b2Body.prototype.ApplyForceToCenter = function (force, wake) {\n        if (wake === void 0) { wake = true; }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        if (wake && !this.m_awakeFlag) {\n            this.SetAwake(true);\n        }\n        if (this.m_awakeFlag) {\n            this.m_force.x += force.x;\n            this.m_force.y += force.y;\n        }\n    };\n    b2Body.prototype.ApplyTorque = function (torque, wake) {\n        if (wake === void 0) { wake = true; }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        if (wake && !this.m_awakeFlag) {\n            this.SetAwake(true);\n        }\n        if (this.m_awakeFlag) {\n            this.m_torque += torque;\n        }\n    };\n    b2Body.prototype.ApplyLinearImpulse = function (impulse, point, wake) {\n        if (wake === void 0) { wake = true; }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        if (wake && !this.m_awakeFlag) {\n            this.SetAwake(true);\n        }\n        if (this.m_awakeFlag) {\n            this.m_linearVelocity.x += this.m_invMass * impulse.x;\n            this.m_linearVelocity.y += this.m_invMass * impulse.y;\n            this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);\n        }\n    };\n    b2Body.prototype.ApplyLinearImpulseToCenter = function (impulse, wake) {\n        if (wake === void 0) { wake = true; }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        if (wake && !this.m_awakeFlag) {\n            this.SetAwake(true);\n        }\n        if (this.m_awakeFlag) {\n            this.m_linearVelocity.x += this.m_invMass * impulse.x;\n            this.m_linearVelocity.y += this.m_invMass * impulse.y;\n        }\n    };\n    b2Body.prototype.ApplyAngularImpulse = function (impulse, wake) {\n        if (wake === void 0) { wake = true; }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        if (wake && !this.m_awakeFlag) {\n            this.SetAwake(true);\n        }\n        if (this.m_awakeFlag) {\n            this.m_angularVelocity += this.m_invI * impulse;\n        }\n    };\n    b2Body.prototype.GetMass = function () {\n        return this.m_mass;\n    };\n    b2Body.prototype.GetInertia = function () {\n        return this.m_I + this.m_mass * b2_math_1.b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\n    };\n    b2Body.prototype.GetMassData = function (data) {\n        data.mass = this.m_mass;\n        data.I = this.m_I + this.m_mass * b2_math_1.b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\n        data.center.Copy(this.m_sweep.localCenter);\n        return data;\n    };\n    b2Body.prototype.SetMassData = function (massData) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\n            return;\n        }\n        this.m_invMass = 0;\n        this.m_I = 0;\n        this.m_invI = 0;\n        this.m_mass = massData.mass;\n        if (this.m_mass <= 0) {\n            this.m_mass = 1;\n        }\n        this.m_invMass = 1 / this.m_mass;\n        if (massData.I > 0 && !this.m_fixedRotationFlag) {\n            this.m_I = massData.I - this.m_mass * b2_math_1.b2Vec2.DotVV(massData.center, massData.center);\n            this.m_invI = 1 / this.m_I;\n        }\n        var oldCenter = b2Body.SetMassData_s_oldCenter.Copy(this.m_sweep.c);\n        this.m_sweep.localCenter.Copy(massData.center);\n        b2_math_1.b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\n        this.m_sweep.c0.Copy(this.m_sweep.c);\n        b2_math_1.b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2_math_1.b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2_math_1.b2Vec2.s_t0), this.m_linearVelocity);\n    };\n    b2Body.prototype.ResetMassData = function () {\n        this.m_mass = 0;\n        this.m_invMass = 0;\n        this.m_I = 0;\n        this.m_invI = 0;\n        this.m_sweep.localCenter.SetZero();\n        if (this.m_type === b2BodyType.b2_staticBody || this.m_type === b2BodyType.b2_kinematicBody) {\n            this.m_sweep.c0.Copy(this.m_xf.p);\n            this.m_sweep.c.Copy(this.m_xf.p);\n            this.m_sweep.a0 = this.m_sweep.a;\n            return;\n        }\n        var localCenter = b2Body.ResetMassData_s_localCenter.SetZero();\n        for (var f = this.m_fixtureList; f; f = f.m_next) {\n            if (f.m_density === 0) {\n                continue;\n            }\n            var massData = f.GetMassData(b2Body.ResetMassData_s_massData);\n            this.m_mass += massData.mass;\n            localCenter.x += massData.center.x * massData.mass;\n            localCenter.y += massData.center.y * massData.mass;\n            this.m_I += massData.I;\n        }\n        if (this.m_mass > 0) {\n            this.m_invMass = 1 / this.m_mass;\n            localCenter.x *= this.m_invMass;\n            localCenter.y *= this.m_invMass;\n        }\n        if (this.m_I > 0 && !this.m_fixedRotationFlag) {\n            this.m_I -= this.m_mass * b2_math_1.b2Vec2.DotVV(localCenter, localCenter);\n            this.m_invI = 1 / this.m_I;\n        }\n        else {\n            this.m_I = 0;\n            this.m_invI = 0;\n        }\n        var oldCenter = b2Body.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);\n        this.m_sweep.localCenter.Copy(localCenter);\n        b2_math_1.b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\n        this.m_sweep.c0.Copy(this.m_sweep.c);\n        b2_math_1.b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2_math_1.b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2_math_1.b2Vec2.s_t0), this.m_linearVelocity);\n    };\n    b2Body.prototype.GetWorldPoint = function (localPoint, out) {\n        return b2_math_1.b2Transform.MulXV(this.m_xf, localPoint, out);\n    };\n    b2Body.prototype.GetWorldVector = function (localVector, out) {\n        return b2_math_1.b2Rot.MulRV(this.m_xf.q, localVector, out);\n    };\n    b2Body.prototype.GetLocalPoint = function (worldPoint, out) {\n        return b2_math_1.b2Transform.MulTXV(this.m_xf, worldPoint, out);\n    };\n    b2Body.prototype.GetLocalVector = function (worldVector, out) {\n        return b2_math_1.b2Rot.MulTRV(this.m_xf.q, worldVector, out);\n    };\n    b2Body.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint, out) {\n        return b2_math_1.b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2_math_1.b2Vec2.SubVV(worldPoint, this.m_sweep.c, b2_math_1.b2Vec2.s_t0), out);\n    };\n    b2Body.prototype.GetLinearVelocityFromLocalPoint = function (localPoint, out) {\n        return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(localPoint, out), out);\n    };\n    b2Body.prototype.GetLinearDamping = function () {\n        return this.m_linearDamping;\n    };\n    b2Body.prototype.SetLinearDamping = function (linearDamping) {\n        this.m_linearDamping = linearDamping;\n    };\n    b2Body.prototype.GetAngularDamping = function () {\n        return this.m_angularDamping;\n    };\n    b2Body.prototype.SetAngularDamping = function (angularDamping) {\n        this.m_angularDamping = angularDamping;\n    };\n    b2Body.prototype.GetGravityScale = function () {\n        return this.m_gravityScale;\n    };\n    b2Body.prototype.SetGravityScale = function (scale) {\n        this.m_gravityScale = scale;\n    };\n    b2Body.prototype.SetType = function (type) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        if (this.m_type === type) {\n            return;\n        }\n        this.m_type = type;\n        this.ResetMassData();\n        if (this.m_type === b2BodyType.b2_staticBody) {\n            this.m_linearVelocity.SetZero();\n            this.m_angularVelocity = 0;\n            this.m_sweep.a0 = this.m_sweep.a;\n            this.m_sweep.c0.Copy(this.m_sweep.c);\n            this.m_awakeFlag = false;\n            this.SynchronizeFixtures();\n        }\n        this.SetAwake(true);\n        this.m_force.SetZero();\n        this.m_torque = 0;\n        var ce = this.m_contactList;\n        while (ce) {\n            var ce0 = ce;\n            ce = ce.next;\n            this.m_world.m_contactManager.Destroy(ce0.contact);\n        }\n        this.m_contactList = null;\n        for (var f = this.m_fixtureList; f; f = f.m_next) {\n            f.TouchProxies();\n        }\n    };\n    b2Body.prototype.GetType = function () {\n        return this.m_type;\n    };\n    b2Body.prototype.SetBullet = function (flag) {\n        this.m_bulletFlag = flag;\n    };\n    b2Body.prototype.IsBullet = function () {\n        return this.m_bulletFlag;\n    };\n    b2Body.prototype.SetSleepingAllowed = function (flag) {\n        this.m_autoSleepFlag = flag;\n        if (!flag) {\n            this.SetAwake(true);\n        }\n    };\n    b2Body.prototype.IsSleepingAllowed = function () {\n        return this.m_autoSleepFlag;\n    };\n    b2Body.prototype.SetAwake = function (flag) {\n        if (this.m_type === b2BodyType.b2_staticBody) {\n            return;\n        }\n        if (flag) {\n            this.m_awakeFlag = true;\n            this.m_sleepTime = 0;\n        }\n        else {\n            this.m_awakeFlag = false;\n            this.m_sleepTime = 0;\n            this.m_linearVelocity.SetZero();\n            this.m_angularVelocity = 0;\n            this.m_force.SetZero();\n            this.m_torque = 0;\n        }\n    };\n    b2Body.prototype.IsAwake = function () {\n        return this.m_awakeFlag;\n    };\n    b2Body.prototype.SetEnabled = function (flag) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        if (flag === this.IsEnabled()) {\n            return;\n        }\n        this.m_enabledFlag = flag;\n        if (flag) {\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                f.CreateProxies();\n            }\n            this.m_world.m_newContacts = true;\n        }\n        else {\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                f.DestroyProxies();\n            }\n            var ce = this.m_contactList;\n            while (ce) {\n                var ce0 = ce;\n                ce = ce.next;\n                this.m_world.m_contactManager.Destroy(ce0.contact);\n            }\n            this.m_contactList = null;\n        }\n    };\n    b2Body.prototype.IsEnabled = function () {\n        return this.m_enabledFlag;\n    };\n    b2Body.prototype.SetFixedRotation = function (flag) {\n        if (this.m_fixedRotationFlag === flag) {\n            return;\n        }\n        this.m_fixedRotationFlag = flag;\n        this.m_angularVelocity = 0;\n        this.ResetMassData();\n    };\n    b2Body.prototype.IsFixedRotation = function () {\n        return this.m_fixedRotationFlag;\n    };\n    b2Body.prototype.GetFixtureList = function () {\n        return this.m_fixtureList;\n    };\n    b2Body.prototype.GetJointList = function () {\n        return this.m_jointList;\n    };\n    b2Body.prototype.GetContactList = function () {\n        return this.m_contactList;\n    };\n    b2Body.prototype.GetNext = function () {\n        return this.m_next;\n    };\n    b2Body.prototype.GetUserData = function () {\n        return this.m_userData;\n    };\n    b2Body.prototype.SetUserData = function (data) {\n        this.m_userData = data;\n    };\n    b2Body.prototype.GetWorld = function () {\n        return this.m_world;\n    };\n    b2Body.prototype.Dump = function (log) {\n        var bodyIndex = this.m_islandIndex;\n        log(\"{\\n\");\n        log(\"  const bd: b2BodyDef = new b2BodyDef();\\n\");\n        var type_str = \"\";\n        switch (this.m_type) {\n            case b2BodyType.b2_staticBody:\n                type_str = \"b2BodyType.b2_staticBody\";\n                break;\n            case b2BodyType.b2_kinematicBody:\n                type_str = \"b2BodyType.b2_kinematicBody\";\n                break;\n            case b2BodyType.b2_dynamicBody:\n                type_str = \"b2BodyType.b2_dynamicBody\";\n                break;\n            default:\n                break;\n        }\n        log(\"  bd.type = %s;\\n\", type_str);\n        log(\"  bd.position.Set(%.15f, %.15f);\\n\", this.m_xf.p.x, this.m_xf.p.y);\n        log(\"  bd.angle = %.15f;\\n\", this.m_sweep.a);\n        log(\"  bd.linearVelocity.Set(%.15f, %.15f);\\n\", this.m_linearVelocity.x, this.m_linearVelocity.y);\n        log(\"  bd.angularVelocity = %.15f;\\n\", this.m_angularVelocity);\n        log(\"  bd.linearDamping = %.15f;\\n\", this.m_linearDamping);\n        log(\"  bd.angularDamping = %.15f;\\n\", this.m_angularDamping);\n        log(\"  bd.allowSleep = %s;\\n\", (this.m_autoSleepFlag) ? (\"true\") : (\"false\"));\n        log(\"  bd.awake = %s;\\n\", (this.m_awakeFlag) ? (\"true\") : (\"false\"));\n        log(\"  bd.fixedRotation = %s;\\n\", (this.m_fixedRotationFlag) ? (\"true\") : (\"false\"));\n        log(\"  bd.bullet = %s;\\n\", (this.m_bulletFlag) ? (\"true\") : (\"false\"));\n        log(\"  bd.active = %s;\\n\", (this.m_enabledFlag) ? (\"true\") : (\"false\"));\n        log(\"  bd.gravityScale = %.15f;\\n\", this.m_gravityScale);\n        log(\"\\n\");\n        log(\"  bodies[%d] = this.m_world.CreateBody(bd);\\n\", this.m_islandIndex);\n        log(\"\\n\");\n        for (var f = this.m_fixtureList; f; f = f.m_next) {\n            log(\"  {\\n\");\n            f.Dump(log, bodyIndex);\n            log(\"  }\\n\");\n        }\n        log(\"}\\n\");\n    };\n    b2Body.prototype.SynchronizeFixtures = function () {\n        if (this.m_awakeFlag) {\n            var xf1 = b2Body.SynchronizeFixtures_s_xf1;\n            xf1.q.SetAngle(this.m_sweep.a0);\n            b2_math_1.b2Rot.MulRV(xf1.q, this.m_sweep.localCenter, xf1.p);\n            b2_math_1.b2Vec2.SubVV(this.m_sweep.c0, xf1.p, xf1.p);\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                f.SynchronizeProxies(xf1, this.m_xf);\n            }\n        }\n        else {\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                f.SynchronizeProxies(this.m_xf, this.m_xf);\n            }\n        }\n    };\n    b2Body.prototype.SynchronizeTransform = function () {\n        this.m_xf.q.SetAngle(this.m_sweep.a);\n        b2_math_1.b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\n        b2_math_1.b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\n    };\n    b2Body.prototype.ShouldCollide = function (other) {\n        if (this.m_type === b2BodyType.b2_staticBody && other.m_type === b2BodyType.b2_staticBody) {\n            return false;\n        }\n        return this.ShouldCollideConnected(other);\n    };\n    b2Body.prototype.ShouldCollideConnected = function (other) {\n        for (var jn = this.m_jointList; jn; jn = jn.next) {\n            if (jn.other === other) {\n                if (!jn.joint.m_collideConnected) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    b2Body.prototype.Advance = function (alpha) {\n        this.m_sweep.Advance(alpha);\n        this.m_sweep.c.Copy(this.m_sweep.c0);\n        this.m_sweep.a = this.m_sweep.a0;\n        this.m_xf.q.SetAngle(this.m_sweep.a);\n        b2_math_1.b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\n        b2_math_1.b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\n    };\n    b2Body.prototype.GetControllerList = function () {\n        return this.m_controllerList;\n    };\n    b2Body.prototype.GetControllerCount = function () {\n        return this.m_controllerCount;\n    };\n    b2Body.CreateFixtureShapeDensity_s_def = new b2_fixture_1.b2FixtureDef();\n    b2Body.SetMassData_s_oldCenter = new b2_math_1.b2Vec2();\n    b2Body.ResetMassData_s_localCenter = new b2_math_1.b2Vec2();\n    b2Body.ResetMassData_s_oldCenter = new b2_math_1.b2Vec2();\n    b2Body.ResetMassData_s_massData = new b2_shape_1.b2MassData();\n    b2Body.SynchronizeFixtures_s_xf1 = new b2_math_1.b2Transform();\n    return b2Body;\n}());\nexports.b2Body = b2Body;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_body.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_chain_circle_contact.ts":
/*!*******************************************************!*\
  !*** ./src/box2d/dynamics/b2_chain_circle_contact.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ChainAndCircleContact = void 0;\nvar b2_collide_edge_1 = __webpack_require__(/*! ../collision/b2_collide_edge */ \"./src/box2d/collision/b2_collide_edge.ts\");\nvar b2_edge_shape_1 = __webpack_require__(/*! ../collision/b2_edge_shape */ \"./src/box2d/collision/b2_edge_shape.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2ChainAndCircleContact = (function (_super) {\n    __extends(b2ChainAndCircleContact, _super);\n    function b2ChainAndCircleContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2ChainAndCircleContact.Create = function () {\n        return new b2ChainAndCircleContact();\n    };\n    b2ChainAndCircleContact.Destroy = function (contact) {\n    };\n    b2ChainAndCircleContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        var edge = b2ChainAndCircleContact.Evaluate_s_edge;\n        this.GetShapeA().GetChildEdge(edge, this.m_indexA);\n        b2_collide_edge_1.b2CollideEdgeAndCircle(manifold, edge, xfA, this.GetShapeB(), xfB);\n    };\n    b2ChainAndCircleContact.Evaluate_s_edge = new b2_edge_shape_1.b2EdgeShape();\n    return b2ChainAndCircleContact;\n}(b2_contact_1.b2Contact));\nexports.b2ChainAndCircleContact = b2ChainAndCircleContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfY2hhaW5fY2lyY2xlX2NvbnRhY3QudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfY2hhaW5fY2lyY2xlX2NvbnRhY3QudHM/YTE1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAwOSBFcmluIENhdHRvIGh0dHA6Ly93d3cuYm94MmQub3JnXG4qXG4qIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4qIHdhcnJhbnR5LiAgSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4qIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuKiBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuKiBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiogMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiogbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuKi9cblxuaW1wb3J0IHsgYjJUcmFuc2Zvcm0gfSBmcm9tIFwiLi4vY29tbW9uL2IyX21hdGhcIjtcbmltcG9ydCB7IGIyQ29sbGlkZUVkZ2VBbmRDaXJjbGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpZGVfZWRnZVwiO1xuaW1wb3J0IHsgYjJNYW5pZm9sZCB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfY29sbGlzaW9uXCI7XG5pbXBvcnQgeyBiMkNoYWluU2hhcGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NoYWluX3NoYXBlXCI7XG5pbXBvcnQgeyBiMkNpcmNsZVNoYXBlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9jaXJjbGVfc2hhcGVcIjtcbmltcG9ydCB7IGIyRWRnZVNoYXBlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9lZGdlX3NoYXBlXCI7XG5pbXBvcnQgeyBiMkNvbnRhY3QgfSBmcm9tIFwiLi9iMl9jb250YWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBiMkNoYWluQW5kQ2lyY2xlQ29udGFjdCBleHRlbmRzIGIyQ29udGFjdDxiMkNoYWluU2hhcGUsIGIyQ2lyY2xlU2hhcGU+IHtcbiAgcHVibGljIHN0YXRpYyBDcmVhdGUoKTogYjJDb250YWN0IHtcbiAgICByZXR1cm4gbmV3IGIyQ2hhaW5BbmRDaXJjbGVDb250YWN0KCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIERlc3Ryb3koY29udGFjdDogYjJDb250YWN0KTogdm9pZCB7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBFdmFsdWF0ZV9zX2VkZ2UgPSBuZXcgYjJFZGdlU2hhcGUoKTtcbiAgcHVibGljIEV2YWx1YXRlKG1hbmlmb2xkOiBiMk1hbmlmb2xkLCB4ZkE6IGIyVHJhbnNmb3JtLCB4ZkI6IGIyVHJhbnNmb3JtKTogdm9pZCB7XG4gICAgY29uc3QgZWRnZTogYjJFZGdlU2hhcGUgPSBiMkNoYWluQW5kQ2lyY2xlQ29udGFjdC5FdmFsdWF0ZV9zX2VkZ2U7XG4gICAgdGhpcy5HZXRTaGFwZUEoKS5HZXRDaGlsZEVkZ2UoZWRnZSwgdGhpcy5tX2luZGV4QSk7XG4gICAgYjJDb2xsaWRlRWRnZUFuZENpcmNsZShtYW5pZm9sZCwgZWRnZSwgeGZBLCB0aGlzLkdldFNoYXBlQigpLCB4ZkIpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFJQTtBQUNBO0FBRUE7QUFBQTtBQUFBOztBQWNBO0FBYkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU1BO0FBQUE7QUFkQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_chain_circle_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_chain_polygon_contact.ts":
/*!********************************************************!*\
  !*** ./src/box2d/dynamics/b2_chain_polygon_contact.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ChainAndPolygonContact = void 0;\nvar b2_collide_edge_1 = __webpack_require__(/*! ../collision/b2_collide_edge */ \"./src/box2d/collision/b2_collide_edge.ts\");\nvar b2_edge_shape_1 = __webpack_require__(/*! ../collision/b2_edge_shape */ \"./src/box2d/collision/b2_edge_shape.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2ChainAndPolygonContact = (function (_super) {\n    __extends(b2ChainAndPolygonContact, _super);\n    function b2ChainAndPolygonContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2ChainAndPolygonContact.Create = function () {\n        return new b2ChainAndPolygonContact();\n    };\n    b2ChainAndPolygonContact.Destroy = function (contact) {\n    };\n    b2ChainAndPolygonContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        var edge = b2ChainAndPolygonContact.Evaluate_s_edge;\n        this.GetShapeA().GetChildEdge(edge, this.m_indexA);\n        b2_collide_edge_1.b2CollideEdgeAndPolygon(manifold, edge, xfA, this.GetShapeB(), xfB);\n    };\n    b2ChainAndPolygonContact.Evaluate_s_edge = new b2_edge_shape_1.b2EdgeShape();\n    return b2ChainAndPolygonContact;\n}(b2_contact_1.b2Contact));\nexports.b2ChainAndPolygonContact = b2ChainAndPolygonContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfY2hhaW5fcG9seWdvbl9jb250YWN0LnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2R5bmFtaWNzL2IyX2NoYWluX3BvbHlnb25fY29udGFjdC50cz80MzBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEVyaW4gQ2F0dG8gaHR0cDovL3d3dy5ib3gyZC5vcmdcbipcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4qIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4qIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG4qL1xuXG5pbXBvcnQgeyBiMlRyYW5zZm9ybSB9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuaW1wb3J0IHsgYjJDb2xsaWRlRWRnZUFuZFBvbHlnb24gfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpZGVfZWRnZVwiO1xuaW1wb3J0IHsgYjJNYW5pZm9sZCB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfY29sbGlzaW9uXCI7XG5pbXBvcnQgeyBiMkNoYWluU2hhcGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NoYWluX3NoYXBlXCI7XG5pbXBvcnQgeyBiMkVkZ2VTaGFwZSB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfZWRnZV9zaGFwZVwiO1xuaW1wb3J0IHsgYjJQb2x5Z29uU2hhcGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX3BvbHlnb25fc2hhcGVcIjtcbmltcG9ydCB7IGIyQ29udGFjdCB9IGZyb20gXCIuL2IyX2NvbnRhY3RcIjtcblxuZXhwb3J0IGNsYXNzIGIyQ2hhaW5BbmRQb2x5Z29uQ29udGFjdCBleHRlbmRzIGIyQ29udGFjdDxiMkNoYWluU2hhcGUsIGIyUG9seWdvblNoYXBlPiB7XG4gIHB1YmxpYyBzdGF0aWMgQ3JlYXRlKCk6IGIyQ29udGFjdCB7XG4gICAgcmV0dXJuIG5ldyBiMkNoYWluQW5kUG9seWdvbkNvbnRhY3QoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgRGVzdHJveShjb250YWN0OiBiMkNvbnRhY3QpOiB2b2lkIHtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIEV2YWx1YXRlX3NfZWRnZSA9IG5ldyBiMkVkZ2VTaGFwZSgpO1xuICBwdWJsaWMgRXZhbHVhdGUobWFuaWZvbGQ6IGIyTWFuaWZvbGQsIHhmQTogYjJUcmFuc2Zvcm0sIHhmQjogYjJUcmFuc2Zvcm0pOiB2b2lkIHtcbiAgICBjb25zdCBlZGdlOiBiMkVkZ2VTaGFwZSA9IGIyQ2hhaW5BbmRQb2x5Z29uQ29udGFjdC5FdmFsdWF0ZV9zX2VkZ2U7XG4gICAgdGhpcy5HZXRTaGFwZUEoKS5HZXRDaGlsZEVkZ2UoZWRnZSwgdGhpcy5tX2luZGV4QSk7XG4gICAgYjJDb2xsaWRlRWRnZUFuZFBvbHlnb24obWFuaWZvbGQsIGVkZ2UsIHhmQSwgdGhpcy5HZXRTaGFwZUIoKSwgeGZCKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBO0FBR0E7QUFFQTtBQUVBO0FBQUE7QUFBQTs7QUFjQTtBQWJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFNQTtBQUFBO0FBZEE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_chain_polygon_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_circle_contact.ts":
/*!*************************************************!*\
  !*** ./src/box2d/dynamics/b2_circle_contact.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2CircleContact = void 0;\nvar b2_collide_circle_1 = __webpack_require__(/*! ../collision/b2_collide_circle */ \"./src/box2d/collision/b2_collide_circle.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2CircleContact = (function (_super) {\n    __extends(b2CircleContact, _super);\n    function b2CircleContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2CircleContact.Create = function () {\n        return new b2CircleContact();\n    };\n    b2CircleContact.Destroy = function (contact) {\n    };\n    b2CircleContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        b2_collide_circle_1.b2CollideCircles(manifold, this.GetShapeA(), xfA, this.GetShapeB(), xfB);\n    };\n    return b2CircleContact;\n}(b2_contact_1.b2Contact));\nexports.b2CircleContact = b2CircleContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfY2lyY2xlX2NvbnRhY3QudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfY2lyY2xlX2NvbnRhY3QudHM/OTI3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAwOSBFcmluIENhdHRvIGh0dHA6Ly93d3cuYm94MmQub3JnXG4qXG4qIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4qIHdhcnJhbnR5LiAgSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4qIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuKiBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuKiBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiogMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiogbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuKi9cblxuaW1wb3J0IHsgYjJUcmFuc2Zvcm0gfSBmcm9tIFwiLi4vY29tbW9uL2IyX21hdGhcIjtcbmltcG9ydCB7IGIyQ29sbGlkZUNpcmNsZXMgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpZGVfY2lyY2xlXCI7XG5pbXBvcnQgeyBiMk1hbmlmb2xkIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9jb2xsaXNpb25cIjtcbmltcG9ydCB7IGIyQ2lyY2xlU2hhcGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NpcmNsZV9zaGFwZVwiO1xuaW1wb3J0IHsgYjJDb250YWN0IH0gZnJvbSBcIi4vYjJfY29udGFjdFwiO1xuXG5leHBvcnQgY2xhc3MgYjJDaXJjbGVDb250YWN0IGV4dGVuZHMgYjJDb250YWN0PGIyQ2lyY2xlU2hhcGUsIGIyQ2lyY2xlU2hhcGU+IHtcbiAgcHVibGljIHN0YXRpYyBDcmVhdGUoKTogYjJDb250YWN0IHtcbiAgICByZXR1cm4gbmV3IGIyQ2lyY2xlQ29udGFjdCgpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBEZXN0cm95KGNvbnRhY3Q6IGIyQ29udGFjdCk6IHZvaWQge1xuICB9XG5cbiAgcHVibGljIEV2YWx1YXRlKG1hbmlmb2xkOiBiMk1hbmlmb2xkLCB4ZkE6IGIyVHJhbnNmb3JtLCB4ZkI6IGIyVHJhbnNmb3JtKTogdm9pZCB7XG4gICAgYjJDb2xsaWRlQ2lyY2xlcyhtYW5pZm9sZCwgdGhpcy5HZXRTaGFwZUEoKSwgeGZBLCB0aGlzLkdldFNoYXBlQigpLCB4ZkIpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFHQTtBQUVBO0FBQUE7QUFBQTs7QUFXQTtBQVZBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBWEE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_circle_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_contact.ts":
/*!******************************************!*\
  !*** ./src/box2d/dynamics/b2_contact.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Contact = exports.b2ContactEdge = exports.b2MixRestitutionThreshold = exports.b2MixRestitution = exports.b2MixFriction = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_collision_2 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_time_of_impact_1 = __webpack_require__(/*! ../collision/b2_time_of_impact */ \"./src/box2d/collision/b2_time_of_impact.ts\");\nfunction b2MixFriction(friction1, friction2) {\n    return b2_math_1.b2Sqrt(friction1 * friction2);\n}\nexports.b2MixFriction = b2MixFriction;\nfunction b2MixRestitution(restitution1, restitution2) {\n    return restitution1 > restitution2 ? restitution1 : restitution2;\n}\nexports.b2MixRestitution = b2MixRestitution;\nfunction b2MixRestitutionThreshold(threshold1, threshold2) {\n    return threshold1 < threshold2 ? threshold1 : threshold2;\n}\nexports.b2MixRestitutionThreshold = b2MixRestitutionThreshold;\nvar b2ContactEdge = (function () {\n    function b2ContactEdge(contact) {\n        this._other = null;\n        this.prev = null;\n        this.next = null;\n        this.contact = contact;\n    }\n    Object.defineProperty(b2ContactEdge.prototype, \"other\", {\n        get: function () {\n            if (this._other === null) {\n                throw new Error();\n            }\n            return this._other;\n        },\n        set: function (value) {\n            if (this._other !== null) {\n                throw new Error();\n            }\n            this._other = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    b2ContactEdge.prototype.Reset = function () {\n        this._other = null;\n        this.prev = null;\n        this.next = null;\n    };\n    return b2ContactEdge;\n}());\nexports.b2ContactEdge = b2ContactEdge;\nvar b2Contact = (function () {\n    function b2Contact() {\n        this.m_islandFlag = false;\n        this.m_touchingFlag = false;\n        this.m_enabledFlag = false;\n        this.m_filterFlag = false;\n        this.m_bulletHitFlag = false;\n        this.m_toiFlag = false;\n        this.m_prev = null;\n        this.m_next = null;\n        this.m_nodeA = new b2ContactEdge(this);\n        this.m_nodeB = new b2ContactEdge(this);\n        this.m_indexA = 0;\n        this.m_indexB = 0;\n        this.m_manifold = new b2_collision_1.b2Manifold();\n        this.m_toiCount = 0;\n        this.m_toi = 0;\n        this.m_friction = 0;\n        this.m_restitution = 0;\n        this.m_restitutionThreshold = 0;\n        this.m_tangentSpeed = 0;\n        this.m_oldManifold = new b2_collision_1.b2Manifold();\n    }\n    b2Contact.prototype.GetManifold = function () {\n        return this.m_manifold;\n    };\n    b2Contact.prototype.GetWorldManifold = function (worldManifold) {\n        var bodyA = this.m_fixtureA.GetBody();\n        var bodyB = this.m_fixtureB.GetBody();\n        var shapeA = this.GetShapeA();\n        var shapeB = this.GetShapeB();\n        worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);\n    };\n    b2Contact.prototype.IsTouching = function () {\n        return this.m_touchingFlag;\n    };\n    b2Contact.prototype.SetEnabled = function (flag) {\n        this.m_enabledFlag = flag;\n    };\n    b2Contact.prototype.IsEnabled = function () {\n        return this.m_enabledFlag;\n    };\n    b2Contact.prototype.GetNext = function () {\n        return this.m_next;\n    };\n    b2Contact.prototype.GetFixtureA = function () {\n        return this.m_fixtureA;\n    };\n    b2Contact.prototype.GetChildIndexA = function () {\n        return this.m_indexA;\n    };\n    b2Contact.prototype.GetShapeA = function () {\n        return this.m_fixtureA.GetShape();\n    };\n    b2Contact.prototype.GetFixtureB = function () {\n        return this.m_fixtureB;\n    };\n    b2Contact.prototype.GetChildIndexB = function () {\n        return this.m_indexB;\n    };\n    b2Contact.prototype.GetShapeB = function () {\n        return this.m_fixtureB.GetShape();\n    };\n    b2Contact.prototype.FlagForFiltering = function () {\n        this.m_filterFlag = true;\n    };\n    b2Contact.prototype.SetFriction = function (friction) {\n        this.m_friction = friction;\n    };\n    b2Contact.prototype.GetFriction = function () {\n        return this.m_friction;\n    };\n    b2Contact.prototype.ResetFriction = function () {\n        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n    };\n    b2Contact.prototype.SetRestitution = function (restitution) {\n        this.m_restitution = restitution;\n    };\n    b2Contact.prototype.GetRestitution = function () {\n        return this.m_restitution;\n    };\n    b2Contact.prototype.ResetRestitution = function () {\n        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n    };\n    b2Contact.prototype.SetRestitutionThreshold = function (threshold) {\n        this.m_restitutionThreshold = threshold;\n    };\n    b2Contact.prototype.GetRestitutionThreshold = function () {\n        return this.m_restitutionThreshold;\n    };\n    b2Contact.prototype.ResetRestitutionThreshold = function () {\n        this.m_restitutionThreshold = b2MixRestitutionThreshold(this.m_fixtureA.m_restitutionThreshold, this.m_fixtureB.m_restitutionThreshold);\n    };\n    b2Contact.prototype.SetTangentSpeed = function (speed) {\n        this.m_tangentSpeed = speed;\n    };\n    b2Contact.prototype.GetTangentSpeed = function () {\n        return this.m_tangentSpeed;\n    };\n    b2Contact.prototype.Reset = function (fixtureA, indexA, fixtureB, indexB) {\n        this.m_islandFlag = false;\n        this.m_touchingFlag = false;\n        this.m_enabledFlag = true;\n        this.m_filterFlag = false;\n        this.m_bulletHitFlag = false;\n        this.m_toiFlag = false;\n        this.m_fixtureA = fixtureA;\n        this.m_fixtureB = fixtureB;\n        this.m_indexA = indexA;\n        this.m_indexB = indexB;\n        this.m_manifold.pointCount = 0;\n        this.m_prev = null;\n        this.m_next = null;\n        this.m_nodeA.Reset();\n        this.m_nodeB.Reset();\n        this.m_toiCount = 0;\n        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n        this.m_restitutionThreshold = b2MixRestitutionThreshold(this.m_fixtureA.m_restitutionThreshold, this.m_fixtureB.m_restitutionThreshold);\n    };\n    b2Contact.prototype.Update = function (listener) {\n        var tManifold = this.m_oldManifold;\n        this.m_oldManifold = this.m_manifold;\n        this.m_manifold = tManifold;\n        this.m_enabledFlag = true;\n        var touching = false;\n        var wasTouching = this.m_touchingFlag;\n        var sensorA = this.m_fixtureA.IsSensor();\n        var sensorB = this.m_fixtureB.IsSensor();\n        var sensor = sensorA || sensorB;\n        var bodyA = this.m_fixtureA.GetBody();\n        var bodyB = this.m_fixtureB.GetBody();\n        var xfA = bodyA.GetTransform();\n        var xfB = bodyB.GetTransform();\n        if (sensor) {\n            var shapeA = this.GetShapeA();\n            var shapeB = this.GetShapeB();\n            touching = b2_collision_2.b2TestOverlapShape(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);\n            this.m_manifold.pointCount = 0;\n        }\n        else {\n            this.Evaluate(this.m_manifold, xfA, xfB);\n            touching = this.m_manifold.pointCount > 0;\n            for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n                var mp2 = this.m_manifold.points[i];\n                mp2.normalImpulse = 0;\n                mp2.tangentImpulse = 0;\n                var id2 = mp2.id;\n                for (var j = 0; j < this.m_oldManifold.pointCount; ++j) {\n                    var mp1 = this.m_oldManifold.points[j];\n                    if (mp1.id.key === id2.key) {\n                        mp2.normalImpulse = mp1.normalImpulse;\n                        mp2.tangentImpulse = mp1.tangentImpulse;\n                        break;\n                    }\n                }\n            }\n            if (touching !== wasTouching) {\n                bodyA.SetAwake(true);\n                bodyB.SetAwake(true);\n            }\n        }\n        this.m_touchingFlag = touching;\n        if (!wasTouching && touching && listener) {\n            listener.BeginContact(this);\n        }\n        if (wasTouching && !touching && listener) {\n            listener.EndContact(this);\n        }\n        if (!sensor && touching && listener) {\n            listener.PreSolve(this, this.m_oldManifold);\n        }\n    };\n    b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {\n        var input = b2Contact.ComputeTOI_s_input;\n        input.proxyA.SetShape(this.GetShapeA(), this.m_indexA);\n        input.proxyB.SetShape(this.GetShapeB(), this.m_indexB);\n        input.sweepA.Copy(sweepA);\n        input.sweepB.Copy(sweepB);\n        input.tMax = b2_settings_1.b2_linearSlop;\n        var output = b2Contact.ComputeTOI_s_output;\n        b2_time_of_impact_1.b2TimeOfImpact(output, input);\n        return output.t;\n    };\n    b2Contact.ComputeTOI_s_input = new b2_time_of_impact_1.b2TOIInput();\n    b2Contact.ComputeTOI_s_output = new b2_time_of_impact_1.b2TOIOutput();\n    return b2Contact;\n}());\nexports.b2Contact = b2Contact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_contact_factory.ts":
/*!**************************************************!*\
  !*** ./src/box2d/dynamics/b2_contact_factory.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ContactFactory = exports.b2ContactRegister = void 0;\nvar b2_shape_1 = __webpack_require__(/*! ../collision/b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2_circle_contact_1 = __webpack_require__(/*! ./b2_circle_contact */ \"./src/box2d/dynamics/b2_circle_contact.ts\");\nvar b2_polygon_contact_1 = __webpack_require__(/*! ./b2_polygon_contact */ \"./src/box2d/dynamics/b2_polygon_contact.ts\");\nvar b2_polygon_circle_contact_1 = __webpack_require__(/*! ./b2_polygon_circle_contact */ \"./src/box2d/dynamics/b2_polygon_circle_contact.ts\");\nvar b2_edge_circle_contact_1 = __webpack_require__(/*! ./b2_edge_circle_contact */ \"./src/box2d/dynamics/b2_edge_circle_contact.ts\");\nvar b2_edge_polygon_contact_1 = __webpack_require__(/*! ./b2_edge_polygon_contact */ \"./src/box2d/dynamics/b2_edge_polygon_contact.ts\");\nvar b2_chain_circle_contact_1 = __webpack_require__(/*! ./b2_chain_circle_contact */ \"./src/box2d/dynamics/b2_chain_circle_contact.ts\");\nvar b2_chain_polygon_contact_1 = __webpack_require__(/*! ./b2_chain_polygon_contact */ \"./src/box2d/dynamics/b2_chain_polygon_contact.ts\");\nvar b2ContactRegister = (function () {\n    function b2ContactRegister() {\n        this.pool = [];\n        this.createFcn = null;\n        this.destroyFcn = null;\n        this.primary = false;\n    }\n    return b2ContactRegister;\n}());\nexports.b2ContactRegister = b2ContactRegister;\nvar b2ContactFactory = (function () {\n    function b2ContactFactory() {\n        this.m_registers = [];\n        this.InitializeRegisters();\n    }\n    b2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, typeA, typeB) {\n        var pool = [];\n        function poolCreateFcn() {\n            return pool.pop() || createFcn();\n        }\n        function poolDestroyFcn(contact) {\n            pool.push(contact);\n        }\n        this.m_registers[typeA][typeB].pool = pool;\n        this.m_registers[typeA][typeB].createFcn = poolCreateFcn;\n        this.m_registers[typeA][typeB].destroyFcn = poolDestroyFcn;\n        this.m_registers[typeA][typeB].primary = true;\n        if (typeA !== typeB) {\n            this.m_registers[typeB][typeA].pool = pool;\n            this.m_registers[typeB][typeA].createFcn = poolCreateFcn;\n            this.m_registers[typeB][typeA].destroyFcn = poolDestroyFcn;\n            this.m_registers[typeB][typeA].primary = false;\n        }\n    };\n    b2ContactFactory.prototype.InitializeRegisters = function () {\n        for (var i = 0; i < b2_shape_1.b2ShapeType.e_shapeTypeCount; i++) {\n            this.m_registers[i] = [];\n            for (var j = 0; j < b2_shape_1.b2ShapeType.e_shapeTypeCount; j++) {\n                this.m_registers[i][j] = new b2ContactRegister();\n            }\n        }\n        this.AddType(b2_circle_contact_1.b2CircleContact.Create, b2_circle_contact_1.b2CircleContact.Destroy, b2_shape_1.b2ShapeType.e_circleShape, b2_shape_1.b2ShapeType.e_circleShape);\n        this.AddType(b2_polygon_circle_contact_1.b2PolygonAndCircleContact.Create, b2_polygon_circle_contact_1.b2PolygonAndCircleContact.Destroy, b2_shape_1.b2ShapeType.e_polygonShape, b2_shape_1.b2ShapeType.e_circleShape);\n        this.AddType(b2_polygon_contact_1.b2PolygonContact.Create, b2_polygon_contact_1.b2PolygonContact.Destroy, b2_shape_1.b2ShapeType.e_polygonShape, b2_shape_1.b2ShapeType.e_polygonShape);\n        this.AddType(b2_edge_circle_contact_1.b2EdgeAndCircleContact.Create, b2_edge_circle_contact_1.b2EdgeAndCircleContact.Destroy, b2_shape_1.b2ShapeType.e_edgeShape, b2_shape_1.b2ShapeType.e_circleShape);\n        this.AddType(b2_edge_polygon_contact_1.b2EdgeAndPolygonContact.Create, b2_edge_polygon_contact_1.b2EdgeAndPolygonContact.Destroy, b2_shape_1.b2ShapeType.e_edgeShape, b2_shape_1.b2ShapeType.e_polygonShape);\n        this.AddType(b2_chain_circle_contact_1.b2ChainAndCircleContact.Create, b2_chain_circle_contact_1.b2ChainAndCircleContact.Destroy, b2_shape_1.b2ShapeType.e_chainShape, b2_shape_1.b2ShapeType.e_circleShape);\n        this.AddType(b2_chain_polygon_contact_1.b2ChainAndPolygonContact.Create, b2_chain_polygon_contact_1.b2ChainAndPolygonContact.Destroy, b2_shape_1.b2ShapeType.e_chainShape, b2_shape_1.b2ShapeType.e_polygonShape);\n    };\n    b2ContactFactory.prototype.Create = function (fixtureA, indexA, fixtureB, indexB) {\n        var typeA = fixtureA.GetType();\n        var typeB = fixtureB.GetType();\n        var reg = this.m_registers[typeA][typeB];\n        if (reg.createFcn) {\n            var c = reg.createFcn();\n            if (reg.primary) {\n                c.Reset(fixtureA, indexA, fixtureB, indexB);\n            }\n            else {\n                c.Reset(fixtureB, indexB, fixtureA, indexA);\n            }\n            return c;\n        }\n        else {\n            return null;\n        }\n    };\n    b2ContactFactory.prototype.Destroy = function (contact) {\n        var typeA = contact.m_fixtureA.GetType();\n        var typeB = contact.m_fixtureB.GetType();\n        var reg = this.m_registers[typeA][typeB];\n        if (reg.destroyFcn) {\n            reg.destroyFcn(contact);\n        }\n    };\n    return b2ContactFactory;\n}());\nexports.b2ContactFactory = b2ContactFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfY29udGFjdF9mYWN0b3J5LnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2R5bmFtaWNzL2IyX2NvbnRhY3RfZmFjdG9yeS50cz8wYjdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERFQlVHOiBpbXBvcnQgeyBiMkFzc2VydCB9IGZyb20gXCIuLi9jb21tb24vYjJfc2V0dGluZ3NcIjtcbmltcG9ydCB7IGIyU2hhcGVUeXBlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9zaGFwZVwiO1xuaW1wb3J0IHsgYjJDb250YWN0IH0gZnJvbSBcIi4vYjJfY29udGFjdFwiO1xuaW1wb3J0IHsgYjJDaXJjbGVDb250YWN0IH0gZnJvbSBcIi4vYjJfY2lyY2xlX2NvbnRhY3RcIjtcbmltcG9ydCB7IGIyUG9seWdvbkNvbnRhY3QgfSBmcm9tIFwiLi9iMl9wb2x5Z29uX2NvbnRhY3RcIjtcbmltcG9ydCB7IGIyUG9seWdvbkFuZENpcmNsZUNvbnRhY3QgfSBmcm9tIFwiLi9iMl9wb2x5Z29uX2NpcmNsZV9jb250YWN0XCI7XG5pbXBvcnQgeyBiMkVkZ2VBbmRDaXJjbGVDb250YWN0IH0gZnJvbSBcIi4vYjJfZWRnZV9jaXJjbGVfY29udGFjdFwiO1xuaW1wb3J0IHsgYjJFZGdlQW5kUG9seWdvbkNvbnRhY3QgfSBmcm9tIFwiLi9iMl9lZGdlX3BvbHlnb25fY29udGFjdFwiO1xuaW1wb3J0IHsgYjJDaGFpbkFuZENpcmNsZUNvbnRhY3QgfSBmcm9tIFwiLi9iMl9jaGFpbl9jaXJjbGVfY29udGFjdFwiO1xuaW1wb3J0IHsgYjJDaGFpbkFuZFBvbHlnb25Db250YWN0IH0gZnJvbSBcIi4vYjJfY2hhaW5fcG9seWdvbl9jb250YWN0XCI7XG5pbXBvcnQgeyBiMkZpeHR1cmUgfSBmcm9tIFwiLi9iMl9maXh0dXJlXCI7XG5cbmV4cG9ydCBjbGFzcyBiMkNvbnRhY3RSZWdpc3RlciB7XG4gIHB1YmxpYyBwb29sOiBiMkNvbnRhY3RbXSA9IFtdO1xuICBwdWJsaWMgY3JlYXRlRmNuOiAoKCkgPT4gYjJDb250YWN0KSB8IG51bGwgPSBudWxsO1xuICBwdWJsaWMgZGVzdHJveUZjbjogKChjb250YWN0OiBiMkNvbnRhY3QpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gIHB1YmxpYyBwcmltYXJ5OiBib29sZWFuID0gZmFsc2U7XG59XG5cbmV4cG9ydCBjbGFzcyBiMkNvbnRhY3RGYWN0b3J5IHtcbiAgcHVibGljIHJlYWRvbmx5IG1fcmVnaXN0ZXJzOiBiMkNvbnRhY3RSZWdpc3RlcltdW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLkluaXRpYWxpemVSZWdpc3RlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgQWRkVHlwZShjcmVhdGVGY246ICgpID0+IGIyQ29udGFjdCwgZGVzdHJveUZjbjogKGNvbnRhY3Q6IGIyQ29udGFjdCkgPT4gdm9pZCwgdHlwZUE6IGIyU2hhcGVUeXBlLCB0eXBlQjogYjJTaGFwZVR5cGUpOiB2b2lkIHtcbiAgICBjb25zdCBwb29sOiBiMkNvbnRhY3RbXSA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcG9vbENyZWF0ZUZjbigpOiBiMkNvbnRhY3Qge1xuICAgICAgcmV0dXJuIHBvb2wucG9wKCkgfHwgY3JlYXRlRmNuKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9vbERlc3Ryb3lGY24oY29udGFjdDogYjJDb250YWN0KTogdm9pZCB7XG4gICAgICBwb29sLnB1c2goY29udGFjdCk7XG4gICAgfVxuXG4gICAgdGhpcy5tX3JlZ2lzdGVyc1t0eXBlQV1bdHlwZUJdLnBvb2wgPSBwb29sO1xuICAgIHRoaXMubV9yZWdpc3RlcnNbdHlwZUFdW3R5cGVCXS5jcmVhdGVGY24gPSBwb29sQ3JlYXRlRmNuOyAvLyBjcmVhdGVGY247XG4gICAgdGhpcy5tX3JlZ2lzdGVyc1t0eXBlQV1bdHlwZUJdLmRlc3Ryb3lGY24gPSBwb29sRGVzdHJveUZjbjsgLy8gZGVzdHJveUZjbjtcbiAgICB0aGlzLm1fcmVnaXN0ZXJzW3R5cGVBXVt0eXBlQl0ucHJpbWFyeSA9IHRydWU7XG5cbiAgICBpZiAodHlwZUEgIT09IHR5cGVCKSB7XG4gICAgICB0aGlzLm1fcmVnaXN0ZXJzW3R5cGVCXVt0eXBlQV0ucG9vbCA9IHBvb2w7XG4gICAgICB0aGlzLm1fcmVnaXN0ZXJzW3R5cGVCXVt0eXBlQV0uY3JlYXRlRmNuID0gcG9vbENyZWF0ZUZjbjsgLy8gY3JlYXRlRmNuO1xuICAgICAgdGhpcy5tX3JlZ2lzdGVyc1t0eXBlQl1bdHlwZUFdLmRlc3Ryb3lGY24gPSBwb29sRGVzdHJveUZjbjsgLy8gZGVzdHJveUZjbjtcbiAgICAgIHRoaXMubV9yZWdpc3RlcnNbdHlwZUJdW3R5cGVBXS5wcmltYXJ5ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBJbml0aWFsaXplUmVnaXN0ZXJzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBiMlNoYXBlVHlwZS5lX3NoYXBlVHlwZUNvdW50OyBpKyspIHtcbiAgICAgIHRoaXMubV9yZWdpc3RlcnNbaV0gPSBbXTtcbiAgICAgIGZvciAobGV0IGo6IG51bWJlciA9IDA7IGogPCBiMlNoYXBlVHlwZS5lX3NoYXBlVHlwZUNvdW50OyBqKyspIHtcbiAgICAgICAgdGhpcy5tX3JlZ2lzdGVyc1tpXVtqXSA9IG5ldyBiMkNvbnRhY3RSZWdpc3RlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuQWRkVHlwZSggICAgICAgICAgYjJDaXJjbGVDb250YWN0LkNyZWF0ZSwgICAgICAgICAgIGIyQ2lyY2xlQ29udGFjdC5EZXN0cm95LCBiMlNoYXBlVHlwZS5lX2NpcmNsZVNoYXBlLCAgYjJTaGFwZVR5cGUuZV9jaXJjbGVTaGFwZSk7XG4gICAgdGhpcy5BZGRUeXBlKGIyUG9seWdvbkFuZENpcmNsZUNvbnRhY3QuQ3JlYXRlLCBiMlBvbHlnb25BbmRDaXJjbGVDb250YWN0LkRlc3Ryb3ksIGIyU2hhcGVUeXBlLmVfcG9seWdvblNoYXBlLCBiMlNoYXBlVHlwZS5lX2NpcmNsZVNoYXBlKTtcbiAgICB0aGlzLkFkZFR5cGUoICAgICAgICAgYjJQb2x5Z29uQ29udGFjdC5DcmVhdGUsICAgICAgICAgIGIyUG9seWdvbkNvbnRhY3QuRGVzdHJveSwgYjJTaGFwZVR5cGUuZV9wb2x5Z29uU2hhcGUsIGIyU2hhcGVUeXBlLmVfcG9seWdvblNoYXBlKTtcbiAgICB0aGlzLkFkZFR5cGUoICAgYjJFZGdlQW5kQ2lyY2xlQ29udGFjdC5DcmVhdGUsICAgIGIyRWRnZUFuZENpcmNsZUNvbnRhY3QuRGVzdHJveSwgYjJTaGFwZVR5cGUuZV9lZGdlU2hhcGUsICAgIGIyU2hhcGVUeXBlLmVfY2lyY2xlU2hhcGUpO1xuICAgIHRoaXMuQWRkVHlwZSggIGIyRWRnZUFuZFBvbHlnb25Db250YWN0LkNyZWF0ZSwgICBiMkVkZ2VBbmRQb2x5Z29uQ29udGFjdC5EZXN0cm95LCBiMlNoYXBlVHlwZS5lX2VkZ2VTaGFwZSwgICAgYjJTaGFwZVR5cGUuZV9wb2x5Z29uU2hhcGUpO1xuICAgIHRoaXMuQWRkVHlwZSggIGIyQ2hhaW5BbmRDaXJjbGVDb250YWN0LkNyZWF0ZSwgICBiMkNoYWluQW5kQ2lyY2xlQ29udGFjdC5EZXN0cm95LCBiMlNoYXBlVHlwZS5lX2NoYWluU2hhcGUsICAgYjJTaGFwZVR5cGUuZV9jaXJjbGVTaGFwZSk7XG4gICAgdGhpcy5BZGRUeXBlKCBiMkNoYWluQW5kUG9seWdvbkNvbnRhY3QuQ3JlYXRlLCAgYjJDaGFpbkFuZFBvbHlnb25Db250YWN0LkRlc3Ryb3ksIGIyU2hhcGVUeXBlLmVfY2hhaW5TaGFwZSwgICBiMlNoYXBlVHlwZS5lX3BvbHlnb25TaGFwZSk7XG4gIH1cblxuICBwdWJsaWMgQ3JlYXRlKGZpeHR1cmVBOiBiMkZpeHR1cmUsIGluZGV4QTogbnVtYmVyLCBmaXh0dXJlQjogYjJGaXh0dXJlLCBpbmRleEI6IG51bWJlcik6IGIyQ29udGFjdCB8IG51bGwge1xuICAgIGNvbnN0IHR5cGVBOiBiMlNoYXBlVHlwZSA9IGZpeHR1cmVBLkdldFR5cGUoKTtcbiAgICBjb25zdCB0eXBlQjogYjJTaGFwZVR5cGUgPSBmaXh0dXJlQi5HZXRUeXBlKCk7XG5cbiAgICAvLyBERUJVRzogYjJBc3NlcnQoMCA8PSB0eXBlQSAmJiB0eXBlQSA8IGIyU2hhcGVUeXBlLmVfc2hhcGVUeXBlQ291bnQpO1xuICAgIC8vIERFQlVHOiBiMkFzc2VydCgwIDw9IHR5cGVCICYmIHR5cGVCIDwgYjJTaGFwZVR5cGUuZV9zaGFwZVR5cGVDb3VudCk7XG5cbiAgICBjb25zdCByZWc6IGIyQ29udGFjdFJlZ2lzdGVyID0gdGhpcy5tX3JlZ2lzdGVyc1t0eXBlQV1bdHlwZUJdO1xuICAgIGlmIChyZWcuY3JlYXRlRmNuKSB7XG4gICAgICBjb25zdCBjOiBiMkNvbnRhY3QgPSByZWcuY3JlYXRlRmNuKCk7XG4gICAgICBpZiAocmVnLnByaW1hcnkpIHtcbiAgICAgICAgYy5SZXNldChmaXh0dXJlQSwgaW5kZXhBLCBmaXh0dXJlQiwgaW5kZXhCKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGMuUmVzZXQoZml4dHVyZUIsIGluZGV4QiwgZml4dHVyZUEsIGluZGV4QSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIERlc3Ryb3koY29udGFjdDogYjJDb250YWN0KTogdm9pZCB7XG4gICAgY29uc3QgdHlwZUE6IGIyU2hhcGVUeXBlID0gY29udGFjdC5tX2ZpeHR1cmVBLkdldFR5cGUoKTtcbiAgICBjb25zdCB0eXBlQjogYjJTaGFwZVR5cGUgPSBjb250YWN0Lm1fZml4dHVyZUIuR2V0VHlwZSgpO1xuXG4gICAgLy8gREVCVUc6IGIyQXNzZXJ0KDAgPD0gdHlwZUEgJiYgdHlwZUIgPCBiMlNoYXBlVHlwZS5lX3NoYXBlVHlwZUNvdW50KTtcbiAgICAvLyBERUJVRzogYjJBc3NlcnQoMCA8PSB0eXBlQSAmJiB0eXBlQiA8IGIyU2hhcGVUeXBlLmVfc2hhcGVUeXBlQ291bnQpO1xuXG4gICAgY29uc3QgcmVnOiBiMkNvbnRhY3RSZWdpc3RlciA9IHRoaXMubV9yZWdpc3RlcnNbdHlwZUFdW3R5cGVCXTtcbiAgICBpZiAocmVnLmRlc3Ryb3lGY24pIHtcbiAgICAgIHJlZy5kZXN0cm95RmNuKGNvbnRhY3QpO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBTEE7QUFPQTtBQUdBO0FBRkE7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWpGQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_contact_factory.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_contact_manager.ts":
/*!**************************************************!*\
  !*** ./src/box2d/dynamics/b2_contact_manager.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ContactManager = void 0;\nvar b2_broad_phase_1 = __webpack_require__(/*! ../collision/b2_broad_phase */ \"./src/box2d/collision/b2_broad_phase.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_contact_factory_1 = __webpack_require__(/*! ./b2_contact_factory */ \"./src/box2d/dynamics/b2_contact_factory.ts\");\nvar b2_body_1 = __webpack_require__(/*! ./b2_body */ \"./src/box2d/dynamics/b2_body.ts\");\nvar b2_world_callbacks_1 = __webpack_require__(/*! ./b2_world_callbacks */ \"./src/box2d/dynamics/b2_world_callbacks.ts\");\nvar b2ContactManager = (function () {\n    function b2ContactManager() {\n        this.m_broadPhase = new b2_broad_phase_1.b2BroadPhase();\n        this.m_contactList = null;\n        this.m_contactCount = 0;\n        this.m_contactFilter = b2_world_callbacks_1.b2ContactFilter.b2_defaultFilter;\n        this.m_contactListener = b2_world_callbacks_1.b2ContactListener.b2_defaultListener;\n        this.m_contactFactory = new b2_contact_factory_1.b2ContactFactory();\n    }\n    b2ContactManager.prototype.AddPair = function (proxyA, proxyB) {\n        var fixtureA = proxyA.fixture;\n        var fixtureB = proxyB.fixture;\n        var indexA = proxyA.childIndex;\n        var indexB = proxyB.childIndex;\n        var bodyA = fixtureA.GetBody();\n        var bodyB = fixtureB.GetBody();\n        if (bodyA === bodyB) {\n            return;\n        }\n        var edge = bodyB.GetContactList();\n        while (edge) {\n            if (edge.other === bodyA) {\n                var fA = edge.contact.GetFixtureA();\n                var fB = edge.contact.GetFixtureB();\n                var iA = edge.contact.GetChildIndexA();\n                var iB = edge.contact.GetChildIndexB();\n                if (fA === fixtureA && fB === fixtureB && iA === indexA && iB === indexB) {\n                    return;\n                }\n                if (fA === fixtureB && fB === fixtureA && iA === indexB && iB === indexA) {\n                    return;\n                }\n            }\n            edge = edge.next;\n        }\n        if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\n            return;\n        }\n        var c = this.m_contactFactory.Create(fixtureA, indexA, fixtureB, indexB);\n        if (c === null) {\n            return;\n        }\n        fixtureA = c.GetFixtureA();\n        fixtureB = c.GetFixtureB();\n        indexA = c.GetChildIndexA();\n        indexB = c.GetChildIndexB();\n        bodyA = fixtureA.m_body;\n        bodyB = fixtureB.m_body;\n        c.m_prev = null;\n        c.m_next = this.m_contactList;\n        if (this.m_contactList !== null) {\n            this.m_contactList.m_prev = c;\n        }\n        this.m_contactList = c;\n        c.m_nodeA.other = bodyB;\n        c.m_nodeA.prev = null;\n        c.m_nodeA.next = bodyA.m_contactList;\n        if (bodyA.m_contactList !== null) {\n            bodyA.m_contactList.prev = c.m_nodeA;\n        }\n        bodyA.m_contactList = c.m_nodeA;\n        c.m_nodeB.other = bodyA;\n        c.m_nodeB.prev = null;\n        c.m_nodeB.next = bodyB.m_contactList;\n        if (bodyB.m_contactList !== null) {\n            bodyB.m_contactList.prev = c.m_nodeB;\n        }\n        bodyB.m_contactList = c.m_nodeB;\n        ++this.m_contactCount;\n    };\n    b2ContactManager.prototype.FindNewContacts = function () {\n        var _this = this;\n        this.m_broadPhase.UpdatePairs(function (proxyA, proxyB) {\n            _this.AddPair(proxyA, proxyB);\n        });\n    };\n    b2ContactManager.prototype.Destroy = function (c) {\n        var fixtureA = c.GetFixtureA();\n        var fixtureB = c.GetFixtureB();\n        var bodyA = fixtureA.GetBody();\n        var bodyB = fixtureB.GetBody();\n        if (this.m_contactListener && c.IsTouching()) {\n            this.m_contactListener.EndContact(c);\n        }\n        if (c.m_prev) {\n            c.m_prev.m_next = c.m_next;\n        }\n        if (c.m_next) {\n            c.m_next.m_prev = c.m_prev;\n        }\n        if (c === this.m_contactList) {\n            this.m_contactList = c.m_next;\n        }\n        if (c.m_nodeA.prev) {\n            c.m_nodeA.prev.next = c.m_nodeA.next;\n        }\n        if (c.m_nodeA.next) {\n            c.m_nodeA.next.prev = c.m_nodeA.prev;\n        }\n        if (c.m_nodeA === bodyA.m_contactList) {\n            bodyA.m_contactList = c.m_nodeA.next;\n        }\n        if (c.m_nodeB.prev) {\n            c.m_nodeB.prev.next = c.m_nodeB.next;\n        }\n        if (c.m_nodeB.next) {\n            c.m_nodeB.next.prev = c.m_nodeB.prev;\n        }\n        if (c.m_nodeB === bodyB.m_contactList) {\n            bodyB.m_contactList = c.m_nodeB.next;\n        }\n        if (c.m_manifold.pointCount > 0 &&\n            !fixtureA.IsSensor() &&\n            !fixtureB.IsSensor()) {\n            fixtureA.GetBody().SetAwake(true);\n            fixtureB.GetBody().SetAwake(true);\n        }\n        this.m_contactFactory.Destroy(c);\n        --this.m_contactCount;\n    };\n    b2ContactManager.prototype.Collide = function () {\n        var c = this.m_contactList;\n        while (c) {\n            var fixtureA = c.GetFixtureA();\n            var fixtureB = c.GetFixtureB();\n            var indexA = c.GetChildIndexA();\n            var indexB = c.GetChildIndexB();\n            var bodyA = fixtureA.GetBody();\n            var bodyB = fixtureB.GetBody();\n            if (c.m_filterFlag) {\n                if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\n                    var cNuke = c;\n                    c = cNuke.m_next;\n                    this.Destroy(cNuke);\n                    continue;\n                }\n                c.m_filterFlag = false;\n            }\n            var activeA = bodyA.IsAwake() && bodyA.m_type !== b2_body_1.b2BodyType.b2_staticBody;\n            var activeB = bodyB.IsAwake() && bodyB.m_type !== b2_body_1.b2BodyType.b2_staticBody;\n            if (!activeA && !activeB) {\n                c = c.m_next;\n                continue;\n            }\n            var treeNodeA = fixtureA.m_proxies[indexA].treeNode;\n            var treeNodeB = fixtureB.m_proxies[indexB].treeNode;\n            var overlap = b2_collision_1.b2TestOverlapAABB(treeNodeA.aabb, treeNodeB.aabb);\n            if (!overlap) {\n                var cNuke = c;\n                c = cNuke.m_next;\n                this.Destroy(cNuke);\n                continue;\n            }\n            c.Update(this.m_contactListener);\n            c = c.m_next;\n        }\n    };\n    return b2ContactManager;\n}());\nexports.b2ContactManager = b2ContactManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_contact_manager.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_contact_solver.ts":
/*!*************************************************!*\
  !*** ./src/box2d/dynamics/b2_contact_solver.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ContactSolver = exports.b2PositionSolverManifold = exports.b2ContactSolverDef = exports.b2ContactPositionConstraint = exports.b2ContactVelocityConstraint = exports.b2VelocityConstraintPoint = exports.set_g_blockSolve = exports.get_g_blockSolve = exports.g_blockSolve = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_collision_2 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_time_step_1 = __webpack_require__(/*! ./b2_time_step */ \"./src/box2d/dynamics/b2_time_step.ts\");\nexports.g_blockSolve = false;\nfunction get_g_blockSolve() { return exports.g_blockSolve; }\nexports.get_g_blockSolve = get_g_blockSolve;\nfunction set_g_blockSolve(value) { exports.g_blockSolve = value; }\nexports.set_g_blockSolve = set_g_blockSolve;\nvar b2VelocityConstraintPoint = (function () {\n    function b2VelocityConstraintPoint() {\n        this.rA = new b2_math_1.b2Vec2();\n        this.rB = new b2_math_1.b2Vec2();\n        this.normalImpulse = 0;\n        this.tangentImpulse = 0;\n        this.normalMass = 0;\n        this.tangentMass = 0;\n        this.velocityBias = 0;\n    }\n    b2VelocityConstraintPoint.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2VelocityConstraintPoint(); });\n    };\n    return b2VelocityConstraintPoint;\n}());\nexports.b2VelocityConstraintPoint = b2VelocityConstraintPoint;\nvar b2ContactVelocityConstraint = (function () {\n    function b2ContactVelocityConstraint() {\n        this.points = b2VelocityConstraintPoint.MakeArray(b2_settings_1.b2_maxManifoldPoints);\n        this.normal = new b2_math_1.b2Vec2();\n        this.tangent = new b2_math_1.b2Vec2();\n        this.normalMass = new b2_math_1.b2Mat22();\n        this.K = new b2_math_1.b2Mat22();\n        this.indexA = 0;\n        this.indexB = 0;\n        this.invMassA = 0;\n        this.invMassB = 0;\n        this.invIA = 0;\n        this.invIB = 0;\n        this.friction = 0;\n        this.restitution = 0;\n        this.threshold = 0;\n        this.tangentSpeed = 0;\n        this.pointCount = 0;\n        this.contactIndex = 0;\n    }\n    b2ContactVelocityConstraint.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2ContactVelocityConstraint(); });\n    };\n    return b2ContactVelocityConstraint;\n}());\nexports.b2ContactVelocityConstraint = b2ContactVelocityConstraint;\nvar b2ContactPositionConstraint = (function () {\n    function b2ContactPositionConstraint() {\n        this.localPoints = b2_math_1.b2Vec2.MakeArray(b2_settings_1.b2_maxManifoldPoints);\n        this.localNormal = new b2_math_1.b2Vec2();\n        this.localPoint = new b2_math_1.b2Vec2();\n        this.indexA = 0;\n        this.indexB = 0;\n        this.invMassA = 0;\n        this.invMassB = 0;\n        this.localCenterA = new b2_math_1.b2Vec2();\n        this.localCenterB = new b2_math_1.b2Vec2();\n        this.invIA = 0;\n        this.invIB = 0;\n        this.type = b2_collision_2.b2ManifoldType.e_unknown;\n        this.radiusA = 0;\n        this.radiusB = 0;\n        this.pointCount = 0;\n    }\n    b2ContactPositionConstraint.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2ContactPositionConstraint(); });\n    };\n    return b2ContactPositionConstraint;\n}());\nexports.b2ContactPositionConstraint = b2ContactPositionConstraint;\nvar b2ContactSolverDef = (function () {\n    function b2ContactSolverDef() {\n        this.step = new b2_time_step_1.b2TimeStep();\n        this.count = 0;\n    }\n    return b2ContactSolverDef;\n}());\nexports.b2ContactSolverDef = b2ContactSolverDef;\nvar b2PositionSolverManifold = (function () {\n    function b2PositionSolverManifold() {\n        this.normal = new b2_math_1.b2Vec2();\n        this.point = new b2_math_1.b2Vec2();\n        this.separation = 0;\n    }\n    b2PositionSolverManifold.prototype.Initialize = function (pc, xfA, xfB, index) {\n        var pointA = b2PositionSolverManifold.Initialize_s_pointA;\n        var pointB = b2PositionSolverManifold.Initialize_s_pointB;\n        var planePoint = b2PositionSolverManifold.Initialize_s_planePoint;\n        var clipPoint = b2PositionSolverManifold.Initialize_s_clipPoint;\n        switch (pc.type) {\n            case b2_collision_2.b2ManifoldType.e_circles: {\n                b2_math_1.b2Transform.MulXV(xfA, pc.localPoint, pointA);\n                b2_math_1.b2Transform.MulXV(xfB, pc.localPoints[0], pointB);\n                b2_math_1.b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\n                b2_math_1.b2Vec2.MidVV(pointA, pointB, this.point);\n                this.separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pointB, pointA, b2_math_1.b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\n                break;\n            }\n            case b2_collision_2.b2ManifoldType.e_faceA: {\n                b2_math_1.b2Rot.MulRV(xfA.q, pc.localNormal, this.normal);\n                b2_math_1.b2Transform.MulXV(xfA, pc.localPoint, planePoint);\n                b2_math_1.b2Transform.MulXV(xfB, pc.localPoints[index], clipPoint);\n                this.separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(clipPoint, planePoint, b2_math_1.b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\n                this.point.Copy(clipPoint);\n                break;\n            }\n            case b2_collision_2.b2ManifoldType.e_faceB: {\n                b2_math_1.b2Rot.MulRV(xfB.q, pc.localNormal, this.normal);\n                b2_math_1.b2Transform.MulXV(xfB, pc.localPoint, planePoint);\n                b2_math_1.b2Transform.MulXV(xfA, pc.localPoints[index], clipPoint);\n                this.separation = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(clipPoint, planePoint, b2_math_1.b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\n                this.point.Copy(clipPoint);\n                this.normal.SelfNeg();\n                break;\n            }\n        }\n    };\n    b2PositionSolverManifold.Initialize_s_pointA = new b2_math_1.b2Vec2();\n    b2PositionSolverManifold.Initialize_s_pointB = new b2_math_1.b2Vec2();\n    b2PositionSolverManifold.Initialize_s_planePoint = new b2_math_1.b2Vec2();\n    b2PositionSolverManifold.Initialize_s_clipPoint = new b2_math_1.b2Vec2();\n    return b2PositionSolverManifold;\n}());\nexports.b2PositionSolverManifold = b2PositionSolverManifold;\nvar b2ContactSolver = (function () {\n    function b2ContactSolver() {\n        this.m_step = new b2_time_step_1.b2TimeStep();\n        this.m_positionConstraints = b2ContactPositionConstraint.MakeArray(1024);\n        this.m_velocityConstraints = b2ContactVelocityConstraint.MakeArray(1024);\n        this.m_count = 0;\n    }\n    b2ContactSolver.prototype.Initialize = function (def) {\n        this.m_step.Copy(def.step);\n        this.m_count = def.count;\n        if (this.m_positionConstraints.length < this.m_count) {\n            var new_length = b2_math_1.b2Max(this.m_positionConstraints.length * 2, this.m_count);\n            while (this.m_positionConstraints.length < new_length) {\n                this.m_positionConstraints[this.m_positionConstraints.length] = new b2ContactPositionConstraint();\n            }\n        }\n        if (this.m_velocityConstraints.length < this.m_count) {\n            var new_length = b2_math_1.b2Max(this.m_velocityConstraints.length * 2, this.m_count);\n            while (this.m_velocityConstraints.length < new_length) {\n                this.m_velocityConstraints[this.m_velocityConstraints.length] = new b2ContactVelocityConstraint();\n            }\n        }\n        this.m_positions = def.positions;\n        this.m_velocities = def.velocities;\n        this.m_contacts = def.contacts;\n        for (var i = 0; i < this.m_count; ++i) {\n            var contact = this.m_contacts[i];\n            var fixtureA = contact.m_fixtureA;\n            var fixtureB = contact.m_fixtureB;\n            var shapeA = fixtureA.GetShape();\n            var shapeB = fixtureB.GetShape();\n            var radiusA = shapeA.m_radius;\n            var radiusB = shapeB.m_radius;\n            var bodyA = fixtureA.GetBody();\n            var bodyB = fixtureB.GetBody();\n            var manifold = contact.GetManifold();\n            var pointCount = manifold.pointCount;\n            var vc = this.m_velocityConstraints[i];\n            vc.friction = contact.m_friction;\n            vc.restitution = contact.m_restitution;\n            vc.threshold = contact.m_restitutionThreshold;\n            vc.tangentSpeed = contact.m_tangentSpeed;\n            vc.indexA = bodyA.m_islandIndex;\n            vc.indexB = bodyB.m_islandIndex;\n            vc.invMassA = bodyA.m_invMass;\n            vc.invMassB = bodyB.m_invMass;\n            vc.invIA = bodyA.m_invI;\n            vc.invIB = bodyB.m_invI;\n            vc.contactIndex = i;\n            vc.pointCount = pointCount;\n            vc.K.SetZero();\n            vc.normalMass.SetZero();\n            var pc = this.m_positionConstraints[i];\n            pc.indexA = bodyA.m_islandIndex;\n            pc.indexB = bodyB.m_islandIndex;\n            pc.invMassA = bodyA.m_invMass;\n            pc.invMassB = bodyB.m_invMass;\n            pc.localCenterA.Copy(bodyA.m_sweep.localCenter);\n            pc.localCenterB.Copy(bodyB.m_sweep.localCenter);\n            pc.invIA = bodyA.m_invI;\n            pc.invIB = bodyB.m_invI;\n            pc.localNormal.Copy(manifold.localNormal);\n            pc.localPoint.Copy(manifold.localPoint);\n            pc.pointCount = pointCount;\n            pc.radiusA = radiusA;\n            pc.radiusB = radiusB;\n            pc.type = manifold.type;\n            for (var j = 0; j < pointCount; ++j) {\n                var cp = manifold.points[j];\n                var vcp = vc.points[j];\n                if (this.m_step.warmStarting) {\n                    vcp.normalImpulse = this.m_step.dtRatio * cp.normalImpulse;\n                    vcp.tangentImpulse = this.m_step.dtRatio * cp.tangentImpulse;\n                }\n                else {\n                    vcp.normalImpulse = 0;\n                    vcp.tangentImpulse = 0;\n                }\n                vcp.rA.SetZero();\n                vcp.rB.SetZero();\n                vcp.normalMass = 0;\n                vcp.tangentMass = 0;\n                vcp.velocityBias = 0;\n                pc.localPoints[j].Copy(cp.localPoint);\n            }\n        }\n        return this;\n    };\n    b2ContactSolver.prototype.InitializeVelocityConstraints = function () {\n        var xfA = b2ContactSolver.InitializeVelocityConstraints_s_xfA;\n        var xfB = b2ContactSolver.InitializeVelocityConstraints_s_xfB;\n        var worldManifold = b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;\n        var k_maxConditionNumber = 1000;\n        for (var i = 0; i < this.m_count; ++i) {\n            var vc = this.m_velocityConstraints[i];\n            var pc = this.m_positionConstraints[i];\n            var radiusA = pc.radiusA;\n            var radiusB = pc.radiusB;\n            var manifold = this.m_contacts[vc.contactIndex].GetManifold();\n            var indexA = vc.indexA;\n            var indexB = vc.indexB;\n            var mA = vc.invMassA;\n            var mB = vc.invMassB;\n            var iA = vc.invIA;\n            var iB = vc.invIB;\n            var localCenterA = pc.localCenterA;\n            var localCenterB = pc.localCenterB;\n            var cA = this.m_positions[indexA].c;\n            var aA = this.m_positions[indexA].a;\n            var vA = this.m_velocities[indexA].v;\n            var wA = this.m_velocities[indexA].w;\n            var cB = this.m_positions[indexB].c;\n            var aB = this.m_positions[indexB].a;\n            var vB = this.m_velocities[indexB].v;\n            var wB = this.m_velocities[indexB].w;\n            xfA.q.SetAngle(aA);\n            xfB.q.SetAngle(aB);\n            b2_math_1.b2Vec2.SubVV(cA, b2_math_1.b2Rot.MulRV(xfA.q, localCenterA, b2_math_1.b2Vec2.s_t0), xfA.p);\n            b2_math_1.b2Vec2.SubVV(cB, b2_math_1.b2Rot.MulRV(xfB.q, localCenterB, b2_math_1.b2Vec2.s_t0), xfB.p);\n            worldManifold.Initialize(manifold, xfA, radiusA, xfB, radiusB);\n            vc.normal.Copy(worldManifold.normal);\n            b2_math_1.b2Vec2.CrossVOne(vc.normal, vc.tangent);\n            var pointCount = vc.pointCount;\n            for (var j = 0; j < pointCount; ++j) {\n                var vcp = vc.points[j];\n                b2_math_1.b2Vec2.SubVV(worldManifold.points[j], cA, vcp.rA);\n                b2_math_1.b2Vec2.SubVV(worldManifold.points[j], cB, vcp.rB);\n                var rnA = b2_math_1.b2Vec2.CrossVV(vcp.rA, vc.normal);\n                var rnB = b2_math_1.b2Vec2.CrossVV(vcp.rB, vc.normal);\n                var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n                vcp.normalMass = kNormal > 0 ? 1 / kNormal : 0;\n                var tangent = vc.tangent;\n                var rtA = b2_math_1.b2Vec2.CrossVV(vcp.rA, tangent);\n                var rtB = b2_math_1.b2Vec2.CrossVV(vcp.rB, tangent);\n                var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n                vcp.tangentMass = kTangent > 0 ? 1 / kTangent : 0;\n                vcp.velocityBias = 0;\n                var vRel = b2_math_1.b2Vec2.DotVV(vc.normal, b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0));\n                if (vRel < -vc.threshold) {\n                    vcp.velocityBias += (-vc.restitution * vRel);\n                }\n            }\n            if (vc.pointCount === 2 && exports.g_blockSolve) {\n                var vcp1 = vc.points[0];\n                var vcp2 = vc.points[1];\n                var rn1A = b2_math_1.b2Vec2.CrossVV(vcp1.rA, vc.normal);\n                var rn1B = b2_math_1.b2Vec2.CrossVV(vcp1.rB, vc.normal);\n                var rn2A = b2_math_1.b2Vec2.CrossVV(vcp2.rA, vc.normal);\n                var rn2B = b2_math_1.b2Vec2.CrossVV(vcp2.rB, vc.normal);\n                var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n                var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n                var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n                if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n                    vc.K.ex.Set(k11, k12);\n                    vc.K.ey.Set(k12, k22);\n                    vc.K.GetInverse(vc.normalMass);\n                }\n                else {\n                    vc.pointCount = 1;\n                }\n            }\n        }\n    };\n    b2ContactSolver.prototype.WarmStart = function () {\n        var P = b2ContactSolver.WarmStart_s_P;\n        for (var i = 0; i < this.m_count; ++i) {\n            var vc = this.m_velocityConstraints[i];\n            var indexA = vc.indexA;\n            var indexB = vc.indexB;\n            var mA = vc.invMassA;\n            var iA = vc.invIA;\n            var mB = vc.invMassB;\n            var iB = vc.invIB;\n            var pointCount = vc.pointCount;\n            var vA = this.m_velocities[indexA].v;\n            var wA = this.m_velocities[indexA].w;\n            var vB = this.m_velocities[indexB].v;\n            var wB = this.m_velocities[indexB].w;\n            var normal = vc.normal;\n            var tangent = vc.tangent;\n            for (var j = 0; j < pointCount; ++j) {\n                var vcp = vc.points[j];\n                b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.MulSV(vcp.normalImpulse, normal, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.MulSV(vcp.tangentImpulse, tangent, b2_math_1.b2Vec2.s_t1), P);\n                wA -= iA * b2_math_1.b2Vec2.CrossVV(vcp.rA, P);\n                vA.SelfMulSub(mA, P);\n                wB += iB * b2_math_1.b2Vec2.CrossVV(vcp.rB, P);\n                vB.SelfMulAdd(mB, P);\n            }\n            this.m_velocities[indexA].w = wA;\n            this.m_velocities[indexB].w = wB;\n        }\n    };\n    b2ContactSolver.prototype.SolveVelocityConstraints = function () {\n        var dv = b2ContactSolver.SolveVelocityConstraints_s_dv;\n        var dv1 = b2ContactSolver.SolveVelocityConstraints_s_dv1;\n        var dv2 = b2ContactSolver.SolveVelocityConstraints_s_dv2;\n        var P = b2ContactSolver.SolveVelocityConstraints_s_P;\n        var a = b2ContactSolver.SolveVelocityConstraints_s_a;\n        var b = b2ContactSolver.SolveVelocityConstraints_s_b;\n        var x = b2ContactSolver.SolveVelocityConstraints_s_x;\n        var d = b2ContactSolver.SolveVelocityConstraints_s_d;\n        var P1 = b2ContactSolver.SolveVelocityConstraints_s_P1;\n        var P2 = b2ContactSolver.SolveVelocityConstraints_s_P2;\n        var P1P2 = b2ContactSolver.SolveVelocityConstraints_s_P1P2;\n        for (var i = 0; i < this.m_count; ++i) {\n            var vc = this.m_velocityConstraints[i];\n            var indexA = vc.indexA;\n            var indexB = vc.indexB;\n            var mA = vc.invMassA;\n            var iA = vc.invIA;\n            var mB = vc.invMassB;\n            var iB = vc.invIB;\n            var pointCount = vc.pointCount;\n            var vA = this.m_velocities[indexA].v;\n            var wA = this.m_velocities[indexA].w;\n            var vB = this.m_velocities[indexB].v;\n            var wB = this.m_velocities[indexB].w;\n            var normal = vc.normal;\n            var tangent = vc.tangent;\n            var friction = vc.friction;\n            for (var j = 0; j < pointCount; ++j) {\n                var vcp = vc.points[j];\n                b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2_math_1.b2Vec2.s_t1), dv);\n                var vt = b2_math_1.b2Vec2.DotVV(dv, tangent) - vc.tangentSpeed;\n                var lambda = vcp.tangentMass * (-vt);\n                var maxFriction = friction * vcp.normalImpulse;\n                var newImpulse = b2_math_1.b2Clamp(vcp.tangentImpulse + lambda, (-maxFriction), maxFriction);\n                lambda = newImpulse - vcp.tangentImpulse;\n                vcp.tangentImpulse = newImpulse;\n                b2_math_1.b2Vec2.MulSV(lambda, tangent, P);\n                vA.SelfMulSub(mA, P);\n                wA -= iA * b2_math_1.b2Vec2.CrossVV(vcp.rA, P);\n                vB.SelfMulAdd(mB, P);\n                wB += iB * b2_math_1.b2Vec2.CrossVV(vcp.rB, P);\n            }\n            if (vc.pointCount === 1 || exports.g_blockSolve === false) {\n                for (var j = 0; j < pointCount; ++j) {\n                    var vcp = vc.points[j];\n                    b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2_math_1.b2Vec2.s_t1), dv);\n                    var vn = b2_math_1.b2Vec2.DotVV(dv, normal);\n                    var lambda = (-vcp.normalMass * (vn - vcp.velocityBias));\n                    var newImpulse = b2_math_1.b2Max(vcp.normalImpulse + lambda, 0);\n                    lambda = newImpulse - vcp.normalImpulse;\n                    vcp.normalImpulse = newImpulse;\n                    b2_math_1.b2Vec2.MulSV(lambda, normal, P);\n                    vA.SelfMulSub(mA, P);\n                    wA -= iA * b2_math_1.b2Vec2.CrossVV(vcp.rA, P);\n                    vB.SelfMulAdd(mB, P);\n                    wB += iB * b2_math_1.b2Vec2.CrossVV(vcp.rB, P);\n                }\n            }\n            else {\n                var cp1 = vc.points[0];\n                var cp2 = vc.points[1];\n                a.Set(cp1.normalImpulse, cp2.normalImpulse);\n                b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, cp1.rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, cp1.rA, b2_math_1.b2Vec2.s_t1), dv1);\n                b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, cp2.rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, cp2.rA, b2_math_1.b2Vec2.s_t1), dv2);\n                var vn1 = b2_math_1.b2Vec2.DotVV(dv1, normal);\n                var vn2 = b2_math_1.b2Vec2.DotVV(dv2, normal);\n                b.x = vn1 - cp1.velocityBias;\n                b.y = vn2 - cp2.velocityBias;\n                b.SelfSub(b2_math_1.b2Mat22.MulMV(vc.K, a, b2_math_1.b2Vec2.s_t0));\n                for (;;) {\n                    b2_math_1.b2Mat22.MulMV(vc.normalMass, b, x).SelfNeg();\n                    if (x.x >= 0 && x.y >= 0) {\n                        b2_math_1.b2Vec2.SubVV(x, a, d);\n                        b2_math_1.b2Vec2.MulSV(d.x, normal, P1);\n                        b2_math_1.b2Vec2.MulSV(d.y, normal, P2);\n                        b2_math_1.b2Vec2.AddVV(P1, P2, P1P2);\n                        vA.SelfMulSub(mA, P1P2);\n                        wA -= iA * (b2_math_1.b2Vec2.CrossVV(cp1.rA, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rA, P2));\n                        vB.SelfMulAdd(mB, P1P2);\n                        wB += iB * (b2_math_1.b2Vec2.CrossVV(cp1.rB, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rB, P2));\n                        cp1.normalImpulse = x.x;\n                        cp2.normalImpulse = x.y;\n                        break;\n                    }\n                    x.x = (-cp1.normalMass * b.x);\n                    x.y = 0;\n                    vn1 = 0;\n                    vn2 = vc.K.ex.y * x.x + b.y;\n                    if (x.x >= 0 && vn2 >= 0) {\n                        b2_math_1.b2Vec2.SubVV(x, a, d);\n                        b2_math_1.b2Vec2.MulSV(d.x, normal, P1);\n                        b2_math_1.b2Vec2.MulSV(d.y, normal, P2);\n                        b2_math_1.b2Vec2.AddVV(P1, P2, P1P2);\n                        vA.SelfMulSub(mA, P1P2);\n                        wA -= iA * (b2_math_1.b2Vec2.CrossVV(cp1.rA, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rA, P2));\n                        vB.SelfMulAdd(mB, P1P2);\n                        wB += iB * (b2_math_1.b2Vec2.CrossVV(cp1.rB, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rB, P2));\n                        cp1.normalImpulse = x.x;\n                        cp2.normalImpulse = x.y;\n                        break;\n                    }\n                    x.x = 0;\n                    x.y = (-cp2.normalMass * b.y);\n                    vn1 = vc.K.ey.x * x.y + b.x;\n                    vn2 = 0;\n                    if (x.y >= 0 && vn1 >= 0) {\n                        b2_math_1.b2Vec2.SubVV(x, a, d);\n                        b2_math_1.b2Vec2.MulSV(d.x, normal, P1);\n                        b2_math_1.b2Vec2.MulSV(d.y, normal, P2);\n                        b2_math_1.b2Vec2.AddVV(P1, P2, P1P2);\n                        vA.SelfMulSub(mA, P1P2);\n                        wA -= iA * (b2_math_1.b2Vec2.CrossVV(cp1.rA, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rA, P2));\n                        vB.SelfMulAdd(mB, P1P2);\n                        wB += iB * (b2_math_1.b2Vec2.CrossVV(cp1.rB, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rB, P2));\n                        cp1.normalImpulse = x.x;\n                        cp2.normalImpulse = x.y;\n                        break;\n                    }\n                    x.x = 0;\n                    x.y = 0;\n                    vn1 = b.x;\n                    vn2 = b.y;\n                    if (vn1 >= 0 && vn2 >= 0) {\n                        b2_math_1.b2Vec2.SubVV(x, a, d);\n                        b2_math_1.b2Vec2.MulSV(d.x, normal, P1);\n                        b2_math_1.b2Vec2.MulSV(d.y, normal, P2);\n                        b2_math_1.b2Vec2.AddVV(P1, P2, P1P2);\n                        vA.SelfMulSub(mA, P1P2);\n                        wA -= iA * (b2_math_1.b2Vec2.CrossVV(cp1.rA, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rA, P2));\n                        vB.SelfMulAdd(mB, P1P2);\n                        wB += iB * (b2_math_1.b2Vec2.CrossVV(cp1.rB, P1) + b2_math_1.b2Vec2.CrossVV(cp2.rB, P2));\n                        cp1.normalImpulse = x.x;\n                        cp2.normalImpulse = x.y;\n                        break;\n                    }\n                    break;\n                }\n            }\n            this.m_velocities[indexA].w = wA;\n            this.m_velocities[indexB].w = wB;\n        }\n    };\n    b2ContactSolver.prototype.StoreImpulses = function () {\n        for (var i = 0; i < this.m_count; ++i) {\n            var vc = this.m_velocityConstraints[i];\n            var manifold = this.m_contacts[vc.contactIndex].GetManifold();\n            for (var j = 0; j < vc.pointCount; ++j) {\n                manifold.points[j].normalImpulse = vc.points[j].normalImpulse;\n                manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse;\n            }\n        }\n    };\n    b2ContactSolver.prototype.SolvePositionConstraints = function () {\n        var xfA = b2ContactSolver.SolvePositionConstraints_s_xfA;\n        var xfB = b2ContactSolver.SolvePositionConstraints_s_xfB;\n        var psm = b2ContactSolver.SolvePositionConstraints_s_psm;\n        var rA = b2ContactSolver.SolvePositionConstraints_s_rA;\n        var rB = b2ContactSolver.SolvePositionConstraints_s_rB;\n        var P = b2ContactSolver.SolvePositionConstraints_s_P;\n        var minSeparation = 0;\n        for (var i = 0; i < this.m_count; ++i) {\n            var pc = this.m_positionConstraints[i];\n            var indexA = pc.indexA;\n            var indexB = pc.indexB;\n            var localCenterA = pc.localCenterA;\n            var mA = pc.invMassA;\n            var iA = pc.invIA;\n            var localCenterB = pc.localCenterB;\n            var mB = pc.invMassB;\n            var iB = pc.invIB;\n            var pointCount = pc.pointCount;\n            var cA = this.m_positions[indexA].c;\n            var aA = this.m_positions[indexA].a;\n            var cB = this.m_positions[indexB].c;\n            var aB = this.m_positions[indexB].a;\n            for (var j = 0; j < pointCount; ++j) {\n                xfA.q.SetAngle(aA);\n                xfB.q.SetAngle(aB);\n                b2_math_1.b2Vec2.SubVV(cA, b2_math_1.b2Rot.MulRV(xfA.q, localCenterA, b2_math_1.b2Vec2.s_t0), xfA.p);\n                b2_math_1.b2Vec2.SubVV(cB, b2_math_1.b2Rot.MulRV(xfB.q, localCenterB, b2_math_1.b2Vec2.s_t0), xfB.p);\n                psm.Initialize(pc, xfA, xfB, j);\n                var normal = psm.normal;\n                var point = psm.point;\n                var separation = psm.separation;\n                b2_math_1.b2Vec2.SubVV(point, cA, rA);\n                b2_math_1.b2Vec2.SubVV(point, cB, rB);\n                minSeparation = b2_math_1.b2Min(minSeparation, separation);\n                var C = b2_math_1.b2Clamp(b2_settings_1.b2_baumgarte * (separation + b2_settings_1.b2_linearSlop), (-b2_settings_1.b2_maxLinearCorrection), 0);\n                var rnA = b2_math_1.b2Vec2.CrossVV(rA, normal);\n                var rnB = b2_math_1.b2Vec2.CrossVV(rB, normal);\n                var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n                var impulse = K > 0 ? -C / K : 0;\n                b2_math_1.b2Vec2.MulSV(impulse, normal, P);\n                cA.SelfMulSub(mA, P);\n                aA -= iA * b2_math_1.b2Vec2.CrossVV(rA, P);\n                cB.SelfMulAdd(mB, P);\n                aB += iB * b2_math_1.b2Vec2.CrossVV(rB, P);\n            }\n            this.m_positions[indexA].a = aA;\n            this.m_positions[indexB].a = aB;\n        }\n        return minSeparation > (-3 * b2_settings_1.b2_linearSlop);\n    };\n    b2ContactSolver.prototype.SolveTOIPositionConstraints = function (toiIndexA, toiIndexB) {\n        var xfA = b2ContactSolver.SolveTOIPositionConstraints_s_xfA;\n        var xfB = b2ContactSolver.SolveTOIPositionConstraints_s_xfB;\n        var psm = b2ContactSolver.SolveTOIPositionConstraints_s_psm;\n        var rA = b2ContactSolver.SolveTOIPositionConstraints_s_rA;\n        var rB = b2ContactSolver.SolveTOIPositionConstraints_s_rB;\n        var P = b2ContactSolver.SolveTOIPositionConstraints_s_P;\n        var minSeparation = 0;\n        for (var i = 0; i < this.m_count; ++i) {\n            var pc = this.m_positionConstraints[i];\n            var indexA = pc.indexA;\n            var indexB = pc.indexB;\n            var localCenterA = pc.localCenterA;\n            var localCenterB = pc.localCenterB;\n            var pointCount = pc.pointCount;\n            var mA = 0;\n            var iA = 0;\n            if (indexA === toiIndexA || indexA === toiIndexB) {\n                mA = pc.invMassA;\n                iA = pc.invIA;\n            }\n            var mB = 0;\n            var iB = 0;\n            if (indexB === toiIndexA || indexB === toiIndexB) {\n                mB = pc.invMassB;\n                iB = pc.invIB;\n            }\n            var cA = this.m_positions[indexA].c;\n            var aA = this.m_positions[indexA].a;\n            var cB = this.m_positions[indexB].c;\n            var aB = this.m_positions[indexB].a;\n            for (var j = 0; j < pointCount; ++j) {\n                xfA.q.SetAngle(aA);\n                xfB.q.SetAngle(aB);\n                b2_math_1.b2Vec2.SubVV(cA, b2_math_1.b2Rot.MulRV(xfA.q, localCenterA, b2_math_1.b2Vec2.s_t0), xfA.p);\n                b2_math_1.b2Vec2.SubVV(cB, b2_math_1.b2Rot.MulRV(xfB.q, localCenterB, b2_math_1.b2Vec2.s_t0), xfB.p);\n                psm.Initialize(pc, xfA, xfB, j);\n                var normal = psm.normal;\n                var point = psm.point;\n                var separation = psm.separation;\n                b2_math_1.b2Vec2.SubVV(point, cA, rA);\n                b2_math_1.b2Vec2.SubVV(point, cB, rB);\n                minSeparation = b2_math_1.b2Min(minSeparation, separation);\n                var C = b2_math_1.b2Clamp(b2_settings_1.b2_toiBaumgarte * (separation + b2_settings_1.b2_linearSlop), (-b2_settings_1.b2_maxLinearCorrection), 0);\n                var rnA = b2_math_1.b2Vec2.CrossVV(rA, normal);\n                var rnB = b2_math_1.b2Vec2.CrossVV(rB, normal);\n                var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n                var impulse = K > 0 ? -C / K : 0;\n                b2_math_1.b2Vec2.MulSV(impulse, normal, P);\n                cA.SelfMulSub(mA, P);\n                aA -= iA * b2_math_1.b2Vec2.CrossVV(rA, P);\n                cB.SelfMulAdd(mB, P);\n                aB += iB * b2_math_1.b2Vec2.CrossVV(rB, P);\n            }\n            this.m_positions[indexA].a = aA;\n            this.m_positions[indexB].a = aB;\n        }\n        return minSeparation >= -1.5 * b2_settings_1.b2_linearSlop;\n    };\n    b2ContactSolver.InitializeVelocityConstraints_s_xfA = new b2_math_1.b2Transform();\n    b2ContactSolver.InitializeVelocityConstraints_s_xfB = new b2_math_1.b2Transform();\n    b2ContactSolver.InitializeVelocityConstraints_s_worldManifold = new b2_collision_1.b2WorldManifold();\n    b2ContactSolver.WarmStart_s_P = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_dv = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_dv1 = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_dv2 = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_a = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_b = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_x = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_d = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_P1 = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_P2 = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveVelocityConstraints_s_P1P2 = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolvePositionConstraints_s_xfA = new b2_math_1.b2Transform();\n    b2ContactSolver.SolvePositionConstraints_s_xfB = new b2_math_1.b2Transform();\n    b2ContactSolver.SolvePositionConstraints_s_psm = new b2PositionSolverManifold();\n    b2ContactSolver.SolvePositionConstraints_s_rA = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolvePositionConstraints_s_rB = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolvePositionConstraints_s_P = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveTOIPositionConstraints_s_xfA = new b2_math_1.b2Transform();\n    b2ContactSolver.SolveTOIPositionConstraints_s_xfB = new b2_math_1.b2Transform();\n    b2ContactSolver.SolveTOIPositionConstraints_s_psm = new b2PositionSolverManifold();\n    b2ContactSolver.SolveTOIPositionConstraints_s_rA = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveTOIPositionConstraints_s_rB = new b2_math_1.b2Vec2();\n    b2ContactSolver.SolveTOIPositionConstraints_s_P = new b2_math_1.b2Vec2();\n    return b2ContactSolver;\n}());\nexports.b2ContactSolver = b2ContactSolver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_contact_solver.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_distance_joint.ts":
/*!*************************************************!*\
  !*** ./src/box2d/dynamics/b2_distance_joint.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2DistanceJoint = exports.b2DistanceJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2DistanceJointDef = (function (_super) {\n    __extends(b2DistanceJointDef, _super);\n    function b2DistanceJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_distanceJoint) || this;\n        _this.localAnchorA = new b2_math_1.b2Vec2();\n        _this.localAnchorB = new b2_math_1.b2Vec2();\n        _this.length = 1;\n        _this.minLength = 0;\n        _this.maxLength = b2_settings_1.b2_maxFloat;\n        _this.stiffness = 0;\n        _this.damping = 0;\n        return _this;\n    }\n    b2DistanceJointDef.prototype.Initialize = function (b1, b2, anchor1, anchor2) {\n        this.bodyA = b1;\n        this.bodyB = b2;\n        this.bodyA.GetLocalPoint(anchor1, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchor2, this.localAnchorB);\n        this.length = b2_math_1.b2Max(b2_math_1.b2Vec2.DistanceVV(anchor1, anchor2), b2_settings_1.b2_linearSlop);\n        this.minLength = this.length;\n        this.maxLength = this.length;\n    };\n    return b2DistanceJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2DistanceJointDef = b2DistanceJointDef;\nvar b2DistanceJoint = (function (_super) {\n    __extends(b2DistanceJoint, _super);\n    function b2DistanceJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_stiffness = 0;\n        _this.m_damping = 0;\n        _this.m_bias = 0;\n        _this.m_length = 0;\n        _this.m_minLength = 0;\n        _this.m_maxLength = 0;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_gamma = 0;\n        _this.m_impulse = 0;\n        _this.m_lowerImpulse = 0;\n        _this.m_upperImpulse = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_u = new b2_math_1.b2Vec2();\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_currentLength = 0;\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_softMass = 0;\n        _this.m_mass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, b2_math_1.b2Vec2.ZERO));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, b2_math_1.b2Vec2.ZERO));\n        _this.m_length = b2_math_1.b2Max(b2_settings_1.b2Maybe(def.length, _this.GetCurrentLength()), b2_settings_1.b2_linearSlop);\n        _this.m_minLength = b2_math_1.b2Max(b2_settings_1.b2Maybe(def.minLength, _this.m_length), b2_settings_1.b2_linearSlop);\n        _this.m_maxLength = b2_math_1.b2Max(b2_settings_1.b2Maybe(def.maxLength, _this.m_length), _this.m_minLength);\n        _this.m_stiffness = b2_settings_1.b2Maybe(def.stiffness, 0);\n        _this.m_damping = b2_settings_1.b2Maybe(def.damping, 0);\n        return _this;\n    }\n    b2DistanceJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2DistanceJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2DistanceJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * (this.m_impulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_u.x;\n        out.y = inv_dt * (this.m_impulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_u.y;\n        return out;\n    };\n    b2DistanceJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return 0;\n    };\n    b2DistanceJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\n    b2DistanceJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\n    b2DistanceJoint.prototype.SetLength = function (length) {\n        this.m_impulse = 0;\n        this.m_length = b2_math_1.b2Max(b2_settings_1.b2_linearSlop, length);\n        return this.m_length;\n    };\n    b2DistanceJoint.prototype.GetLength = function () {\n        return this.m_length;\n    };\n    b2DistanceJoint.prototype.SetMinLength = function (minLength) {\n        this.m_lowerImpulse = 0;\n        this.m_minLength = b2_math_1.b2Clamp(minLength, b2_settings_1.b2_linearSlop, this.m_maxLength);\n        return this.m_minLength;\n    };\n    b2DistanceJoint.prototype.SetMaxLength = function (maxLength) {\n        this.m_upperImpulse = 0;\n        this.m_maxLength = b2_math_1.b2Max(maxLength, this.m_minLength);\n        return this.m_maxLength;\n    };\n    b2DistanceJoint.prototype.GetCurrentLength = function () {\n        var pA = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, new b2_math_1.b2Vec2());\n        var pB = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, new b2_math_1.b2Vec2());\n        return b2_math_1.b2Vec2.DistanceVV(pA, pB);\n    };\n    b2DistanceJoint.prototype.SetStiffness = function (stiffness) {\n        this.m_stiffness = stiffness;\n    };\n    b2DistanceJoint.prototype.GetStiffness = function () {\n        return this.m_stiffness;\n    };\n    b2DistanceJoint.prototype.SetDamping = function (damping) {\n        this.m_damping = damping;\n    };\n    b2DistanceJoint.prototype.GetDamping = function () {\n        return this.m_damping;\n    };\n    b2DistanceJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2DistanceJointDef = new b2DistanceJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.length = %.15f;\\n\", this.m_length);\n        log(\"  jd.minLength = %.15f;\\n\", this.m_minLength);\n        log(\"  jd.maxLength = %.15f;\\n\", this.m_maxLength);\n        log(\"  jd.stiffness = %.15f;\\n\", this.m_stiffness);\n        log(\"  jd.damping = %.15f;\\n\", this.m_damping);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2DistanceJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        this.m_u.x = cB.x + this.m_rB.x - cA.x - this.m_rA.x;\n        this.m_u.y = cB.y + this.m_rB.y - cA.y - this.m_rA.y;\n        this.m_currentLength = this.m_u.Length();\n        if (this.m_currentLength > b2_settings_1.b2_linearSlop) {\n            this.m_u.SelfMul(1 / this.m_currentLength);\n        }\n        else {\n            this.m_u.SetZero();\n            this.m_mass = 0;\n            this.m_impulse = 0;\n            this.m_lowerImpulse = 0;\n            this.m_upperImpulse = 0;\n        }\n        var crAu = b2_math_1.b2Vec2.CrossVV(this.m_rA, this.m_u);\n        var crBu = b2_math_1.b2Vec2.CrossVV(this.m_rB, this.m_u);\n        var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB + this.m_invIB * crBu * crBu;\n        this.m_mass = invMass !== 0 ? 1 / invMass : 0;\n        if (this.m_stiffness > 0 && this.m_minLength < this.m_maxLength) {\n            var C = this.m_currentLength - this.m_length;\n            var d = this.m_damping;\n            var k = this.m_stiffness;\n            var h = data.step.dt;\n            this.m_gamma = h * (d + h * k);\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\n            this.m_bias = C * h * k * this.m_gamma;\n            invMass += this.m_gamma;\n            this.m_softMass = invMass !== 0 ? 1 / invMass : 0;\n        }\n        else {\n            this.m_gamma = 0;\n            this.m_bias = 0;\n            this.m_softMass = this.m_mass;\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse *= data.step.dtRatio;\n            this.m_lowerImpulse *= data.step.dtRatio;\n            this.m_upperImpulse *= data.step.dtRatio;\n            var P = b2_math_1.b2Vec2.MulSV(this.m_impulse + this.m_lowerImpulse - this.m_upperImpulse, this.m_u, b2DistanceJoint.InitVelocityConstraints_s_P);\n            vA.SelfMulSub(this.m_invMassA, P);\n            wA -= this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, P);\n            vB.SelfMulAdd(this.m_invMassB, P);\n            wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, P);\n        }\n        else {\n            this.m_impulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2DistanceJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        if (this.m_minLength < this.m_maxLength) {\n            if (this.m_stiffness > 0) {\n                var vpA = b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);\n                var vpB = b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_u, b2_math_1.b2Vec2.SubVV(vpB, vpA, b2_math_1.b2Vec2.s_t0));\n                var impulse = -this.m_softMass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n                this.m_impulse += impulse;\n                var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\n                vA.SelfMulSub(this.m_invMassA, P);\n                wA -= this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, P);\n                vB.SelfMulAdd(this.m_invMassB, P);\n                wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, P);\n            }\n            {\n                var C = this.m_currentLength - this.m_minLength;\n                var bias = b2_math_1.b2Max(0, C) * data.step.inv_dt;\n                var vpA = b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);\n                var vpB = b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_u, b2_math_1.b2Vec2.SubVV(vpB, vpA, b2_math_1.b2Vec2.s_t0));\n                var impulse = -this.m_mass * (Cdot + bias);\n                var oldImpulse = this.m_lowerImpulse;\n                this.m_lowerImpulse = b2_math_1.b2Max(0, this.m_lowerImpulse + impulse);\n                impulse = this.m_lowerImpulse - oldImpulse;\n                var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\n                vA.SelfMulSub(this.m_invMassA, P);\n                wA -= this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, P);\n                vB.SelfMulAdd(this.m_invMassB, P);\n                wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, P);\n            }\n            {\n                var C = this.m_maxLength - this.m_currentLength;\n                var bias = b2_math_1.b2Max(0, C) * data.step.inv_dt;\n                var vpA = b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);\n                var vpB = b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_u, b2_math_1.b2Vec2.SubVV(vpA, vpB, b2_math_1.b2Vec2.s_t0));\n                var impulse = -this.m_mass * (Cdot + bias);\n                var oldImpulse = this.m_upperImpulse;\n                this.m_upperImpulse = b2_math_1.b2Max(0, this.m_upperImpulse + impulse);\n                impulse = this.m_upperImpulse - oldImpulse;\n                var P = b2_math_1.b2Vec2.MulSV(-impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\n                vA.SelfMulSub(this.m_invMassA, P);\n                wA -= this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, P);\n                vB.SelfMulAdd(this.m_invMassB, P);\n                wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, P);\n            }\n        }\n        else {\n            var vpA = b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);\n            var vpB = b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);\n            var Cdot = b2_math_1.b2Vec2.DotVV(this.m_u, b2_math_1.b2Vec2.SubVV(vpB, vpA, b2_math_1.b2Vec2.s_t0));\n            var impulse = -this.m_mass * Cdot;\n            this.m_impulse += impulse;\n            var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\n            vA.SelfMulSub(this.m_invMassA, P);\n            wA -= this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, P);\n            vB.SelfMulAdd(this.m_invMassB, P);\n            wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, P);\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2DistanceJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var u = this.m_u;\n        u.x = cB.x + rB.x - cA.x - rA.x;\n        u.y = cB.y + rB.y - cA.y - rA.y;\n        var length = this.m_u.Normalize();\n        var C;\n        if (this.m_minLength == this.m_maxLength) {\n            C = length - this.m_minLength;\n        }\n        else if (length < this.m_minLength) {\n            C = length - this.m_minLength;\n        }\n        else if (this.m_maxLength < length) {\n            C = length - this.m_maxLength;\n        }\n        else {\n            return true;\n        }\n        var impulse = -this.m_mass * C;\n        var P = b2_math_1.b2Vec2.MulSV(impulse, u, b2DistanceJoint.SolvePositionConstraints_s_P);\n        cA.SelfMulSub(this.m_invMassA, P);\n        aA -= this.m_invIA * b2_math_1.b2Vec2.CrossVV(rA, P);\n        cB.SelfMulAdd(this.m_invMassB, P);\n        aB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(rB, P);\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        return b2_math_1.b2Abs(C) < b2_settings_1.b2_linearSlop;\n    };\n    b2DistanceJoint.prototype.Draw = function (draw) {\n        var xfA = this.m_bodyA.GetTransform();\n        var xfB = this.m_bodyB.GetTransform();\n        var pA = b2_math_1.b2Transform.MulXV(xfA, this.m_localAnchorA, b2DistanceJoint.Draw_s_pA);\n        var pB = b2_math_1.b2Transform.MulXV(xfB, this.m_localAnchorB, b2DistanceJoint.Draw_s_pB);\n        var axis = b2_math_1.b2Vec2.SubVV(pB, pA, b2DistanceJoint.Draw_s_axis);\n        axis.Normalize();\n        var c1 = b2DistanceJoint.Draw_s_c1;\n        var c2 = b2DistanceJoint.Draw_s_c2;\n        var c3 = b2DistanceJoint.Draw_s_c3;\n        var c4 = b2DistanceJoint.Draw_s_c4;\n        draw.DrawSegment(pA, pB, c4);\n        var pRest = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_length, axis, b2DistanceJoint.Draw_s_pRest);\n        draw.DrawPoint(pRest, 8.0, c1);\n        if (this.m_minLength != this.m_maxLength) {\n            if (this.m_minLength > b2_settings_1.b2_linearSlop) {\n                var pMin = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_minLength, axis, b2DistanceJoint.Draw_s_pMin);\n                draw.DrawPoint(pMin, 4.0, c2);\n            }\n            if (this.m_maxLength < b2_settings_1.b2_maxFloat) {\n                var pMax = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_maxLength, axis, b2DistanceJoint.Draw_s_pMax);\n                draw.DrawPoint(pMax, 4.0, c3);\n            }\n        }\n    };\n    b2DistanceJoint.InitVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2DistanceJoint.SolveVelocityConstraints_s_vpA = new b2_math_1.b2Vec2();\n    b2DistanceJoint.SolveVelocityConstraints_s_vpB = new b2_math_1.b2Vec2();\n    b2DistanceJoint.SolveVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2DistanceJoint.SolvePositionConstraints_s_P = new b2_math_1.b2Vec2();\n    b2DistanceJoint.Draw_s_pA = new b2_math_1.b2Vec2();\n    b2DistanceJoint.Draw_s_pB = new b2_math_1.b2Vec2();\n    b2DistanceJoint.Draw_s_axis = new b2_math_1.b2Vec2();\n    b2DistanceJoint.Draw_s_c1 = new b2_draw_1.b2Color(0.7, 0.7, 0.7);\n    b2DistanceJoint.Draw_s_c2 = new b2_draw_1.b2Color(0.3, 0.9, 0.3);\n    b2DistanceJoint.Draw_s_c3 = new b2_draw_1.b2Color(0.9, 0.3, 0.3);\n    b2DistanceJoint.Draw_s_c4 = new b2_draw_1.b2Color(0.4, 0.4, 0.4);\n    b2DistanceJoint.Draw_s_pRest = new b2_math_1.b2Vec2();\n    b2DistanceJoint.Draw_s_pMin = new b2_math_1.b2Vec2();\n    b2DistanceJoint.Draw_s_pMax = new b2_math_1.b2Vec2();\n    return b2DistanceJoint;\n}(b2_joint_1.b2Joint));\nexports.b2DistanceJoint = b2DistanceJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_distance_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_edge_circle_contact.ts":
/*!******************************************************!*\
  !*** ./src/box2d/dynamics/b2_edge_circle_contact.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2EdgeAndCircleContact = void 0;\nvar b2_collide_edge_1 = __webpack_require__(/*! ../collision/b2_collide_edge */ \"./src/box2d/collision/b2_collide_edge.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2EdgeAndCircleContact = (function (_super) {\n    __extends(b2EdgeAndCircleContact, _super);\n    function b2EdgeAndCircleContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2EdgeAndCircleContact.Create = function () {\n        return new b2EdgeAndCircleContact();\n    };\n    b2EdgeAndCircleContact.Destroy = function (contact) {\n    };\n    b2EdgeAndCircleContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        b2_collide_edge_1.b2CollideEdgeAndCircle(manifold, this.GetShapeA(), xfA, this.GetShapeB(), xfB);\n    };\n    return b2EdgeAndCircleContact;\n}(b2_contact_1.b2Contact));\nexports.b2EdgeAndCircleContact = b2EdgeAndCircleContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfZWRnZV9jaXJjbGVfY29udGFjdC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ib3gyZC9keW5hbWljcy9iMl9lZGdlX2NpcmNsZV9jb250YWN0LnRzPzcyNDkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDkgRXJpbiBDYXR0byBodHRwOi8vd3d3LmJveDJkLm9yZ1xuKlxuKiBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4qIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4qIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4qIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiogMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcbiogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiogaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4qIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4qIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4qIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiogMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cbiovXG5cbmltcG9ydCB7IGIyVHJhbnNmb3JtIH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9tYXRoXCI7XG5pbXBvcnQgeyBiMkNvbGxpZGVFZGdlQW5kQ2lyY2xlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9jb2xsaWRlX2VkZ2VcIjtcbmltcG9ydCB7IGIyTWFuaWZvbGQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpc2lvblwiO1xuaW1wb3J0IHsgYjJDaXJjbGVTaGFwZSB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfY2lyY2xlX3NoYXBlXCI7XG5pbXBvcnQgeyBiMkVkZ2VTaGFwZSB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfZWRnZV9zaGFwZVwiO1xuaW1wb3J0IHsgYjJDb250YWN0IH0gZnJvbSBcIi4vYjJfY29udGFjdFwiO1xuXG5leHBvcnQgY2xhc3MgYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCBleHRlbmRzIGIyQ29udGFjdDxiMkVkZ2VTaGFwZSwgYjJDaXJjbGVTaGFwZT4ge1xuICBwdWJsaWMgc3RhdGljIENyZWF0ZSgpOiBiMkNvbnRhY3Qge1xuICAgIHJldHVybiBuZXcgYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCgpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBEZXN0cm95KGNvbnRhY3Q6IGIyQ29udGFjdCk6IHZvaWQge1xuICB9XG5cbiAgcHVibGljIEV2YWx1YXRlKG1hbmlmb2xkOiBiMk1hbmlmb2xkLCB4ZkE6IGIyVHJhbnNmb3JtLCB4ZkI6IGIyVHJhbnNmb3JtKTogdm9pZCB7XG4gICAgYjJDb2xsaWRlRWRnZUFuZENpcmNsZShtYW5pZm9sZCwgdGhpcy5HZXRTaGFwZUEoKSwgeGZBLCB0aGlzLkdldFNoYXBlQigpLCB4ZkIpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFJQTtBQUVBO0FBQUE7QUFBQTs7QUFXQTtBQVZBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBWEE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_edge_circle_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_edge_polygon_contact.ts":
/*!*******************************************************!*\
  !*** ./src/box2d/dynamics/b2_edge_polygon_contact.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2EdgeAndPolygonContact = void 0;\nvar b2_collide_edge_1 = __webpack_require__(/*! ../collision/b2_collide_edge */ \"./src/box2d/collision/b2_collide_edge.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2EdgeAndPolygonContact = (function (_super) {\n    __extends(b2EdgeAndPolygonContact, _super);\n    function b2EdgeAndPolygonContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2EdgeAndPolygonContact.Create = function () {\n        return new b2EdgeAndPolygonContact();\n    };\n    b2EdgeAndPolygonContact.Destroy = function (contact) {\n    };\n    b2EdgeAndPolygonContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        b2_collide_edge_1.b2CollideEdgeAndPolygon(manifold, this.GetShapeA(), xfA, this.GetShapeB(), xfB);\n    };\n    return b2EdgeAndPolygonContact;\n}(b2_contact_1.b2Contact));\nexports.b2EdgeAndPolygonContact = b2EdgeAndPolygonContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfZWRnZV9wb2x5Z29uX2NvbnRhY3QudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfZWRnZV9wb2x5Z29uX2NvbnRhY3QudHM/MDg1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAwOSBFcmluIENhdHRvIGh0dHA6Ly93d3cuYm94MmQub3JnXG4qXG4qIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4qIHdhcnJhbnR5LiAgSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4qIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuKiBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuKiBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiogMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiogbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuKi9cblxuaW1wb3J0IHsgYjJUcmFuc2Zvcm0gfSBmcm9tIFwiLi4vY29tbW9uL2IyX21hdGhcIjtcbmltcG9ydCB7IGIyQ29sbGlkZUVkZ2VBbmRQb2x5Z29uIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9jb2xsaWRlX2VkZ2VcIjtcbmltcG9ydCB7IGIyTWFuaWZvbGQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpc2lvblwiO1xuaW1wb3J0IHsgYjJFZGdlU2hhcGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2VkZ2Vfc2hhcGVcIjtcbmltcG9ydCB7IGIyUG9seWdvblNoYXBlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9wb2x5Z29uX3NoYXBlXCI7XG5pbXBvcnQgeyBiMkNvbnRhY3QgfSBmcm9tIFwiLi9iMl9jb250YWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBiMkVkZ2VBbmRQb2x5Z29uQ29udGFjdCBleHRlbmRzIGIyQ29udGFjdDxiMkVkZ2VTaGFwZSwgYjJQb2x5Z29uU2hhcGU+IHtcbiAgcHVibGljIHN0YXRpYyBDcmVhdGUoKTogYjJDb250YWN0IHtcbiAgICByZXR1cm4gbmV3IGIyRWRnZUFuZFBvbHlnb25Db250YWN0KCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIERlc3Ryb3koY29udGFjdDogYjJDb250YWN0KTogdm9pZCB7XG4gIH1cblxuICBwdWJsaWMgRXZhbHVhdGUobWFuaWZvbGQ6IGIyTWFuaWZvbGQsIHhmQTogYjJUcmFuc2Zvcm0sIHhmQjogYjJUcmFuc2Zvcm0pOiB2b2lkIHtcbiAgICBiMkNvbGxpZGVFZGdlQW5kUG9seWdvbihtYW5pZm9sZCwgdGhpcy5HZXRTaGFwZUEoKSwgeGZBLCB0aGlzLkdldFNoYXBlQigpLCB4ZkIpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFJQTtBQUVBO0FBQUE7QUFBQTs7QUFXQTtBQVZBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBWEE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_edge_polygon_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_fixture.ts":
/*!******************************************!*\
  !*** ./src/box2d/dynamics/b2_fixture.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Fixture = exports.b2FixtureProxy = exports.b2FixtureDef = exports.b2Filter = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_shape_1 = __webpack_require__(/*! ../collision/b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2Filter = (function () {\n    function b2Filter() {\n        this.categoryBits = 0x0001;\n        this.maskBits = 0xFFFF;\n        this.groupIndex = 0;\n    }\n    b2Filter.prototype.Clone = function () {\n        return new b2Filter().Copy(this);\n    };\n    b2Filter.prototype.Copy = function (other) {\n        this.categoryBits = other.categoryBits;\n        this.maskBits = other.maskBits;\n        this.groupIndex = other.groupIndex || 0;\n        return this;\n    };\n    b2Filter.DEFAULT = new b2Filter();\n    return b2Filter;\n}());\nexports.b2Filter = b2Filter;\nvar b2FixtureDef = (function () {\n    function b2FixtureDef() {\n        this.userData = null;\n        this.friction = 0.2;\n        this.restitution = 0;\n        this.restitutionThreshold = 1.0 * b2_settings_1.b2_lengthUnitsPerMeter;\n        this.density = 0;\n        this.isSensor = false;\n        this.filter = new b2Filter();\n    }\n    return b2FixtureDef;\n}());\nexports.b2FixtureDef = b2FixtureDef;\nvar b2FixtureProxy = (function () {\n    function b2FixtureProxy(fixture, childIndex) {\n        this.aabb = new b2_collision_1.b2AABB();\n        this.childIndex = 0;\n        this.fixture = fixture;\n        this.childIndex = childIndex;\n        this.fixture.m_shape.ComputeAABB(this.aabb, this.fixture.m_body.GetTransform(), childIndex);\n        this.treeNode = this.fixture.m_body.m_world.m_contactManager.m_broadPhase.CreateProxy(this.aabb, this);\n    }\n    b2FixtureProxy.prototype.Reset = function () {\n        this.fixture.m_body.m_world.m_contactManager.m_broadPhase.DestroyProxy(this.treeNode);\n    };\n    b2FixtureProxy.prototype.Touch = function () {\n        this.fixture.m_body.m_world.m_contactManager.m_broadPhase.TouchProxy(this.treeNode);\n    };\n    b2FixtureProxy.prototype.Synchronize = function (transform1, transform2) {\n        if (transform1 === transform2) {\n            this.fixture.m_shape.ComputeAABB(this.aabb, transform1, this.childIndex);\n            this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(this.treeNode, this.aabb, b2_math_1.b2Vec2.ZERO);\n        }\n        else {\n            var aabb1 = b2FixtureProxy.Synchronize_s_aabb1;\n            var aabb2 = b2FixtureProxy.Synchronize_s_aabb2;\n            this.fixture.m_shape.ComputeAABB(aabb1, transform1, this.childIndex);\n            this.fixture.m_shape.ComputeAABB(aabb2, transform2, this.childIndex);\n            this.aabb.Combine2(aabb1, aabb2);\n            var displacement = b2FixtureProxy.Synchronize_s_displacement;\n            displacement.Copy(aabb2.GetCenter()).SelfSub(aabb1.GetCenter());\n            this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(this.treeNode, this.aabb, displacement);\n        }\n    };\n    b2FixtureProxy.Synchronize_s_aabb1 = new b2_collision_1.b2AABB();\n    b2FixtureProxy.Synchronize_s_aabb2 = new b2_collision_1.b2AABB();\n    b2FixtureProxy.Synchronize_s_displacement = new b2_math_1.b2Vec2();\n    return b2FixtureProxy;\n}());\nexports.b2FixtureProxy = b2FixtureProxy;\nvar b2Fixture = (function () {\n    function b2Fixture(body, def) {\n        this.m_density = 0;\n        this.m_next = null;\n        this.m_friction = 0;\n        this.m_restitution = 0;\n        this.m_restitutionThreshold = 1.0 * b2_settings_1.b2_lengthUnitsPerMeter;\n        this.m_proxies = [];\n        this.m_filter = new b2Filter();\n        this.m_isSensor = false;\n        this.m_userData = null;\n        this.m_body = body;\n        this.m_shape = def.shape.Clone();\n        this.m_userData = b2_settings_1.b2Maybe(def.userData, null);\n        this.m_friction = b2_settings_1.b2Maybe(def.friction, 0.2);\n        this.m_restitution = b2_settings_1.b2Maybe(def.restitution, 0);\n        this.m_restitutionThreshold = b2_settings_1.b2Maybe(def.restitutionThreshold, 0);\n        this.m_filter.Copy(b2_settings_1.b2Maybe(def.filter, b2Filter.DEFAULT));\n        this.m_isSensor = b2_settings_1.b2Maybe(def.isSensor, false);\n        this.m_density = b2_settings_1.b2Maybe(def.density, 0);\n    }\n    Object.defineProperty(b2Fixture.prototype, \"m_proxyCount\", {\n        get: function () { return this.m_proxies.length; },\n        enumerable: false,\n        configurable: true\n    });\n    b2Fixture.prototype.Reset = function () {\n    };\n    b2Fixture.prototype.GetType = function () {\n        return this.m_shape.GetType();\n    };\n    b2Fixture.prototype.GetShape = function () {\n        return this.m_shape;\n    };\n    b2Fixture.prototype.SetSensor = function (sensor) {\n        if (sensor !== this.m_isSensor) {\n            this.m_body.SetAwake(true);\n            this.m_isSensor = sensor;\n        }\n    };\n    b2Fixture.prototype.IsSensor = function () {\n        return this.m_isSensor;\n    };\n    b2Fixture.prototype.SetFilterData = function (filter) {\n        this.m_filter.Copy(filter);\n        this.Refilter();\n    };\n    b2Fixture.prototype.GetFilterData = function () {\n        return this.m_filter;\n    };\n    b2Fixture.prototype.Refilter = function () {\n        var edge = this.m_body.GetContactList();\n        while (edge) {\n            var contact = edge.contact;\n            var fixtureA = contact.GetFixtureA();\n            var fixtureB = contact.GetFixtureB();\n            if (fixtureA === this || fixtureB === this) {\n                contact.FlagForFiltering();\n            }\n            edge = edge.next;\n        }\n        this.TouchProxies();\n    };\n    b2Fixture.prototype.GetBody = function () {\n        return this.m_body;\n    };\n    b2Fixture.prototype.GetNext = function () {\n        return this.m_next;\n    };\n    b2Fixture.prototype.GetUserData = function () {\n        return this.m_userData;\n    };\n    b2Fixture.prototype.SetUserData = function (data) {\n        this.m_userData = data;\n    };\n    b2Fixture.prototype.TestPoint = function (p) {\n        return this.m_shape.TestPoint(this.m_body.GetTransform(), p);\n    };\n    b2Fixture.prototype.ComputeDistance = function (p, normal, childIndex) {\n        return this.m_shape.ComputeDistance(this.m_body.GetTransform(), p, normal, childIndex);\n    };\n    b2Fixture.prototype.RayCast = function (output, input, childIndex) {\n        return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex);\n    };\n    b2Fixture.prototype.GetMassData = function (massData) {\n        if (massData === void 0) { massData = new b2_shape_1.b2MassData(); }\n        this.m_shape.ComputeMass(massData, this.m_density);\n        return massData;\n    };\n    b2Fixture.prototype.SetDensity = function (density) {\n        this.m_density = density;\n    };\n    b2Fixture.prototype.GetDensity = function () {\n        return this.m_density;\n    };\n    b2Fixture.prototype.GetFriction = function () {\n        return this.m_friction;\n    };\n    b2Fixture.prototype.SetFriction = function (friction) {\n        this.m_friction = friction;\n    };\n    b2Fixture.prototype.GetRestitution = function () {\n        return this.m_restitution;\n    };\n    b2Fixture.prototype.SetRestitution = function (restitution) {\n        this.m_restitution = restitution;\n    };\n    b2Fixture.prototype.GetRestitutionThreshold = function () {\n        return this.m_restitutionThreshold;\n    };\n    b2Fixture.prototype.SetRestitutionThreshold = function (threshold) {\n        this.m_restitutionThreshold = threshold;\n    };\n    b2Fixture.prototype.GetAABB = function (childIndex) {\n        return this.m_proxies[childIndex].aabb;\n    };\n    b2Fixture.prototype.Dump = function (log, bodyIndex) {\n        log(\"    const fd: b2FixtureDef = new b2FixtureDef();\\n\");\n        log(\"    fd.friction = %.15f;\\n\", this.m_friction);\n        log(\"    fd.restitution = %.15f;\\n\", this.m_restitution);\n        log(\"    fd.restitutionThreshold = %.15f;\\n\", this.m_restitutionThreshold);\n        log(\"    fd.density = %.15f;\\n\", this.m_density);\n        log(\"    fd.isSensor = %s;\\n\", (this.m_isSensor) ? (\"true\") : (\"false\"));\n        log(\"    fd.filter.categoryBits = %d;\\n\", this.m_filter.categoryBits);\n        log(\"    fd.filter.maskBits = %d;\\n\", this.m_filter.maskBits);\n        log(\"    fd.filter.groupIndex = %d;\\n\", this.m_filter.groupIndex);\n        this.m_shape.Dump(log);\n        log(\"\\n\");\n        log(\"    fd.shape = shape;\\n\");\n        log(\"\\n\");\n        log(\"    bodies[%d].CreateFixture(fd);\\n\", bodyIndex);\n    };\n    b2Fixture.prototype.CreateProxies = function () {\n        if (this.m_proxies.length !== 0) {\n            throw new Error();\n        }\n        for (var i = 0; i < this.m_shape.GetChildCount(); ++i) {\n            this.m_proxies[i] = new b2FixtureProxy(this, i);\n        }\n    };\n    b2Fixture.prototype.DestroyProxies = function () {\n        for (var _i = 0, _a = this.m_proxies; _i < _a.length; _i++) {\n            var proxy = _a[_i];\n            proxy.Reset();\n        }\n        this.m_proxies.length = 0;\n    };\n    b2Fixture.prototype.TouchProxies = function () {\n        for (var _i = 0, _a = this.m_proxies; _i < _a.length; _i++) {\n            var proxy = _a[_i];\n            proxy.Touch();\n        }\n    };\n    b2Fixture.prototype.SynchronizeProxies = function (transform1, transform2) {\n        for (var _i = 0, _a = this.m_proxies; _i < _a.length; _i++) {\n            var proxy = _a[_i];\n            proxy.Synchronize(transform1, transform2);\n        }\n    };\n    return b2Fixture;\n}());\nexports.b2Fixture = b2Fixture;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_fixture.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_friction_joint.ts":
/*!*************************************************!*\
  !*** ./src/box2d/dynamics/b2_friction_joint.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2FrictionJoint = exports.b2FrictionJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2FrictionJointDef = (function (_super) {\n    __extends(b2FrictionJointDef, _super);\n    function b2FrictionJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_frictionJoint) || this;\n        _this.localAnchorA = new b2_math_1.b2Vec2();\n        _this.localAnchorB = new b2_math_1.b2Vec2();\n        _this.maxForce = 0;\n        _this.maxTorque = 0;\n        return _this;\n    }\n    b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n    };\n    return b2FrictionJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2FrictionJointDef = b2FrictionJointDef;\nvar b2FrictionJoint = (function (_super) {\n    __extends(b2FrictionJoint, _super);\n    function b2FrictionJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_linearImpulse = new b2_math_1.b2Vec2();\n        _this.m_angularImpulse = 0;\n        _this.m_maxForce = 0;\n        _this.m_maxTorque = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_linearMass = new b2_math_1.b2Mat22();\n        _this.m_angularMass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_K = new b2_math_1.b2Mat22();\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, b2_math_1.b2Vec2.ZERO));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, b2_math_1.b2Vec2.ZERO));\n        _this.m_linearImpulse.SetZero();\n        _this.m_maxForce = b2_settings_1.b2Maybe(def.maxForce, 0);\n        _this.m_maxTorque = b2_settings_1.b2Maybe(def.maxTorque, 0);\n        _this.m_linearMass.SetZero();\n        return _this;\n    }\n    b2FrictionJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var K = this.m_K;\n        K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n        K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n        K.ey.x = K.ex.y;\n        K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n        K.GetInverse(this.m_linearMass);\n        this.m_angularMass = iA + iB;\n        if (this.m_angularMass > 0) {\n            this.m_angularMass = 1 / this.m_angularMass;\n        }\n        if (data.step.warmStarting) {\n            this.m_linearImpulse.SelfMul(data.step.dtRatio);\n            this.m_angularImpulse *= data.step.dtRatio;\n            var P = this.m_linearImpulse;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * (b2_math_1.b2Vec2.CrossVV(this.m_rA, P) + this.m_angularImpulse);\n            vB.SelfMulAdd(mB, P);\n            wB += iB * (b2_math_1.b2Vec2.CrossVV(this.m_rB, P) + this.m_angularImpulse);\n        }\n        else {\n            this.m_linearImpulse.SetZero();\n            this.m_angularImpulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2FrictionJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var h = data.step.dt;\n        {\n            var Cdot = wB - wA;\n            var impulse = (-this.m_angularMass * Cdot);\n            var oldImpulse = this.m_angularImpulse;\n            var maxImpulse = h * this.m_maxTorque;\n            this.m_angularImpulse = b2_math_1.b2Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);\n            impulse = this.m_angularImpulse - oldImpulse;\n            wA -= iA * impulse;\n            wB += iB * impulse;\n        }\n        {\n            var Cdot_v2 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2_math_1.b2Vec2.s_t1), b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2);\n            var impulseV = b2_math_1.b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2FrictionJoint.SolveVelocityConstraints_s_impulseV).SelfNeg();\n            var oldImpulseV = b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);\n            this.m_linearImpulse.SelfAdd(impulseV);\n            var maxImpulse = h * this.m_maxForce;\n            if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\n                this.m_linearImpulse.Normalize();\n                this.m_linearImpulse.SelfMul(maxImpulse);\n            }\n            b2_math_1.b2Vec2.SubVV(this.m_linearImpulse, oldImpulseV, impulseV);\n            vA.SelfMulSub(mA, impulseV);\n            wA -= iA * b2_math_1.b2Vec2.CrossVV(this.m_rA, impulseV);\n            vB.SelfMulAdd(mB, impulseV);\n            wB += iB * b2_math_1.b2Vec2.CrossVV(this.m_rB, impulseV);\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2FrictionJoint.prototype.SolvePositionConstraints = function (data) {\n        return true;\n    };\n    b2FrictionJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2FrictionJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2FrictionJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * this.m_linearImpulse.x;\n        out.y = inv_dt * this.m_linearImpulse.y;\n        return out;\n    };\n    b2FrictionJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * this.m_angularImpulse;\n    };\n    b2FrictionJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\n    b2FrictionJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\n    b2FrictionJoint.prototype.SetMaxForce = function (force) {\n        this.m_maxForce = force;\n    };\n    b2FrictionJoint.prototype.GetMaxForce = function () {\n        return this.m_maxForce;\n    };\n    b2FrictionJoint.prototype.SetMaxTorque = function (torque) {\n        this.m_maxTorque = torque;\n    };\n    b2FrictionJoint.prototype.GetMaxTorque = function () {\n        return this.m_maxTorque;\n    };\n    b2FrictionJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2FrictionJointDef = new b2FrictionJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.maxForce = %.15f;\\n\", this.m_maxForce);\n        log(\"  jd.maxTorque = %.15f;\\n\", this.m_maxTorque);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2_math_1.b2Vec2();\n    b2FrictionJoint.SolveVelocityConstraints_s_impulseV = new b2_math_1.b2Vec2();\n    b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV = new b2_math_1.b2Vec2();\n    return b2FrictionJoint;\n}(b2_joint_1.b2Joint));\nexports.b2FrictionJoint = b2FrictionJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_friction_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_gear_joint.ts":
/*!*********************************************!*\
  !*** ./src/box2d/dynamics/b2_gear_joint.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2GearJoint = exports.b2GearJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2GearJointDef = (function (_super) {\n    __extends(b2GearJointDef, _super);\n    function b2GearJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_gearJoint) || this;\n        _this.ratio = 1;\n        return _this;\n    }\n    return b2GearJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2GearJointDef = b2GearJointDef;\nvar b2GearJoint = (function (_super) {\n    __extends(b2GearJoint, _super);\n    function b2GearJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_typeA = b2_joint_1.b2JointType.e_unknownJoint;\n        _this.m_typeB = b2_joint_1.b2JointType.e_unknownJoint;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_localAnchorC = new b2_math_1.b2Vec2();\n        _this.m_localAnchorD = new b2_math_1.b2Vec2();\n        _this.m_localAxisC = new b2_math_1.b2Vec2();\n        _this.m_localAxisD = new b2_math_1.b2Vec2();\n        _this.m_referenceAngleA = 0;\n        _this.m_referenceAngleB = 0;\n        _this.m_constant = 0;\n        _this.m_ratio = 0;\n        _this.m_impulse = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_indexC = 0;\n        _this.m_indexD = 0;\n        _this.m_lcA = new b2_math_1.b2Vec2();\n        _this.m_lcB = new b2_math_1.b2Vec2();\n        _this.m_lcC = new b2_math_1.b2Vec2();\n        _this.m_lcD = new b2_math_1.b2Vec2();\n        _this.m_mA = 0;\n        _this.m_mB = 0;\n        _this.m_mC = 0;\n        _this.m_mD = 0;\n        _this.m_iA = 0;\n        _this.m_iB = 0;\n        _this.m_iC = 0;\n        _this.m_iD = 0;\n        _this.m_JvAC = new b2_math_1.b2Vec2();\n        _this.m_JvBD = new b2_math_1.b2Vec2();\n        _this.m_JwA = 0;\n        _this.m_JwB = 0;\n        _this.m_JwC = 0;\n        _this.m_JwD = 0;\n        _this.m_mass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_qC = new b2_math_1.b2Rot();\n        _this.m_qD = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_lalcC = new b2_math_1.b2Vec2();\n        _this.m_lalcD = new b2_math_1.b2Vec2();\n        _this.m_joint1 = def.joint1;\n        _this.m_joint2 = def.joint2;\n        _this.m_typeA = _this.m_joint1.GetType();\n        _this.m_typeB = _this.m_joint2.GetType();\n        var coordinateA, coordinateB;\n        _this.m_bodyC = _this.m_joint1.GetBodyA();\n        _this.m_bodyA = _this.m_joint1.GetBodyB();\n        var xfA = _this.m_bodyA.m_xf;\n        var aA = _this.m_bodyA.m_sweep.a;\n        var xfC = _this.m_bodyC.m_xf;\n        var aC = _this.m_bodyC.m_sweep.a;\n        if (_this.m_typeA === b2_joint_1.b2JointType.e_revoluteJoint) {\n            var revolute = def.joint1;\n            _this.m_localAnchorC.Copy(revolute.m_localAnchorA);\n            _this.m_localAnchorA.Copy(revolute.m_localAnchorB);\n            _this.m_referenceAngleA = revolute.m_referenceAngle;\n            _this.m_localAxisC.SetZero();\n            coordinateA = aA - aC - _this.m_referenceAngleA;\n        }\n        else {\n            var prismatic = def.joint1;\n            _this.m_localAnchorC.Copy(prismatic.m_localAnchorA);\n            _this.m_localAnchorA.Copy(prismatic.m_localAnchorB);\n            _this.m_referenceAngleA = prismatic.m_referenceAngle;\n            _this.m_localAxisC.Copy(prismatic.m_localXAxisA);\n            var pC = _this.m_localAnchorC;\n            var pA = b2_math_1.b2Rot.MulTRV(xfC.q, b2_math_1.b2Vec2.AddVV(b2_math_1.b2Rot.MulRV(xfA.q, _this.m_localAnchorA, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(xfA.p, xfC.p, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0);\n            coordinateA = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pA, pC, b2_math_1.b2Vec2.s_t0), _this.m_localAxisC);\n        }\n        _this.m_bodyD = _this.m_joint2.GetBodyA();\n        _this.m_bodyB = _this.m_joint2.GetBodyB();\n        var xfB = _this.m_bodyB.m_xf;\n        var aB = _this.m_bodyB.m_sweep.a;\n        var xfD = _this.m_bodyD.m_xf;\n        var aD = _this.m_bodyD.m_sweep.a;\n        if (_this.m_typeB === b2_joint_1.b2JointType.e_revoluteJoint) {\n            var revolute = def.joint2;\n            _this.m_localAnchorD.Copy(revolute.m_localAnchorA);\n            _this.m_localAnchorB.Copy(revolute.m_localAnchorB);\n            _this.m_referenceAngleB = revolute.m_referenceAngle;\n            _this.m_localAxisD.SetZero();\n            coordinateB = aB - aD - _this.m_referenceAngleB;\n        }\n        else {\n            var prismatic = def.joint2;\n            _this.m_localAnchorD.Copy(prismatic.m_localAnchorA);\n            _this.m_localAnchorB.Copy(prismatic.m_localAnchorB);\n            _this.m_referenceAngleB = prismatic.m_referenceAngle;\n            _this.m_localAxisD.Copy(prismatic.m_localXAxisA);\n            var pD = _this.m_localAnchorD;\n            var pB = b2_math_1.b2Rot.MulTRV(xfD.q, b2_math_1.b2Vec2.AddVV(b2_math_1.b2Rot.MulRV(xfB.q, _this.m_localAnchorB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(xfB.p, xfD.p, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0);\n            coordinateB = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pB, pD, b2_math_1.b2Vec2.s_t0), _this.m_localAxisD);\n        }\n        _this.m_ratio = b2_settings_1.b2Maybe(def.ratio, 1);\n        _this.m_constant = coordinateA + _this.m_ratio * coordinateB;\n        _this.m_impulse = 0;\n        return _this;\n    }\n    b2GearJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_indexC = this.m_bodyC.m_islandIndex;\n        this.m_indexD = this.m_bodyD.m_islandIndex;\n        this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);\n        this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);\n        this.m_mA = this.m_bodyA.m_invMass;\n        this.m_mB = this.m_bodyB.m_invMass;\n        this.m_mC = this.m_bodyC.m_invMass;\n        this.m_mD = this.m_bodyD.m_invMass;\n        this.m_iA = this.m_bodyA.m_invI;\n        this.m_iB = this.m_bodyB.m_invI;\n        this.m_iC = this.m_bodyC.m_invI;\n        this.m_iD = this.m_bodyD.m_invI;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var aC = data.positions[this.m_indexC].a;\n        var vC = data.velocities[this.m_indexC].v;\n        var wC = data.velocities[this.m_indexC].w;\n        var aD = data.positions[this.m_indexD].a;\n        var vD = data.velocities[this.m_indexD].v;\n        var wD = data.velocities[this.m_indexD].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);\n        this.m_mass = 0;\n        if (this.m_typeA === b2_joint_1.b2JointType.e_revoluteJoint) {\n            this.m_JvAC.SetZero();\n            this.m_JwA = 1;\n            this.m_JwC = 1;\n            this.m_mass += this.m_iA + this.m_iC;\n        }\n        else {\n            var u = b2_math_1.b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.InitVelocityConstraints_s_u);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC);\n            var rC = b2_math_1.b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.InitVelocityConstraints_s_rC);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA);\n            var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.InitVelocityConstraints_s_rA);\n            this.m_JvAC.Copy(u);\n            this.m_JwC = b2_math_1.b2Vec2.CrossVV(rC, u);\n            this.m_JwA = b2_math_1.b2Vec2.CrossVV(rA, u);\n            this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n        }\n        if (this.m_typeB === b2_joint_1.b2JointType.e_revoluteJoint) {\n            this.m_JvBD.SetZero();\n            this.m_JwB = this.m_ratio;\n            this.m_JwD = this.m_ratio;\n            this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n        }\n        else {\n            var u = b2_math_1.b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.InitVelocityConstraints_s_u);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD);\n            var rD = b2_math_1.b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.InitVelocityConstraints_s_rD);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB);\n            var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.InitVelocityConstraints_s_rB);\n            b2_math_1.b2Vec2.MulSV(this.m_ratio, u, this.m_JvBD);\n            this.m_JwD = this.m_ratio * b2_math_1.b2Vec2.CrossVV(rD, u);\n            this.m_JwB = this.m_ratio * b2_math_1.b2Vec2.CrossVV(rB, u);\n            this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n        }\n        this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;\n        if (data.step.warmStarting) {\n            vA.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC);\n            wA += this.m_iA * this.m_impulse * this.m_JwA;\n            vB.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD);\n            wB += this.m_iB * this.m_impulse * this.m_JwB;\n            vC.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC);\n            wC -= this.m_iC * this.m_impulse * this.m_JwC;\n            vD.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD);\n            wD -= this.m_iD * this.m_impulse * this.m_JwD;\n        }\n        else {\n            this.m_impulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n        data.velocities[this.m_indexC].w = wC;\n        data.velocities[this.m_indexD].w = wD;\n    };\n    b2GearJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var vC = data.velocities[this.m_indexC].v;\n        var wC = data.velocities[this.m_indexC].w;\n        var vD = data.velocities[this.m_indexD].v;\n        var wD = data.velocities[this.m_indexD].w;\n        var Cdot = b2_math_1.b2Vec2.DotVV(this.m_JvAC, b2_math_1.b2Vec2.SubVV(vA, vC, b2_math_1.b2Vec2.s_t0)) +\n            b2_math_1.b2Vec2.DotVV(this.m_JvBD, b2_math_1.b2Vec2.SubVV(vB, vD, b2_math_1.b2Vec2.s_t0));\n        Cdot += (this.m_JwA * wA - this.m_JwC * wC) + (this.m_JwB * wB - this.m_JwD * wD);\n        var impulse = -this.m_mass * Cdot;\n        this.m_impulse += impulse;\n        vA.SelfMulAdd((this.m_mA * impulse), this.m_JvAC);\n        wA += this.m_iA * impulse * this.m_JwA;\n        vB.SelfMulAdd((this.m_mB * impulse), this.m_JvBD);\n        wB += this.m_iB * impulse * this.m_JwB;\n        vC.SelfMulSub((this.m_mC * impulse), this.m_JvAC);\n        wC -= this.m_iC * impulse * this.m_JwC;\n        vD.SelfMulSub((this.m_mD * impulse), this.m_JvBD);\n        wD -= this.m_iD * impulse * this.m_JwD;\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n        data.velocities[this.m_indexC].w = wC;\n        data.velocities[this.m_indexD].w = wD;\n    };\n    b2GearJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var cC = data.positions[this.m_indexC].c;\n        var aC = data.positions[this.m_indexC].a;\n        var cD = data.positions[this.m_indexD].c;\n        var aD = data.positions[this.m_indexD].a;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);\n        var linearError = 0;\n        var coordinateA, coordinateB;\n        var JvAC = this.m_JvAC, JvBD = this.m_JvBD;\n        var JwA, JwB, JwC, JwD;\n        var mass = 0;\n        if (this.m_typeA === b2_joint_1.b2JointType.e_revoluteJoint) {\n            JvAC.SetZero();\n            JwA = 1;\n            JwC = 1;\n            mass += this.m_iA + this.m_iC;\n            coordinateA = aA - aC - this.m_referenceAngleA;\n        }\n        else {\n            var u = b2_math_1.b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.SolvePositionConstraints_s_u);\n            var rC = b2_math_1.b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.SolvePositionConstraints_s_rC);\n            var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.SolvePositionConstraints_s_rA);\n            JvAC.Copy(u);\n            JwC = b2_math_1.b2Vec2.CrossVV(rC, u);\n            JwA = b2_math_1.b2Vec2.CrossVV(rA, u);\n            mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n            var pC = this.m_lalcC;\n            var pA = b2_math_1.b2Rot.MulTRV(qC, b2_math_1.b2Vec2.AddVV(rA, b2_math_1.b2Vec2.SubVV(cA, cC, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0);\n            coordinateA = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pA, pC, b2_math_1.b2Vec2.s_t0), this.m_localAxisC);\n        }\n        if (this.m_typeB === b2_joint_1.b2JointType.e_revoluteJoint) {\n            JvBD.SetZero();\n            JwB = this.m_ratio;\n            JwD = this.m_ratio;\n            mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n            coordinateB = aB - aD - this.m_referenceAngleB;\n        }\n        else {\n            var u = b2_math_1.b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.SolvePositionConstraints_s_u);\n            var rD = b2_math_1.b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.SolvePositionConstraints_s_rD);\n            var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.SolvePositionConstraints_s_rB);\n            b2_math_1.b2Vec2.MulSV(this.m_ratio, u, JvBD);\n            JwD = this.m_ratio * b2_math_1.b2Vec2.CrossVV(rD, u);\n            JwB = this.m_ratio * b2_math_1.b2Vec2.CrossVV(rB, u);\n            mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * JwD * JwD + this.m_iB * JwB * JwB;\n            var pD = this.m_lalcD;\n            var pB = b2_math_1.b2Rot.MulTRV(qD, b2_math_1.b2Vec2.AddVV(rB, b2_math_1.b2Vec2.SubVV(cB, cD, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0);\n            coordinateB = b2_math_1.b2Vec2.DotVV(b2_math_1.b2Vec2.SubVV(pB, pD, b2_math_1.b2Vec2.s_t0), this.m_localAxisD);\n        }\n        var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant;\n        var impulse = 0;\n        if (mass > 0) {\n            impulse = -C / mass;\n        }\n        cA.SelfMulAdd(this.m_mA * impulse, JvAC);\n        aA += this.m_iA * impulse * JwA;\n        cB.SelfMulAdd(this.m_mB * impulse, JvBD);\n        aB += this.m_iB * impulse * JwB;\n        cC.SelfMulSub(this.m_mC * impulse, JvAC);\n        aC -= this.m_iC * impulse * JwC;\n        cD.SelfMulSub(this.m_mD * impulse, JvBD);\n        aD -= this.m_iD * impulse * JwD;\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        data.positions[this.m_indexC].a = aC;\n        data.positions[this.m_indexD].a = aD;\n        return linearError < b2_settings_1.b2_linearSlop;\n    };\n    b2GearJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2GearJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2GearJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        return b2_math_1.b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_JvAC, out);\n    };\n    b2GearJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * this.m_impulse * this.m_JwA;\n    };\n    b2GearJoint.prototype.GetJoint1 = function () { return this.m_joint1; };\n    b2GearJoint.prototype.GetJoint2 = function () { return this.m_joint2; };\n    b2GearJoint.prototype.GetRatio = function () {\n        return this.m_ratio;\n    };\n    b2GearJoint.prototype.SetRatio = function (ratio) {\n        this.m_ratio = ratio;\n    };\n    b2GearJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        var index1 = this.m_joint1.m_index;\n        var index2 = this.m_joint2.m_index;\n        log(\"  const jd: b2GearJointDef = new b2GearJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.joint1 = joints[%d];\\n\", index1);\n        log(\"  jd.joint2 = joints[%d];\\n\", index2);\n        log(\"  jd.ratio = %.15f;\\n\", this.m_ratio);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2GearJoint.InitVelocityConstraints_s_u = new b2_math_1.b2Vec2();\n    b2GearJoint.InitVelocityConstraints_s_rA = new b2_math_1.b2Vec2();\n    b2GearJoint.InitVelocityConstraints_s_rB = new b2_math_1.b2Vec2();\n    b2GearJoint.InitVelocityConstraints_s_rC = new b2_math_1.b2Vec2();\n    b2GearJoint.InitVelocityConstraints_s_rD = new b2_math_1.b2Vec2();\n    b2GearJoint.SolvePositionConstraints_s_u = new b2_math_1.b2Vec2();\n    b2GearJoint.SolvePositionConstraints_s_rA = new b2_math_1.b2Vec2();\n    b2GearJoint.SolvePositionConstraints_s_rB = new b2_math_1.b2Vec2();\n    b2GearJoint.SolvePositionConstraints_s_rC = new b2_math_1.b2Vec2();\n    b2GearJoint.SolvePositionConstraints_s_rD = new b2_math_1.b2Vec2();\n    return b2GearJoint;\n}(b2_joint_1.b2Joint));\nexports.b2GearJoint = b2GearJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_gear_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_island.ts":
/*!*****************************************!*\
  !*** ./src/box2d/dynamics/b2_island.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Island = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_settings_2 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_settings_3 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_settings_4 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_timer_1 = __webpack_require__(/*! ../common/b2_timer */ \"./src/box2d/common/b2_timer.ts\");\nvar b2_contact_solver_1 = __webpack_require__(/*! ./b2_contact_solver */ \"./src/box2d/dynamics/b2_contact_solver.ts\");\nvar b2_body_1 = __webpack_require__(/*! ./b2_body */ \"./src/box2d/dynamics/b2_body.ts\");\nvar b2_time_step_1 = __webpack_require__(/*! ./b2_time_step */ \"./src/box2d/dynamics/b2_time_step.ts\");\nvar b2_world_callbacks_1 = __webpack_require__(/*! ./b2_world_callbacks */ \"./src/box2d/dynamics/b2_world_callbacks.ts\");\nvar b2Island = (function () {\n    function b2Island() {\n        this.m_bodies = [];\n        this.m_contacts = [];\n        this.m_joints = [];\n        this.m_positions = b2_time_step_1.b2Position.MakeArray(1024);\n        this.m_velocities = b2_time_step_1.b2Velocity.MakeArray(1024);\n        this.m_bodyCount = 0;\n        this.m_jointCount = 0;\n        this.m_contactCount = 0;\n        this.m_bodyCapacity = 0;\n        this.m_contactCapacity = 0;\n        this.m_jointCapacity = 0;\n    }\n    b2Island.prototype.Initialize = function (bodyCapacity, contactCapacity, jointCapacity, listener) {\n        this.m_bodyCapacity = bodyCapacity;\n        this.m_contactCapacity = contactCapacity;\n        this.m_jointCapacity = jointCapacity;\n        this.m_bodyCount = 0;\n        this.m_contactCount = 0;\n        this.m_jointCount = 0;\n        this.m_listener = listener;\n        if (this.m_positions.length < bodyCapacity) {\n            var new_length = b2_math_1.b2Max(this.m_positions.length * 2, bodyCapacity);\n            while (this.m_positions.length < new_length) {\n                this.m_positions[this.m_positions.length] = new b2_time_step_1.b2Position();\n            }\n        }\n        if (this.m_velocities.length < bodyCapacity) {\n            var new_length = b2_math_1.b2Max(this.m_velocities.length * 2, bodyCapacity);\n            while (this.m_velocities.length < new_length) {\n                this.m_velocities[this.m_velocities.length] = new b2_time_step_1.b2Velocity();\n            }\n        }\n    };\n    b2Island.prototype.Clear = function () {\n        this.m_bodyCount = 0;\n        this.m_contactCount = 0;\n        this.m_jointCount = 0;\n    };\n    b2Island.prototype.AddBody = function (body) {\n        body.m_islandIndex = this.m_bodyCount;\n        this.m_bodies[this.m_bodyCount++] = body;\n    };\n    b2Island.prototype.AddContact = function (contact) {\n        this.m_contacts[this.m_contactCount++] = contact;\n    };\n    b2Island.prototype.AddJoint = function (joint) {\n        this.m_joints[this.m_jointCount++] = joint;\n    };\n    b2Island.prototype.Solve = function (profile, step, gravity, allowSleep) {\n        var timer = b2Island.s_timer.Reset();\n        var h = step.dt;\n        for (var i = 0; i < this.m_bodyCount; ++i) {\n            var b = this.m_bodies[i];\n            this.m_positions[i].c.Copy(b.m_sweep.c);\n            var a = b.m_sweep.a;\n            var v = this.m_velocities[i].v.Copy(b.m_linearVelocity);\n            var w = b.m_angularVelocity;\n            b.m_sweep.c0.Copy(b.m_sweep.c);\n            b.m_sweep.a0 = b.m_sweep.a;\n            if (b.m_type === b2_body_1.b2BodyType.b2_dynamicBody) {\n                v.x += h * b.m_invMass * (b.m_gravityScale * b.m_mass * gravity.x + b.m_force.x);\n                v.y += h * b.m_invMass * (b.m_gravityScale * b.m_mass * gravity.y + b.m_force.y);\n                w += h * b.m_invI * b.m_torque;\n                v.SelfMul(1.0 / (1.0 + h * b.m_linearDamping));\n                w *= 1.0 / (1.0 + h * b.m_angularDamping);\n            }\n            this.m_positions[i].a = a;\n            this.m_velocities[i].w = w;\n        }\n        timer.Reset();\n        var solverData = b2Island.s_solverData;\n        solverData.step.Copy(step);\n        solverData.positions = this.m_positions;\n        solverData.velocities = this.m_velocities;\n        var contactSolverDef = b2Island.s_contactSolverDef;\n        contactSolverDef.step.Copy(step);\n        contactSolverDef.contacts = this.m_contacts;\n        contactSolverDef.count = this.m_contactCount;\n        contactSolverDef.positions = this.m_positions;\n        contactSolverDef.velocities = this.m_velocities;\n        var contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);\n        contactSolver.InitializeVelocityConstraints();\n        if (step.warmStarting) {\n            contactSolver.WarmStart();\n        }\n        for (var i = 0; i < this.m_jointCount; ++i) {\n            this.m_joints[i].InitVelocityConstraints(solverData);\n        }\n        profile.solveInit = timer.GetMilliseconds();\n        timer.Reset();\n        for (var i = 0; i < step.velocityIterations; ++i) {\n            for (var j = 0; j < this.m_jointCount; ++j) {\n                this.m_joints[j].SolveVelocityConstraints(solverData);\n            }\n            contactSolver.SolveVelocityConstraints();\n        }\n        contactSolver.StoreImpulses();\n        profile.solveVelocity = timer.GetMilliseconds();\n        for (var i = 0; i < this.m_bodyCount; ++i) {\n            var c = this.m_positions[i].c;\n            var a = this.m_positions[i].a;\n            var v = this.m_velocities[i].v;\n            var w = this.m_velocities[i].w;\n            var translation = b2_math_1.b2Vec2.MulSV(h, v, b2Island.s_translation);\n            if (b2_math_1.b2Vec2.DotVV(translation, translation) > b2_settings_2.b2_maxTranslationSquared) {\n                var ratio = b2_settings_2.b2_maxTranslation / translation.Length();\n                v.SelfMul(ratio);\n            }\n            var rotation = h * w;\n            if (rotation * rotation > b2_settings_3.b2_maxRotationSquared) {\n                var ratio = b2_settings_3.b2_maxRotation / b2_math_1.b2Abs(rotation);\n                w *= ratio;\n            }\n            c.x += h * v.x;\n            c.y += h * v.y;\n            a += h * w;\n            this.m_positions[i].a = a;\n            this.m_velocities[i].w = w;\n        }\n        timer.Reset();\n        var positionSolved = false;\n        for (var i = 0; i < step.positionIterations; ++i) {\n            var contactsOkay = contactSolver.SolvePositionConstraints();\n            var jointsOkay = true;\n            for (var j = 0; j < this.m_jointCount; ++j) {\n                var jointOkay = this.m_joints[j].SolvePositionConstraints(solverData);\n                jointsOkay = jointsOkay && jointOkay;\n            }\n            if (contactsOkay && jointsOkay) {\n                positionSolved = true;\n                break;\n            }\n        }\n        for (var i = 0; i < this.m_bodyCount; ++i) {\n            var body = this.m_bodies[i];\n            body.m_sweep.c.Copy(this.m_positions[i].c);\n            body.m_sweep.a = this.m_positions[i].a;\n            body.m_linearVelocity.Copy(this.m_velocities[i].v);\n            body.m_angularVelocity = this.m_velocities[i].w;\n            body.SynchronizeTransform();\n        }\n        profile.solvePosition = timer.GetMilliseconds();\n        this.Report(contactSolver.m_velocityConstraints);\n        if (allowSleep) {\n            var minSleepTime = b2_settings_1.b2_maxFloat;\n            var linTolSqr = b2_settings_4.b2_linearSleepTolerance * b2_settings_4.b2_linearSleepTolerance;\n            var angTolSqr = b2_settings_4.b2_angularSleepTolerance * b2_settings_4.b2_angularSleepTolerance;\n            for (var i = 0; i < this.m_bodyCount; ++i) {\n                var b = this.m_bodies[i];\n                if (b.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n                    continue;\n                }\n                if (!b.m_autoSleepFlag ||\n                    b.m_angularVelocity * b.m_angularVelocity > angTolSqr ||\n                    b2_math_1.b2Vec2.DotVV(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {\n                    b.m_sleepTime = 0;\n                    minSleepTime = 0;\n                }\n                else {\n                    b.m_sleepTime += h;\n                    minSleepTime = b2_math_1.b2Min(minSleepTime, b.m_sleepTime);\n                }\n            }\n            if (minSleepTime >= b2_settings_1.b2_timeToSleep && positionSolved) {\n                for (var i = 0; i < this.m_bodyCount; ++i) {\n                    var b = this.m_bodies[i];\n                    b.SetAwake(false);\n                }\n            }\n        }\n    };\n    b2Island.prototype.SolveTOI = function (subStep, toiIndexA, toiIndexB) {\n        for (var i = 0; i < this.m_bodyCount; ++i) {\n            var b = this.m_bodies[i];\n            this.m_positions[i].c.Copy(b.m_sweep.c);\n            this.m_positions[i].a = b.m_sweep.a;\n            this.m_velocities[i].v.Copy(b.m_linearVelocity);\n            this.m_velocities[i].w = b.m_angularVelocity;\n        }\n        var contactSolverDef = b2Island.s_contactSolverDef;\n        contactSolverDef.contacts = this.m_contacts;\n        contactSolverDef.count = this.m_contactCount;\n        contactSolverDef.step.Copy(subStep);\n        contactSolverDef.positions = this.m_positions;\n        contactSolverDef.velocities = this.m_velocities;\n        var contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);\n        for (var i = 0; i < subStep.positionIterations; ++i) {\n            var contactsOkay = contactSolver.SolveTOIPositionConstraints(toiIndexA, toiIndexB);\n            if (contactsOkay) {\n                break;\n            }\n        }\n        this.m_bodies[toiIndexA].m_sweep.c0.Copy(this.m_positions[toiIndexA].c);\n        this.m_bodies[toiIndexA].m_sweep.a0 = this.m_positions[toiIndexA].a;\n        this.m_bodies[toiIndexB].m_sweep.c0.Copy(this.m_positions[toiIndexB].c);\n        this.m_bodies[toiIndexB].m_sweep.a0 = this.m_positions[toiIndexB].a;\n        contactSolver.InitializeVelocityConstraints();\n        for (var i = 0; i < subStep.velocityIterations; ++i) {\n            contactSolver.SolveVelocityConstraints();\n        }\n        var h = subStep.dt;\n        for (var i = 0; i < this.m_bodyCount; ++i) {\n            var c = this.m_positions[i].c;\n            var a = this.m_positions[i].a;\n            var v = this.m_velocities[i].v;\n            var w = this.m_velocities[i].w;\n            var translation = b2_math_1.b2Vec2.MulSV(h, v, b2Island.s_translation);\n            if (b2_math_1.b2Vec2.DotVV(translation, translation) > b2_settings_2.b2_maxTranslationSquared) {\n                var ratio = b2_settings_2.b2_maxTranslation / translation.Length();\n                v.SelfMul(ratio);\n            }\n            var rotation = h * w;\n            if (rotation * rotation > b2_settings_3.b2_maxRotationSquared) {\n                var ratio = b2_settings_3.b2_maxRotation / b2_math_1.b2Abs(rotation);\n                w *= ratio;\n            }\n            c.SelfMulAdd(h, v);\n            a += h * w;\n            this.m_positions[i].a = a;\n            this.m_velocities[i].w = w;\n            var body = this.m_bodies[i];\n            body.m_sweep.c.Copy(c);\n            body.m_sweep.a = a;\n            body.m_linearVelocity.Copy(v);\n            body.m_angularVelocity = w;\n            body.SynchronizeTransform();\n        }\n        this.Report(contactSolver.m_velocityConstraints);\n    };\n    b2Island.prototype.Report = function (constraints) {\n        if (this.m_listener === null) {\n            return;\n        }\n        for (var i = 0; i < this.m_contactCount; ++i) {\n            var c = this.m_contacts[i];\n            if (!c) {\n                continue;\n            }\n            var vc = constraints[i];\n            var impulse = b2Island.s_impulse;\n            impulse.count = vc.pointCount;\n            for (var j = 0; j < vc.pointCount; ++j) {\n                impulse.normalImpulses[j] = vc.points[j].normalImpulse;\n                impulse.tangentImpulses[j] = vc.points[j].tangentImpulse;\n            }\n            this.m_listener.PostSolve(c, impulse);\n        }\n    };\n    b2Island.s_timer = new b2_timer_1.b2Timer();\n    b2Island.s_solverData = new b2_time_step_1.b2SolverData();\n    b2Island.s_contactSolverDef = new b2_contact_solver_1.b2ContactSolverDef();\n    b2Island.s_contactSolver = new b2_contact_solver_1.b2ContactSolver();\n    b2Island.s_translation = new b2_math_1.b2Vec2();\n    b2Island.s_impulse = new b2_world_callbacks_1.b2ContactImpulse();\n    return b2Island;\n}());\nexports.b2Island = b2Island;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_island.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_joint.ts":
/*!****************************************!*\
  !*** ./src/box2d/dynamics/b2_joint.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2Joint = exports.b2AngularStiffness = exports.b2LinearStiffness = exports.b2JointDef = exports.b2JointEdge = exports.b2Jacobian = exports.b2JointType = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2JointType;\n(function (b2JointType) {\n    b2JointType[b2JointType[\"e_unknownJoint\"] = 0] = \"e_unknownJoint\";\n    b2JointType[b2JointType[\"e_revoluteJoint\"] = 1] = \"e_revoluteJoint\";\n    b2JointType[b2JointType[\"e_prismaticJoint\"] = 2] = \"e_prismaticJoint\";\n    b2JointType[b2JointType[\"e_distanceJoint\"] = 3] = \"e_distanceJoint\";\n    b2JointType[b2JointType[\"e_pulleyJoint\"] = 4] = \"e_pulleyJoint\";\n    b2JointType[b2JointType[\"e_mouseJoint\"] = 5] = \"e_mouseJoint\";\n    b2JointType[b2JointType[\"e_gearJoint\"] = 6] = \"e_gearJoint\";\n    b2JointType[b2JointType[\"e_wheelJoint\"] = 7] = \"e_wheelJoint\";\n    b2JointType[b2JointType[\"e_weldJoint\"] = 8] = \"e_weldJoint\";\n    b2JointType[b2JointType[\"e_frictionJoint\"] = 9] = \"e_frictionJoint\";\n    b2JointType[b2JointType[\"e_ropeJoint\"] = 10] = \"e_ropeJoint\";\n    b2JointType[b2JointType[\"e_motorJoint\"] = 11] = \"e_motorJoint\";\n    b2JointType[b2JointType[\"e_areaJoint\"] = 12] = \"e_areaJoint\";\n})(b2JointType = exports.b2JointType || (exports.b2JointType = {}));\nvar b2Jacobian = (function () {\n    function b2Jacobian() {\n        this.linear = new b2_math_1.b2Vec2();\n        this.angularA = 0;\n        this.angularB = 0;\n    }\n    b2Jacobian.prototype.SetZero = function () {\n        this.linear.SetZero();\n        this.angularA = 0;\n        this.angularB = 0;\n        return this;\n    };\n    b2Jacobian.prototype.Set = function (x, a1, a2) {\n        this.linear.Copy(x);\n        this.angularA = a1;\n        this.angularB = a2;\n        return this;\n    };\n    return b2Jacobian;\n}());\nexports.b2Jacobian = b2Jacobian;\nvar b2JointEdge = (function () {\n    function b2JointEdge(joint) {\n        this._other = null;\n        this.prev = null;\n        this.next = null;\n        this.joint = joint;\n    }\n    Object.defineProperty(b2JointEdge.prototype, \"other\", {\n        get: function () {\n            if (this._other === null) {\n                throw new Error();\n            }\n            return this._other;\n        },\n        set: function (value) {\n            if (this._other !== null) {\n                throw new Error();\n            }\n            this._other = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    b2JointEdge.prototype.Reset = function () {\n        this._other = null;\n        this.prev = null;\n        this.next = null;\n    };\n    return b2JointEdge;\n}());\nexports.b2JointEdge = b2JointEdge;\nvar b2JointDef = (function () {\n    function b2JointDef(type) {\n        this.type = b2JointType.e_unknownJoint;\n        this.userData = null;\n        this.collideConnected = false;\n        this.type = type;\n    }\n    return b2JointDef;\n}());\nexports.b2JointDef = b2JointDef;\nfunction b2LinearStiffness(def, frequencyHertz, dampingRatio, bodyA, bodyB) {\n    var massA = bodyA.GetMass();\n    var massB = bodyB.GetMass();\n    var mass;\n    if (massA > 0.0 && massB > 0.0) {\n        mass = massA * massB / (massA + massB);\n    }\n    else if (massA > 0.0) {\n        mass = massA;\n    }\n    else {\n        mass = massB;\n    }\n    var omega = 2.0 * b2_settings_1.b2_pi * frequencyHertz;\n    def.stiffness = mass * omega * omega;\n    def.damping = 2.0 * mass * dampingRatio * omega;\n}\nexports.b2LinearStiffness = b2LinearStiffness;\nfunction b2AngularStiffness(def, frequencyHertz, dampingRatio, bodyA, bodyB) {\n    var IA = bodyA.GetInertia();\n    var IB = bodyB.GetInertia();\n    var I;\n    if (IA > 0.0 && IB > 0.0) {\n        I = IA * IB / (IA + IB);\n    }\n    else if (IA > 0.0) {\n        I = IA;\n    }\n    else {\n        I = IB;\n    }\n    var omega = 2.0 * b2_settings_1.b2_pi * frequencyHertz;\n    def.stiffness = I * omega * omega;\n    def.damping = 2.0 * I * dampingRatio * omega;\n}\nexports.b2AngularStiffness = b2AngularStiffness;\nvar b2Joint = (function () {\n    function b2Joint(def) {\n        this.m_type = b2JointType.e_unknownJoint;\n        this.m_prev = null;\n        this.m_next = null;\n        this.m_edgeA = new b2JointEdge(this);\n        this.m_edgeB = new b2JointEdge(this);\n        this.m_index = 0;\n        this.m_islandFlag = false;\n        this.m_collideConnected = false;\n        this.m_userData = null;\n        this.m_type = def.type;\n        this.m_edgeA.other = def.bodyB;\n        this.m_edgeB.other = def.bodyA;\n        this.m_bodyA = def.bodyA;\n        this.m_bodyB = def.bodyB;\n        this.m_collideConnected = b2_settings_1.b2Maybe(def.collideConnected, false);\n        this.m_userData = b2_settings_1.b2Maybe(def.userData, null);\n    }\n    b2Joint.prototype.GetType = function () {\n        return this.m_type;\n    };\n    b2Joint.prototype.GetBodyA = function () {\n        return this.m_bodyA;\n    };\n    b2Joint.prototype.GetBodyB = function () {\n        return this.m_bodyB;\n    };\n    b2Joint.prototype.GetNext = function () {\n        return this.m_next;\n    };\n    b2Joint.prototype.GetUserData = function () {\n        return this.m_userData;\n    };\n    b2Joint.prototype.SetUserData = function (data) {\n        this.m_userData = data;\n    };\n    b2Joint.prototype.IsEnabled = function () {\n        return this.m_bodyA.IsEnabled() && this.m_bodyB.IsEnabled();\n    };\n    b2Joint.prototype.GetCollideConnected = function () {\n        return this.m_collideConnected;\n    };\n    b2Joint.prototype.Dump = function (log) {\n        log(\"// Dump is not supported for this joint type.\\n\");\n    };\n    b2Joint.prototype.ShiftOrigin = function (newOrigin) { };\n    b2Joint.prototype.Draw = function (draw) {\n        var xf1 = this.m_bodyA.GetTransform();\n        var xf2 = this.m_bodyB.GetTransform();\n        var x1 = xf1.p;\n        var x2 = xf2.p;\n        var p1 = this.GetAnchorA(b2Joint.Draw_s_p1);\n        var p2 = this.GetAnchorB(b2Joint.Draw_s_p2);\n        var color = b2Joint.Draw_s_color.SetRGB(0.5, 0.8, 0.8);\n        switch (this.m_type) {\n            case b2JointType.e_distanceJoint:\n                draw.DrawSegment(p1, p2, color);\n                break;\n            case b2JointType.e_pulleyJoint:\n                {\n                    var pulley = this;\n                    var s1 = pulley.GetGroundAnchorA();\n                    var s2 = pulley.GetGroundAnchorB();\n                    draw.DrawSegment(s1, p1, color);\n                    draw.DrawSegment(s2, p2, color);\n                    draw.DrawSegment(s1, s2, color);\n                }\n                break;\n            case b2JointType.e_mouseJoint:\n                {\n                    var c = b2Joint.Draw_s_c;\n                    c.Set(0.0, 1.0, 0.0);\n                    draw.DrawPoint(p1, 4.0, c);\n                    draw.DrawPoint(p2, 4.0, c);\n                    c.Set(0.8, 0.8, 0.8);\n                    draw.DrawSegment(p1, p2, c);\n                }\n                break;\n            default:\n                draw.DrawSegment(x1, p1, color);\n                draw.DrawSegment(p1, p2, color);\n                draw.DrawSegment(x2, p2, color);\n        }\n    };\n    b2Joint.Draw_s_p1 = new b2_math_1.b2Vec2();\n    b2Joint.Draw_s_p2 = new b2_math_1.b2Vec2();\n    b2Joint.Draw_s_color = new b2_draw_1.b2Color(0.5, 0.8, 0.8);\n    b2Joint.Draw_s_c = new b2_draw_1.b2Color();\n    return b2Joint;\n}());\nexports.b2Joint = b2Joint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfam9pbnQudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfam9pbnQudHM/ZDA4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAwNyBFcmluIENhdHRvIGh0dHA6Ly93d3cuYm94MmQub3JnXG4qXG4qIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4qIHdhcnJhbnR5LiAgSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4qIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuKiBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuKiBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiogMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiogbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuKi9cblxuLy8gREVCVUc6IGltcG9ydCB7IGIyQXNzZXJ0IH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgYjJNYXliZSwgYjJfcGkgfSBmcm9tIFwiLi4vY29tbW9uL2IyX3NldHRpbmdzXCI7XG5pbXBvcnQgeyBiMlZlYzIsIFhZLCBiMlRyYW5zZm9ybSB9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuaW1wb3J0IHsgYjJCb2R5IH0gZnJvbSBcIi4vYjJfYm9keVwiO1xuaW1wb3J0IHsgYjJTb2x2ZXJEYXRhIH0gZnJvbSBcIi4vYjJfdGltZV9zdGVwXCI7XG5pbXBvcnQgeyBiMkRyYXcsIGIyQ29sb3IgfSBmcm9tIFwiLi4vY29tbW9uL2IyX2RyYXdcIjtcbmltcG9ydCB7IGIyUHVsbGV5Sm9pbnQgfSBmcm9tIFwiLi9iMl9wdWxsZXlfam9pbnRcIjtcblxuZXhwb3J0IGVudW0gYjJKb2ludFR5cGUge1xuICBlX3Vua25vd25Kb2ludCA9IDAsXG4gIGVfcmV2b2x1dGVKb2ludCA9IDEsXG4gIGVfcHJpc21hdGljSm9pbnQgPSAyLFxuICBlX2Rpc3RhbmNlSm9pbnQgPSAzLFxuICBlX3B1bGxleUpvaW50ID0gNCxcbiAgZV9tb3VzZUpvaW50ID0gNSxcbiAgZV9nZWFySm9pbnQgPSA2LFxuICBlX3doZWVsSm9pbnQgPSA3LFxuICBlX3dlbGRKb2ludCA9IDgsXG4gIGVfZnJpY3Rpb25Kb2ludCA9IDksXG4gIGVfcm9wZUpvaW50ID0gMTAsXG4gIGVfbW90b3JKb2ludCA9IDExLFxuICBlX2FyZWFKb2ludCA9IDEyLFxufVxuXG5leHBvcnQgY2xhc3MgYjJKYWNvYmlhbiB7XG4gIHB1YmxpYyByZWFkb25seSBsaW5lYXI6IGIyVmVjMiA9IG5ldyBiMlZlYzIoKTtcbiAgcHVibGljIGFuZ3VsYXJBOiBudW1iZXIgPSAwO1xuICBwdWJsaWMgYW5ndWxhckI6IG51bWJlciA9IDA7XG5cbiAgcHVibGljIFNldFplcm8oKTogYjJKYWNvYmlhbiB7XG4gICAgdGhpcy5saW5lYXIuU2V0WmVybygpO1xuICAgIHRoaXMuYW5ndWxhckEgPSAwO1xuICAgIHRoaXMuYW5ndWxhckIgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIFNldCh4OiBYWSwgYTE6IG51bWJlciwgYTI6IG51bWJlcik6IGIySmFjb2JpYW4ge1xuICAgIHRoaXMubGluZWFyLkNvcHkoeCk7XG4gICAgdGhpcy5hbmd1bGFyQSA9IGExO1xuICAgIHRoaXMuYW5ndWxhckIgPSBhMjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG4vLy8gQSBqb2ludCBlZGdlIGlzIHVzZWQgdG8gY29ubmVjdCBib2RpZXMgYW5kIGpvaW50cyB0b2dldGhlclxuLy8vIGluIGEgam9pbnQgZ3JhcGggd2hlcmUgZWFjaCBib2R5IGlzIGEgbm9kZSBhbmQgZWFjaCBqb2ludFxuLy8vIGlzIGFuIGVkZ2UuIEEgam9pbnQgZWRnZSBiZWxvbmdzIHRvIGEgZG91Ymx5IGxpbmtlZCBsaXN0XG4vLy8gbWFpbnRhaW5lZCBpbiBlYWNoIGF0dGFjaGVkIGJvZHkuIEVhY2ggam9pbnQgaGFzIHR3byBqb2ludFxuLy8vIG5vZGVzLCBvbmUgZm9yIGVhY2ggYXR0YWNoZWQgYm9keS5cbmV4cG9ydCBjbGFzcyBiMkpvaW50RWRnZSB7XG4gIHByaXZhdGUgX290aGVyOiBiMkJvZHkgfCBudWxsID0gbnVsbDsgLy8vPCBwcm92aWRlcyBxdWljayBhY2Nlc3MgdG8gdGhlIG90aGVyIGJvZHkgYXR0YWNoZWQuXG4gIHB1YmxpYyBnZXQgb3RoZXIoKTogYjJCb2R5IHtcbiAgICBpZiAodGhpcy5fb3RoZXIgPT09IG51bGwpIHsgdGhyb3cgbmV3IEVycm9yKCk7IH1cbiAgICByZXR1cm4gdGhpcy5fb3RoZXI7XG4gIH1cbiAgcHVibGljIHNldCBvdGhlcih2YWx1ZTogYjJCb2R5KSB7XG4gICAgaWYgKHRoaXMuX290aGVyICE9PSBudWxsKSB7IHRocm93IG5ldyBFcnJvcigpOyB9XG4gICAgdGhpcy5fb3RoZXIgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVhZG9ubHkgam9pbnQ6IGIySm9pbnQ7ICAgIC8vLzwgdGhlIGpvaW50XG4gIHB1YmxpYyBwcmV2OiBiMkpvaW50RWRnZSB8IG51bGwgPSBudWxsOyAgLy8vPCB0aGUgcHJldmlvdXMgam9pbnQgZWRnZSBpbiB0aGUgYm9keSdzIGpvaW50IGxpc3RcbiAgcHVibGljIG5leHQ6IGIySm9pbnRFZGdlIHwgbnVsbCA9IG51bGw7ICAvLy88IHRoZSBuZXh0IGpvaW50IGVkZ2UgaW4gdGhlIGJvZHkncyBqb2ludCBsaXN0XG4gIGNvbnN0cnVjdG9yKGpvaW50OiBiMkpvaW50KSB7XG4gICAgdGhpcy5qb2ludCA9IGpvaW50O1xuICB9XG4gIHB1YmxpYyBSZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLl9vdGhlciA9IG51bGw7XG4gICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICB9XG59XG5cbi8vLyBKb2ludCBkZWZpbml0aW9ucyBhcmUgdXNlZCB0byBjb25zdHJ1Y3Qgam9pbnRzLlxuZXhwb3J0IGludGVyZmFjZSBiMklKb2ludERlZiB7XG4gIC8vLyBUaGUgam9pbnQgdHlwZSBpcyBzZXQgYXV0b21hdGljYWxseSBmb3IgY29uY3JldGUgam9pbnQgdHlwZXMuXG4gIHR5cGU6IGIySm9pbnRUeXBlO1xuXG4gIC8vLyBVc2UgdGhpcyB0byBhdHRhY2ggYXBwbGljYXRpb24gc3BlY2lmaWMgZGF0YSB0byB5b3VyIGpvaW50cy5cbiAgdXNlckRhdGE/OiBhbnk7XG5cbiAgLy8vIFRoZSBmaXJzdCBhdHRhY2hlZCBib2R5LlxuICBib2R5QTogYjJCb2R5O1xuXG4gIC8vLyBUaGUgc2Vjb25kIGF0dGFjaGVkIGJvZHkuXG4gIGJvZHlCOiBiMkJvZHk7XG5cbiAgLy8vIFNldCB0aGlzIGZsYWcgdG8gdHJ1ZSBpZiB0aGUgYXR0YWNoZWQgYm9kaWVzIHNob3VsZCBjb2xsaWRlLlxuICBjb2xsaWRlQ29ubmVjdGVkPzogYm9vbGVhbjtcbn1cblxuLy8vIEpvaW50IGRlZmluaXRpb25zIGFyZSB1c2VkIHRvIGNvbnN0cnVjdCBqb2ludHMuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgYjJKb2ludERlZiBpbXBsZW1lbnRzIGIySUpvaW50RGVmIHtcbiAgLy8vIFRoZSBqb2ludCB0eXBlIGlzIHNldCBhdXRvbWF0aWNhbGx5IGZvciBjb25jcmV0ZSBqb2ludCB0eXBlcy5cbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IGIySm9pbnRUeXBlID0gYjJKb2ludFR5cGUuZV91bmtub3duSm9pbnQ7XG5cbiAgLy8vIFVzZSB0aGlzIHRvIGF0dGFjaCBhcHBsaWNhdGlvbiBzcGVjaWZpYyBkYXRhIHRvIHlvdXIgam9pbnRzLlxuICBwdWJsaWMgdXNlckRhdGE6IGFueSA9IG51bGw7XG5cbiAgLy8vIFRoZSBmaXJzdCBhdHRhY2hlZCBib2R5LlxuICBwdWJsaWMgYm9keUEhOiBiMkJvZHk7XG5cbiAgLy8vIFRoZSBzZWNvbmQgYXR0YWNoZWQgYm9keS5cbiAgcHVibGljIGJvZHlCITogYjJCb2R5O1xuXG4gIC8vLyBTZXQgdGhpcyBmbGFnIHRvIHRydWUgaWYgdGhlIGF0dGFjaGVkIGJvZGllcyBzaG91bGQgY29sbGlkZS5cbiAgcHVibGljIGNvbGxpZGVDb25uZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcih0eXBlOiBiMkpvaW50VHlwZSkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cbn1cblxuLy8vIFV0aWxpdHkgdG8gY29tcHV0ZSBsaW5lYXIgc3RpZmZuZXNzIHZhbHVlcyBmcm9tIGZyZXF1ZW5jeSBhbmQgZGFtcGluZyByYXRpb1xuLy8gdm9pZCBiMkxpbmVhclN0aWZmbmVzcyhmbG9hdCYgc3RpZmZuZXNzLCBmbG9hdCYgZGFtcGluZyxcbi8vIFx0ZmxvYXQgZnJlcXVlbmN5SGVydHosIGZsb2F0IGRhbXBpbmdSYXRpbyxcbi8vIFx0Y29uc3QgYjJCb2R5KiBib2R5QSwgY29uc3QgYjJCb2R5KiBib2R5Qik7XG5leHBvcnQgZnVuY3Rpb24gYjJMaW5lYXJTdGlmZm5lc3MoZGVmOiB7IHN0aWZmbmVzczogbnVtYmVyLCBkYW1waW5nOiBudW1iZXIgfSwgZnJlcXVlbmN5SGVydHo6IG51bWJlciwgZGFtcGluZ1JhdGlvOiBudW1iZXIsIGJvZHlBOiBiMkJvZHksIGJvZHlCOiBiMkJvZHkpOiB2b2lkIHtcbiAgY29uc3QgbWFzc0E6IG51bWJlciA9IGJvZHlBLkdldE1hc3MoKTtcbiAgY29uc3QgbWFzc0I6IG51bWJlciA9IGJvZHlCLkdldE1hc3MoKTtcbiAgbGV0IG1hc3M6IG51bWJlcjtcbiAgaWYgKG1hc3NBID4gMC4wICYmIG1hc3NCID4gMC4wKSB7XG4gICAgbWFzcyA9IG1hc3NBICogbWFzc0IgLyAobWFzc0EgKyBtYXNzQik7XG4gIH0gZWxzZSBpZiAobWFzc0EgPiAwLjApIHtcbiAgICBtYXNzID0gbWFzc0E7XG4gIH0gZWxzZSB7XG4gICAgbWFzcyA9IG1hc3NCO1xuICB9XG5cbiAgY29uc3Qgb21lZ2E6IG51bWJlciA9IDIuMCAqIGIyX3BpICogZnJlcXVlbmN5SGVydHo7XG4gIGRlZi5zdGlmZm5lc3MgPSBtYXNzICogb21lZ2EgKiBvbWVnYTtcbiAgZGVmLmRhbXBpbmcgPSAyLjAgKiBtYXNzICogZGFtcGluZ1JhdGlvICogb21lZ2E7XG59XG5cbi8vLyBVdGlsaXR5IHRvIGNvbXB1dGUgcm90YXRpb25hbCBzdGlmZm5lc3MgdmFsdWVzIGZyZXF1ZW5jeSBhbmQgZGFtcGluZyByYXRpb1xuLy8gdm9pZCBiMkFuZ3VsYXJTdGlmZm5lc3MoZmxvYXQmIHN0aWZmbmVzcywgZmxvYXQmIGRhbXBpbmcsXG4vLyBcdGZsb2F0IGZyZXF1ZW5jeUhlcnR6LCBmbG9hdCBkYW1waW5nUmF0aW8sXG4vLyBcdGNvbnN0IGIyQm9keSogYm9keUEsIGNvbnN0IGIyQm9keSogYm9keUIpO1xuZXhwb3J0IGZ1bmN0aW9uIGIyQW5ndWxhclN0aWZmbmVzcyhkZWY6IHsgc3RpZmZuZXNzOiBudW1iZXIsIGRhbXBpbmc6IG51bWJlciB9LCBmcmVxdWVuY3lIZXJ0ejogbnVtYmVyLCBkYW1waW5nUmF0aW86IG51bWJlciwgYm9keUE6IGIyQm9keSwgYm9keUI6IGIyQm9keSk6IHZvaWQge1xuICBjb25zdCBJQTogbnVtYmVyID0gYm9keUEuR2V0SW5lcnRpYSgpO1xuICBjb25zdCBJQjogbnVtYmVyID0gYm9keUIuR2V0SW5lcnRpYSgpO1xuICBsZXQgSTogbnVtYmVyO1xuICBpZiAoSUEgPiAwLjAgJiYgSUIgPiAwLjApIHtcbiAgICBJID0gSUEgKiBJQiAvIChJQSArIElCKTtcbiAgfSBlbHNlIGlmIChJQSA+IDAuMCkge1xuICAgIEkgPSBJQTtcbiAgfSBlbHNlIHtcbiAgICBJID0gSUI7XG4gIH1cblxuICBjb25zdCBvbWVnYTogbnVtYmVyID0gMi4wICogYjJfcGkgKiBmcmVxdWVuY3lIZXJ0ejtcbiAgZGVmLnN0aWZmbmVzcyA9IEkgKiBvbWVnYSAqIG9tZWdhO1xuICBkZWYuZGFtcGluZyA9IDIuMCAqIEkgKiBkYW1waW5nUmF0aW8gKiBvbWVnYTtcbn1cblxuLy8vIFRoZSBiYXNlIGpvaW50IGNsYXNzLiBKb2ludHMgYXJlIHVzZWQgdG8gY29uc3RyYWludCB0d28gYm9kaWVzIHRvZ2V0aGVyIGluXG4vLy8gdmFyaW91cyBmYXNoaW9ucy4gU29tZSBqb2ludHMgYWxzbyBmZWF0dXJlIGxpbWl0cyBhbmQgbW90b3JzLlxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIGIySm9pbnQge1xuICBwdWJsaWMgcmVhZG9ubHkgbV90eXBlOiBiMkpvaW50VHlwZSA9IGIySm9pbnRUeXBlLmVfdW5rbm93bkpvaW50O1xuICBwdWJsaWMgbV9wcmV2OiBiMkpvaW50IHwgbnVsbCA9IG51bGw7XG4gIHB1YmxpYyBtX25leHQ6IGIySm9pbnQgfCBudWxsID0gbnVsbDtcbiAgcHVibGljIHJlYWRvbmx5IG1fZWRnZUE6IGIySm9pbnRFZGdlID0gbmV3IGIySm9pbnRFZGdlKHRoaXMpO1xuICBwdWJsaWMgcmVhZG9ubHkgbV9lZGdlQjogYjJKb2ludEVkZ2UgPSBuZXcgYjJKb2ludEVkZ2UodGhpcyk7XG4gIHB1YmxpYyBtX2JvZHlBOiBiMkJvZHk7XG4gIHB1YmxpYyBtX2JvZHlCOiBiMkJvZHk7XG5cbiAgcHVibGljIG1faW5kZXg6IG51bWJlciA9IDA7XG5cbiAgcHVibGljIG1faXNsYW5kRmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgbV9jb2xsaWRlQ29ubmVjdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHVibGljIG1fdXNlckRhdGE6IGFueSA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoZGVmOiBiMklKb2ludERlZikge1xuICAgIC8vIERFQlVHOiBiMkFzc2VydChkZWYuYm9keUEgIT09IGRlZi5ib2R5Qik7XG5cbiAgICB0aGlzLm1fdHlwZSA9IGRlZi50eXBlO1xuICAgIHRoaXMubV9lZGdlQS5vdGhlciA9IGRlZi5ib2R5QjtcbiAgICB0aGlzLm1fZWRnZUIub3RoZXIgPSBkZWYuYm9keUE7XG4gICAgdGhpcy5tX2JvZHlBID0gZGVmLmJvZHlBO1xuICAgIHRoaXMubV9ib2R5QiA9IGRlZi5ib2R5QjtcblxuICAgIHRoaXMubV9jb2xsaWRlQ29ubmVjdGVkID0gYjJNYXliZShkZWYuY29sbGlkZUNvbm5lY3RlZCwgZmFsc2UpO1xuXG4gICAgdGhpcy5tX3VzZXJEYXRhID0gYjJNYXliZShkZWYudXNlckRhdGEsIG51bGwpO1xuICB9XG5cbiAgLy8vIEdldCB0aGUgdHlwZSBvZiB0aGUgY29uY3JldGUgam9pbnQuXG4gIHB1YmxpYyBHZXRUeXBlKCk6IGIySm9pbnRUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5tX3R5cGU7XG4gIH1cblxuICAvLy8gR2V0IHRoZSBmaXJzdCBib2R5IGF0dGFjaGVkIHRvIHRoaXMgam9pbnQuXG4gIHB1YmxpYyBHZXRCb2R5QSgpOiBiMkJvZHkge1xuICAgIHJldHVybiB0aGlzLm1fYm9keUE7XG4gIH1cblxuICAvLy8gR2V0IHRoZSBzZWNvbmQgYm9keSBhdHRhY2hlZCB0byB0aGlzIGpvaW50LlxuICBwdWJsaWMgR2V0Qm9keUIoKTogYjJCb2R5IHtcbiAgICByZXR1cm4gdGhpcy5tX2JvZHlCO1xuICB9XG5cbiAgLy8vIEdldCB0aGUgYW5jaG9yIHBvaW50IG9uIGJvZHlBIGluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICBwdWJsaWMgYWJzdHJhY3QgR2V0QW5jaG9yQTxUIGV4dGVuZHMgWFk+KG91dDogVCk6IFQ7XG5cbiAgLy8vIEdldCB0aGUgYW5jaG9yIHBvaW50IG9uIGJvZHlCIGluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICBwdWJsaWMgYWJzdHJhY3QgR2V0QW5jaG9yQjxUIGV4dGVuZHMgWFk+KG91dDogVCk6IFQ7XG5cbiAgLy8vIEdldCB0aGUgcmVhY3Rpb24gZm9yY2Ugb24gYm9keUIgYXQgdGhlIGpvaW50IGFuY2hvciBpbiBOZXd0b25zLlxuICBwdWJsaWMgYWJzdHJhY3QgR2V0UmVhY3Rpb25Gb3JjZTxUIGV4dGVuZHMgWFk+KGludl9kdDogbnVtYmVyLCBvdXQ6IFQpOiBUO1xuXG4gIC8vLyBHZXQgdGhlIHJlYWN0aW9uIHRvcnF1ZSBvbiBib2R5QiBpbiBOKm0uXG4gIHB1YmxpYyBhYnN0cmFjdCBHZXRSZWFjdGlvblRvcnF1ZShpbnZfZHQ6IG51bWJlcik6IG51bWJlcjtcblxuICAvLy8gR2V0IHRoZSBuZXh0IGpvaW50IHRoZSB3b3JsZCBqb2ludCBsaXN0LlxuICBwdWJsaWMgR2V0TmV4dCgpOiBiMkpvaW50IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMubV9uZXh0O1xuICB9XG5cbiAgLy8vIEdldCB0aGUgdXNlciBkYXRhIHBvaW50ZXIuXG4gIHB1YmxpYyBHZXRVc2VyRGF0YSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLm1fdXNlckRhdGE7XG4gIH1cblxuICAvLy8gU2V0IHRoZSB1c2VyIGRhdGEgcG9pbnRlci5cbiAgcHVibGljIFNldFVzZXJEYXRhKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMubV91c2VyRGF0YSA9IGRhdGE7XG4gIH1cblxuICAvLy8gU2hvcnQtY3V0IGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBlaXRoZXIgYm9keSBpcyBpbmFjdGl2ZS5cbiAgcHVibGljIElzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tX2JvZHlBLklzRW5hYmxlZCgpICYmIHRoaXMubV9ib2R5Qi5Jc0VuYWJsZWQoKTtcbiAgfVxuXG4gIC8vLyBHZXQgY29sbGlkZSBjb25uZWN0ZWQuXG4gIC8vLyBOb3RlOiBtb2RpZnlpbmcgdGhlIGNvbGxpZGUgY29ubmVjdCBmbGFnIHdvbid0IHdvcmsgY29ycmVjdGx5IGJlY2F1c2VcbiAgLy8vIHRoZSBmbGFnIGlzIG9ubHkgY2hlY2tlZCB3aGVuIGZpeHR1cmUgQUFCQnMgYmVnaW4gdG8gb3ZlcmxhcC5cbiAgcHVibGljIEdldENvbGxpZGVDb25uZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubV9jb2xsaWRlQ29ubmVjdGVkO1xuICB9XG5cbiAgLy8vIER1bXAgdGhpcyBqb2ludCB0byB0aGUgbG9nIGZpbGUuXG4gIHB1YmxpYyBEdW1wKGxvZzogKGZvcm1hdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGxvZyhcIi8vIER1bXAgaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBqb2ludCB0eXBlLlxcblwiKTtcbiAgfVxuXG4gIC8vLyBTaGlmdCB0aGUgb3JpZ2luIGZvciBhbnkgcG9pbnRzIHN0b3JlZCBpbiB3b3JsZCBjb29yZGluYXRlcy5cbiAgcHVibGljIFNoaWZ0T3JpZ2luKG5ld09yaWdpbjogWFkpOiB2b2lkIHsgfVxuXG4gIC8vLyBEZWJ1ZyBkcmF3IHRoaXMgam9pbnRcbiAgcHJpdmF0ZSBzdGF0aWMgRHJhd19zX3AxOiBiMlZlYzIgPSBuZXcgYjJWZWMyKCk7XG4gIHByaXZhdGUgc3RhdGljIERyYXdfc19wMjogYjJWZWMyID0gbmV3IGIyVmVjMigpO1xuICBwcml2YXRlIHN0YXRpYyBEcmF3X3NfY29sb3I6IGIyQ29sb3IgPSBuZXcgYjJDb2xvcigwLjUsIDAuOCwgMC44KTtcbiAgcHJpdmF0ZSBzdGF0aWMgRHJhd19zX2M6IGIyQ29sb3IgPSBuZXcgYjJDb2xvcigpO1xuICBwdWJsaWMgRHJhdyhkcmF3OiBiMkRyYXcpOiB2b2lkIHtcbiAgICBjb25zdCB4ZjE6IGIyVHJhbnNmb3JtID0gdGhpcy5tX2JvZHlBLkdldFRyYW5zZm9ybSgpO1xuICAgIGNvbnN0IHhmMjogYjJUcmFuc2Zvcm0gPSB0aGlzLm1fYm9keUIuR2V0VHJhbnNmb3JtKCk7XG4gICAgY29uc3QgeDE6IGIyVmVjMiA9IHhmMS5wO1xuICAgIGNvbnN0IHgyOiBiMlZlYzIgPSB4ZjIucDtcbiAgICBjb25zdCBwMTogYjJWZWMyID0gdGhpcy5HZXRBbmNob3JBKGIySm9pbnQuRHJhd19zX3AxKTtcbiAgICBjb25zdCBwMjogYjJWZWMyID0gdGhpcy5HZXRBbmNob3JCKGIySm9pbnQuRHJhd19zX3AyKTtcblxuICAgIGNvbnN0IGNvbG9yOiBiMkNvbG9yID0gYjJKb2ludC5EcmF3X3NfY29sb3IuU2V0UkdCKDAuNSwgMC44LCAwLjgpO1xuXG4gICAgc3dpdGNoICh0aGlzLm1fdHlwZSkge1xuICAgICAgY2FzZSBiMkpvaW50VHlwZS5lX2Rpc3RhbmNlSm9pbnQ6XG4gICAgICAgIGRyYXcuRHJhd1NlZ21lbnQocDEsIHAyLCBjb2xvcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGIySm9pbnRUeXBlLmVfcHVsbGV5Sm9pbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBwdWxsZXk6IGIyUHVsbGV5Sm9pbnQgPSB0aGlzIGFzIHVua25vd24gYXMgYjJQdWxsZXlKb2ludDtcbiAgICAgICAgICBjb25zdCBzMTogYjJWZWMyID0gcHVsbGV5LkdldEdyb3VuZEFuY2hvckEoKTtcbiAgICAgICAgICBjb25zdCBzMjogYjJWZWMyID0gcHVsbGV5LkdldEdyb3VuZEFuY2hvckIoKTtcbiAgICAgICAgICBkcmF3LkRyYXdTZWdtZW50KHMxLCBwMSwgY29sb3IpO1xuICAgICAgICAgIGRyYXcuRHJhd1NlZ21lbnQoczIsIHAyLCBjb2xvcik7XG4gICAgICAgICAgZHJhdy5EcmF3U2VnbWVudChzMSwgczIsIGNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBiMkpvaW50VHlwZS5lX21vdXNlSm9pbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBjID0gYjJKb2ludC5EcmF3X3NfYztcbiAgICAgICAgICBjLlNldCgwLjAsIDEuMCwgMC4wKTtcbiAgICAgICAgICBkcmF3LkRyYXdQb2ludChwMSwgNC4wLCBjKTtcbiAgICAgICAgICBkcmF3LkRyYXdQb2ludChwMiwgNC4wLCBjKTtcblxuICAgICAgICAgIGMuU2V0KDAuOCwgMC44LCAwLjgpO1xuICAgICAgICAgIGRyYXcuRHJhd1NlZ21lbnQocDEsIHAyLCBjKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZHJhdy5EcmF3U2VnbWVudCh4MSwgcDEsIGNvbG9yKTtcbiAgICAgICAgZHJhdy5EcmF3U2VnbWVudChwMSwgcDIsIGNvbG9yKTtcbiAgICAgICAgZHJhdy5EcmF3U2VnbWVudCh4MiwgcDIsIGNvbG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgcHVibGljIGFic3RyYWN0IEluaXRWZWxvY2l0eUNvbnN0cmFpbnRzKGRhdGE6IGIyU29sdmVyRGF0YSk6IHZvaWQ7XG5cbiAgcHVibGljIGFic3RyYWN0IFNvbHZlVmVsb2NpdHlDb25zdHJhaW50cyhkYXRhOiBiMlNvbHZlckRhdGEpOiB2b2lkO1xuXG4gIC8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBwb3NpdGlvbiBlcnJvcnMgYXJlIHdpdGhpbiB0b2xlcmFuY2UuXG4gIHB1YmxpYyBhYnN0cmFjdCBTb2x2ZVBvc2l0aW9uQ29uc3RyYWludHMoZGF0YTogYjJTb2x2ZXJEYXRhKTogYm9vbGVhbjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7O0FBbUJBO0FBQ0E7QUFHQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQWVBO0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWxCQTtBQXlCQTtBQWFBO0FBWkE7QUFVQTtBQUNBO0FBRUE7QUFDQTtBQWJBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBOzs7QUFKQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBckJBO0FBMENBO0FBZ0JBO0FBZEE7QUFHQTtBQVNBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFuQkE7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFmQTtBQW1CQTtBQWdCQTtBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFlQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFvREE7QUFBQTtBQXBKQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_motor_joint.ts":
/*!**********************************************!*\
  !*** ./src/box2d/dynamics/b2_motor_joint.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2MotorJoint = exports.b2MotorJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2MotorJointDef = (function (_super) {\n    __extends(b2MotorJointDef, _super);\n    function b2MotorJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_motorJoint) || this;\n        _this.linearOffset = new b2_math_1.b2Vec2(0, 0);\n        _this.angularOffset = 0;\n        _this.maxForce = 1;\n        _this.maxTorque = 1;\n        _this.correctionFactor = 0.3;\n        return _this;\n    }\n    b2MotorJointDef.prototype.Initialize = function (bA, bB) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);\n        var angleA = this.bodyA.GetAngle();\n        var angleB = this.bodyB.GetAngle();\n        this.angularOffset = angleB - angleA;\n    };\n    return b2MotorJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2MotorJointDef = b2MotorJointDef;\nvar b2MotorJoint = (function (_super) {\n    __extends(b2MotorJoint, _super);\n    function b2MotorJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_linearOffset = new b2_math_1.b2Vec2();\n        _this.m_angularOffset = 0;\n        _this.m_linearImpulse = new b2_math_1.b2Vec2();\n        _this.m_angularImpulse = 0;\n        _this.m_maxForce = 0;\n        _this.m_maxTorque = 0;\n        _this.m_correctionFactor = 0.3;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_linearError = new b2_math_1.b2Vec2();\n        _this.m_angularError = 0;\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_linearMass = new b2_math_1.b2Mat22();\n        _this.m_angularMass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_K = new b2_math_1.b2Mat22();\n        _this.m_linearOffset.Copy(b2_settings_1.b2Maybe(def.linearOffset, b2_math_1.b2Vec2.ZERO));\n        _this.m_linearImpulse.SetZero();\n        _this.m_maxForce = b2_settings_1.b2Maybe(def.maxForce, 0);\n        _this.m_maxTorque = b2_settings_1.b2Maybe(def.maxTorque, 0);\n        _this.m_correctionFactor = b2_settings_1.b2Maybe(def.correctionFactor, 0.3);\n        return _this;\n    }\n    b2MotorJoint.prototype.GetAnchorA = function (out) {\n        var pos = this.m_bodyA.GetPosition();\n        out.x = pos.x;\n        out.y = pos.y;\n        return out;\n    };\n    b2MotorJoint.prototype.GetAnchorB = function (out) {\n        var pos = this.m_bodyB.GetPosition();\n        out.x = pos.x;\n        out.y = pos.y;\n        return out;\n    };\n    b2MotorJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        return b2_math_1.b2Vec2.MulSV(inv_dt, this.m_linearImpulse, out);\n    };\n    b2MotorJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * this.m_angularImpulse;\n    };\n    b2MotorJoint.prototype.SetLinearOffset = function (linearOffset) {\n        if (!b2_math_1.b2Vec2.IsEqualToV(linearOffset, this.m_linearOffset)) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_linearOffset.Copy(linearOffset);\n        }\n    };\n    b2MotorJoint.prototype.GetLinearOffset = function () {\n        return this.m_linearOffset;\n    };\n    b2MotorJoint.prototype.SetAngularOffset = function (angularOffset) {\n        if (angularOffset !== this.m_angularOffset) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_angularOffset = angularOffset;\n        }\n    };\n    b2MotorJoint.prototype.GetAngularOffset = function () {\n        return this.m_angularOffset;\n    };\n    b2MotorJoint.prototype.SetMaxForce = function (force) {\n        this.m_maxForce = force;\n    };\n    b2MotorJoint.prototype.GetMaxForce = function () {\n        return this.m_maxForce;\n    };\n    b2MotorJoint.prototype.SetMaxTorque = function (torque) {\n        this.m_maxTorque = torque;\n    };\n    b2MotorJoint.prototype.GetMaxTorque = function () {\n        return this.m_maxTorque;\n    };\n    b2MotorJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        var rA = b2_math_1.b2Rot.MulRV(qA, b2_math_1.b2Vec2.SubVV(this.m_linearOffset, this.m_localCenterA, b2_math_1.b2Vec2.s_t0), this.m_rA);\n        var rB = b2_math_1.b2Rot.MulRV(qB, b2_math_1.b2Vec2.NegV(this.m_localCenterB, b2_math_1.b2Vec2.s_t0), this.m_rB);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var K = this.m_K;\n        K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n        K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n        K.ey.x = K.ex.y;\n        K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n        K.GetInverse(this.m_linearMass);\n        this.m_angularMass = iA + iB;\n        if (this.m_angularMass > 0) {\n            this.m_angularMass = 1 / this.m_angularMass;\n        }\n        b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(cB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(cA, rA, b2_math_1.b2Vec2.s_t1), this.m_linearError);\n        this.m_angularError = aB - aA - this.m_angularOffset;\n        if (data.step.warmStarting) {\n            this.m_linearImpulse.SelfMul(data.step.dtRatio);\n            this.m_angularImpulse *= data.step.dtRatio;\n            var P = this.m_linearImpulse;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * (b2_math_1.b2Vec2.CrossVV(rA, P) + this.m_angularImpulse);\n            vB.SelfMulAdd(mB, P);\n            wB += iB * (b2_math_1.b2Vec2.CrossVV(rB, P) + this.m_angularImpulse);\n        }\n        else {\n            this.m_linearImpulse.SetZero();\n            this.m_angularImpulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2MotorJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var h = data.step.dt;\n        var inv_h = data.step.inv_dt;\n        {\n            var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n            var impulse = -this.m_angularMass * Cdot;\n            var oldImpulse = this.m_angularImpulse;\n            var maxImpulse = h * this.m_maxTorque;\n            this.m_angularImpulse = b2_math_1.b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\n            impulse = this.m_angularImpulse - oldImpulse;\n            wA -= iA * impulse;\n            wB += iB * impulse;\n        }\n        {\n            var rA = this.m_rA;\n            var rB = this.m_rB;\n            var Cdot_v2 = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(vB, b2_math_1.b2Vec2.CrossSV(wB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(vA, b2_math_1.b2Vec2.CrossSV(wA, rA, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t2), b2_math_1.b2Vec2.MulSV(inv_h * this.m_correctionFactor, this.m_linearError, b2_math_1.b2Vec2.s_t3), b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2);\n            var impulse_v2 = b2_math_1.b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2MotorJoint.SolveVelocityConstraints_s_impulse_v2).SelfNeg();\n            var oldImpulse_v2 = b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);\n            this.m_linearImpulse.SelfAdd(impulse_v2);\n            var maxImpulse = h * this.m_maxForce;\n            if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\n                this.m_linearImpulse.Normalize();\n                this.m_linearImpulse.SelfMul(maxImpulse);\n            }\n            b2_math_1.b2Vec2.SubVV(this.m_linearImpulse, oldImpulse_v2, impulse_v2);\n            vA.SelfMulSub(mA, impulse_v2);\n            wA -= iA * b2_math_1.b2Vec2.CrossVV(rA, impulse_v2);\n            vB.SelfMulAdd(mB, impulse_v2);\n            wB += iB * b2_math_1.b2Vec2.CrossVV(rB, impulse_v2);\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2MotorJoint.prototype.SolvePositionConstraints = function (data) {\n        return true;\n    };\n    b2MotorJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2MotorJointDef = new b2MotorJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.linearOffset.Set(%.15f, %.15f);\\n\", this.m_linearOffset.x, this.m_linearOffset.y);\n        log(\"  jd.angularOffset = %.15f;\\n\", this.m_angularOffset);\n        log(\"  jd.maxForce = %.15f;\\n\", this.m_maxForce);\n        log(\"  jd.maxTorque = %.15f;\\n\", this.m_maxTorque);\n        log(\"  jd.correctionFactor = %.15f;\\n\", this.m_correctionFactor);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2_math_1.b2Vec2();\n    b2MotorJoint.SolveVelocityConstraints_s_impulse_v2 = new b2_math_1.b2Vec2();\n    b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2 = new b2_math_1.b2Vec2();\n    return b2MotorJoint;\n}(b2_joint_1.b2Joint));\nexports.b2MotorJoint = b2MotorJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_motor_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_mouse_joint.ts":
/*!**********************************************!*\
  !*** ./src/box2d/dynamics/b2_mouse_joint.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2MouseJoint = exports.b2MouseJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2MouseJointDef = (function (_super) {\n    __extends(b2MouseJointDef, _super);\n    function b2MouseJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_mouseJoint) || this;\n        _this.target = new b2_math_1.b2Vec2();\n        _this.maxForce = 0;\n        _this.stiffness = 5;\n        _this.damping = 0.7;\n        return _this;\n    }\n    return b2MouseJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2MouseJointDef = b2MouseJointDef;\nvar b2MouseJoint = (function (_super) {\n    __extends(b2MouseJoint, _super);\n    function b2MouseJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_targetA = new b2_math_1.b2Vec2();\n        _this.m_stiffness = 0;\n        _this.m_damping = 0;\n        _this.m_beta = 0;\n        _this.m_impulse = new b2_math_1.b2Vec2();\n        _this.m_maxForce = 0;\n        _this.m_gamma = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassB = 0;\n        _this.m_invIB = 0;\n        _this.m_mass = new b2_math_1.b2Mat22();\n        _this.m_C = new b2_math_1.b2Vec2();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_K = new b2_math_1.b2Mat22();\n        _this.m_targetA.Copy(b2_settings_1.b2Maybe(def.target, b2_math_1.b2Vec2.ZERO));\n        b2_math_1.b2Transform.MulTXV(_this.m_bodyB.GetTransform(), _this.m_targetA, _this.m_localAnchorB);\n        _this.m_maxForce = b2_settings_1.b2Maybe(def.maxForce, 0);\n        _this.m_impulse.SetZero();\n        _this.m_stiffness = b2_settings_1.b2Maybe(def.stiffness, 0);\n        _this.m_damping = b2_settings_1.b2Maybe(def.damping, 0);\n        _this.m_beta = 0;\n        _this.m_gamma = 0;\n        return _this;\n    }\n    b2MouseJoint.prototype.SetTarget = function (target) {\n        if (!this.m_bodyB.IsAwake()) {\n            this.m_bodyB.SetAwake(true);\n        }\n        this.m_targetA.Copy(target);\n    };\n    b2MouseJoint.prototype.GetTarget = function () {\n        return this.m_targetA;\n    };\n    b2MouseJoint.prototype.SetMaxForce = function (maxForce) {\n        this.m_maxForce = maxForce;\n    };\n    b2MouseJoint.prototype.GetMaxForce = function () {\n        return this.m_maxForce;\n    };\n    b2MouseJoint.prototype.SetStiffness = function (stiffness) {\n        this.m_stiffness = stiffness;\n    };\n    b2MouseJoint.prototype.GetStiffness = function () {\n        return this.m_stiffness;\n    };\n    b2MouseJoint.prototype.SetDamping = function (damping) {\n        this.m_damping = damping;\n    };\n    b2MouseJoint.prototype.GetDamping = function () {\n        return this.m_damping;\n    };\n    b2MouseJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qB = this.m_qB.SetAngle(aB);\n        var mass = this.m_bodyB.GetMass();\n        var omega = 2 * b2_settings_1.b2_pi * this.m_stiffness;\n        var d = 2 * mass * this.m_damping * omega;\n        var k = mass * (omega * omega);\n        var h = data.step.dt;\n        this.m_gamma = h * (d + h * k);\n        if (this.m_gamma !== 0) {\n            this.m_gamma = 1 / this.m_gamma;\n        }\n        this.m_beta = h * k * this.m_gamma;\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var K = this.m_K;\n        K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;\n        K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n        K.ey.x = K.ex.y;\n        K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;\n        K.GetInverse(this.m_mass);\n        this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;\n        this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;\n        this.m_C.SelfMul(this.m_beta);\n        wB *= 0.98;\n        if (data.step.warmStarting) {\n            this.m_impulse.SelfMul(data.step.dtRatio);\n            vB.x += this.m_invMassB * this.m_impulse.x;\n            vB.y += this.m_invMassB * this.m_impulse.y;\n            wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, this.m_impulse);\n        }\n        else {\n            this.m_impulse.SetZero();\n        }\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2MouseJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var Cdot = b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2MouseJoint.SolveVelocityConstraints_s_Cdot);\n        var impulse = b2_math_1.b2Mat22.MulMV(this.m_mass, b2_math_1.b2Vec2.AddVV(Cdot, b2_math_1.b2Vec2.AddVV(this.m_C, b2_math_1.b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0).SelfNeg(), b2MouseJoint.SolveVelocityConstraints_s_impulse);\n        var oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);\n        this.m_impulse.SelfAdd(impulse);\n        var maxImpulse = data.step.dt * this.m_maxForce;\n        if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\n            this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());\n        }\n        b2_math_1.b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);\n        vB.SelfMulAdd(this.m_invMassB, impulse);\n        wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, impulse);\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2MouseJoint.prototype.SolvePositionConstraints = function (data) {\n        return true;\n    };\n    b2MouseJoint.prototype.GetAnchorA = function (out) {\n        out.x = this.m_targetA.x;\n        out.y = this.m_targetA.y;\n        return out;\n    };\n    b2MouseJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2MouseJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        return b2_math_1.b2Vec2.MulSV(inv_dt, this.m_impulse, out);\n    };\n    b2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return 0;\n    };\n    b2MouseJoint.prototype.Dump = function (log) {\n        log(\"Mouse joint dumping is not supported.\\n\");\n    };\n    b2MouseJoint.prototype.ShiftOrigin = function (newOrigin) {\n        this.m_targetA.SelfSub(newOrigin);\n    };\n    b2MouseJoint.SolveVelocityConstraints_s_Cdot = new b2_math_1.b2Vec2();\n    b2MouseJoint.SolveVelocityConstraints_s_impulse = new b2_math_1.b2Vec2();\n    b2MouseJoint.SolveVelocityConstraints_s_oldImpulse = new b2_math_1.b2Vec2();\n    return b2MouseJoint;\n}(b2_joint_1.b2Joint));\nexports.b2MouseJoint = b2MouseJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_mouse_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_polygon_circle_contact.ts":
/*!*********************************************************!*\
  !*** ./src/box2d/dynamics/b2_polygon_circle_contact.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2PolygonAndCircleContact = void 0;\nvar b2_collide_circle_1 = __webpack_require__(/*! ../collision/b2_collide_circle */ \"./src/box2d/collision/b2_collide_circle.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2PolygonAndCircleContact = (function (_super) {\n    __extends(b2PolygonAndCircleContact, _super);\n    function b2PolygonAndCircleContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2PolygonAndCircleContact.Create = function () {\n        return new b2PolygonAndCircleContact();\n    };\n    b2PolygonAndCircleContact.Destroy = function (contact) {\n    };\n    b2PolygonAndCircleContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        b2_collide_circle_1.b2CollidePolygonAndCircle(manifold, this.GetShapeA(), xfA, this.GetShapeB(), xfB);\n    };\n    return b2PolygonAndCircleContact;\n}(b2_contact_1.b2Contact));\nexports.b2PolygonAndCircleContact = b2PolygonAndCircleContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfcG9seWdvbl9jaXJjbGVfY29udGFjdC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ib3gyZC9keW5hbWljcy9iMl9wb2x5Z29uX2NpcmNsZV9jb250YWN0LnRzPzRkNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDkgRXJpbiBDYXR0byBodHRwOi8vd3d3LmJveDJkLm9yZ1xuKlxuKiBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4qIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4qIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4qIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiogMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcbiogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiogaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4qIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4qIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4qIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiogMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cbiovXG5cbmltcG9ydCB7IGIyVHJhbnNmb3JtIH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9tYXRoXCI7XG5pbXBvcnQgeyBiMkNvbGxpZGVQb2x5Z29uQW5kQ2lyY2xlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9jb2xsaWRlX2NpcmNsZVwiO1xuaW1wb3J0IHsgYjJNYW5pZm9sZCB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfY29sbGlzaW9uXCI7XG5pbXBvcnQgeyBiMkNpcmNsZVNoYXBlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9jaXJjbGVfc2hhcGVcIjtcbmltcG9ydCB7IGIyUG9seWdvblNoYXBlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9iMl9wb2x5Z29uX3NoYXBlXCI7XG5pbXBvcnQgeyBiMkNvbnRhY3QgfSBmcm9tIFwiLi9iMl9jb250YWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBiMlBvbHlnb25BbmRDaXJjbGVDb250YWN0IGV4dGVuZHMgYjJDb250YWN0PGIyUG9seWdvblNoYXBlLCBiMkNpcmNsZVNoYXBlPiB7XG4gIHB1YmxpYyBzdGF0aWMgQ3JlYXRlKCk6IGIyQ29udGFjdCB7XG4gICAgcmV0dXJuIG5ldyBiMlBvbHlnb25BbmRDaXJjbGVDb250YWN0KCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIERlc3Ryb3koY29udGFjdDogYjJDb250YWN0KTogdm9pZCB7XG4gIH1cblxuICBwdWJsaWMgRXZhbHVhdGUobWFuaWZvbGQ6IGIyTWFuaWZvbGQsIHhmQTogYjJUcmFuc2Zvcm0sIHhmQjogYjJUcmFuc2Zvcm0pOiB2b2lkIHtcbiAgICBiMkNvbGxpZGVQb2x5Z29uQW5kQ2lyY2xlKG1hbmlmb2xkLCB0aGlzLkdldFNoYXBlQSgpLCB4ZkEsIHRoaXMuR2V0U2hhcGVCKCksIHhmQik7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTtBQUlBO0FBRUE7QUFBQTtBQUFBOztBQVdBO0FBVkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFYQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_polygon_circle_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_polygon_contact.ts":
/*!**************************************************!*\
  !*** ./src/box2d/dynamics/b2_polygon_contact.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2PolygonContact = void 0;\nvar b2_collide_polygon_1 = __webpack_require__(/*! ../collision/b2_collide_polygon */ \"./src/box2d/collision/b2_collide_polygon.ts\");\nvar b2_contact_1 = __webpack_require__(/*! ./b2_contact */ \"./src/box2d/dynamics/b2_contact.ts\");\nvar b2PolygonContact = (function (_super) {\n    __extends(b2PolygonContact, _super);\n    function b2PolygonContact() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2PolygonContact.Create = function () {\n        return new b2PolygonContact();\n    };\n    b2PolygonContact.Destroy = function (contact) {\n    };\n    b2PolygonContact.prototype.Evaluate = function (manifold, xfA, xfB) {\n        b2_collide_polygon_1.b2CollidePolygons(manifold, this.GetShapeA(), xfA, this.GetShapeB(), xfB);\n    };\n    return b2PolygonContact;\n}(b2_contact_1.b2Contact));\nexports.b2PolygonContact = b2PolygonContact;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfcG9seWdvbl9jb250YWN0LnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2R5bmFtaWNzL2IyX3BvbHlnb25fY29udGFjdC50cz85OTBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEVyaW4gQ2F0dG8gaHR0cDovL3d3dy5ib3gyZC5vcmdcbipcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4qIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4qIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG4qL1xuXG5pbXBvcnQgeyBiMlRyYW5zZm9ybSB9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuaW1wb3J0IHsgYjJDb2xsaWRlUG9seWdvbnMgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpZGVfcG9seWdvblwiO1xuaW1wb3J0IHsgYjJNYW5pZm9sZCB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfY29sbGlzaW9uXCI7XG5pbXBvcnQgeyBiMlBvbHlnb25TaGFwZSB9IGZyb20gXCIuLi9jb2xsaXNpb24vYjJfcG9seWdvbl9zaGFwZVwiO1xuaW1wb3J0IHsgYjJDb250YWN0IH0gZnJvbSBcIi4vYjJfY29udGFjdFwiO1xuXG5leHBvcnQgY2xhc3MgYjJQb2x5Z29uQ29udGFjdCBleHRlbmRzIGIyQ29udGFjdDxiMlBvbHlnb25TaGFwZSwgYjJQb2x5Z29uU2hhcGU+IHtcbiAgcHVibGljIHN0YXRpYyBDcmVhdGUoKTogYjJDb250YWN0IHtcbiAgICByZXR1cm4gbmV3IGIyUG9seWdvbkNvbnRhY3QoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgRGVzdHJveShjb250YWN0OiBiMkNvbnRhY3QpOiB2b2lkIHtcbiAgfVxuXG4gIHB1YmxpYyBFdmFsdWF0ZShtYW5pZm9sZDogYjJNYW5pZm9sZCwgeGZBOiBiMlRyYW5zZm9ybSwgeGZCOiBiMlRyYW5zZm9ybSk6IHZvaWQge1xuICAgIGIyQ29sbGlkZVBvbHlnb25zKFxuICAgICAgbWFuaWZvbGQsXG4gICAgICB0aGlzLkdldFNoYXBlQSgpLCB4ZkEsXG4gICAgICB0aGlzLkdldFNoYXBlQigpLCB4ZkIpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFHQTtBQUVBO0FBQUE7QUFBQTs7QUFjQTtBQWJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBZEE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_polygon_contact.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_prismatic_joint.ts":
/*!**************************************************!*\
  !*** ./src/box2d/dynamics/b2_prismatic_joint.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2PrismaticJoint = exports.b2PrismaticJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2PrismaticJointDef = (function (_super) {\n    __extends(b2PrismaticJointDef, _super);\n    function b2PrismaticJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_prismaticJoint) || this;\n        _this.localAnchorA = new b2_math_1.b2Vec2();\n        _this.localAnchorB = new b2_math_1.b2Vec2();\n        _this.localAxisA = new b2_math_1.b2Vec2(1, 0);\n        _this.referenceAngle = 0;\n        _this.enableLimit = false;\n        _this.lowerTranslation = 0;\n        _this.upperTranslation = 0;\n        _this.enableMotor = false;\n        _this.maxMotorForce = 0;\n        _this.motorSpeed = 0;\n        return _this;\n    }\n    b2PrismaticJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n    };\n    return b2PrismaticJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2PrismaticJointDef = b2PrismaticJointDef;\nvar b2PrismaticJoint = (function (_super) {\n    __extends(b2PrismaticJoint, _super);\n    function b2PrismaticJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_localXAxisA = new b2_math_1.b2Vec2();\n        _this.m_localYAxisA = new b2_math_1.b2Vec2();\n        _this.m_referenceAngle = 0;\n        _this.m_impulse = new b2_math_1.b2Vec2(0, 0);\n        _this.m_motorImpulse = 0;\n        _this.m_lowerImpulse = 0;\n        _this.m_upperImpulse = 0;\n        _this.m_lowerTranslation = 0;\n        _this.m_upperTranslation = 0;\n        _this.m_maxMotorForce = 0;\n        _this.m_motorSpeed = 0;\n        _this.m_enableLimit = false;\n        _this.m_enableMotor = false;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_axis = new b2_math_1.b2Vec2(0, 0);\n        _this.m_perp = new b2_math_1.b2Vec2(0, 0);\n        _this.m_s1 = 0;\n        _this.m_s2 = 0;\n        _this.m_a1 = 0;\n        _this.m_a2 = 0;\n        _this.m_K = new b2_math_1.b2Mat22();\n        _this.m_K3 = new b2_math_1.b2Mat33();\n        _this.m_K2 = new b2_math_1.b2Mat22();\n        _this.m_translation = 0;\n        _this.m_axialMass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, b2_math_1.b2Vec2.ZERO));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, b2_math_1.b2Vec2.ZERO));\n        _this.m_localXAxisA.Copy(b2_settings_1.b2Maybe(def.localAxisA, new b2_math_1.b2Vec2(1, 0))).SelfNormalize();\n        b2_math_1.b2Vec2.CrossOneV(_this.m_localXAxisA, _this.m_localYAxisA);\n        _this.m_referenceAngle = b2_settings_1.b2Maybe(def.referenceAngle, 0);\n        _this.m_lowerTranslation = b2_settings_1.b2Maybe(def.lowerTranslation, 0);\n        _this.m_upperTranslation = b2_settings_1.b2Maybe(def.upperTranslation, 0);\n        _this.m_maxMotorForce = b2_settings_1.b2Maybe(def.maxMotorForce, 0);\n        _this.m_motorSpeed = b2_settings_1.b2Maybe(def.motorSpeed, 0);\n        _this.m_enableLimit = b2_settings_1.b2Maybe(def.enableLimit, false);\n        _this.m_enableMotor = b2_settings_1.b2Maybe(def.enableMotor, false);\n        return _this;\n    }\n    b2PrismaticJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var d = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.SubVV(cB, cA, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(rB, rA, b2_math_1.b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_d);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        {\n            b2_math_1.b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\n            this.m_a1 = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), this.m_axis);\n            this.m_a2 = b2_math_1.b2Vec2.CrossVV(rB, this.m_axis);\n            this.m_axialMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n            if (this.m_axialMass > 0) {\n                this.m_axialMass = 1 / this.m_axialMass;\n            }\n        }\n        {\n            b2_math_1.b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\n            this.m_s1 = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), this.m_perp);\n            this.m_s2 = b2_math_1.b2Vec2.CrossVV(rB, this.m_perp);\n            this.m_K.ex.x = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n            this.m_K.ex.y = iA * this.m_s1 + iB * this.m_s2;\n            this.m_K.ey.x = this.m_K.ex.y;\n            this.m_K.ey.y = iA + iB;\n            if (this.m_K.ey.y === 0) {\n                this.m_K.ey.y = 1;\n            }\n        }\n        if (this.m_enableLimit) {\n            this.m_translation = b2_math_1.b2Vec2.DotVV(this.m_axis, d);\n        }\n        else {\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n        if (!this.m_enableMotor) {\n            this.m_motorImpulse = 0;\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse.SelfMul(data.step.dtRatio);\n            this.m_motorImpulse *= data.step.dtRatio;\n            this.m_lowerImpulse *= data.step.dtRatio;\n            this.m_upperImpulse *= data.step.dtRatio;\n            var axialImpulse = this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse;\n            var P = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.MulSV(this.m_impulse.x, this.m_perp, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.MulSV(axialImpulse, this.m_axis, b2_math_1.b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_P);\n            var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y + axialImpulse * this.m_a1;\n            var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y + axialImpulse * this.m_a2;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * LA;\n            vB.SelfMulAdd(mB, P);\n            wB += iB * LB;\n        }\n        else {\n            this.m_impulse.SetZero();\n            this.m_motorImpulse = 0.0;\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2PrismaticJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        if (this.m_enableMotor) {\n            var Cdot = b2_math_1.b2Vec2.DotVV(this.m_axis, b2_math_1.b2Vec2.SubVV(vB, vA, b2_math_1.b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;\n            var impulse = this.m_axialMass * (this.m_motorSpeed - Cdot);\n            var oldImpulse = this.m_motorImpulse;\n            var maxImpulse = data.step.dt * this.m_maxMotorForce;\n            this.m_motorImpulse = b2_math_1.b2Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);\n            impulse = this.m_motorImpulse - oldImpulse;\n            var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_axis, b2PrismaticJoint.SolveVelocityConstraints_s_P);\n            var LA = impulse * this.m_a1;\n            var LB = impulse * this.m_a2;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * LA;\n            vB.SelfMulAdd(mB, P);\n            wB += iB * LB;\n        }\n        if (this.m_enableLimit) {\n            {\n                var C = this.m_translation - this.m_lowerTranslation;\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_axis, b2_math_1.b2Vec2.SubVV(vB, vA, b2_math_1.b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;\n                var impulse = -this.m_axialMass * (Cdot + b2_math_1.b2Max(C, 0.0) * data.step.inv_dt);\n                var oldImpulse = this.m_lowerImpulse;\n                this.m_lowerImpulse = b2_math_1.b2Max(this.m_lowerImpulse + impulse, 0.0);\n                impulse = this.m_lowerImpulse - oldImpulse;\n                var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_axis, b2PrismaticJoint.SolveVelocityConstraints_s_P);\n                var LA = impulse * this.m_a1;\n                var LB = impulse * this.m_a2;\n                vA.SelfMulSub(mA, P);\n                wA -= iA * LA;\n                vB.SelfMulAdd(mB, P);\n                wB += iB * LB;\n            }\n            {\n                var C = this.m_upperTranslation - this.m_translation;\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_axis, b2_math_1.b2Vec2.SubVV(vA, vB, b2_math_1.b2Vec2.s_t0)) + this.m_a1 * wA - this.m_a2 * wB;\n                var impulse = -this.m_axialMass * (Cdot + b2_math_1.b2Max(C, 0.0) * data.step.inv_dt);\n                var oldImpulse = this.m_upperImpulse;\n                this.m_upperImpulse = b2_math_1.b2Max(this.m_upperImpulse + impulse, 0.0);\n                impulse = this.m_upperImpulse - oldImpulse;\n                var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_axis, b2PrismaticJoint.SolveVelocityConstraints_s_P);\n                var LA = impulse * this.m_a1;\n                var LB = impulse * this.m_a2;\n                vA.SelfMulAdd(mA, P);\n                wA += iA * LA;\n                vB.SelfMulSub(mB, P);\n                wB -= iB * LB;\n            }\n        }\n        {\n            var Cdot_x = b2_math_1.b2Vec2.DotVV(this.m_perp, b2_math_1.b2Vec2.SubVV(vB, vA, b2_math_1.b2Vec2.s_t0)) + this.m_s2 * wB - this.m_s1 * wA;\n            var Cdot_y = wB - wA;\n            var df = this.m_K.Solve(-Cdot_x, -Cdot_y, b2PrismaticJoint.SolveVelocityConstraints_s_df);\n            this.m_impulse.SelfAdd(df);\n            var P = b2_math_1.b2Vec2.MulSV(df.x, this.m_perp, b2PrismaticJoint.SolveVelocityConstraints_s_P);\n            var LA = df.x * this.m_s1 + df.y;\n            var LB = df.x * this.m_s2 + df.y;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * LA;\n            vB.SelfMulAdd(mB, P);\n            wB += iB * LB;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2PrismaticJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var d = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(cB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(cA, rA, b2_math_1.b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_d);\n        var axis = b2_math_1.b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\n        var a1 = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), axis);\n        var a2 = b2_math_1.b2Vec2.CrossVV(rB, axis);\n        var perp = b2_math_1.b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\n        var s1 = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), perp);\n        var s2 = b2_math_1.b2Vec2.CrossVV(rB, perp);\n        var impulse = b2PrismaticJoint.SolvePositionConstraints_s_impulse;\n        var C1_x = b2_math_1.b2Vec2.DotVV(perp, d);\n        var C1_y = aB - aA - this.m_referenceAngle;\n        var linearError = b2_math_1.b2Abs(C1_x);\n        var angularError = b2_math_1.b2Abs(C1_y);\n        var active = false;\n        var C2 = 0;\n        if (this.m_enableLimit) {\n            var translation = b2_math_1.b2Vec2.DotVV(axis, d);\n            if (b2_math_1.b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_settings_1.b2_linearSlop) {\n                C2 = translation;\n                linearError = b2_math_1.b2Max(linearError, b2_math_1.b2Abs(translation));\n                active = true;\n            }\n            else if (translation <= this.m_lowerTranslation) {\n                C2 = b2_math_1.b2Min(translation - this.m_lowerTranslation, 0.0);\n                linearError = b2_math_1.b2Max(linearError, this.m_lowerTranslation - translation);\n                active = true;\n            }\n            else if (translation >= this.m_upperTranslation) {\n                C2 = b2_math_1.b2Max(translation - this.m_upperTranslation, 0.0);\n                linearError = b2_math_1.b2Max(linearError, translation - this.m_upperTranslation);\n                active = true;\n            }\n        }\n        if (active) {\n            var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n            var k12 = iA * s1 + iB * s2;\n            var k13 = iA * s1 * a1 + iB * s2 * a2;\n            var k22 = iA + iB;\n            if (k22 === 0) {\n                k22 = 1;\n            }\n            var k23 = iA * a1 + iB * a2;\n            var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\n            var K = this.m_K3;\n            K.ex.SetXYZ(k11, k12, k13);\n            K.ey.SetXYZ(k12, k22, k23);\n            K.ez.SetXYZ(k13, k23, k33);\n            impulse = K.Solve33((-C1_x), (-C1_y), (-C2), impulse);\n        }\n        else {\n            var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n            var k12 = iA * s1 + iB * s2;\n            var k22 = iA + iB;\n            if (k22 === 0) {\n                k22 = 1;\n            }\n            var K2 = this.m_K2;\n            K2.ex.Set(k11, k12);\n            K2.ey.Set(k12, k22);\n            var impulse1 = K2.Solve((-C1_x), (-C1_y), b2PrismaticJoint.SolvePositionConstraints_s_impulse1);\n            impulse.x = impulse1.x;\n            impulse.y = impulse1.y;\n            impulse.z = 0;\n        }\n        var P = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.MulSV(impulse.x, perp, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.MulSV(impulse.z, axis, b2_math_1.b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_P);\n        var LA = impulse.x * s1 + impulse.y + impulse.z * a1;\n        var LB = impulse.x * s2 + impulse.y + impulse.z * a2;\n        cA.SelfMulSub(mA, P);\n        aA -= iA * LA;\n        cB.SelfMulAdd(mB, P);\n        aB += iB * LB;\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        return linearError <= b2_settings_1.b2_linearSlop && angularError <= b2_settings_1.b2_angularSlop;\n    };\n    b2PrismaticJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2PrismaticJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2PrismaticJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_axis.x);\n        out.y = inv_dt * (this.m_impulse.y * this.m_perp.y + (this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_axis.y);\n        return out;\n    };\n    b2PrismaticJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * this.m_impulse.y;\n    };\n    b2PrismaticJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\n    b2PrismaticJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\n    b2PrismaticJoint.prototype.GetLocalAxisA = function () { return this.m_localXAxisA; };\n    b2PrismaticJoint.prototype.GetReferenceAngle = function () { return this.m_referenceAngle; };\n    b2PrismaticJoint.prototype.GetJointTranslation = function () {\n        var pA = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PrismaticJoint.GetJointTranslation_s_pA);\n        var pB = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PrismaticJoint.GetJointTranslation_s_pB);\n        var d = b2_math_1.b2Vec2.SubVV(pB, pA, b2PrismaticJoint.GetJointTranslation_s_d);\n        var axis = this.m_bodyA.GetWorldVector(this.m_localXAxisA, b2PrismaticJoint.GetJointTranslation_s_axis);\n        var translation = b2_math_1.b2Vec2.DotVV(d, axis);\n        return translation;\n    };\n    b2PrismaticJoint.prototype.GetJointSpeed = function () {\n        var bA = this.m_bodyA;\n        var bB = this.m_bodyB;\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\n        var pA = b2_math_1.b2Vec2.AddVV(bA.m_sweep.c, rA, b2_math_1.b2Vec2.s_t0);\n        var pB = b2_math_1.b2Vec2.AddVV(bB.m_sweep.c, rB, b2_math_1.b2Vec2.s_t1);\n        var d = b2_math_1.b2Vec2.SubVV(pB, pA, b2_math_1.b2Vec2.s_t2);\n        var axis = bA.GetWorldVector(this.m_localXAxisA, this.m_axis);\n        var vA = bA.m_linearVelocity;\n        var vB = bB.m_linearVelocity;\n        var wA = bA.m_angularVelocity;\n        var wB = bB.m_angularVelocity;\n        var speed = b2_math_1.b2Vec2.DotVV(d, b2_math_1.b2Vec2.CrossSV(wA, axis, b2_math_1.b2Vec2.s_t0)) +\n            b2_math_1.b2Vec2.DotVV(axis, b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, rA, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0));\n        return speed;\n    };\n    b2PrismaticJoint.prototype.IsLimitEnabled = function () {\n        return this.m_enableLimit;\n    };\n    b2PrismaticJoint.prototype.EnableLimit = function (flag) {\n        if (flag !== this.m_enableLimit) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_enableLimit = flag;\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n    };\n    b2PrismaticJoint.prototype.GetLowerLimit = function () {\n        return this.m_lowerTranslation;\n    };\n    b2PrismaticJoint.prototype.GetUpperLimit = function () {\n        return this.m_upperTranslation;\n    };\n    b2PrismaticJoint.prototype.SetLimits = function (lower, upper) {\n        if (lower !== this.m_lowerTranslation || upper !== this.m_upperTranslation) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_lowerTranslation = lower;\n            this.m_upperTranslation = upper;\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n    };\n    b2PrismaticJoint.prototype.IsMotorEnabled = function () {\n        return this.m_enableMotor;\n    };\n    b2PrismaticJoint.prototype.EnableMotor = function (flag) {\n        if (flag !== this.m_enableMotor) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_enableMotor = flag;\n        }\n    };\n    b2PrismaticJoint.prototype.SetMotorSpeed = function (speed) {\n        if (speed !== this.m_motorSpeed) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_motorSpeed = speed;\n        }\n    };\n    b2PrismaticJoint.prototype.GetMotorSpeed = function () {\n        return this.m_motorSpeed;\n    };\n    b2PrismaticJoint.prototype.SetMaxMotorForce = function (force) {\n        if (force !== this.m_maxMotorForce) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_maxMotorForce = force;\n        }\n    };\n    b2PrismaticJoint.prototype.GetMaxMotorForce = function () { return this.m_maxMotorForce; };\n    b2PrismaticJoint.prototype.GetMotorForce = function (inv_dt) {\n        return inv_dt * this.m_motorImpulse;\n    };\n    b2PrismaticJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\n        log(\"  jd.enableLimit = %s;\\n\", (this.m_enableLimit) ? (\"true\") : (\"false\"));\n        log(\"  jd.lowerTranslation = %.15f;\\n\", this.m_lowerTranslation);\n        log(\"  jd.upperTranslation = %.15f;\\n\", this.m_upperTranslation);\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\n        log(\"  jd.maxMotorForce = %.15f;\\n\", this.m_maxMotorForce);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2PrismaticJoint.prototype.Draw = function (draw) {\n        var xfA = this.m_bodyA.GetTransform();\n        var xfB = this.m_bodyB.GetTransform();\n        var pA = b2_math_1.b2Transform.MulXV(xfA, this.m_localAnchorA, b2PrismaticJoint.Draw_s_pA);\n        var pB = b2_math_1.b2Transform.MulXV(xfB, this.m_localAnchorB, b2PrismaticJoint.Draw_s_pB);\n        var axis = b2_math_1.b2Rot.MulRV(xfA.q, this.m_localXAxisA, b2PrismaticJoint.Draw_s_axis);\n        var c1 = b2PrismaticJoint.Draw_s_c1;\n        var c2 = b2PrismaticJoint.Draw_s_c2;\n        var c3 = b2PrismaticJoint.Draw_s_c3;\n        var c4 = b2PrismaticJoint.Draw_s_c4;\n        var c5 = b2PrismaticJoint.Draw_s_c5;\n        draw.DrawSegment(pA, pB, c5);\n        if (this.m_enableLimit) {\n            var lower = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_lowerTranslation, axis, b2PrismaticJoint.Draw_s_lower);\n            var upper = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_upperTranslation, axis, b2PrismaticJoint.Draw_s_upper);\n            var perp = b2_math_1.b2Rot.MulRV(xfA.q, this.m_localYAxisA, b2PrismaticJoint.Draw_s_perp);\n            draw.DrawSegment(lower, upper, c1);\n            draw.DrawSegment(b2_math_1.b2Vec2.AddVMulSV(lower, -0.5, perp, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVMulSV(lower, 0.5, perp, b2_math_1.b2Vec2.s_t1), c2);\n            draw.DrawSegment(b2_math_1.b2Vec2.AddVMulSV(upper, -0.5, perp, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVMulSV(upper, 0.5, perp, b2_math_1.b2Vec2.s_t1), c3);\n        }\n        else {\n            draw.DrawSegment(b2_math_1.b2Vec2.AddVMulSV(pA, -1.0, axis, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVMulSV(pA, 1.0, axis, b2_math_1.b2Vec2.s_t1), c1);\n        }\n        draw.DrawPoint(pA, 5.0, c1);\n        draw.DrawPoint(pB, 5.0, c4);\n    };\n    b2PrismaticJoint.InitVelocityConstraints_s_d = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.InitVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.SolveVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.SolveVelocityConstraints_s_df = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.SolvePositionConstraints_s_d = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.SolvePositionConstraints_s_impulse = new b2_math_1.b2Vec3();\n    b2PrismaticJoint.SolvePositionConstraints_s_impulse1 = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.SolvePositionConstraints_s_P = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.GetJointTranslation_s_pA = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.GetJointTranslation_s_pB = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.GetJointTranslation_s_d = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.GetJointTranslation_s_axis = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.Draw_s_pA = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.Draw_s_pB = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.Draw_s_axis = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.Draw_s_c1 = new b2_draw_1.b2Color(0.7, 0.7, 0.7);\n    b2PrismaticJoint.Draw_s_c2 = new b2_draw_1.b2Color(0.3, 0.9, 0.3);\n    b2PrismaticJoint.Draw_s_c3 = new b2_draw_1.b2Color(0.9, 0.3, 0.3);\n    b2PrismaticJoint.Draw_s_c4 = new b2_draw_1.b2Color(0.3, 0.3, 0.9);\n    b2PrismaticJoint.Draw_s_c5 = new b2_draw_1.b2Color(0.4, 0.4, 0.4);\n    b2PrismaticJoint.Draw_s_lower = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.Draw_s_upper = new b2_math_1.b2Vec2();\n    b2PrismaticJoint.Draw_s_perp = new b2_math_1.b2Vec2();\n    return b2PrismaticJoint;\n}(b2_joint_1.b2Joint));\nexports.b2PrismaticJoint = b2PrismaticJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_prismatic_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_pulley_joint.ts":
/*!***********************************************!*\
  !*** ./src/box2d/dynamics/b2_pulley_joint.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2PulleyJoint = exports.b2PulleyJointDef = exports.b2_minPulleyLength = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nexports.b2_minPulleyLength = 2;\nvar b2PulleyJointDef = (function (_super) {\n    __extends(b2PulleyJointDef, _super);\n    function b2PulleyJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_pulleyJoint) || this;\n        _this.groundAnchorA = new b2_math_1.b2Vec2(-1, 1);\n        _this.groundAnchorB = new b2_math_1.b2Vec2(1, 1);\n        _this.localAnchorA = new b2_math_1.b2Vec2(-1, 0);\n        _this.localAnchorB = new b2_math_1.b2Vec2(1, 0);\n        _this.lengthA = 0;\n        _this.lengthB = 0;\n        _this.ratio = 1;\n        _this.collideConnected = true;\n        return _this;\n    }\n    b2PulleyJointDef.prototype.Initialize = function (bA, bB, groundA, groundB, anchorA, anchorB, r) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.groundAnchorA.Copy(groundA);\n        this.groundAnchorB.Copy(groundB);\n        this.bodyA.GetLocalPoint(anchorA, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchorB, this.localAnchorB);\n        this.lengthA = b2_math_1.b2Vec2.DistanceVV(anchorA, groundA);\n        this.lengthB = b2_math_1.b2Vec2.DistanceVV(anchorB, groundB);\n        this.ratio = r;\n    };\n    return b2PulleyJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2PulleyJointDef = b2PulleyJointDef;\nvar b2PulleyJoint = (function (_super) {\n    __extends(b2PulleyJoint, _super);\n    function b2PulleyJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_groundAnchorA = new b2_math_1.b2Vec2();\n        _this.m_groundAnchorB = new b2_math_1.b2Vec2();\n        _this.m_lengthA = 0;\n        _this.m_lengthB = 0;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_constant = 0;\n        _this.m_ratio = 0;\n        _this.m_impulse = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_uA = new b2_math_1.b2Vec2();\n        _this.m_uB = new b2_math_1.b2Vec2();\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_mass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_groundAnchorA.Copy(b2_settings_1.b2Maybe(def.groundAnchorA, new b2_math_1.b2Vec2(-1, 1)));\n        _this.m_groundAnchorB.Copy(b2_settings_1.b2Maybe(def.groundAnchorB, new b2_math_1.b2Vec2(1, 0)));\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, new b2_math_1.b2Vec2(-1, 0)));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, new b2_math_1.b2Vec2(1, 0)));\n        _this.m_lengthA = b2_settings_1.b2Maybe(def.lengthA, 0);\n        _this.m_lengthB = b2_settings_1.b2Maybe(def.lengthB, 0);\n        _this.m_ratio = b2_settings_1.b2Maybe(def.ratio, 1);\n        _this.m_constant = b2_settings_1.b2Maybe(def.lengthA, 0) + _this.m_ratio * b2_settings_1.b2Maybe(def.lengthB, 0);\n        _this.m_impulse = 0;\n        return _this;\n    }\n    b2PulleyJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        this.m_uA.Copy(cA).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);\n        this.m_uB.Copy(cB).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);\n        var lengthA = this.m_uA.Length();\n        var lengthB = this.m_uB.Length();\n        if (lengthA > 10 * b2_settings_1.b2_linearSlop) {\n            this.m_uA.SelfMul(1 / lengthA);\n        }\n        else {\n            this.m_uA.SetZero();\n        }\n        if (lengthB > 10 * b2_settings_1.b2_linearSlop) {\n            this.m_uB.SelfMul(1 / lengthB);\n        }\n        else {\n            this.m_uB.SetZero();\n        }\n        var ruA = b2_math_1.b2Vec2.CrossVV(this.m_rA, this.m_uA);\n        var ruB = b2_math_1.b2Vec2.CrossVV(this.m_rB, this.m_uB);\n        var mA = this.m_invMassA + this.m_invIA * ruA * ruA;\n        var mB = this.m_invMassB + this.m_invIB * ruB * ruB;\n        this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n        if (this.m_mass > 0) {\n            this.m_mass = 1 / this.m_mass;\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse *= data.step.dtRatio;\n            var PA = b2_math_1.b2Vec2.MulSV(-(this.m_impulse), this.m_uA, b2PulleyJoint.InitVelocityConstraints_s_PA);\n            var PB = b2_math_1.b2Vec2.MulSV((-this.m_ratio * this.m_impulse), this.m_uB, b2PulleyJoint.InitVelocityConstraints_s_PB);\n            vA.SelfMulAdd(this.m_invMassA, PA);\n            wA += this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, PA);\n            vB.SelfMulAdd(this.m_invMassB, PB);\n            wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, PB);\n        }\n        else {\n            this.m_impulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2PulleyJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var vpA = b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2PulleyJoint.SolveVelocityConstraints_s_vpA);\n        var vpB = b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2PulleyJoint.SolveVelocityConstraints_s_vpB);\n        var Cdot = -b2_math_1.b2Vec2.DotVV(this.m_uA, vpA) - this.m_ratio * b2_math_1.b2Vec2.DotVV(this.m_uB, vpB);\n        var impulse = -this.m_mass * Cdot;\n        this.m_impulse += impulse;\n        var PA = b2_math_1.b2Vec2.MulSV(-impulse, this.m_uA, b2PulleyJoint.SolveVelocityConstraints_s_PA);\n        var PB = b2_math_1.b2Vec2.MulSV(-this.m_ratio * impulse, this.m_uB, b2PulleyJoint.SolveVelocityConstraints_s_PB);\n        vA.SelfMulAdd(this.m_invMassA, PA);\n        wA += this.m_invIA * b2_math_1.b2Vec2.CrossVV(this.m_rA, PA);\n        vB.SelfMulAdd(this.m_invMassB, PB);\n        wB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(this.m_rB, PB);\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2PulleyJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var uA = this.m_uA.Copy(cA).SelfAdd(rA).SelfSub(this.m_groundAnchorA);\n        var uB = this.m_uB.Copy(cB).SelfAdd(rB).SelfSub(this.m_groundAnchorB);\n        var lengthA = uA.Length();\n        var lengthB = uB.Length();\n        if (lengthA > 10 * b2_settings_1.b2_linearSlop) {\n            uA.SelfMul(1 / lengthA);\n        }\n        else {\n            uA.SetZero();\n        }\n        if (lengthB > 10 * b2_settings_1.b2_linearSlop) {\n            uB.SelfMul(1 / lengthB);\n        }\n        else {\n            uB.SetZero();\n        }\n        var ruA = b2_math_1.b2Vec2.CrossVV(rA, uA);\n        var ruB = b2_math_1.b2Vec2.CrossVV(rB, uB);\n        var mA = this.m_invMassA + this.m_invIA * ruA * ruA;\n        var mB = this.m_invMassB + this.m_invIB * ruB * ruB;\n        var mass = mA + this.m_ratio * this.m_ratio * mB;\n        if (mass > 0) {\n            mass = 1 / mass;\n        }\n        var C = this.m_constant - lengthA - this.m_ratio * lengthB;\n        var linearError = b2_math_1.b2Abs(C);\n        var impulse = -mass * C;\n        var PA = b2_math_1.b2Vec2.MulSV(-impulse, uA, b2PulleyJoint.SolvePositionConstraints_s_PA);\n        var PB = b2_math_1.b2Vec2.MulSV(-this.m_ratio * impulse, uB, b2PulleyJoint.SolvePositionConstraints_s_PB);\n        cA.SelfMulAdd(this.m_invMassA, PA);\n        aA += this.m_invIA * b2_math_1.b2Vec2.CrossVV(rA, PA);\n        cB.SelfMulAdd(this.m_invMassB, PB);\n        aB += this.m_invIB * b2_math_1.b2Vec2.CrossVV(rB, PB);\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        return linearError < b2_settings_1.b2_linearSlop;\n    };\n    b2PulleyJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2PulleyJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2PulleyJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * this.m_impulse * this.m_uB.x;\n        out.y = inv_dt * this.m_impulse * this.m_uB.y;\n        return out;\n    };\n    b2PulleyJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return 0;\n    };\n    b2PulleyJoint.prototype.GetGroundAnchorA = function () {\n        return this.m_groundAnchorA;\n    };\n    b2PulleyJoint.prototype.GetGroundAnchorB = function () {\n        return this.m_groundAnchorB;\n    };\n    b2PulleyJoint.prototype.GetLengthA = function () {\n        return this.m_lengthA;\n    };\n    b2PulleyJoint.prototype.GetLengthB = function () {\n        return this.m_lengthB;\n    };\n    b2PulleyJoint.prototype.GetRatio = function () {\n        return this.m_ratio;\n    };\n    b2PulleyJoint.prototype.GetCurrentLengthA = function () {\n        var p = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PulleyJoint.GetCurrentLengthA_s_p);\n        var s = this.m_groundAnchorA;\n        return b2_math_1.b2Vec2.DistanceVV(p, s);\n    };\n    b2PulleyJoint.prototype.GetCurrentLengthB = function () {\n        var p = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PulleyJoint.GetCurrentLengthB_s_p);\n        var s = this.m_groundAnchorB;\n        return b2_math_1.b2Vec2.DistanceVV(p, s);\n    };\n    b2PulleyJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2PulleyJointDef = new b2PulleyJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.groundAnchorA.Set(%.15f, %.15f);\\n\", this.m_groundAnchorA.x, this.m_groundAnchorA.y);\n        log(\"  jd.groundAnchorB.Set(%.15f, %.15f);\\n\", this.m_groundAnchorB.x, this.m_groundAnchorB.y);\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.lengthA = %.15f;\\n\", this.m_lengthA);\n        log(\"  jd.lengthB = %.15f;\\n\", this.m_lengthB);\n        log(\"  jd.ratio = %.15f;\\n\", this.m_ratio);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2PulleyJoint.prototype.ShiftOrigin = function (newOrigin) {\n        this.m_groundAnchorA.SelfSub(newOrigin);\n        this.m_groundAnchorB.SelfSub(newOrigin);\n    };\n    b2PulleyJoint.InitVelocityConstraints_s_PA = new b2_math_1.b2Vec2();\n    b2PulleyJoint.InitVelocityConstraints_s_PB = new b2_math_1.b2Vec2();\n    b2PulleyJoint.SolveVelocityConstraints_s_vpA = new b2_math_1.b2Vec2();\n    b2PulleyJoint.SolveVelocityConstraints_s_vpB = new b2_math_1.b2Vec2();\n    b2PulleyJoint.SolveVelocityConstraints_s_PA = new b2_math_1.b2Vec2();\n    b2PulleyJoint.SolveVelocityConstraints_s_PB = new b2_math_1.b2Vec2();\n    b2PulleyJoint.SolvePositionConstraints_s_PA = new b2_math_1.b2Vec2();\n    b2PulleyJoint.SolvePositionConstraints_s_PB = new b2_math_1.b2Vec2();\n    b2PulleyJoint.GetCurrentLengthA_s_p = new b2_math_1.b2Vec2();\n    b2PulleyJoint.GetCurrentLengthB_s_p = new b2_math_1.b2Vec2();\n    return b2PulleyJoint;\n}(b2_joint_1.b2Joint));\nexports.b2PulleyJoint = b2PulleyJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_pulley_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_revolute_joint.ts":
/*!*************************************************!*\
  !*** ./src/box2d/dynamics/b2_revolute_joint.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2RevoluteJoint = exports.b2RevoluteJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2RevoluteJointDef = (function (_super) {\n    __extends(b2RevoluteJointDef, _super);\n    function b2RevoluteJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_revoluteJoint) || this;\n        _this.localAnchorA = new b2_math_1.b2Vec2(0, 0);\n        _this.localAnchorB = new b2_math_1.b2Vec2(0, 0);\n        _this.referenceAngle = 0;\n        _this.enableLimit = false;\n        _this.lowerAngle = 0;\n        _this.upperAngle = 0;\n        _this.enableMotor = false;\n        _this.motorSpeed = 0;\n        _this.maxMotorTorque = 0;\n        return _this;\n    }\n    b2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n    };\n    return b2RevoluteJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2RevoluteJointDef = b2RevoluteJointDef;\nvar b2RevoluteJoint = (function (_super) {\n    __extends(b2RevoluteJoint, _super);\n    function b2RevoluteJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_impulse = new b2_math_1.b2Vec2();\n        _this.m_motorImpulse = 0;\n        _this.m_lowerImpulse = 0;\n        _this.m_upperImpulse = 0;\n        _this.m_enableMotor = false;\n        _this.m_maxMotorTorque = 0;\n        _this.m_motorSpeed = 0;\n        _this.m_enableLimit = false;\n        _this.m_referenceAngle = 0;\n        _this.m_lowerAngle = 0;\n        _this.m_upperAngle = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_K = new b2_math_1.b2Mat22();\n        _this.m_angle = 0;\n        _this.m_axialMass = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, b2_math_1.b2Vec2.ZERO));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, b2_math_1.b2Vec2.ZERO));\n        _this.m_referenceAngle = b2_settings_1.b2Maybe(def.referenceAngle, 0);\n        _this.m_impulse.SetZero();\n        _this.m_motorImpulse = 0;\n        _this.m_lowerAngle = b2_settings_1.b2Maybe(def.lowerAngle, 0);\n        _this.m_upperAngle = b2_settings_1.b2Maybe(def.upperAngle, 0);\n        _this.m_maxMotorTorque = b2_settings_1.b2Maybe(def.maxMotorTorque, 0);\n        _this.m_motorSpeed = b2_settings_1.b2Maybe(def.motorSpeed, 0);\n        _this.m_enableLimit = b2_settings_1.b2Maybe(def.enableLimit, false);\n        _this.m_enableMotor = b2_settings_1.b2Maybe(def.enableMotor, false);\n        return _this;\n    }\n    b2RevoluteJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        this.m_K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\n        this.m_K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n        this.m_K.ex.y = this.m_K.ey.x;\n        this.m_K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\n        this.m_axialMass = iA + iB;\n        var fixedRotation;\n        if (this.m_axialMass > 0.0) {\n            this.m_axialMass = 1.0 / this.m_axialMass;\n            fixedRotation = false;\n        }\n        else {\n            fixedRotation = true;\n        }\n        this.m_angle = aB - aA - this.m_referenceAngle;\n        if (this.m_enableLimit === false || fixedRotation) {\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n        if (this.m_enableMotor === false || fixedRotation) {\n            this.m_motorImpulse = 0.0;\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse.SelfMul(data.step.dtRatio);\n            this.m_motorImpulse *= data.step.dtRatio;\n            this.m_lowerImpulse *= data.step.dtRatio;\n            this.m_upperImpulse *= data.step.dtRatio;\n            var axialImpulse = this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse;\n            var P = b2RevoluteJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\n            vA.SelfMulSub(mA, P);\n            wA -= iA * (b2_math_1.b2Vec2.CrossVV(this.m_rA, P) + axialImpulse);\n            vB.SelfMulAdd(mB, P);\n            wB += iB * (b2_math_1.b2Vec2.CrossVV(this.m_rB, P) + axialImpulse);\n        }\n        else {\n            this.m_impulse.SetZero();\n            this.m_motorImpulse = 0;\n            this.m_lowerImpulse = 0;\n            this.m_upperImpulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2RevoluteJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var fixedRotation = (iA + iB === 0);\n        if (this.m_enableMotor && !fixedRotation) {\n            var Cdot = wB - wA - this.m_motorSpeed;\n            var impulse = -this.m_axialMass * Cdot;\n            var oldImpulse = this.m_motorImpulse;\n            var maxImpulse = data.step.dt * this.m_maxMotorTorque;\n            this.m_motorImpulse = b2_math_1.b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n            impulse = this.m_motorImpulse - oldImpulse;\n            wA -= iA * impulse;\n            wB += iB * impulse;\n        }\n        if (this.m_enableLimit && !fixedRotation) {\n            {\n                var C = this.m_angle - this.m_lowerAngle;\n                var Cdot = wB - wA;\n                var impulse = -this.m_axialMass * (Cdot + b2_math_1.b2Max(C, 0.0) * data.step.inv_dt);\n                var oldImpulse = this.m_lowerImpulse;\n                this.m_lowerImpulse = b2_math_1.b2Max(this.m_lowerImpulse + impulse, 0.0);\n                impulse = this.m_lowerImpulse - oldImpulse;\n                wA -= iA * impulse;\n                wB += iB * impulse;\n            }\n            {\n                var C = this.m_upperAngle - this.m_angle;\n                var Cdot = wA - wB;\n                var impulse = -this.m_axialMass * (Cdot + b2_math_1.b2Max(C, 0.0) * data.step.inv_dt);\n                var oldImpulse = this.m_upperImpulse;\n                this.m_upperImpulse = b2_math_1.b2Max(this.m_upperImpulse + impulse, 0.0);\n                impulse = this.m_upperImpulse - oldImpulse;\n                wA += iA * impulse;\n                wB -= iB * impulse;\n            }\n        }\n        {\n            var Cdot_v2 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2_math_1.b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2);\n            var impulse_v2 = this.m_K.Solve(-Cdot_v2.x, -Cdot_v2.y, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2);\n            this.m_impulse.x += impulse_v2.x;\n            this.m_impulse.y += impulse_v2.y;\n            vA.SelfMulSub(mA, impulse_v2);\n            wA -= iA * b2_math_1.b2Vec2.CrossVV(this.m_rA, impulse_v2);\n            vB.SelfMulAdd(mB, impulse_v2);\n            wB += iB * b2_math_1.b2Vec2.CrossVV(this.m_rB, impulse_v2);\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2RevoluteJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        var angularError = 0;\n        var positionError = 0;\n        var fixedRotation = (this.m_invIA + this.m_invIB === 0);\n        if (this.m_enableLimit && !fixedRotation) {\n            var angle = aB - aA - this.m_referenceAngle;\n            var C = 0.0;\n            if (b2_math_1.b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * b2_settings_1.b2_angularSlop) {\n                C = b2_math_1.b2Clamp(angle - this.m_lowerAngle, -b2_settings_1.b2_maxAngularCorrection, b2_settings_1.b2_maxAngularCorrection);\n            }\n            else if (angle <= this.m_lowerAngle) {\n                C = b2_math_1.b2Clamp(angle - this.m_lowerAngle + b2_settings_1.b2_angularSlop, -b2_settings_1.b2_maxAngularCorrection, 0.0);\n            }\n            else if (angle >= this.m_upperAngle) {\n                C = b2_math_1.b2Clamp(angle - this.m_upperAngle - b2_settings_1.b2_angularSlop, 0.0, b2_settings_1.b2_maxAngularCorrection);\n            }\n            var limitImpulse = -this.m_axialMass * C;\n            aA -= this.m_invIA * limitImpulse;\n            aB += this.m_invIB * limitImpulse;\n            angularError = b2_math_1.b2Abs(C);\n        }\n        {\n            qA.SetAngle(aA);\n            qB.SetAngle(aB);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n            var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n            var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n            var C_v2 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(cB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(cA, rA, b2_math_1.b2Vec2.s_t1), b2RevoluteJoint.SolvePositionConstraints_s_C_v2);\n            positionError = C_v2.Length();\n            var mA = this.m_invMassA, mB = this.m_invMassB;\n            var iA = this.m_invIA, iB = this.m_invIB;\n            var K = this.m_K;\n            K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n            K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n            K.ey.x = K.ex.y;\n            K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n            var impulse = K.Solve(C_v2.x, C_v2.y, b2RevoluteJoint.SolvePositionConstraints_s_impulse).SelfNeg();\n            cA.SelfMulSub(mA, impulse);\n            aA -= iA * b2_math_1.b2Vec2.CrossVV(rA, impulse);\n            cB.SelfMulAdd(mB, impulse);\n            aB += iB * b2_math_1.b2Vec2.CrossVV(rB, impulse);\n        }\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        return positionError <= b2_settings_1.b2_linearSlop && angularError <= b2_settings_1.b2_angularSlop;\n    };\n    b2RevoluteJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2RevoluteJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2RevoluteJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * this.m_impulse.x;\n        out.y = inv_dt * this.m_impulse.y;\n        return out;\n    };\n    b2RevoluteJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * (this.m_lowerImpulse - this.m_upperImpulse);\n    };\n    b2RevoluteJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\n    b2RevoluteJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\n    b2RevoluteJoint.prototype.GetReferenceAngle = function () { return this.m_referenceAngle; };\n    b2RevoluteJoint.prototype.GetJointAngle = function () {\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;\n    };\n    b2RevoluteJoint.prototype.GetJointSpeed = function () {\n        return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;\n    };\n    b2RevoluteJoint.prototype.IsMotorEnabled = function () {\n        return this.m_enableMotor;\n    };\n    b2RevoluteJoint.prototype.EnableMotor = function (flag) {\n        if (flag !== this.m_enableMotor) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_enableMotor = flag;\n        }\n    };\n    b2RevoluteJoint.prototype.GetMotorTorque = function (inv_dt) {\n        return inv_dt * this.m_motorImpulse;\n    };\n    b2RevoluteJoint.prototype.GetMotorSpeed = function () {\n        return this.m_motorSpeed;\n    };\n    b2RevoluteJoint.prototype.SetMaxMotorTorque = function (torque) {\n        if (torque !== this.m_maxMotorTorque) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_maxMotorTorque = torque;\n        }\n    };\n    b2RevoluteJoint.prototype.GetMaxMotorTorque = function () { return this.m_maxMotorTorque; };\n    b2RevoluteJoint.prototype.IsLimitEnabled = function () {\n        return this.m_enableLimit;\n    };\n    b2RevoluteJoint.prototype.EnableLimit = function (flag) {\n        if (flag !== this.m_enableLimit) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_enableLimit = flag;\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n    };\n    b2RevoluteJoint.prototype.GetLowerLimit = function () {\n        return this.m_lowerAngle;\n    };\n    b2RevoluteJoint.prototype.GetUpperLimit = function () {\n        return this.m_upperAngle;\n    };\n    b2RevoluteJoint.prototype.SetLimits = function (lower, upper) {\n        if (lower !== this.m_lowerAngle || upper !== this.m_upperAngle) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n            this.m_lowerAngle = lower;\n            this.m_upperAngle = upper;\n        }\n    };\n    b2RevoluteJoint.prototype.SetMotorSpeed = function (speed) {\n        if (speed !== this.m_motorSpeed) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_motorSpeed = speed;\n        }\n    };\n    b2RevoluteJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\n        log(\"  jd.enableLimit = %s;\\n\", (this.m_enableLimit) ? (\"true\") : (\"false\"));\n        log(\"  jd.lowerAngle = %.15f;\\n\", this.m_lowerAngle);\n        log(\"  jd.upperAngle = %.15f;\\n\", this.m_upperAngle);\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2RevoluteJoint.prototype.Draw = function (draw) {\n        var xfA = this.m_bodyA.GetTransform();\n        var xfB = this.m_bodyB.GetTransform();\n        var pA = b2_math_1.b2Transform.MulXV(xfA, this.m_localAnchorA, b2RevoluteJoint.Draw_s_pA);\n        var pB = b2_math_1.b2Transform.MulXV(xfB, this.m_localAnchorB, b2RevoluteJoint.Draw_s_pB);\n        var c1 = b2RevoluteJoint.Draw_s_c1;\n        var c2 = b2RevoluteJoint.Draw_s_c2;\n        var c3 = b2RevoluteJoint.Draw_s_c3;\n        var c4 = b2RevoluteJoint.Draw_s_c4;\n        var c5 = b2RevoluteJoint.Draw_s_c5;\n        draw.DrawPoint(pA, 5.0, c4);\n        draw.DrawPoint(pB, 5.0, c5);\n        var aA = this.m_bodyA.GetAngle();\n        var aB = this.m_bodyB.GetAngle();\n        var angle = aB - aA - this.m_referenceAngle;\n        var L = 0.5;\n        var r = b2RevoluteJoint.Draw_s_r.Set(L * Math.cos(angle), L * Math.sin(angle));\n        draw.DrawSegment(pB, b2_math_1.b2Vec2.AddVV(pB, r, b2_math_1.b2Vec2.s_t0), c1);\n        draw.DrawCircle(pB, L, c1);\n        if (this.m_enableLimit) {\n            var rlo = b2RevoluteJoint.Draw_s_rlo.Set(L * Math.cos(this.m_lowerAngle), L * Math.sin(this.m_lowerAngle));\n            var rhi = b2RevoluteJoint.Draw_s_rhi.Set(L * Math.cos(this.m_upperAngle), L * Math.sin(this.m_upperAngle));\n            draw.DrawSegment(pB, b2_math_1.b2Vec2.AddVV(pB, rlo, b2_math_1.b2Vec2.s_t0), c2);\n            draw.DrawSegment(pB, b2_math_1.b2Vec2.AddVV(pB, rhi, b2_math_1.b2Vec2.s_t0), c3);\n        }\n        var color = b2RevoluteJoint.Draw_s_color_;\n        draw.DrawSegment(xfA.p, pA, color);\n        draw.DrawSegment(pA, pB, color);\n        draw.DrawSegment(xfB.p, pB, color);\n    };\n    b2RevoluteJoint.InitVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2 = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.SolvePositionConstraints_s_C_v2 = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.SolvePositionConstraints_s_impulse = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.Draw_s_pA = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.Draw_s_pB = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.Draw_s_c1 = new b2_draw_1.b2Color(0.7, 0.7, 0.7);\n    b2RevoluteJoint.Draw_s_c2 = new b2_draw_1.b2Color(0.3, 0.9, 0.3);\n    b2RevoluteJoint.Draw_s_c3 = new b2_draw_1.b2Color(0.9, 0.3, 0.3);\n    b2RevoluteJoint.Draw_s_c4 = new b2_draw_1.b2Color(0.3, 0.3, 0.9);\n    b2RevoluteJoint.Draw_s_c5 = new b2_draw_1.b2Color(0.4, 0.4, 0.4);\n    b2RevoluteJoint.Draw_s_color_ = new b2_draw_1.b2Color(0.5, 0.8, 0.8);\n    b2RevoluteJoint.Draw_s_r = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.Draw_s_rlo = new b2_math_1.b2Vec2();\n    b2RevoluteJoint.Draw_s_rhi = new b2_math_1.b2Vec2();\n    return b2RevoluteJoint;\n}(b2_joint_1.b2Joint));\nexports.b2RevoluteJoint = b2RevoluteJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_revolute_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_time_step.ts":
/*!********************************************!*\
  !*** ./src/box2d/dynamics/b2_time_step.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2SolverData = exports.b2Velocity = exports.b2Position = exports.b2TimeStep = exports.b2Profile = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2Profile = (function () {\n    function b2Profile() {\n        this.step = 0;\n        this.collide = 0;\n        this.solve = 0;\n        this.solveInit = 0;\n        this.solveVelocity = 0;\n        this.solvePosition = 0;\n        this.broadphase = 0;\n        this.solveTOI = 0;\n    }\n    b2Profile.prototype.Reset = function () {\n        this.step = 0;\n        this.collide = 0;\n        this.solve = 0;\n        this.solveInit = 0;\n        this.solveVelocity = 0;\n        this.solvePosition = 0;\n        this.broadphase = 0;\n        this.solveTOI = 0;\n        return this;\n    };\n    return b2Profile;\n}());\nexports.b2Profile = b2Profile;\nvar b2TimeStep = (function () {\n    function b2TimeStep() {\n        this.dt = 0;\n        this.inv_dt = 0;\n        this.dtRatio = 0;\n        this.velocityIterations = 0;\n        this.positionIterations = 0;\n        this.particleIterations = 0;\n        this.warmStarting = false;\n    }\n    b2TimeStep.prototype.Copy = function (step) {\n        this.dt = step.dt;\n        this.inv_dt = step.inv_dt;\n        this.dtRatio = step.dtRatio;\n        this.positionIterations = step.positionIterations;\n        this.velocityIterations = step.velocityIterations;\n        this.particleIterations = step.particleIterations;\n        this.warmStarting = step.warmStarting;\n        return this;\n    };\n    return b2TimeStep;\n}());\nexports.b2TimeStep = b2TimeStep;\nvar b2Position = (function () {\n    function b2Position() {\n        this.c = new b2_math_1.b2Vec2();\n        this.a = 0;\n    }\n    b2Position.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2Position(); });\n    };\n    return b2Position;\n}());\nexports.b2Position = b2Position;\nvar b2Velocity = (function () {\n    function b2Velocity() {\n        this.v = new b2_math_1.b2Vec2();\n        this.w = 0;\n    }\n    b2Velocity.MakeArray = function (length) {\n        return b2_settings_1.b2MakeArray(length, function (i) { return new b2Velocity(); });\n    };\n    return b2Velocity;\n}());\nexports.b2Velocity = b2Velocity;\nvar b2SolverData = (function () {\n    function b2SolverData() {\n        this.step = new b2TimeStep();\n    }\n    return b2SolverData;\n}());\nexports.b2SolverData = b2SolverData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfdGltZV9zdGVwLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2R5bmFtaWNzL2IyX3RpbWVfc3RlcC50cz82MWQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAwNi0yMDExIEVyaW4gQ2F0dG8gaHR0cDovL3d3dy5ib3gyZC5vcmdcbipcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4qIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4qIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG4qL1xuXG5pbXBvcnQgeyBiMk1ha2VBcnJheSB9IGZyb20gXCIuLi9jb21tb24vYjJfc2V0dGluZ3NcIjtcbmltcG9ydCB7IGIyVmVjMiB9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuXG4vLy8gUHJvZmlsaW5nIGRhdGEuIFRpbWVzIGFyZSBpbiBtaWxsaXNlY29uZHMuXG5leHBvcnQgY2xhc3MgYjJQcm9maWxlIHtcbiAgcHVibGljIHN0ZXA6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBjb2xsaWRlOiBudW1iZXIgPSAwO1xuICBwdWJsaWMgc29sdmU6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzb2x2ZUluaXQ6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzb2x2ZVZlbG9jaXR5OiBudW1iZXIgPSAwO1xuICBwdWJsaWMgc29sdmVQb3NpdGlvbjogbnVtYmVyID0gMDtcbiAgcHVibGljIGJyb2FkcGhhc2U6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzb2x2ZVRPSTogbnVtYmVyID0gMDtcblxuICBwdWJsaWMgUmVzZXQoKSB7XG4gICAgdGhpcy5zdGVwID0gMDtcbiAgICB0aGlzLmNvbGxpZGUgPSAwO1xuICAgIHRoaXMuc29sdmUgPSAwO1xuICAgIHRoaXMuc29sdmVJbml0ID0gMDtcbiAgICB0aGlzLnNvbHZlVmVsb2NpdHkgPSAwO1xuICAgIHRoaXMuc29sdmVQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy5icm9hZHBoYXNlID0gMDtcbiAgICB0aGlzLnNvbHZlVE9JID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG4vLy8gVGhpcyBpcyBhbiBpbnRlcm5hbCBzdHJ1Y3R1cmUuXG5leHBvcnQgY2xhc3MgYjJUaW1lU3RlcCB7XG4gIHB1YmxpYyBkdDogbnVtYmVyID0gMDsgLy8gdGltZSBzdGVwXG4gIHB1YmxpYyBpbnZfZHQ6IG51bWJlciA9IDA7IC8vIGludmVyc2UgdGltZSBzdGVwICgwIGlmIGR0ID09IDApLlxuICBwdWJsaWMgZHRSYXRpbzogbnVtYmVyID0gMDsgLy8gZHQgKiBpbnZfZHQwXG4gIHB1YmxpYyB2ZWxvY2l0eUl0ZXJhdGlvbnM6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBwb3NpdGlvbkl0ZXJhdGlvbnM6IG51bWJlciA9IDA7XG4gIC8vICNpZiBCMl9FTkFCTEVfUEFSVElDTEVcbiAgcHVibGljIHBhcnRpY2xlSXRlcmF0aW9uczogbnVtYmVyID0gMDtcbiAgLy8gI2VuZGlmXG4gIHB1YmxpYyB3YXJtU3RhcnRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgQ29weShzdGVwOiBiMlRpbWVTdGVwKTogYjJUaW1lU3RlcCB7XG4gICAgdGhpcy5kdCA9IHN0ZXAuZHQ7XG4gICAgdGhpcy5pbnZfZHQgPSBzdGVwLmludl9kdDtcbiAgICB0aGlzLmR0UmF0aW8gPSBzdGVwLmR0UmF0aW87XG4gICAgdGhpcy5wb3NpdGlvbkl0ZXJhdGlvbnMgPSBzdGVwLnBvc2l0aW9uSXRlcmF0aW9ucztcbiAgICB0aGlzLnZlbG9jaXR5SXRlcmF0aW9ucyA9IHN0ZXAudmVsb2NpdHlJdGVyYXRpb25zO1xuICAgIC8vICNpZiBCMl9FTkFCTEVfUEFSVElDTEVcbiAgICB0aGlzLnBhcnRpY2xlSXRlcmF0aW9ucyA9IHN0ZXAucGFydGljbGVJdGVyYXRpb25zO1xuICAgIC8vICNlbmRpZlxuICAgIHRoaXMud2FybVN0YXJ0aW5nID0gc3RlcC53YXJtU3RhcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIGIyUG9zaXRpb24ge1xuICBwdWJsaWMgcmVhZG9ubHkgYzogYjJWZWMyID0gbmV3IGIyVmVjMigpO1xuICBwdWJsaWMgYTogbnVtYmVyID0gMDtcblxuICBwdWJsaWMgc3RhdGljIE1ha2VBcnJheShsZW5ndGg6IG51bWJlcik6IGIyUG9zaXRpb25bXSB7XG4gICAgcmV0dXJuIGIyTWFrZUFycmF5KGxlbmd0aCwgKGk6IG51bWJlcik6IGIyUG9zaXRpb24gPT4gbmV3IGIyUG9zaXRpb24oKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIGIyVmVsb2NpdHkge1xuICBwdWJsaWMgcmVhZG9ubHkgdjogYjJWZWMyID0gbmV3IGIyVmVjMigpO1xuICBwdWJsaWMgdzogbnVtYmVyID0gMDtcblxuICBwdWJsaWMgc3RhdGljIE1ha2VBcnJheShsZW5ndGg6IG51bWJlcik6IGIyVmVsb2NpdHlbXSB7XG4gICAgcmV0dXJuIGIyTWFrZUFycmF5KGxlbmd0aCwgKGk6IG51bWJlcik6IGIyVmVsb2NpdHkgPT4gbmV3IGIyVmVsb2NpdHkoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIGIyU29sdmVyRGF0YSB7XG4gIHB1YmxpYyByZWFkb25seSBzdGVwOiBiMlRpbWVTdGVwID0gbmV3IGIyVGltZVN0ZXAoKTtcbiAgcHVibGljIHBvc2l0aW9ucyE6IGIyUG9zaXRpb25bXTtcbiAgcHVibGljIHZlbG9jaXRpZXMhOiBiMlZlbG9jaXR5W107XG59XG4iXSwibWFwcGluZ3MiOiI7OztBQWtCQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQTtBQVhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBckJBO0FBd0JBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQWNBO0FBWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBdkJBO0FBeUJBO0FBQUE7QUFDQTtBQUNBO0FBS0E7QUFIQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBUEE7QUFTQTtBQUFBO0FBQ0E7QUFDQTtBQUtBO0FBSEE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQVBBO0FBU0E7QUFBQTtBQUNBO0FBR0E7QUFBQTtBQUFBO0FBSkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_time_step.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_weld_joint.ts":
/*!*********************************************!*\
  !*** ./src/box2d/dynamics/b2_weld_joint.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2WeldJoint = exports.b2WeldJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2WeldJointDef = (function (_super) {\n    __extends(b2WeldJointDef, _super);\n    function b2WeldJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_weldJoint) || this;\n        _this.localAnchorA = new b2_math_1.b2Vec2();\n        _this.localAnchorB = new b2_math_1.b2Vec2();\n        _this.referenceAngle = 0;\n        _this.stiffness = 0;\n        _this.damping = 0;\n        return _this;\n    }\n    b2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n    };\n    return b2WeldJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2WeldJointDef = b2WeldJointDef;\nvar b2WeldJoint = (function (_super) {\n    __extends(b2WeldJoint, _super);\n    function b2WeldJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_stiffness = 0;\n        _this.m_damping = 0;\n        _this.m_bias = 0;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_referenceAngle = 0;\n        _this.m_gamma = 0;\n        _this.m_impulse = new b2_math_1.b2Vec3(0, 0, 0);\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_mass = new b2_math_1.b2Mat33();\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_K = new b2_math_1.b2Mat33();\n        _this.m_stiffness = b2_settings_1.b2Maybe(def.stiffness, 0);\n        _this.m_damping = b2_settings_1.b2Maybe(def.damping, 0);\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, b2_math_1.b2Vec2.ZERO));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, b2_math_1.b2Vec2.ZERO));\n        _this.m_referenceAngle = b2_settings_1.b2Maybe(def.referenceAngle, 0);\n        _this.m_impulse.SetZero();\n        return _this;\n    }\n    b2WeldJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var K = this.m_K;\n        K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\n        K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n        K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n        K.ex.y = K.ey.x;\n        K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\n        K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n        K.ex.z = K.ez.x;\n        K.ey.z = K.ez.y;\n        K.ez.z = iA + iB;\n        if (this.m_stiffness > 0) {\n            K.GetInverse22(this.m_mass);\n            var invM = iA + iB;\n            var C = aB - aA - this.m_referenceAngle;\n            var d = this.m_damping;\n            var k = this.m_stiffness;\n            var h = data.step.dt;\n            this.m_gamma = h * (d + h * k);\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\n            this.m_bias = C * h * k * this.m_gamma;\n            invM += this.m_gamma;\n            this.m_mass.ez.z = invM !== 0 ? 1 / invM : 0;\n        }\n        else {\n            K.GetSymInverse33(this.m_mass);\n            this.m_gamma = 0;\n            this.m_bias = 0;\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse.SelfMul(data.step.dtRatio);\n            var P = b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\n            vA.SelfMulSub(mA, P);\n            wA -= iA * (b2_math_1.b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);\n            vB.SelfMulAdd(mB, P);\n            wB += iB * (b2_math_1.b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);\n        }\n        else {\n            this.m_impulse.SetZero();\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2WeldJoint.prototype.SolveVelocityConstraints = function (data) {\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        if (this.m_stiffness > 0) {\n            var Cdot2 = wB - wA;\n            var impulse2 = -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);\n            this.m_impulse.z += impulse2;\n            wA -= iA * impulse2;\n            wB += iB * impulse2;\n            var Cdot1 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2_math_1.b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\n            var impulse1 = b2_math_1.b2Mat33.MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();\n            this.m_impulse.x += impulse1.x;\n            this.m_impulse.y += impulse1.y;\n            var P = impulse1;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * b2_math_1.b2Vec2.CrossVV(this.m_rA, P);\n            vB.SelfMulAdd(mB, P);\n            wB += iB * b2_math_1.b2Vec2.CrossVV(this.m_rB, P);\n        }\n        else {\n            var Cdot1 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2_math_1.b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\n            var Cdot2 = wB - wA;\n            var impulse = b2_math_1.b2Mat33.MulM33XYZ(this.m_mass, Cdot1.x, Cdot1.y, Cdot2, b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();\n            this.m_impulse.SelfAdd(impulse);\n            var P = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);\n            vA.SelfMulSub(mA, P);\n            wA -= iA * (b2_math_1.b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\n            vB.SelfMulAdd(mB, P);\n            wB += iB * (b2_math_1.b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2WeldJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var positionError, angularError;\n        var K = this.m_K;\n        K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n        K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n        K.ez.x = -rA.y * iA - rB.y * iB;\n        K.ex.y = K.ey.x;\n        K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n        K.ez.y = rA.x * iA + rB.x * iB;\n        K.ex.z = K.ez.x;\n        K.ey.z = K.ez.y;\n        K.ez.z = iA + iB;\n        if (this.m_stiffness > 0) {\n            var C1 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(cB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(cA, rA, b2_math_1.b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\n            positionError = C1.Length();\n            angularError = 0;\n            var P = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();\n            cA.SelfMulSub(mA, P);\n            aA -= iA * b2_math_1.b2Vec2.CrossVV(rA, P);\n            cB.SelfMulAdd(mB, P);\n            aB += iB * b2_math_1.b2Vec2.CrossVV(rB, P);\n        }\n        else {\n            var C1 = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(cB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(cA, rA, b2_math_1.b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\n            var C2 = aB - aA - this.m_referenceAngle;\n            positionError = C1.Length();\n            angularError = b2_math_1.b2Abs(C2);\n            var impulse = K.Solve33(C1.x, C1.y, C2, b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();\n            var P = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);\n            cA.SelfMulSub(mA, P);\n            aA -= iA * (b2_math_1.b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\n            cB.SelfMulAdd(mB, P);\n            aB += iB * (b2_math_1.b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\n        }\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        return positionError <= b2_settings_1.b2_linearSlop && angularError <= b2_settings_1.b2_angularSlop;\n    };\n    b2WeldJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2WeldJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2WeldJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * this.m_impulse.x;\n        out.y = inv_dt * this.m_impulse.y;\n        return out;\n    };\n    b2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * this.m_impulse.z;\n    };\n    b2WeldJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\n    b2WeldJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\n    b2WeldJoint.prototype.GetReferenceAngle = function () { return this.m_referenceAngle; };\n    b2WeldJoint.prototype.SetStiffness = function (stiffness) { this.m_stiffness = stiffness; };\n    b2WeldJoint.prototype.GetStiffness = function () { return this.m_stiffness; };\n    b2WeldJoint.prototype.SetDamping = function (damping) { this.m_damping = damping; };\n    b2WeldJoint.prototype.GetDamping = function () { return this.m_damping; };\n    b2WeldJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2WeldJointDef = new b2WeldJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\n        log(\"  jd.stiffness = %.15f;\\n\", this.m_stiffness);\n        log(\"  jd.damping = %.15f;\\n\", this.m_damping);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2WeldJoint.InitVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2WeldJoint.SolveVelocityConstraints_s_Cdot1 = new b2_math_1.b2Vec2();\n    b2WeldJoint.SolveVelocityConstraints_s_impulse1 = new b2_math_1.b2Vec2();\n    b2WeldJoint.SolveVelocityConstraints_s_impulse = new b2_math_1.b2Vec3();\n    b2WeldJoint.SolveVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2WeldJoint.SolvePositionConstraints_s_C1 = new b2_math_1.b2Vec2();\n    b2WeldJoint.SolvePositionConstraints_s_P = new b2_math_1.b2Vec2();\n    b2WeldJoint.SolvePositionConstraints_s_impulse = new b2_math_1.b2Vec3();\n    return b2WeldJoint;\n}(b2_joint_1.b2Joint));\nexports.b2WeldJoint = b2WeldJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_weld_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_wheel_joint.ts":
/*!**********************************************!*\
  !*** ./src/box2d/dynamics/b2_wheel_joint.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2WheelJoint = exports.b2WheelJointDef = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2WheelJointDef = (function (_super) {\n    __extends(b2WheelJointDef, _super);\n    function b2WheelJointDef() {\n        var _this = _super.call(this, b2_joint_1.b2JointType.e_wheelJoint) || this;\n        _this.localAnchorA = new b2_math_1.b2Vec2(0, 0);\n        _this.localAnchorB = new b2_math_1.b2Vec2(0, 0);\n        _this.localAxisA = new b2_math_1.b2Vec2(1, 0);\n        _this.enableLimit = false;\n        _this.lowerTranslation = 0;\n        _this.upperTranslation = 0;\n        _this.enableMotor = false;\n        _this.maxMotorTorque = 0;\n        _this.motorSpeed = 0;\n        _this.stiffness = 0;\n        _this.damping = 0;\n        return _this;\n    }\n    b2WheelJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\n        this.bodyA = bA;\n        this.bodyB = bB;\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\n    };\n    return b2WheelJointDef;\n}(b2_joint_1.b2JointDef));\nexports.b2WheelJointDef = b2WheelJointDef;\nvar b2WheelJoint = (function (_super) {\n    __extends(b2WheelJoint, _super);\n    function b2WheelJoint(def) {\n        var _this = _super.call(this, def) || this;\n        _this.m_localAnchorA = new b2_math_1.b2Vec2();\n        _this.m_localAnchorB = new b2_math_1.b2Vec2();\n        _this.m_localXAxisA = new b2_math_1.b2Vec2();\n        _this.m_localYAxisA = new b2_math_1.b2Vec2();\n        _this.m_impulse = 0;\n        _this.m_motorImpulse = 0;\n        _this.m_springImpulse = 0;\n        _this.m_lowerImpulse = 0;\n        _this.m_upperImpulse = 0;\n        _this.m_translation = 0;\n        _this.m_lowerTranslation = 0;\n        _this.m_upperTranslation = 0;\n        _this.m_maxMotorTorque = 0;\n        _this.m_motorSpeed = 0;\n        _this.m_enableLimit = false;\n        _this.m_enableMotor = false;\n        _this.m_stiffness = 0;\n        _this.m_damping = 0;\n        _this.m_indexA = 0;\n        _this.m_indexB = 0;\n        _this.m_localCenterA = new b2_math_1.b2Vec2();\n        _this.m_localCenterB = new b2_math_1.b2Vec2();\n        _this.m_invMassA = 0;\n        _this.m_invMassB = 0;\n        _this.m_invIA = 0;\n        _this.m_invIB = 0;\n        _this.m_ax = new b2_math_1.b2Vec2();\n        _this.m_ay = new b2_math_1.b2Vec2();\n        _this.m_sAx = 0;\n        _this.m_sBx = 0;\n        _this.m_sAy = 0;\n        _this.m_sBy = 0;\n        _this.m_mass = 0;\n        _this.m_motorMass = 0;\n        _this.m_axialMass = 0;\n        _this.m_springMass = 0;\n        _this.m_bias = 0;\n        _this.m_gamma = 0;\n        _this.m_qA = new b2_math_1.b2Rot();\n        _this.m_qB = new b2_math_1.b2Rot();\n        _this.m_lalcA = new b2_math_1.b2Vec2();\n        _this.m_lalcB = new b2_math_1.b2Vec2();\n        _this.m_rA = new b2_math_1.b2Vec2();\n        _this.m_rB = new b2_math_1.b2Vec2();\n        _this.m_localAnchorA.Copy(b2_settings_1.b2Maybe(def.localAnchorA, b2_math_1.b2Vec2.ZERO));\n        _this.m_localAnchorB.Copy(b2_settings_1.b2Maybe(def.localAnchorB, b2_math_1.b2Vec2.ZERO));\n        _this.m_localXAxisA.Copy(b2_settings_1.b2Maybe(def.localAxisA, b2_math_1.b2Vec2.UNITX));\n        b2_math_1.b2Vec2.CrossOneV(_this.m_localXAxisA, _this.m_localYAxisA);\n        _this.m_lowerTranslation = b2_settings_1.b2Maybe(def.lowerTranslation, 0);\n        _this.m_upperTranslation = b2_settings_1.b2Maybe(def.upperTranslation, 0);\n        _this.m_enableLimit = b2_settings_1.b2Maybe(def.enableLimit, false);\n        _this.m_maxMotorTorque = b2_settings_1.b2Maybe(def.maxMotorTorque, 0);\n        _this.m_motorSpeed = b2_settings_1.b2Maybe(def.motorSpeed, 0);\n        _this.m_enableMotor = b2_settings_1.b2Maybe(def.enableMotor, false);\n        _this.m_ax.SetZero();\n        _this.m_ay.SetZero();\n        _this.m_stiffness = b2_settings_1.b2Maybe(def.stiffness, 0);\n        _this.m_damping = b2_settings_1.b2Maybe(def.damping, 0);\n        return _this;\n    }\n    b2WheelJoint.prototype.GetMotorSpeed = function () {\n        return this.m_motorSpeed;\n    };\n    b2WheelJoint.prototype.GetMaxMotorTorque = function () {\n        return this.m_maxMotorTorque;\n    };\n    b2WheelJoint.prototype.SetSpringFrequencyHz = function (hz) {\n        this.m_stiffness = hz;\n    };\n    b2WheelJoint.prototype.GetSpringFrequencyHz = function () {\n        return this.m_stiffness;\n    };\n    b2WheelJoint.prototype.SetSpringDampingRatio = function (ratio) {\n        this.m_damping = ratio;\n    };\n    b2WheelJoint.prototype.GetSpringDampingRatio = function () {\n        return this.m_damping;\n    };\n    b2WheelJoint.prototype.InitVelocityConstraints = function (data) {\n        this.m_indexA = this.m_bodyA.m_islandIndex;\n        this.m_indexB = this.m_bodyB.m_islandIndex;\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n        this.m_invMassA = this.m_bodyA.m_invMass;\n        this.m_invMassB = this.m_bodyB.m_invMass;\n        this.m_invIA = this.m_bodyA.m_invI;\n        this.m_invIB = this.m_bodyB.m_invI;\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n        var d = b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVV(cB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVV(cA, rA, b2_math_1.b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_d);\n        {\n            b2_math_1.b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\n            this.m_sAy = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), this.m_ay);\n            this.m_sBy = b2_math_1.b2Vec2.CrossVV(rB, this.m_ay);\n            this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;\n            if (this.m_mass > 0) {\n                this.m_mass = 1 / this.m_mass;\n            }\n        }\n        b2_math_1.b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\n        this.m_sAx = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), this.m_ax);\n        this.m_sBx = b2_math_1.b2Vec2.CrossVV(rB, this.m_ax);\n        var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;\n        if (invMass > 0.0) {\n            this.m_axialMass = 1.0 / invMass;\n        }\n        else {\n            this.m_axialMass = 0.0;\n        }\n        this.m_springMass = 0;\n        this.m_bias = 0;\n        this.m_gamma = 0;\n        if (this.m_stiffness > 0.0 && invMass > 0.0) {\n            this.m_springMass = 1.0 / invMass;\n            var C = b2_math_1.b2Vec2.DotVV(d, this.m_ax);\n            var h = data.step.dt;\n            this.m_gamma = h * (this.m_damping + h * this.m_stiffness);\n            if (this.m_gamma > 0.0) {\n                this.m_gamma = 1.0 / this.m_gamma;\n            }\n            this.m_bias = C * h * this.m_stiffness * this.m_gamma;\n            this.m_springMass = invMass + this.m_gamma;\n            if (this.m_springMass > 0.0) {\n                this.m_springMass = 1.0 / this.m_springMass;\n            }\n        }\n        else {\n            this.m_springImpulse = 0.0;\n        }\n        if (this.m_enableLimit) {\n            this.m_translation = b2_math_1.b2Vec2.DotVV(this.m_ax, d);\n        }\n        else {\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n        if (this.m_enableMotor) {\n            this.m_motorMass = iA + iB;\n            if (this.m_motorMass > 0) {\n                this.m_motorMass = 1 / this.m_motorMass;\n            }\n        }\n        else {\n            this.m_motorMass = 0;\n            this.m_motorImpulse = 0;\n        }\n        if (data.step.warmStarting) {\n            this.m_impulse *= data.step.dtRatio;\n            this.m_springImpulse *= data.step.dtRatio;\n            this.m_motorImpulse *= data.step.dtRatio;\n            var axialImpulse = this.m_springImpulse + this.m_lowerImpulse - this.m_upperImpulse;\n            var P = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.MulSV(this.m_impulse, this.m_ay, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.MulSV(axialImpulse, this.m_ax, b2_math_1.b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_P);\n            var LA = this.m_impulse * this.m_sAy + axialImpulse * this.m_sAx + this.m_motorImpulse;\n            var LB = this.m_impulse * this.m_sBy + axialImpulse * this.m_sBx + this.m_motorImpulse;\n            vA.SelfMulSub(this.m_invMassA, P);\n            wA -= this.m_invIA * LA;\n            vB.SelfMulAdd(this.m_invMassB, P);\n            wB += this.m_invIB * LB;\n        }\n        else {\n            this.m_impulse = 0;\n            this.m_springImpulse = 0;\n            this.m_motorImpulse = 0;\n            this.m_lowerImpulse = 0;\n            this.m_upperImpulse = 0;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2WheelJoint.prototype.SolveVelocityConstraints = function (data) {\n        var mA = this.m_invMassA, mB = this.m_invMassB;\n        var iA = this.m_invIA, iB = this.m_invIB;\n        var vA = data.velocities[this.m_indexA].v;\n        var wA = data.velocities[this.m_indexA].w;\n        var vB = data.velocities[this.m_indexB].v;\n        var wB = data.velocities[this.m_indexB].w;\n        {\n            var Cdot = b2_math_1.b2Vec2.DotVV(this.m_ax, b2_math_1.b2Vec2.SubVV(vB, vA, b2_math_1.b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;\n            var impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\n            this.m_springImpulse += impulse;\n            var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\n            var LA = impulse * this.m_sAx;\n            var LB = impulse * this.m_sBx;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * LA;\n            vB.SelfMulAdd(mB, P);\n            wB += iB * LB;\n        }\n        {\n            var Cdot = wB - wA - this.m_motorSpeed;\n            var impulse = -this.m_motorMass * Cdot;\n            var oldImpulse = this.m_motorImpulse;\n            var maxImpulse = data.step.dt * this.m_maxMotorTorque;\n            this.m_motorImpulse = b2_math_1.b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n            impulse = this.m_motorImpulse - oldImpulse;\n            wA -= iA * impulse;\n            wB += iB * impulse;\n        }\n        if (this.m_enableLimit) {\n            {\n                var C = this.m_translation - this.m_lowerTranslation;\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_ax, b2_math_1.b2Vec2.SubVV(vB, vA, b2_math_1.b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;\n                var impulse = -this.m_axialMass * (Cdot + b2_math_1.b2Max(C, 0.0) * data.step.inv_dt);\n                var oldImpulse = this.m_lowerImpulse;\n                this.m_lowerImpulse = b2_math_1.b2Max(this.m_lowerImpulse + impulse, 0.0);\n                impulse = this.m_lowerImpulse - oldImpulse;\n                var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\n                var LA = impulse * this.m_sAx;\n                var LB = impulse * this.m_sBx;\n                vA.SelfMulSub(mA, P);\n                wA -= iA * LA;\n                vB.SelfMulAdd(mB, P);\n                wB += iB * LB;\n            }\n            {\n                var C = this.m_upperTranslation - this.m_translation;\n                var Cdot = b2_math_1.b2Vec2.DotVV(this.m_ax, b2_math_1.b2Vec2.SubVV(vA, vB, b2_math_1.b2Vec2.s_t0)) + this.m_sAx * wA - this.m_sBx * wB;\n                var impulse = -this.m_axialMass * (Cdot + b2_math_1.b2Max(C, 0.0) * data.step.inv_dt);\n                var oldImpulse = this.m_upperImpulse;\n                this.m_upperImpulse = b2_math_1.b2Max(this.m_upperImpulse + impulse, 0.0);\n                impulse = this.m_upperImpulse - oldImpulse;\n                var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\n                var LA = impulse * this.m_sAx;\n                var LB = impulse * this.m_sBx;\n                vA.SelfMulAdd(mA, P);\n                wA += iA * LA;\n                vB.SelfMulSub(mB, P);\n                wB -= iB * LB;\n            }\n        }\n        {\n            var Cdot = b2_math_1.b2Vec2.DotVV(this.m_ay, b2_math_1.b2Vec2.SubVV(vB, vA, b2_math_1.b2Vec2.s_t0)) + this.m_sBy * wB - this.m_sAy * wA;\n            var impulse = -this.m_mass * Cdot;\n            this.m_impulse += impulse;\n            var P = b2_math_1.b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);\n            var LA = impulse * this.m_sAy;\n            var LB = impulse * this.m_sBy;\n            vA.SelfMulSub(mA, P);\n            wA -= iA * LA;\n            vB.SelfMulAdd(mB, P);\n            wB += iB * LB;\n        }\n        data.velocities[this.m_indexA].w = wA;\n        data.velocities[this.m_indexB].w = wB;\n    };\n    b2WheelJoint.prototype.SolvePositionConstraints = function (data) {\n        var cA = data.positions[this.m_indexA].c;\n        var aA = data.positions[this.m_indexA].a;\n        var cB = data.positions[this.m_indexB].c;\n        var aB = data.positions[this.m_indexB].a;\n        var linearError = 0.0;\n        if (this.m_enableLimit) {\n            var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n            var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n            var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n            var d = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.SubVV(cB, cA, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(rB, rA, b2_math_1.b2Vec2.s_t1), b2WheelJoint.SolvePositionConstraints_s_d);\n            var ax = b2_math_1.b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\n            var sAx = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), this.m_ax);\n            var sBx = b2_math_1.b2Vec2.CrossVV(rB, this.m_ax);\n            var C = 0.0;\n            var translation = b2_math_1.b2Vec2.DotVV(ax, d);\n            if (b2_math_1.b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2_settings_1.b2_linearSlop) {\n                C = translation;\n            }\n            else if (translation <= this.m_lowerTranslation) {\n                C = b2_math_1.b2Min(translation - this.m_lowerTranslation, 0.0);\n            }\n            else if (translation >= this.m_upperTranslation) {\n                C = b2_math_1.b2Max(translation - this.m_upperTranslation, 0.0);\n            }\n            if (C !== 0.0) {\n                var invMass = this.m_invMassA + this.m_invMassB + this.m_invIA * sAx * sAx + this.m_invIB * sBx * sBx;\n                var impulse = 0.0;\n                if (invMass !== 0.0) {\n                    impulse = -C / invMass;\n                }\n                var P = b2_math_1.b2Vec2.MulSV(impulse, ax, b2WheelJoint.SolvePositionConstraints_s_P);\n                var LA = impulse * sAx;\n                var LB = impulse * sBx;\n                cA.SelfMulSub(this.m_invMassA, P);\n                aA -= this.m_invIA * LA;\n                cB.SelfMulAdd(this.m_invMassB, P);\n                aB += this.m_invIB * LB;\n                linearError = b2_math_1.b2Abs(C);\n            }\n        }\n        {\n            var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n            var rA = b2_math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n            b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n            var rB = b2_math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n            var d = b2_math_1.b2Vec2.AddVV(b2_math_1.b2Vec2.SubVV(cB, cA, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.SubVV(rB, rA, b2_math_1.b2Vec2.s_t1), b2WheelJoint.SolvePositionConstraints_s_d);\n            var ay = b2_math_1.b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\n            var sAy = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.AddVV(d, rA, b2_math_1.b2Vec2.s_t0), ay);\n            var sBy = b2_math_1.b2Vec2.CrossVV(rB, ay);\n            var C = b2_math_1.b2Vec2.DotVV(d, ay);\n            var invMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;\n            var impulse = 0.0;\n            if (invMass !== 0.0) {\n                impulse = -C / invMass;\n            }\n            var P = b2_math_1.b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);\n            var LA = impulse * sAy;\n            var LB = impulse * sBy;\n            cA.SelfMulSub(this.m_invMassA, P);\n            aA -= this.m_invIA * LA;\n            cB.SelfMulAdd(this.m_invMassB, P);\n            aB += this.m_invIB * LB;\n            linearError = b2_math_1.b2Max(linearError, b2_math_1.b2Abs(C));\n        }\n        data.positions[this.m_indexA].a = aA;\n        data.positions[this.m_indexB].a = aB;\n        return linearError <= b2_settings_1.b2_linearSlop;\n    };\n    b2WheelJoint.prototype.GetDefinition = function (def) {\n        return def;\n    };\n    b2WheelJoint.prototype.GetAnchorA = function (out) {\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n    };\n    b2WheelJoint.prototype.GetAnchorB = function (out) {\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n    };\n    b2WheelJoint.prototype.GetReactionForce = function (inv_dt, out) {\n        out.x = inv_dt * (this.m_impulse * this.m_ay.x + (this.m_springImpulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_ax.x);\n        out.y = inv_dt * (this.m_impulse * this.m_ay.y + (this.m_springImpulse + this.m_lowerImpulse - this.m_upperImpulse) * this.m_ax.y);\n        return out;\n    };\n    b2WheelJoint.prototype.GetReactionTorque = function (inv_dt) {\n        return inv_dt * this.m_motorImpulse;\n    };\n    b2WheelJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\n    b2WheelJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\n    b2WheelJoint.prototype.GetLocalAxisA = function () { return this.m_localXAxisA; };\n    b2WheelJoint.prototype.GetJointTranslation = function () {\n        return this.GetPrismaticJointTranslation();\n    };\n    b2WheelJoint.prototype.GetJointLinearSpeed = function () {\n        return this.GetPrismaticJointSpeed();\n    };\n    b2WheelJoint.prototype.GetJointAngle = function () {\n        return this.GetRevoluteJointAngle();\n    };\n    b2WheelJoint.prototype.GetJointAngularSpeed = function () {\n        return this.GetRevoluteJointSpeed();\n    };\n    b2WheelJoint.prototype.GetPrismaticJointTranslation = function () {\n        var bA = this.m_bodyA;\n        var bB = this.m_bodyB;\n        var pA = bA.GetWorldPoint(this.m_localAnchorA, new b2_math_1.b2Vec2());\n        var pB = bB.GetWorldPoint(this.m_localAnchorB, new b2_math_1.b2Vec2());\n        var d = b2_math_1.b2Vec2.SubVV(pB, pA, new b2_math_1.b2Vec2());\n        var axis = bA.GetWorldVector(this.m_localXAxisA, new b2_math_1.b2Vec2());\n        var translation = b2_math_1.b2Vec2.DotVV(d, axis);\n        return translation;\n    };\n    b2WheelJoint.prototype.GetPrismaticJointSpeed = function () {\n        var bA = this.m_bodyA;\n        var bB = this.m_bodyB;\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\n        var rA = b2_math_1.b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\n        b2_math_1.b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\n        var rB = b2_math_1.b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\n        var pA = b2_math_1.b2Vec2.AddVV(bA.m_sweep.c, rA, b2_math_1.b2Vec2.s_t0);\n        var pB = b2_math_1.b2Vec2.AddVV(bB.m_sweep.c, rB, b2_math_1.b2Vec2.s_t1);\n        var d = b2_math_1.b2Vec2.SubVV(pB, pA, b2_math_1.b2Vec2.s_t2);\n        var axis = bA.GetWorldVector(this.m_localXAxisA, new b2_math_1.b2Vec2());\n        var vA = bA.m_linearVelocity;\n        var vB = bB.m_linearVelocity;\n        var wA = bA.m_angularVelocity;\n        var wB = bB.m_angularVelocity;\n        var speed = b2_math_1.b2Vec2.DotVV(d, b2_math_1.b2Vec2.CrossSV(wA, axis, b2_math_1.b2Vec2.s_t0)) +\n            b2_math_1.b2Vec2.DotVV(axis, b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.AddVCrossSV(vB, wB, rB, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVCrossSV(vA, wA, rA, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0));\n        return speed;\n    };\n    b2WheelJoint.prototype.GetRevoluteJointAngle = function () {\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;\n    };\n    b2WheelJoint.prototype.GetRevoluteJointSpeed = function () {\n        var wA = this.m_bodyA.m_angularVelocity;\n        var wB = this.m_bodyB.m_angularVelocity;\n        return wB - wA;\n    };\n    b2WheelJoint.prototype.IsMotorEnabled = function () {\n        return this.m_enableMotor;\n    };\n    b2WheelJoint.prototype.EnableMotor = function (flag) {\n        if (flag !== this.m_enableMotor) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_enableMotor = flag;\n        }\n    };\n    b2WheelJoint.prototype.SetMotorSpeed = function (speed) {\n        if (speed !== this.m_motorSpeed) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_motorSpeed = speed;\n        }\n    };\n    b2WheelJoint.prototype.SetMaxMotorTorque = function (force) {\n        if (force !== this.m_maxMotorTorque) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_maxMotorTorque = force;\n        }\n    };\n    b2WheelJoint.prototype.GetMotorTorque = function (inv_dt) {\n        return inv_dt * this.m_motorImpulse;\n    };\n    b2WheelJoint.prototype.IsLimitEnabled = function () {\n        return this.m_enableLimit;\n    };\n    b2WheelJoint.prototype.EnableLimit = function (flag) {\n        if (flag !== this.m_enableLimit) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_enableLimit = flag;\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n    };\n    b2WheelJoint.prototype.GetLowerLimit = function () {\n        return this.m_lowerTranslation;\n    };\n    b2WheelJoint.prototype.GetUpperLimit = function () {\n        return this.m_upperTranslation;\n    };\n    b2WheelJoint.prototype.SetLimits = function (lower, upper) {\n        if (lower !== this.m_lowerTranslation || upper !== this.m_upperTranslation) {\n            this.m_bodyA.SetAwake(true);\n            this.m_bodyB.SetAwake(true);\n            this.m_lowerTranslation = lower;\n            this.m_upperTranslation = upper;\n            this.m_lowerImpulse = 0.0;\n            this.m_upperImpulse = 0.0;\n        }\n    };\n    b2WheelJoint.prototype.Dump = function (log) {\n        var indexA = this.m_bodyA.m_islandIndex;\n        var indexB = this.m_bodyB.m_islandIndex;\n        log(\"  const jd: b2WheelJointDef = new b2WheelJointDef();\\n\");\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\n        log(\"  jd.stiffness = %.15f;\\n\", this.m_stiffness);\n        log(\"  jd.damping = %.15f;\\n\", this.m_damping);\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\n    };\n    b2WheelJoint.prototype.Draw = function (draw) {\n        var xfA = this.m_bodyA.GetTransform();\n        var xfB = this.m_bodyB.GetTransform();\n        var pA = b2_math_1.b2Transform.MulXV(xfA, this.m_localAnchorA, b2WheelJoint.Draw_s_pA);\n        var pB = b2_math_1.b2Transform.MulXV(xfB, this.m_localAnchorB, b2WheelJoint.Draw_s_pB);\n        var axis = b2_math_1.b2Rot.MulRV(xfA.q, this.m_localXAxisA, b2WheelJoint.Draw_s_axis);\n        var c1 = b2WheelJoint.Draw_s_c1;\n        var c2 = b2WheelJoint.Draw_s_c2;\n        var c3 = b2WheelJoint.Draw_s_c3;\n        var c4 = b2WheelJoint.Draw_s_c4;\n        var c5 = b2WheelJoint.Draw_s_c5;\n        draw.DrawSegment(pA, pB, c5);\n        if (this.m_enableLimit) {\n            var lower = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_lowerTranslation, axis, b2WheelJoint.Draw_s_lower);\n            var upper = b2_math_1.b2Vec2.AddVMulSV(pA, this.m_upperTranslation, axis, b2WheelJoint.Draw_s_upper);\n            var perp = b2_math_1.b2Rot.MulRV(xfA.q, this.m_localYAxisA, b2WheelJoint.Draw_s_perp);\n            draw.DrawSegment(lower, upper, c1);\n            draw.DrawSegment(b2_math_1.b2Vec2.AddVMulSV(lower, -0.5, perp, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVMulSV(lower, 0.5, perp, b2_math_1.b2Vec2.s_t1), c2);\n            draw.DrawSegment(b2_math_1.b2Vec2.AddVMulSV(upper, -0.5, perp, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVMulSV(upper, 0.5, perp, b2_math_1.b2Vec2.s_t1), c3);\n        }\n        else {\n            draw.DrawSegment(b2_math_1.b2Vec2.AddVMulSV(pA, -1.0, axis, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.AddVMulSV(pA, 1.0, axis, b2_math_1.b2Vec2.s_t1), c1);\n        }\n        draw.DrawPoint(pA, 5.0, c1);\n        draw.DrawPoint(pB, 5.0, c4);\n    };\n    b2WheelJoint.InitVelocityConstraints_s_d = new b2_math_1.b2Vec2();\n    b2WheelJoint.InitVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2WheelJoint.SolveVelocityConstraints_s_P = new b2_math_1.b2Vec2();\n    b2WheelJoint.SolvePositionConstraints_s_d = new b2_math_1.b2Vec2();\n    b2WheelJoint.SolvePositionConstraints_s_P = new b2_math_1.b2Vec2();\n    b2WheelJoint.Draw_s_pA = new b2_math_1.b2Vec2();\n    b2WheelJoint.Draw_s_pB = new b2_math_1.b2Vec2();\n    b2WheelJoint.Draw_s_axis = new b2_math_1.b2Vec2();\n    b2WheelJoint.Draw_s_c1 = new b2_draw_1.b2Color(0.7, 0.7, 0.7);\n    b2WheelJoint.Draw_s_c2 = new b2_draw_1.b2Color(0.3, 0.9, 0.3);\n    b2WheelJoint.Draw_s_c3 = new b2_draw_1.b2Color(0.9, 0.3, 0.3);\n    b2WheelJoint.Draw_s_c4 = new b2_draw_1.b2Color(0.3, 0.3, 0.9);\n    b2WheelJoint.Draw_s_c5 = new b2_draw_1.b2Color(0.4, 0.4, 0.4);\n    b2WheelJoint.Draw_s_lower = new b2_math_1.b2Vec2();\n    b2WheelJoint.Draw_s_upper = new b2_math_1.b2Vec2();\n    b2WheelJoint.Draw_s_perp = new b2_math_1.b2Vec2();\n    return b2WheelJoint;\n}(b2_joint_1.b2Joint));\nexports.b2WheelJoint = b2WheelJoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_wheel_joint.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_world.ts":
/*!****************************************!*\
  !*** ./src/box2d/dynamics/b2_world.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2World = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_timer_1 = __webpack_require__(/*! ../common/b2_timer */ \"./src/box2d/common/b2_timer.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_time_of_impact_1 = __webpack_require__(/*! ../collision/b2_time_of_impact */ \"./src/box2d/collision/b2_time_of_impact.ts\");\nvar b2_shape_1 = __webpack_require__(/*! ../collision/b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2_joint_1 = __webpack_require__(/*! ./b2_joint */ \"./src/box2d/dynamics/b2_joint.ts\");\nvar b2_area_joint_1 = __webpack_require__(/*! ./b2_area_joint */ \"./src/box2d/dynamics/b2_area_joint.ts\");\nvar b2_distance_joint_1 = __webpack_require__(/*! ./b2_distance_joint */ \"./src/box2d/dynamics/b2_distance_joint.ts\");\nvar b2_friction_joint_1 = __webpack_require__(/*! ./b2_friction_joint */ \"./src/box2d/dynamics/b2_friction_joint.ts\");\nvar b2_gear_joint_1 = __webpack_require__(/*! ./b2_gear_joint */ \"./src/box2d/dynamics/b2_gear_joint.ts\");\nvar b2_motor_joint_1 = __webpack_require__(/*! ./b2_motor_joint */ \"./src/box2d/dynamics/b2_motor_joint.ts\");\nvar b2_mouse_joint_1 = __webpack_require__(/*! ./b2_mouse_joint */ \"./src/box2d/dynamics/b2_mouse_joint.ts\");\nvar b2_prismatic_joint_1 = __webpack_require__(/*! ./b2_prismatic_joint */ \"./src/box2d/dynamics/b2_prismatic_joint.ts\");\nvar b2_pulley_joint_1 = __webpack_require__(/*! ./b2_pulley_joint */ \"./src/box2d/dynamics/b2_pulley_joint.ts\");\nvar b2_revolute_joint_1 = __webpack_require__(/*! ./b2_revolute_joint */ \"./src/box2d/dynamics/b2_revolute_joint.ts\");\nvar b2_weld_joint_1 = __webpack_require__(/*! ./b2_weld_joint */ \"./src/box2d/dynamics/b2_weld_joint.ts\");\nvar b2_wheel_joint_1 = __webpack_require__(/*! ./b2_wheel_joint */ \"./src/box2d/dynamics/b2_wheel_joint.ts\");\nvar b2_body_1 = __webpack_require__(/*! ./b2_body */ \"./src/box2d/dynamics/b2_body.ts\");\nvar b2_contact_manager_1 = __webpack_require__(/*! ./b2_contact_manager */ \"./src/box2d/dynamics/b2_contact_manager.ts\");\nvar b2_island_1 = __webpack_require__(/*! ./b2_island */ \"./src/box2d/dynamics/b2_island.ts\");\nvar b2_time_step_1 = __webpack_require__(/*! ./b2_time_step */ \"./src/box2d/dynamics/b2_time_step.ts\");\nvar b2_world_callbacks_1 = __webpack_require__(/*! ./b2_world_callbacks */ \"./src/box2d/dynamics/b2_world_callbacks.ts\");\nvar b2_world_callbacks_2 = __webpack_require__(/*! ./b2_world_callbacks */ \"./src/box2d/dynamics/b2_world_callbacks.ts\");\nvar b2_settings_2 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_particle_1 = __webpack_require__(/*! ../particle/b2_particle */ \"./src/box2d/particle/b2_particle.ts\");\nvar b2_particle_system_1 = __webpack_require__(/*! ../particle/b2_particle_system */ \"./src/box2d/particle/b2_particle_system.ts\");\nvar b2World = (function () {\n    function b2World(gravity) {\n        this.m_contactManager = new b2_contact_manager_1.b2ContactManager();\n        this.m_bodyList = null;\n        this.m_jointList = null;\n        this.m_particleSystemList = null;\n        this.m_bodyCount = 0;\n        this.m_jointCount = 0;\n        this.m_gravity = new b2_math_1.b2Vec2();\n        this.m_allowSleep = true;\n        this.m_destructionListener = null;\n        this.m_debugDraw = null;\n        this.m_inv_dt0 = 0;\n        this.m_newContacts = false;\n        this.m_locked = false;\n        this.m_clearForces = true;\n        this.m_warmStarting = true;\n        this.m_continuousPhysics = true;\n        this.m_subStepping = false;\n        this.m_stepComplete = true;\n        this.m_profile = new b2_time_step_1.b2Profile();\n        this.m_island = new b2_island_1.b2Island();\n        this.s_stack = [];\n        this.m_controllerList = null;\n        this.m_controllerCount = 0;\n        this.m_gravity.Copy(gravity);\n    }\n    b2World.prototype.SetDestructionListener = function (listener) {\n        this.m_destructionListener = listener;\n    };\n    b2World.prototype.SetContactFilter = function (filter) {\n        this.m_contactManager.m_contactFilter = filter;\n    };\n    b2World.prototype.SetContactListener = function (listener) {\n        this.m_contactManager.m_contactListener = listener;\n    };\n    b2World.prototype.SetDebugDraw = function (debugDraw) {\n        this.m_debugDraw = debugDraw;\n    };\n    b2World.prototype.CreateBody = function (def) {\n        if (def === void 0) { def = {}; }\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        var b = new b2_body_1.b2Body(def, this);\n        b.m_prev = null;\n        b.m_next = this.m_bodyList;\n        if (this.m_bodyList) {\n            this.m_bodyList.m_prev = b;\n        }\n        this.m_bodyList = b;\n        ++this.m_bodyCount;\n        return b;\n    };\n    b2World.prototype.DestroyBody = function (b) {\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        var je = b.m_jointList;\n        while (je) {\n            var je0 = je;\n            je = je.next;\n            if (this.m_destructionListener) {\n                this.m_destructionListener.SayGoodbyeJoint(je0.joint);\n            }\n            this.DestroyJoint(je0.joint);\n            b.m_jointList = je;\n        }\n        b.m_jointList = null;\n        var coe = b.m_controllerList;\n        while (coe) {\n            var coe0 = coe;\n            coe = coe.nextController;\n            coe0.controller.RemoveBody(b);\n        }\n        var ce = b.m_contactList;\n        while (ce) {\n            var ce0 = ce;\n            ce = ce.next;\n            this.m_contactManager.Destroy(ce0.contact);\n        }\n        b.m_contactList = null;\n        var f = b.m_fixtureList;\n        while (f) {\n            var f0 = f;\n            f = f.m_next;\n            if (this.m_destructionListener) {\n                this.m_destructionListener.SayGoodbyeFixture(f0);\n            }\n            f0.DestroyProxies();\n            f0.Reset();\n            b.m_fixtureList = f;\n            b.m_fixtureCount -= 1;\n        }\n        b.m_fixtureList = null;\n        b.m_fixtureCount = 0;\n        if (b.m_prev) {\n            b.m_prev.m_next = b.m_next;\n        }\n        if (b.m_next) {\n            b.m_next.m_prev = b.m_prev;\n        }\n        if (b === this.m_bodyList) {\n            this.m_bodyList = b.m_next;\n        }\n        --this.m_bodyCount;\n    };\n    b2World._Joint_Create = function (def) {\n        switch (def.type) {\n            case b2_joint_1.b2JointType.e_distanceJoint: return new b2_distance_joint_1.b2DistanceJoint(def);\n            case b2_joint_1.b2JointType.e_mouseJoint: return new b2_mouse_joint_1.b2MouseJoint(def);\n            case b2_joint_1.b2JointType.e_prismaticJoint: return new b2_prismatic_joint_1.b2PrismaticJoint(def);\n            case b2_joint_1.b2JointType.e_revoluteJoint: return new b2_revolute_joint_1.b2RevoluteJoint(def);\n            case b2_joint_1.b2JointType.e_pulleyJoint: return new b2_pulley_joint_1.b2PulleyJoint(def);\n            case b2_joint_1.b2JointType.e_gearJoint: return new b2_gear_joint_1.b2GearJoint(def);\n            case b2_joint_1.b2JointType.e_wheelJoint: return new b2_wheel_joint_1.b2WheelJoint(def);\n            case b2_joint_1.b2JointType.e_weldJoint: return new b2_weld_joint_1.b2WeldJoint(def);\n            case b2_joint_1.b2JointType.e_frictionJoint: return new b2_friction_joint_1.b2FrictionJoint(def);\n            case b2_joint_1.b2JointType.e_motorJoint: return new b2_motor_joint_1.b2MotorJoint(def);\n            case b2_joint_1.b2JointType.e_areaJoint: return new b2_area_joint_1.b2AreaJoint(def);\n        }\n        throw new Error();\n    };\n    b2World._Joint_Destroy = function (joint) {\n    };\n    b2World.prototype.CreateJoint = function (def) {\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        var j = b2World._Joint_Create(def);\n        j.m_prev = null;\n        j.m_next = this.m_jointList;\n        if (this.m_jointList) {\n            this.m_jointList.m_prev = j;\n        }\n        this.m_jointList = j;\n        ++this.m_jointCount;\n        j.m_edgeA.prev = null;\n        j.m_edgeA.next = j.m_bodyA.m_jointList;\n        if (j.m_bodyA.m_jointList) {\n            j.m_bodyA.m_jointList.prev = j.m_edgeA;\n        }\n        j.m_bodyA.m_jointList = j.m_edgeA;\n        j.m_edgeB.prev = null;\n        j.m_edgeB.next = j.m_bodyB.m_jointList;\n        if (j.m_bodyB.m_jointList) {\n            j.m_bodyB.m_jointList.prev = j.m_edgeB;\n        }\n        j.m_bodyB.m_jointList = j.m_edgeB;\n        var bodyA = j.m_bodyA;\n        var bodyB = j.m_bodyB;\n        var collideConnected = j.m_collideConnected;\n        if (!collideConnected) {\n            var edge = bodyB.GetContactList();\n            while (edge) {\n                if (edge.other === bodyA) {\n                    edge.contact.FlagForFiltering();\n                }\n                edge = edge.next;\n            }\n        }\n        return j;\n    };\n    b2World.prototype.DestroyJoint = function (j) {\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        if (j.m_prev) {\n            j.m_prev.m_next = j.m_next;\n        }\n        if (j.m_next) {\n            j.m_next.m_prev = j.m_prev;\n        }\n        if (j === this.m_jointList) {\n            this.m_jointList = j.m_next;\n        }\n        var bodyA = j.m_bodyA;\n        var bodyB = j.m_bodyB;\n        var collideConnected = j.m_collideConnected;\n        bodyA.SetAwake(true);\n        bodyB.SetAwake(true);\n        if (j.m_edgeA.prev) {\n            j.m_edgeA.prev.next = j.m_edgeA.next;\n        }\n        if (j.m_edgeA.next) {\n            j.m_edgeA.next.prev = j.m_edgeA.prev;\n        }\n        if (j.m_edgeA === bodyA.m_jointList) {\n            bodyA.m_jointList = j.m_edgeA.next;\n        }\n        j.m_edgeA.Reset();\n        if (j.m_edgeB.prev) {\n            j.m_edgeB.prev.next = j.m_edgeB.next;\n        }\n        if (j.m_edgeB.next) {\n            j.m_edgeB.next.prev = j.m_edgeB.prev;\n        }\n        if (j.m_edgeB === bodyB.m_jointList) {\n            bodyB.m_jointList = j.m_edgeB.next;\n        }\n        j.m_edgeB.Reset();\n        b2World._Joint_Destroy(j);\n        --this.m_jointCount;\n        if (!collideConnected) {\n            var edge = bodyB.GetContactList();\n            while (edge) {\n                if (edge.other === bodyA) {\n                    edge.contact.FlagForFiltering();\n                }\n                edge = edge.next;\n            }\n        }\n    };\n    b2World.prototype.CreateParticleSystem = function (def) {\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        var p = new b2_particle_system_1.b2ParticleSystem(def, this);\n        p.m_prev = null;\n        p.m_next = this.m_particleSystemList;\n        if (this.m_particleSystemList) {\n            this.m_particleSystemList.m_prev = p;\n        }\n        this.m_particleSystemList = p;\n        return p;\n    };\n    b2World.prototype.DestroyParticleSystem = function (p) {\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        if (p.m_prev) {\n            p.m_prev.m_next = p.m_next;\n        }\n        if (p.m_next) {\n            p.m_next.m_prev = p.m_prev;\n        }\n        if (p === this.m_particleSystemList) {\n            this.m_particleSystemList = p.m_next;\n        }\n    };\n    b2World.prototype.CalculateReasonableParticleIterations = function (timeStep) {\n        if (this.m_particleSystemList === null) {\n            return 1;\n        }\n        function GetSmallestRadius(world) {\n            var smallestRadius = b2_settings_2.b2_maxFloat;\n            for (var system = world.GetParticleSystemList(); system !== null; system = system.m_next) {\n                smallestRadius = b2_math_1.b2Min(smallestRadius, system.GetRadius());\n            }\n            return smallestRadius;\n        }\n        return b2_particle_1.b2CalculateParticleIterations(this.m_gravity.Length(), GetSmallestRadius(this), timeStep);\n    };\n    b2World.prototype.Step = function (dt, velocityIterations, positionIterations, particleIterations) {\n        if (particleIterations === void 0) { particleIterations = this.CalculateReasonableParticleIterations(dt); }\n        var stepTimer = b2World.Step_s_stepTimer.Reset();\n        if (this.m_newContacts) {\n            this.m_contactManager.FindNewContacts();\n            this.m_newContacts = false;\n        }\n        this.m_locked = true;\n        var step = b2World.Step_s_step;\n        step.dt = dt;\n        step.velocityIterations = velocityIterations;\n        step.positionIterations = positionIterations;\n        step.particleIterations = particleIterations;\n        if (dt > 0) {\n            step.inv_dt = 1 / dt;\n        }\n        else {\n            step.inv_dt = 0;\n        }\n        step.dtRatio = this.m_inv_dt0 * dt;\n        step.warmStarting = this.m_warmStarting;\n        var timer = b2World.Step_s_timer.Reset();\n        this.m_contactManager.Collide();\n        this.m_profile.collide = timer.GetMilliseconds();\n        if (this.m_stepComplete && step.dt > 0) {\n            var timer_1 = b2World.Step_s_timer.Reset();\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                p.Solve(step);\n            }\n            this.Solve(step);\n            this.m_profile.solve = timer_1.GetMilliseconds();\n        }\n        if (this.m_continuousPhysics && step.dt > 0) {\n            var timer_2 = b2World.Step_s_timer.Reset();\n            this.SolveTOI(step);\n            this.m_profile.solveTOI = timer_2.GetMilliseconds();\n        }\n        if (step.dt > 0) {\n            this.m_inv_dt0 = step.inv_dt;\n        }\n        if (this.m_clearForces) {\n            this.ClearForces();\n        }\n        this.m_locked = false;\n        this.m_profile.step = stepTimer.GetMilliseconds();\n    };\n    b2World.prototype.ClearForces = function () {\n        for (var body = this.m_bodyList; body; body = body.m_next) {\n            body.m_force.SetZero();\n            body.m_torque = 0;\n        }\n    };\n    b2World.prototype.DrawParticleSystem = function (system) {\n        if (this.m_debugDraw === null) {\n            return;\n        }\n        var particleCount = system.GetParticleCount();\n        if (particleCount) {\n            var radius = system.GetRadius();\n            var positionBuffer = system.GetPositionBuffer();\n            if (system.m_colorBuffer.data) {\n                var colorBuffer = system.GetColorBuffer();\n                this.m_debugDraw.DrawParticles(positionBuffer, radius, colorBuffer, particleCount);\n            }\n            else {\n                this.m_debugDraw.DrawParticles(positionBuffer, radius, null, particleCount);\n            }\n        }\n    };\n    b2World.prototype.DebugDraw = function () {\n        if (this.m_debugDraw === null) {\n            return;\n        }\n        var flags = this.m_debugDraw.GetFlags();\n        var color = b2World.DebugDraw_s_color.SetRGB(0, 0, 0);\n        if (flags & b2_draw_1.b2DrawFlags.e_shapeBit) {\n            for (var b = this.m_bodyList; b; b = b.m_next) {\n                var xf = b.m_xf;\n                this.m_debugDraw.PushTransform(xf);\n                for (var f = b.GetFixtureList(); f; f = f.m_next) {\n                    if (b.GetType() === b2_body_1.b2BodyType.b2_dynamicBody && b.m_mass === 0.0) {\n                        this.DrawShape(f, new b2_draw_1.b2Color(1.0, 0.0, 0.0));\n                    }\n                    else if (!b.IsEnabled()) {\n                        color.SetRGB(0.5, 0.5, 0.3);\n                        this.DrawShape(f, color);\n                    }\n                    else if (b.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n                        color.SetRGB(0.5, 0.9, 0.5);\n                        this.DrawShape(f, color);\n                    }\n                    else if (b.GetType() === b2_body_1.b2BodyType.b2_kinematicBody) {\n                        color.SetRGB(0.5, 0.5, 0.9);\n                        this.DrawShape(f, color);\n                    }\n                    else if (!b.IsAwake()) {\n                        color.SetRGB(0.6, 0.6, 0.6);\n                        this.DrawShape(f, color);\n                    }\n                    else {\n                        color.SetRGB(0.9, 0.7, 0.7);\n                        this.DrawShape(f, color);\n                    }\n                }\n                this.m_debugDraw.PopTransform(xf);\n            }\n        }\n        if (flags & b2_draw_1.b2DrawFlags.e_particleBit) {\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                this.DrawParticleSystem(p);\n            }\n        }\n        if (flags & b2_draw_1.b2DrawFlags.e_jointBit) {\n            for (var j = this.m_jointList; j; j = j.m_next) {\n                j.Draw(this.m_debugDraw);\n            }\n        }\n        if (flags & b2_draw_1.b2DrawFlags.e_pairBit) {\n            color.SetRGB(0.3, 0.9, 0.9);\n            for (var contact = this.m_contactManager.m_contactList; contact; contact = contact.m_next) {\n                var fixtureA = contact.GetFixtureA();\n                var fixtureB = contact.GetFixtureB();\n                var indexA = contact.GetChildIndexA();\n                var indexB = contact.GetChildIndexB();\n                var cA = fixtureA.GetAABB(indexA).GetCenter();\n                var cB = fixtureB.GetAABB(indexB).GetCenter();\n                this.m_debugDraw.DrawSegment(cA, cB, color);\n            }\n        }\n        if (flags & b2_draw_1.b2DrawFlags.e_aabbBit) {\n            color.SetRGB(0.9, 0.3, 0.9);\n            var vs = b2World.DebugDraw_s_vs;\n            for (var b = this.m_bodyList; b; b = b.m_next) {\n                if (!b.IsEnabled()) {\n                    continue;\n                }\n                for (var f = b.GetFixtureList(); f; f = f.m_next) {\n                    for (var i = 0; i < f.m_proxyCount; ++i) {\n                        var proxy = f.m_proxies[i];\n                        var aabb = proxy.treeNode.aabb;\n                        vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);\n                        vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);\n                        vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);\n                        vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);\n                        this.m_debugDraw.DrawPolygon(vs, 4, color);\n                    }\n                }\n            }\n        }\n        if (flags & b2_draw_1.b2DrawFlags.e_centerOfMassBit) {\n            for (var b = this.m_bodyList; b; b = b.m_next) {\n                var xf = b2World.DebugDraw_s_xf;\n                xf.q.Copy(b.m_xf.q);\n                xf.p.Copy(b.GetWorldCenter());\n                this.m_debugDraw.DrawTransform(xf);\n            }\n        }\n        if (flags & b2_draw_1.b2DrawFlags.e_controllerBit) {\n            for (var c = this.m_controllerList; c; c = c.m_next) {\n                c.Draw(this.m_debugDraw);\n            }\n        }\n    };\n    b2World.prototype.QueryAABB = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof b2_world_callbacks_1.b2QueryCallback) {\n            this._QueryAABB(args[0], args[1]);\n        }\n        else {\n            this._QueryAABB(null, args[0], args[1]);\n        }\n    };\n    b2World.prototype._QueryAABB = function (callback, aabb, fn) {\n        this.m_contactManager.m_broadPhase.Query(aabb, function (proxy) {\n            var fixture_proxy = proxy.userData;\n            var fixture = fixture_proxy.fixture;\n            if (callback) {\n                return callback.ReportFixture(fixture);\n            }\n            else if (fn) {\n                return fn(fixture);\n            }\n            return true;\n        });\n        if (callback instanceof b2_world_callbacks_1.b2QueryCallback) {\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                if (callback.ShouldQueryParticleSystem(p)) {\n                    p.QueryAABB(callback, aabb);\n                }\n            }\n        }\n    };\n    b2World.prototype.QueryAllAABB = function (aabb, out) {\n        if (out === void 0) { out = []; }\n        this.QueryAABB(aabb, function (fixture) { out.push(fixture); return true; });\n        return out;\n    };\n    b2World.prototype.QueryPointAABB = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof b2_world_callbacks_1.b2QueryCallback) {\n            this._QueryPointAABB(args[0], args[1]);\n        }\n        else {\n            this._QueryPointAABB(null, args[0], args[1]);\n        }\n    };\n    b2World.prototype._QueryPointAABB = function (callback, point, fn) {\n        this.m_contactManager.m_broadPhase.QueryPoint(point, function (proxy) {\n            var fixture_proxy = proxy.userData;\n            var fixture = fixture_proxy.fixture;\n            if (callback) {\n                return callback.ReportFixture(fixture);\n            }\n            else if (fn) {\n                return fn(fixture);\n            }\n            return true;\n        });\n        if (callback instanceof b2_world_callbacks_1.b2QueryCallback) {\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                if (callback.ShouldQueryParticleSystem(p)) {\n                    p.QueryPointAABB(callback, point);\n                }\n            }\n        }\n    };\n    b2World.prototype.QueryAllPointAABB = function (point, out) {\n        if (out === void 0) { out = []; }\n        this.QueryPointAABB(point, function (fixture) { out.push(fixture); return true; });\n        return out;\n    };\n    b2World.prototype.QueryFixtureShape = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof b2_world_callbacks_1.b2QueryCallback) {\n            this._QueryFixtureShape(args[0], args[1], args[2], args[3]);\n        }\n        else {\n            this._QueryFixtureShape(null, args[0], args[1], args[2], args[3]);\n        }\n    };\n    b2World.prototype._QueryFixtureShape = function (callback, shape, index, transform, fn) {\n        var aabb = b2World.QueryFixtureShape_s_aabb;\n        shape.ComputeAABB(aabb, transform, index);\n        this.m_contactManager.m_broadPhase.Query(aabb, function (proxy) {\n            var fixture_proxy = proxy.userData;\n            var fixture = fixture_proxy.fixture;\n            if (b2_collision_1.b2TestOverlapShape(shape, index, fixture.GetShape(), fixture_proxy.childIndex, transform, fixture.GetBody().GetTransform())) {\n                if (callback) {\n                    return callback.ReportFixture(fixture);\n                }\n                else if (fn) {\n                    return fn(fixture);\n                }\n            }\n            return true;\n        });\n        if (callback instanceof b2_world_callbacks_1.b2QueryCallback) {\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                if (callback.ShouldQueryParticleSystem(p)) {\n                    p.QueryAABB(callback, aabb);\n                }\n            }\n        }\n    };\n    b2World.prototype.QueryAllFixtureShape = function (shape, index, transform, out) {\n        if (out === void 0) { out = []; }\n        this.QueryFixtureShape(shape, index, transform, function (fixture) { out.push(fixture); return true; });\n        return out;\n    };\n    b2World.prototype.QueryFixturePoint = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof b2_world_callbacks_1.b2QueryCallback) {\n            this._QueryFixturePoint(args[0], args[1]);\n        }\n        else {\n            this._QueryFixturePoint(null, args[0], args[1]);\n        }\n    };\n    b2World.prototype._QueryFixturePoint = function (callback, point, fn) {\n        this.m_contactManager.m_broadPhase.QueryPoint(point, function (proxy) {\n            var fixture_proxy = proxy.userData;\n            var fixture = fixture_proxy.fixture;\n            if (fixture.TestPoint(point)) {\n                if (callback) {\n                    return callback.ReportFixture(fixture);\n                }\n                else if (fn) {\n                    return fn(fixture);\n                }\n            }\n            return true;\n        });\n        if (callback) {\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                if (callback.ShouldQueryParticleSystem(p)) {\n                    p.QueryPointAABB(callback, point);\n                }\n            }\n        }\n    };\n    b2World.prototype.QueryAllFixturePoint = function (point, out) {\n        if (out === void 0) { out = []; }\n        this.QueryFixturePoint(point, function (fixture) { out.push(fixture); return true; });\n        return out;\n    };\n    b2World.prototype.RayCast = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args[0] instanceof b2_world_callbacks_2.b2RayCastCallback) {\n            this._RayCast(args[0], args[1], args[2]);\n        }\n        else {\n            this._RayCast(null, args[0], args[1], args[2]);\n        }\n    };\n    b2World.prototype._RayCast = function (callback, point1, point2, fn) {\n        var input = b2World.RayCast_s_input;\n        input.maxFraction = 1;\n        input.p1.Copy(point1);\n        input.p2.Copy(point2);\n        this.m_contactManager.m_broadPhase.RayCast(input, function (input, proxy) {\n            var fixture_proxy = proxy.userData;\n            var fixture = fixture_proxy.fixture;\n            var index = fixture_proxy.childIndex;\n            var output = b2World.RayCast_s_output;\n            var hit = fixture.RayCast(output, input, index);\n            if (hit) {\n                var fraction = output.fraction;\n                var point = b2World.RayCast_s_point;\n                point.Set((1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y);\n                if (callback) {\n                    return callback.ReportFixture(fixture, point, output.normal, fraction);\n                }\n                else if (fn) {\n                    return fn(fixture, point, output.normal, fraction);\n                }\n            }\n            return input.maxFraction;\n        });\n        if (callback) {\n            for (var p = this.m_particleSystemList; p; p = p.m_next) {\n                if (callback.ShouldQueryParticleSystem(p)) {\n                    p.RayCast(callback, point1, point2);\n                }\n            }\n        }\n    };\n    b2World.prototype.RayCastOne = function (point1, point2) {\n        var result = null;\n        var min_fraction = 1;\n        this.RayCast(point1, point2, function (fixture, point, normal, fraction) {\n            if (fraction < min_fraction) {\n                min_fraction = fraction;\n                result = fixture;\n            }\n            return min_fraction;\n        });\n        return result;\n    };\n    b2World.prototype.RayCastAll = function (point1, point2, out) {\n        if (out === void 0) { out = []; }\n        this.RayCast(point1, point2, function (fixture, point, normal, fraction) {\n            out.push(fixture);\n            return 1;\n        });\n        return out;\n    };\n    b2World.prototype.GetBodyList = function () {\n        return this.m_bodyList;\n    };\n    b2World.prototype.GetJointList = function () {\n        return this.m_jointList;\n    };\n    b2World.prototype.GetParticleSystemList = function () {\n        return this.m_particleSystemList;\n    };\n    b2World.prototype.GetContactList = function () {\n        return this.m_contactManager.m_contactList;\n    };\n    b2World.prototype.SetAllowSleeping = function (flag) {\n        if (flag === this.m_allowSleep) {\n            return;\n        }\n        this.m_allowSleep = flag;\n        if (!this.m_allowSleep) {\n            for (var b = this.m_bodyList; b; b = b.m_next) {\n                b.SetAwake(true);\n            }\n        }\n    };\n    b2World.prototype.GetAllowSleeping = function () {\n        return this.m_allowSleep;\n    };\n    b2World.prototype.SetWarmStarting = function (flag) {\n        this.m_warmStarting = flag;\n    };\n    b2World.prototype.GetWarmStarting = function () {\n        return this.m_warmStarting;\n    };\n    b2World.prototype.SetContinuousPhysics = function (flag) {\n        this.m_continuousPhysics = flag;\n    };\n    b2World.prototype.GetContinuousPhysics = function () {\n        return this.m_continuousPhysics;\n    };\n    b2World.prototype.SetSubStepping = function (flag) {\n        this.m_subStepping = flag;\n    };\n    b2World.prototype.GetSubStepping = function () {\n        return this.m_subStepping;\n    };\n    b2World.prototype.GetProxyCount = function () {\n        return this.m_contactManager.m_broadPhase.GetProxyCount();\n    };\n    b2World.prototype.GetBodyCount = function () {\n        return this.m_bodyCount;\n    };\n    b2World.prototype.GetJointCount = function () {\n        return this.m_jointCount;\n    };\n    b2World.prototype.GetContactCount = function () {\n        return this.m_contactManager.m_contactCount;\n    };\n    b2World.prototype.GetTreeHeight = function () {\n        return this.m_contactManager.m_broadPhase.GetTreeHeight();\n    };\n    b2World.prototype.GetTreeBalance = function () {\n        return this.m_contactManager.m_broadPhase.GetTreeBalance();\n    };\n    b2World.prototype.GetTreeQuality = function () {\n        return this.m_contactManager.m_broadPhase.GetTreeQuality();\n    };\n    b2World.prototype.SetGravity = function (gravity, wake) {\n        if (wake === void 0) { wake = true; }\n        if (!b2_math_1.b2Vec2.IsEqualToV(this.m_gravity, gravity)) {\n            this.m_gravity.Copy(gravity);\n            if (wake) {\n                for (var b = this.m_bodyList; b; b = b.m_next) {\n                    b.SetAwake(true);\n                }\n            }\n        }\n    };\n    b2World.prototype.GetGravity = function () {\n        return this.m_gravity;\n    };\n    b2World.prototype.IsLocked = function () {\n        return this.m_locked;\n    };\n    b2World.prototype.SetAutoClearForces = function (flag) {\n        this.m_clearForces = flag;\n    };\n    b2World.prototype.GetAutoClearForces = function () {\n        return this.m_clearForces;\n    };\n    b2World.prototype.ShiftOrigin = function (newOrigin) {\n        if (this.IsLocked()) {\n            throw new Error();\n        }\n        for (var b = this.m_bodyList; b; b = b.m_next) {\n            b.m_xf.p.SelfSub(newOrigin);\n            b.m_sweep.c0.SelfSub(newOrigin);\n            b.m_sweep.c.SelfSub(newOrigin);\n        }\n        for (var j = this.m_jointList; j; j = j.m_next) {\n            j.ShiftOrigin(newOrigin);\n        }\n        this.m_contactManager.m_broadPhase.ShiftOrigin(newOrigin);\n    };\n    b2World.prototype.GetContactManager = function () {\n        return this.m_contactManager;\n    };\n    b2World.prototype.GetProfile = function () {\n        return this.m_profile;\n    };\n    b2World.prototype.Dump = function (log) {\n        if (this.m_locked) {\n            return;\n        }\n        log(\"const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\\n\", this.m_gravity.x, this.m_gravity.y);\n        log(\"this.m_world.SetGravity(g);\\n\");\n        log(\"const bodies: b2Body[] = [];\\n\");\n        log(\"const joints: b2Joint[] = [];\\n\");\n        var i = 0;\n        for (var b = this.m_bodyList; b; b = b.m_next) {\n            b.m_islandIndex = i;\n            b.Dump(log);\n            ++i;\n        }\n        i = 0;\n        for (var j = this.m_jointList; j; j = j.m_next) {\n            j.m_index = i;\n            ++i;\n        }\n        for (var j = this.m_jointList; j; j = j.m_next) {\n            if (j.m_type === b2_joint_1.b2JointType.e_gearJoint) {\n                continue;\n            }\n            log(\"{\\n\");\n            j.Dump(log);\n            log(\"}\\n\");\n        }\n        for (var j = this.m_jointList; j; j = j.m_next) {\n            if (j.m_type !== b2_joint_1.b2JointType.e_gearJoint) {\n                continue;\n            }\n            log(\"{\\n\");\n            j.Dump(log);\n            log(\"}\\n\");\n        }\n    };\n    b2World.prototype.DrawShape = function (fixture, color) {\n        if (this.m_debugDraw === null) {\n            return;\n        }\n        var shape = fixture.GetShape();\n        switch (shape.m_type) {\n            case b2_shape_1.b2ShapeType.e_circleShape: {\n                var circle = shape;\n                var center = circle.m_p;\n                var radius = circle.m_radius;\n                var axis = b2_math_1.b2Vec2.UNITX;\n                this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);\n                break;\n            }\n            case b2_shape_1.b2ShapeType.e_edgeShape: {\n                var edge = shape;\n                var v1 = edge.m_vertex1;\n                var v2 = edge.m_vertex2;\n                this.m_debugDraw.DrawSegment(v1, v2, color);\n                if (edge.m_oneSided === false) {\n                    this.m_debugDraw.DrawPoint(v1, 4.0, color);\n                    this.m_debugDraw.DrawPoint(v2, 4.0, color);\n                }\n                break;\n            }\n            case b2_shape_1.b2ShapeType.e_chainShape: {\n                var chain = shape;\n                var count = chain.m_count;\n                var vertices = chain.m_vertices;\n                var v1 = vertices[0];\n                for (var i = 1; i < count; ++i) {\n                    var v2 = vertices[i];\n                    this.m_debugDraw.DrawSegment(v1, v2, color);\n                    v1 = v2;\n                }\n                break;\n            }\n            case b2_shape_1.b2ShapeType.e_polygonShape: {\n                var poly = shape;\n                var vertexCount = poly.m_count;\n                var vertices = poly.m_vertices;\n                this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);\n                break;\n            }\n        }\n    };\n    b2World.prototype.Solve = function (step) {\n        for (var b = this.m_bodyList; b; b = b.m_next) {\n            b.m_xf0.Copy(b.m_xf);\n        }\n        for (var controller = this.m_controllerList; controller; controller = controller.m_next) {\n            controller.Step(step);\n        }\n        this.m_profile.solveInit = 0;\n        this.m_profile.solveVelocity = 0;\n        this.m_profile.solvePosition = 0;\n        var island = this.m_island;\n        island.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, this.m_contactManager.m_contactListener);\n        for (var b = this.m_bodyList; b; b = b.m_next) {\n            b.m_islandFlag = false;\n        }\n        for (var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n            c.m_islandFlag = false;\n        }\n        for (var j = this.m_jointList; j; j = j.m_next) {\n            j.m_islandFlag = false;\n        }\n        var stack = this.s_stack;\n        for (var seed = this.m_bodyList; seed; seed = seed.m_next) {\n            if (seed.m_islandFlag) {\n                continue;\n            }\n            if (!seed.IsAwake() || !seed.IsEnabled()) {\n                continue;\n            }\n            if (seed.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n                continue;\n            }\n            island.Clear();\n            var stackCount = 0;\n            stack[stackCount++] = seed;\n            seed.m_islandFlag = true;\n            while (stackCount > 0) {\n                var b = stack[--stackCount];\n                if (!b) {\n                    throw new Error();\n                }\n                island.AddBody(b);\n                if (b.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n                    continue;\n                }\n                b.m_awakeFlag = true;\n                for (var ce = b.m_contactList; ce; ce = ce.next) {\n                    var contact = ce.contact;\n                    if (contact.m_islandFlag) {\n                        continue;\n                    }\n                    if (!contact.IsEnabled() || !contact.IsTouching()) {\n                        continue;\n                    }\n                    var sensorA = contact.m_fixtureA.m_isSensor;\n                    var sensorB = contact.m_fixtureB.m_isSensor;\n                    if (sensorA || sensorB) {\n                        continue;\n                    }\n                    island.AddContact(contact);\n                    contact.m_islandFlag = true;\n                    var other = ce.other;\n                    if (other.m_islandFlag) {\n                        continue;\n                    }\n                    stack[stackCount++] = other;\n                    other.m_islandFlag = true;\n                }\n                for (var je = b.m_jointList; je; je = je.next) {\n                    if (je.joint.m_islandFlag) {\n                        continue;\n                    }\n                    var other = je.other;\n                    if (!other.IsEnabled()) {\n                        continue;\n                    }\n                    island.AddJoint(je.joint);\n                    je.joint.m_islandFlag = true;\n                    if (other.m_islandFlag) {\n                        continue;\n                    }\n                    stack[stackCount++] = other;\n                    other.m_islandFlag = true;\n                }\n            }\n            var profile = new b2_time_step_1.b2Profile();\n            island.Solve(profile, step, this.m_gravity, this.m_allowSleep);\n            this.m_profile.solveInit += profile.solveInit;\n            this.m_profile.solveVelocity += profile.solveVelocity;\n            this.m_profile.solvePosition += profile.solvePosition;\n            for (var i = 0; i < island.m_bodyCount; ++i) {\n                var b = island.m_bodies[i];\n                if (b.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n                    b.m_islandFlag = false;\n                }\n            }\n        }\n        for (var i = 0; i < stack.length; ++i) {\n            if (!stack[i]) {\n                break;\n            }\n            stack[i] = null;\n        }\n        var timer = new b2_timer_1.b2Timer();\n        for (var b = this.m_bodyList; b; b = b.m_next) {\n            if (!b.m_islandFlag) {\n                continue;\n            }\n            if (b.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n                continue;\n            }\n            b.SynchronizeFixtures();\n        }\n        this.m_contactManager.FindNewContacts();\n        this.m_profile.broadphase = timer.GetMilliseconds();\n    };\n    b2World.prototype.SolveTOI = function (step) {\n        var island = this.m_island;\n        island.Initialize(2 * b2_settings_1.b2_maxTOIContacts, b2_settings_1.b2_maxTOIContacts, 0, this.m_contactManager.m_contactListener);\n        if (this.m_stepComplete) {\n            for (var b = this.m_bodyList; b; b = b.m_next) {\n                b.m_islandFlag = false;\n                b.m_sweep.alpha0 = 0;\n            }\n            for (var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n                c.m_toiFlag = false;\n                c.m_islandFlag = false;\n                c.m_toiCount = 0;\n                c.m_toi = 1;\n            }\n        }\n        for (;;) {\n            var minContact = null;\n            var minAlpha = 1;\n            for (var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n                if (!c.IsEnabled()) {\n                    continue;\n                }\n                if (c.m_toiCount > b2_settings_1.b2_maxSubSteps) {\n                    continue;\n                }\n                var alpha = 1;\n                if (c.m_toiFlag) {\n                    alpha = c.m_toi;\n                }\n                else {\n                    var fA_1 = c.GetFixtureA();\n                    var fB_1 = c.GetFixtureB();\n                    if (fA_1.IsSensor() || fB_1.IsSensor()) {\n                        continue;\n                    }\n                    var bA_1 = fA_1.GetBody();\n                    var bB_1 = fB_1.GetBody();\n                    var typeA = bA_1.m_type;\n                    var typeB = bB_1.m_type;\n                    var activeA = bA_1.IsAwake() && typeA !== b2_body_1.b2BodyType.b2_staticBody;\n                    var activeB = bB_1.IsAwake() && typeB !== b2_body_1.b2BodyType.b2_staticBody;\n                    if (!activeA && !activeB) {\n                        continue;\n                    }\n                    var collideA = bA_1.IsBullet() || typeA !== b2_body_1.b2BodyType.b2_dynamicBody;\n                    var collideB = bB_1.IsBullet() || typeB !== b2_body_1.b2BodyType.b2_dynamicBody;\n                    if (!collideA && !collideB) {\n                        continue;\n                    }\n                    var alpha0 = bA_1.m_sweep.alpha0;\n                    if (bA_1.m_sweep.alpha0 < bB_1.m_sweep.alpha0) {\n                        alpha0 = bB_1.m_sweep.alpha0;\n                        bA_1.m_sweep.Advance(alpha0);\n                    }\n                    else if (bB_1.m_sweep.alpha0 < bA_1.m_sweep.alpha0) {\n                        alpha0 = bA_1.m_sweep.alpha0;\n                        bB_1.m_sweep.Advance(alpha0);\n                    }\n                    var indexA = c.GetChildIndexA();\n                    var indexB = c.GetChildIndexB();\n                    var input = b2World.SolveTOI_s_toi_input;\n                    input.proxyA.SetShape(fA_1.GetShape(), indexA);\n                    input.proxyB.SetShape(fB_1.GetShape(), indexB);\n                    input.sweepA.Copy(bA_1.m_sweep);\n                    input.sweepB.Copy(bB_1.m_sweep);\n                    input.tMax = 1;\n                    var output = b2World.SolveTOI_s_toi_output;\n                    b2_time_of_impact_1.b2TimeOfImpact(output, input);\n                    var beta = output.t;\n                    if (output.state === b2_time_of_impact_1.b2TOIOutputState.e_touching) {\n                        alpha = b2_math_1.b2Min(alpha0 + (1 - alpha0) * beta, 1);\n                    }\n                    else {\n                        alpha = 1;\n                    }\n                    c.m_toi = alpha;\n                    c.m_toiFlag = true;\n                }\n                if (alpha < minAlpha) {\n                    minContact = c;\n                    minAlpha = alpha;\n                }\n            }\n            if (minContact === null || 1 - 10 * b2_settings_1.b2_epsilon < minAlpha) {\n                this.m_stepComplete = true;\n                break;\n            }\n            var fA = minContact.GetFixtureA();\n            var fB = minContact.GetFixtureB();\n            var bA = fA.GetBody();\n            var bB = fB.GetBody();\n            var backup1 = b2World.SolveTOI_s_backup1.Copy(bA.m_sweep);\n            var backup2 = b2World.SolveTOI_s_backup2.Copy(bB.m_sweep);\n            bA.Advance(minAlpha);\n            bB.Advance(minAlpha);\n            minContact.Update(this.m_contactManager.m_contactListener);\n            minContact.m_toiFlag = false;\n            ++minContact.m_toiCount;\n            if (!minContact.IsEnabled() || !minContact.IsTouching()) {\n                minContact.SetEnabled(false);\n                bA.m_sweep.Copy(backup1);\n                bB.m_sweep.Copy(backup2);\n                bA.SynchronizeTransform();\n                bB.SynchronizeTransform();\n                continue;\n            }\n            bA.SetAwake(true);\n            bB.SetAwake(true);\n            island.Clear();\n            island.AddBody(bA);\n            island.AddBody(bB);\n            island.AddContact(minContact);\n            bA.m_islandFlag = true;\n            bB.m_islandFlag = true;\n            minContact.m_islandFlag = true;\n            for (var i = 0; i < 2; ++i) {\n                var body = (i === 0) ? (bA) : (bB);\n                if (body.m_type === b2_body_1.b2BodyType.b2_dynamicBody) {\n                    for (var ce = body.m_contactList; ce; ce = ce.next) {\n                        if (island.m_bodyCount === island.m_bodyCapacity) {\n                            break;\n                        }\n                        if (island.m_contactCount === island.m_contactCapacity) {\n                            break;\n                        }\n                        var contact = ce.contact;\n                        if (contact.m_islandFlag) {\n                            continue;\n                        }\n                        var other = ce.other;\n                        if (other.m_type === b2_body_1.b2BodyType.b2_dynamicBody &&\n                            !body.IsBullet() && !other.IsBullet()) {\n                            continue;\n                        }\n                        var sensorA = contact.m_fixtureA.m_isSensor;\n                        var sensorB = contact.m_fixtureB.m_isSensor;\n                        if (sensorA || sensorB) {\n                            continue;\n                        }\n                        var backup = b2World.SolveTOI_s_backup.Copy(other.m_sweep);\n                        if (!other.m_islandFlag) {\n                            other.Advance(minAlpha);\n                        }\n                        contact.Update(this.m_contactManager.m_contactListener);\n                        if (!contact.IsEnabled()) {\n                            other.m_sweep.Copy(backup);\n                            other.SynchronizeTransform();\n                            continue;\n                        }\n                        if (!contact.IsTouching()) {\n                            other.m_sweep.Copy(backup);\n                            other.SynchronizeTransform();\n                            continue;\n                        }\n                        contact.m_islandFlag = true;\n                        island.AddContact(contact);\n                        if (other.m_islandFlag) {\n                            continue;\n                        }\n                        other.m_islandFlag = true;\n                        if (other.m_type !== b2_body_1.b2BodyType.b2_staticBody) {\n                            other.SetAwake(true);\n                        }\n                        island.AddBody(other);\n                    }\n                }\n            }\n            var subStep = b2World.SolveTOI_s_subStep;\n            subStep.dt = (1 - minAlpha) * step.dt;\n            subStep.inv_dt = 1 / subStep.dt;\n            subStep.dtRatio = 1;\n            subStep.positionIterations = 20;\n            subStep.velocityIterations = step.velocityIterations;\n            subStep.particleIterations = step.particleIterations;\n            subStep.warmStarting = false;\n            island.SolveTOI(subStep, bA.m_islandIndex, bB.m_islandIndex);\n            for (var i = 0; i < island.m_bodyCount; ++i) {\n                var body = island.m_bodies[i];\n                body.m_islandFlag = false;\n                if (body.m_type !== b2_body_1.b2BodyType.b2_dynamicBody) {\n                    continue;\n                }\n                body.SynchronizeFixtures();\n                for (var ce = body.m_contactList; ce; ce = ce.next) {\n                    ce.contact.m_toiFlag = false;\n                    ce.contact.m_islandFlag = false;\n                }\n            }\n            this.m_contactManager.FindNewContacts();\n            if (this.m_subStepping) {\n                this.m_stepComplete = false;\n                break;\n            }\n        }\n    };\n    b2World.prototype.AddController = function (controller) {\n        controller.m_next = this.m_controllerList;\n        controller.m_prev = null;\n        if (this.m_controllerList) {\n            this.m_controllerList.m_prev = controller;\n        }\n        this.m_controllerList = controller;\n        ++this.m_controllerCount;\n        return controller;\n    };\n    b2World.prototype.RemoveController = function (controller) {\n        if (controller.m_prev) {\n            controller.m_prev.m_next = controller.m_next;\n        }\n        if (controller.m_next) {\n            controller.m_next.m_prev = controller.m_prev;\n        }\n        if (this.m_controllerList === controller) {\n            this.m_controllerList = controller.m_next;\n        }\n        --this.m_controllerCount;\n        controller.m_prev = null;\n        controller.m_next = null;\n        return controller;\n    };\n    b2World.Step_s_step = new b2_time_step_1.b2TimeStep();\n    b2World.Step_s_stepTimer = new b2_timer_1.b2Timer();\n    b2World.Step_s_timer = new b2_timer_1.b2Timer();\n    b2World.DebugDraw_s_color = new b2_draw_1.b2Color(0, 0, 0);\n    b2World.DebugDraw_s_vs = b2_math_1.b2Vec2.MakeArray(4);\n    b2World.DebugDraw_s_xf = new b2_math_1.b2Transform();\n    b2World.QueryFixtureShape_s_aabb = new b2_collision_1.b2AABB();\n    b2World.RayCast_s_input = new b2_collision_1.b2RayCastInput();\n    b2World.RayCast_s_output = new b2_collision_1.b2RayCastOutput();\n    b2World.RayCast_s_point = new b2_math_1.b2Vec2();\n    b2World.SolveTOI_s_subStep = new b2_time_step_1.b2TimeStep();\n    b2World.SolveTOI_s_backup = new b2_math_1.b2Sweep();\n    b2World.SolveTOI_s_backup1 = new b2_math_1.b2Sweep();\n    b2World.SolveTOI_s_backup2 = new b2_math_1.b2Sweep();\n    b2World.SolveTOI_s_toi_input = new b2_time_of_impact_1.b2TOIInput();\n    b2World.SolveTOI_s_toi_output = new b2_time_of_impact_1.b2TOIOutput();\n    return b2World;\n}());\nexports.b2World = b2World;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_world.ts\n");

/***/ }),

/***/ "./src/box2d/dynamics/b2_world_callbacks.ts":
/*!**************************************************!*\
  !*** ./src/box2d/dynamics/b2_world_callbacks.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2RayCastCallback = exports.b2QueryCallback = exports.b2ContactListener = exports.b2ContactImpulse = exports.b2ContactFilter = exports.b2DestructionListener = void 0;\nvar b2_body_1 = __webpack_require__(/*! ./b2_body */ \"./src/box2d/dynamics/b2_body.ts\");\nvar b2_common_1 = __webpack_require__(/*! ../common/b2_common */ \"./src/box2d/common/b2_common.ts\");\nvar b2DestructionListener = (function () {\n    function b2DestructionListener() {\n    }\n    b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) { };\n    b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) { };\n    b2DestructionListener.prototype.SayGoodbyeParticleGroup = function (group) { };\n    b2DestructionListener.prototype.SayGoodbyeParticle = function (system, index) { };\n    return b2DestructionListener;\n}());\nexports.b2DestructionListener = b2DestructionListener;\nvar b2ContactFilter = (function () {\n    function b2ContactFilter() {\n    }\n    b2ContactFilter.prototype.ShouldCollide = function (fixtureA, fixtureB) {\n        var bodyA = fixtureA.GetBody();\n        var bodyB = fixtureB.GetBody();\n        if (bodyB.GetType() === b2_body_1.b2BodyType.b2_staticBody && bodyA.GetType() === b2_body_1.b2BodyType.b2_staticBody) {\n            return false;\n        }\n        if (!bodyB.ShouldCollideConnected(bodyA)) {\n            return false;\n        }\n        var filter1 = fixtureA.GetFilterData();\n        var filter2 = fixtureB.GetFilterData();\n        if (filter1.groupIndex === filter2.groupIndex && filter1.groupIndex !== 0) {\n            return (filter1.groupIndex > 0);\n        }\n        var collide = (((filter1.maskBits & filter2.categoryBits) !== 0) && ((filter1.categoryBits & filter2.maskBits) !== 0));\n        return collide;\n    };\n    b2ContactFilter.prototype.ShouldCollideFixtureParticle = function (fixture, system, index) {\n        return true;\n    };\n    b2ContactFilter.prototype.ShouldCollideParticleParticle = function (system, indexA, indexB) {\n        return true;\n    };\n    b2ContactFilter.b2_defaultFilter = new b2ContactFilter();\n    return b2ContactFilter;\n}());\nexports.b2ContactFilter = b2ContactFilter;\nvar b2ContactImpulse = (function () {\n    function b2ContactImpulse() {\n        this.normalImpulses = b2_common_1.b2MakeNumberArray(b2_common_1.b2_maxManifoldPoints);\n        this.tangentImpulses = b2_common_1.b2MakeNumberArray(b2_common_1.b2_maxManifoldPoints);\n        this.count = 0;\n    }\n    return b2ContactImpulse;\n}());\nexports.b2ContactImpulse = b2ContactImpulse;\nvar b2ContactListener = (function () {\n    function b2ContactListener() {\n    }\n    b2ContactListener.prototype.BeginContact = function (contact) { };\n    b2ContactListener.prototype.EndContact = function (contact) { };\n    b2ContactListener.prototype.BeginContactFixtureParticle = function (system, contact) { };\n    b2ContactListener.prototype.EndContactFixtureParticle = function (system, contact) { };\n    b2ContactListener.prototype.BeginContactParticleParticle = function (system, contact) { };\n    b2ContactListener.prototype.EndContactParticleParticle = function (system, contact) { };\n    b2ContactListener.prototype.PreSolve = function (contact, oldManifold) { };\n    b2ContactListener.prototype.PostSolve = function (contact, impulse) { };\n    b2ContactListener.b2_defaultListener = new b2ContactListener();\n    return b2ContactListener;\n}());\nexports.b2ContactListener = b2ContactListener;\nvar b2QueryCallback = (function () {\n    function b2QueryCallback() {\n    }\n    b2QueryCallback.prototype.ReportFixture = function (fixture) {\n        return true;\n    };\n    b2QueryCallback.prototype.ReportParticle = function (system, index) {\n        return false;\n    };\n    b2QueryCallback.prototype.ShouldQueryParticleSystem = function (system) {\n        return true;\n    };\n    return b2QueryCallback;\n}());\nexports.b2QueryCallback = b2QueryCallback;\nvar b2RayCastCallback = (function () {\n    function b2RayCastCallback() {\n    }\n    b2RayCastCallback.prototype.ReportFixture = function (fixture, point, normal, fraction) {\n        return fraction;\n    };\n    b2RayCastCallback.prototype.ReportParticle = function (system, index, point, normal, fraction) {\n        return 0;\n    };\n    b2RayCastCallback.prototype.ShouldQueryParticleSystem = function (system) {\n        return true;\n    };\n    return b2RayCastCallback;\n}());\nexports.b2RayCastCallback = b2RayCastCallback;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvZHluYW1pY3MvYjJfd29ybGRfY2FsbGJhY2tzLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JveDJkL2R5bmFtaWNzL2IyX3dvcmxkX2NhbGxiYWNrcy50cz9iNjBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAwNi0yMDA5IEVyaW4gQ2F0dG8gaHR0cDovL3d3dy5ib3gyZC5vcmdcbipcbiogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiogd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4qIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4qIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4qIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuKiBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuKiAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4qIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG4qL1xuXG5cbi8vLyBKb2ludHMgYW5kIGZpeHR1cmVzIGFyZSBkZXN0cm95ZWQgd2hlbiB0aGVpciBhc3NvY2lhdGVkXG4vLy8gYm9keSBpcyBkZXN0cm95ZWQuIEltcGxlbWVudCB0aGlzIGxpc3RlbmVyIHNvIHRoYXQgeW91XG4vLy8gbWF5IG51bGxpZnkgcmVmZXJlbmNlcyB0byB0aGVzZSBqb2ludHMgYW5kIHNoYXBlcy5cbmltcG9ydCB7YjJKb2ludH0gZnJvbSBcIi4vYjJfam9pbnRcIjtcbmltcG9ydCB7YjJGaWx0ZXIsIGIyRml4dHVyZX0gZnJvbSBcIi4vYjJfZml4dHVyZVwiO1xuaW1wb3J0IHtiMlBhcnRpY2xlR3JvdXB9IGZyb20gXCIuLi9wYXJ0aWNsZS9iMl9wYXJ0aWNsZV9ncm91cFwiO1xuaW1wb3J0IHtiMlBhcnRpY2xlQm9keUNvbnRhY3QsIGIyUGFydGljbGVDb250YWN0LCBiMlBhcnRpY2xlU3lzdGVtfSBmcm9tIFwiLi4vcGFydGljbGUvYjJfcGFydGljbGVfc3lzdGVtXCI7XG5pbXBvcnQge2IyQm9keSwgYjJCb2R5VHlwZX0gZnJvbSBcIi4vYjJfYm9keVwiO1xuaW1wb3J0IHtiMl9tYXhNYW5pZm9sZFBvaW50cywgYjJNYWtlTnVtYmVyQXJyYXl9IGZyb20gXCIuLi9jb21tb24vYjJfY29tbW9uXCI7XG5pbXBvcnQge2IyQ29udGFjdH0gZnJvbSBcIi4vYjJfY29udGFjdFwiO1xuaW1wb3J0IHtiMk1hbmlmb2xkfSBmcm9tIFwiLi4vY29sbGlzaW9uL2IyX2NvbGxpc2lvblwiO1xuaW1wb3J0IHtiMlZlYzJ9IGZyb20gXCIuLi9jb21tb24vYjJfbWF0aFwiO1xuXG5leHBvcnQgY2xhc3MgYjJEZXN0cnVjdGlvbkxpc3RlbmVyIHtcbiAgLy8vIENhbGxlZCB3aGVuIGFueSBqb2ludCBpcyBhYm91dCB0byBiZSBkZXN0cm95ZWQgZHVlXG4gIC8vLyB0byB0aGUgZGVzdHJ1Y3Rpb24gb2Ygb25lIG9mIGl0cyBhdHRhY2hlZCBib2RpZXMuXG4gIHB1YmxpYyBTYXlHb29kYnllSm9pbnQoam9pbnQ6IGIySm9pbnQpOiB2b2lkIHt9XG5cbiAgLy8vIENhbGxlZCB3aGVuIGFueSBmaXh0dXJlIGlzIGFib3V0IHRvIGJlIGRlc3Ryb3llZCBkdWVcbiAgLy8vIHRvIHRoZSBkZXN0cnVjdGlvbiBvZiBpdHMgcGFyZW50IGJvZHkuXG4gIHB1YmxpYyBTYXlHb29kYnllRml4dHVyZShmaXh0dXJlOiBiMkZpeHR1cmUpOiB2b2lkIHt9XG5cbiAgLy8gI2lmIEIyX0VOQUJMRV9QQVJUSUNMRVxuICAvLy8gQ2FsbGVkIHdoZW4gYW55IHBhcnRpY2xlIGdyb3VwIGlzIGFib3V0IHRvIGJlIGRlc3Ryb3llZC5cbiAgcHVibGljIFNheUdvb2RieWVQYXJ0aWNsZUdyb3VwKGdyb3VwOiBiMlBhcnRpY2xlR3JvdXApOiB2b2lkIHt9XG5cbiAgLy8vIENhbGxlZCB3aGVuIGEgcGFydGljbGUgaXMgYWJvdXQgdG8gYmUgZGVzdHJveWVkLlxuICAvLy8gVGhlIGluZGV4IGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGhcbiAgLy8vIGIyUGFydGljbGVTeXN0ZW06OkdldFVzZXJEYXRhQnVmZmVyKCkgb3JcbiAgLy8vIGIyUGFydGljbGVTeXN0ZW06OkdldFBhcnRpY2xlSGFuZGxlRnJvbUluZGV4KCkgdG8gZGV0ZXJtaW5lIHdoaWNoXG4gIC8vLyBwYXJ0aWNsZSBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gIHB1YmxpYyBTYXlHb29kYnllUGFydGljbGUoc3lzdGVtOiBiMlBhcnRpY2xlU3lzdGVtLCBpbmRleDogbnVtYmVyKTogdm9pZCB7fVxuICAvLyAjZW5kaWZcbn1cblxuLy8vIEltcGxlbWVudCB0aGlzIGNsYXNzIHRvIHByb3ZpZGUgY29sbGlzaW9uIGZpbHRlcmluZy4gSW4gb3RoZXIgd29yZHMsIHlvdSBjYW4gaW1wbGVtZW50XG4vLy8gdGhpcyBjbGFzcyBpZiB5b3Ugd2FudCBmaW5lciBjb250cm9sIG92ZXIgY29udGFjdCBjcmVhdGlvbi5cbmV4cG9ydCBjbGFzcyBiMkNvbnRhY3RGaWx0ZXIge1xuICAvLy8gUmV0dXJuIHRydWUgaWYgY29udGFjdCBjYWxjdWxhdGlvbnMgc2hvdWxkIGJlIHBlcmZvcm1lZCBiZXR3ZWVuIHRoZXNlIHR3byBzaGFwZXMuXG4gIC8vLyBAd2FybmluZyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyB0aGlzIGlzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIEFBQkJzIGJlZ2luIHRvIG92ZXJsYXAuXG4gIHB1YmxpYyBTaG91bGRDb2xsaWRlKGZpeHR1cmVBOiBiMkZpeHR1cmUsIGZpeHR1cmVCOiBiMkZpeHR1cmUpOiBib29sZWFuIHtcbiAgICBjb25zdCBib2R5QTogYjJCb2R5ID0gZml4dHVyZUEuR2V0Qm9keSgpO1xuICAgIGNvbnN0IGJvZHlCOiBiMkJvZHkgPSBmaXh0dXJlQi5HZXRCb2R5KCk7XG5cbiAgICAvLyBBdCBsZWFzdCBvbmUgYm9keSBzaG91bGQgYmUgZHluYW1pYyBvciBraW5lbWF0aWMuXG4gICAgaWYgKGJvZHlCLkdldFR5cGUoKSA9PT0gYjJCb2R5VHlwZS5iMl9zdGF0aWNCb2R5ICYmIGJvZHlBLkdldFR5cGUoKSA9PT0gYjJCb2R5VHlwZS5iMl9zdGF0aWNCb2R5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gRG9lcyBhIGpvaW50IHByZXZlbnQgY29sbGlzaW9uP1xuICAgIGlmICghYm9keUIuU2hvdWxkQ29sbGlkZUNvbm5lY3RlZChib2R5QSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXIxOiBiMkZpbHRlciA9IGZpeHR1cmVBLkdldEZpbHRlckRhdGEoKTtcbiAgICBjb25zdCBmaWx0ZXIyOiBiMkZpbHRlciA9IGZpeHR1cmVCLkdldEZpbHRlckRhdGEoKTtcblxuICAgIGlmIChmaWx0ZXIxLmdyb3VwSW5kZXggPT09IGZpbHRlcjIuZ3JvdXBJbmRleCAmJiBmaWx0ZXIxLmdyb3VwSW5kZXggIT09IDApIHtcbiAgICAgIHJldHVybiAoZmlsdGVyMS5ncm91cEluZGV4ID4gMCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29sbGlkZTogYm9vbGVhbiA9ICgoKGZpbHRlcjEubWFza0JpdHMgJiBmaWx0ZXIyLmNhdGVnb3J5Qml0cykgIT09IDApICYmICgoZmlsdGVyMS5jYXRlZ29yeUJpdHMgJiBmaWx0ZXIyLm1hc2tCaXRzKSAhPT0gMCkpO1xuICAgIHJldHVybiBjb2xsaWRlO1xuICB9XG5cbiAgLy8gI2lmIEIyX0VOQUJMRV9QQVJUSUNMRVxuICBwdWJsaWMgU2hvdWxkQ29sbGlkZUZpeHR1cmVQYXJ0aWNsZShmaXh0dXJlOiBiMkZpeHR1cmUsIHN5c3RlbTogYjJQYXJ0aWNsZVN5c3RlbSwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHVibGljIFNob3VsZENvbGxpZGVQYXJ0aWNsZVBhcnRpY2xlKHN5c3RlbTogYjJQYXJ0aWNsZVN5c3RlbSwgaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gI2VuZGlmXG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBiMl9kZWZhdWx0RmlsdGVyOiBiMkNvbnRhY3RGaWx0ZXIgPSBuZXcgYjJDb250YWN0RmlsdGVyKCk7XG59XG5cbi8vLyBDb250YWN0IGltcHVsc2VzIGZvciByZXBvcnRpbmcuIEltcHVsc2VzIGFyZSB1c2VkIGluc3RlYWQgb2YgZm9yY2VzIGJlY2F1c2Vcbi8vLyBzdWItc3RlcCBmb3JjZXMgbWF5IGFwcHJvYWNoIGluZmluaXR5IGZvciByaWdpZCBib2R5IGNvbGxpc2lvbnMuIFRoZXNlXG4vLy8gbWF0Y2ggdXAgb25lLXRvLW9uZSB3aXRoIHRoZSBjb250YWN0IHBvaW50cyBpbiBiMk1hbmlmb2xkLlxuZXhwb3J0IGNsYXNzIGIyQ29udGFjdEltcHVsc2Uge1xuICBwdWJsaWMgbm9ybWFsSW1wdWxzZXM6IG51bWJlcltdID0gYjJNYWtlTnVtYmVyQXJyYXkoYjJfbWF4TWFuaWZvbGRQb2ludHMpO1xuICBwdWJsaWMgdGFuZ2VudEltcHVsc2VzOiBudW1iZXJbXSA9IGIyTWFrZU51bWJlckFycmF5KGIyX21heE1hbmlmb2xkUG9pbnRzKTtcbiAgcHVibGljIGNvdW50OiBudW1iZXIgPSAwO1xufVxuXG4vLy8gSW1wbGVtZW50IHRoaXMgY2xhc3MgdG8gZ2V0IGNvbnRhY3QgaW5mb3JtYXRpb24uIFlvdSBjYW4gdXNlIHRoZXNlIHJlc3VsdHMgZm9yXG4vLy8gdGhpbmdzIGxpa2Ugc291bmRzIGFuZCBnYW1lIGxvZ2ljLiBZb3UgY2FuIGFsc28gZ2V0IGNvbnRhY3QgcmVzdWx0cyBieVxuLy8vIHRyYXZlcnNpbmcgdGhlIGNvbnRhY3QgbGlzdHMgYWZ0ZXIgdGhlIHRpbWUgc3RlcC4gSG93ZXZlciwgeW91IG1pZ2h0IG1pc3Ncbi8vLyBzb21lIGNvbnRhY3RzIGJlY2F1c2UgY29udGludW91cyBwaHlzaWNzIGxlYWRzIHRvIHN1Yi1zdGVwcGluZy5cbi8vLyBBZGRpdGlvbmFsbHkgeW91IG1heSByZWNlaXZlIG11bHRpcGxlIGNhbGxiYWNrcyBmb3IgdGhlIHNhbWUgY29udGFjdCBpbiBhXG4vLy8gc2luZ2xlIHRpbWUgc3RlcC5cbi8vLyBZb3Ugc2hvdWxkIHN0cml2ZSB0byBtYWtlIHlvdXIgY2FsbGJhY2tzIGVmZmljaWVudCBiZWNhdXNlIHRoZXJlIG1heSBiZVxuLy8vIG1hbnkgY2FsbGJhY2tzIHBlciB0aW1lIHN0ZXAuXG4vLy8gQHdhcm5pbmcgWW91IGNhbm5vdCBjcmVhdGUvZGVzdHJveSBCb3gyRCBlbnRpdGllcyBpbnNpZGUgdGhlc2UgY2FsbGJhY2tzLlxuZXhwb3J0IGNsYXNzIGIyQ29udGFjdExpc3RlbmVyIHtcbiAgLy8vIENhbGxlZCB3aGVuIHR3byBmaXh0dXJlcyBiZWdpbiB0byB0b3VjaC5cbiAgcHVibGljIEJlZ2luQ29udGFjdChjb250YWN0OiBiMkNvbnRhY3QpOiB2b2lkIHt9XG5cbiAgLy8vIENhbGxlZCB3aGVuIHR3byBmaXh0dXJlcyBjZWFzZSB0byB0b3VjaC5cbiAgcHVibGljIEVuZENvbnRhY3QoY29udGFjdDogYjJDb250YWN0KTogdm9pZCB7fVxuXG4gIC8vICNpZiBCMl9FTkFCTEVfUEFSVElDTEVcbiAgcHVibGljIEJlZ2luQ29udGFjdEZpeHR1cmVQYXJ0aWNsZShzeXN0ZW06IGIyUGFydGljbGVTeXN0ZW0sIGNvbnRhY3Q6IGIyUGFydGljbGVCb2R5Q29udGFjdCk6IHZvaWQge31cbiAgcHVibGljIEVuZENvbnRhY3RGaXh0dXJlUGFydGljbGUoc3lzdGVtOiBiMlBhcnRpY2xlU3lzdGVtLCBjb250YWN0OiBiMlBhcnRpY2xlQm9keUNvbnRhY3QpOiB2b2lkIHt9XG4gIHB1YmxpYyBCZWdpbkNvbnRhY3RQYXJ0aWNsZVBhcnRpY2xlKHN5c3RlbTogYjJQYXJ0aWNsZVN5c3RlbSwgY29udGFjdDogYjJQYXJ0aWNsZUNvbnRhY3QpOiB2b2lkIHt9XG4gIHB1YmxpYyBFbmRDb250YWN0UGFydGljbGVQYXJ0aWNsZShzeXN0ZW06IGIyUGFydGljbGVTeXN0ZW0sIGNvbnRhY3Q6IGIyUGFydGljbGVDb250YWN0KTogdm9pZCB7fVxuICAvLyAjZW5kaWZcblxuICAvLy8gVGhpcyBpcyBjYWxsZWQgYWZ0ZXIgYSBjb250YWN0IGlzIHVwZGF0ZWQuIFRoaXMgYWxsb3dzIHlvdSB0byBpbnNwZWN0IGFcbiAgLy8vIGNvbnRhY3QgYmVmb3JlIGl0IGdvZXMgdG8gdGhlIHNvbHZlci4gSWYgeW91IGFyZSBjYXJlZnVsLCB5b3UgY2FuIG1vZGlmeSB0aGVcbiAgLy8vIGNvbnRhY3QgbWFuaWZvbGQgKGUuZy4gZGlzYWJsZSBjb250YWN0KS5cbiAgLy8vIEEgY29weSBvZiB0aGUgb2xkIG1hbmlmb2xkIGlzIHByb3ZpZGVkIHNvIHRoYXQgeW91IGNhbiBkZXRlY3QgY2hhbmdlcy5cbiAgLy8vIE5vdGU6IHRoaXMgaXMgY2FsbGVkIG9ubHkgZm9yIGF3YWtlIGJvZGllcy5cbiAgLy8vIE5vdGU6IHRoaXMgaXMgY2FsbGVkIGV2ZW4gd2hlbiB0aGUgbnVtYmVyIG9mIGNvbnRhY3QgcG9pbnRzIGlzIHplcm8uXG4gIC8vLyBOb3RlOiB0aGlzIGlzIG5vdCBjYWxsZWQgZm9yIHNlbnNvcnMuXG4gIC8vLyBOb3RlOiBpZiB5b3Ugc2V0IHRoZSBudW1iZXIgb2YgY29udGFjdCBwb2ludHMgdG8gemVybywgeW91IHdpbGwgbm90XG4gIC8vLyBnZXQgYW4gRW5kQ29udGFjdCBjYWxsYmFjay4gSG93ZXZlciwgeW91IG1heSBnZXQgYSBCZWdpbkNvbnRhY3QgY2FsbGJhY2tcbiAgLy8vIHRoZSBuZXh0IHN0ZXAuXG4gIHB1YmxpYyBQcmVTb2x2ZShjb250YWN0OiBiMkNvbnRhY3QsIG9sZE1hbmlmb2xkOiBiMk1hbmlmb2xkKTogdm9pZCB7fVxuXG4gIC8vLyBUaGlzIGxldHMgeW91IGluc3BlY3QgYSBjb250YWN0IGFmdGVyIHRoZSBzb2x2ZXIgaXMgZmluaXNoZWQuIFRoaXMgaXMgdXNlZnVsXG4gIC8vLyBmb3IgaW5zcGVjdGluZyBpbXB1bHNlcy5cbiAgLy8vIE5vdGU6IHRoZSBjb250YWN0IG1hbmlmb2xkIGRvZXMgbm90IGluY2x1ZGUgdGltZSBvZiBpbXBhY3QgaW1wdWxzZXMsIHdoaWNoIGNhbiBiZVxuICAvLy8gYXJiaXRyYXJpbHkgbGFyZ2UgaWYgdGhlIHN1Yi1zdGVwIGlzIHNtYWxsLiBIZW5jZSB0aGUgaW1wdWxzZSBpcyBwcm92aWRlZCBleHBsaWNpdGx5XG4gIC8vLyBpbiBhIHNlcGFyYXRlIGRhdGEgc3RydWN0dXJlLlxuICAvLy8gTm90ZTogdGhpcyBpcyBvbmx5IGNhbGxlZCBmb3IgY29udGFjdHMgdGhhdCBhcmUgdG91Y2hpbmcsIHNvbGlkLCBhbmQgYXdha2UuXG4gIHB1YmxpYyBQb3N0U29sdmUoY29udGFjdDogYjJDb250YWN0LCBpbXB1bHNlOiBiMkNvbnRhY3RJbXB1bHNlKTogdm9pZCB7fVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgYjJfZGVmYXVsdExpc3RlbmVyOiBiMkNvbnRhY3RMaXN0ZW5lciA9IG5ldyBiMkNvbnRhY3RMaXN0ZW5lcigpO1xufVxuXG4vLy8gQ2FsbGJhY2sgY2xhc3MgZm9yIEFBQkIgcXVlcmllcy5cbi8vLyBTZWUgYjJXb3JsZDo6UXVlcnlcbmV4cG9ydCBjbGFzcyBiMlF1ZXJ5Q2FsbGJhY2sge1xuICAvLy8gQ2FsbGVkIGZvciBlYWNoIGZpeHR1cmUgZm91bmQgaW4gdGhlIHF1ZXJ5IEFBQkIuXG4gIC8vLyBAcmV0dXJuIGZhbHNlIHRvIHRlcm1pbmF0ZSB0aGUgcXVlcnkuXG4gIHB1YmxpYyBSZXBvcnRGaXh0dXJlKGZpeHR1cmU6IGIyRml4dHVyZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gI2lmIEIyX0VOQUJMRV9QQVJUSUNMRVxuICBwdWJsaWMgUmVwb3J0UGFydGljbGUoc3lzdGVtOiBiMlBhcnRpY2xlU3lzdGVtLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHB1YmxpYyBTaG91bGRRdWVyeVBhcnRpY2xlU3lzdGVtKHN5c3RlbTogYjJQYXJ0aWNsZVN5c3RlbSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vICNlbmRpZlxufVxuXG5leHBvcnQgdHlwZSBiMlF1ZXJ5Q2FsbGJhY2tGdW5jdGlvbiA9IChmaXh0dXJlOiBiMkZpeHR1cmUpID0+IGJvb2xlYW47XG5cbi8vLyBDYWxsYmFjayBjbGFzcyBmb3IgcmF5IGNhc3RzLlxuLy8vIFNlZSBiMldvcmxkOjpSYXlDYXN0XG5leHBvcnQgY2xhc3MgYjJSYXlDYXN0Q2FsbGJhY2sge1xuICAvLy8gQ2FsbGVkIGZvciBlYWNoIGZpeHR1cmUgZm91bmQgaW4gdGhlIHF1ZXJ5LiBZb3UgY29udHJvbCBob3cgdGhlIHJheSBjYXN0XG4gIC8vLyBwcm9jZWVkcyBieSByZXR1cm5pbmcgYSBmbG9hdDpcbiAgLy8vIHJldHVybiAtMTogaWdub3JlIHRoaXMgZml4dHVyZSBhbmQgY29udGludWVcbiAgLy8vIHJldHVybiAwOiB0ZXJtaW5hdGUgdGhlIHJheSBjYXN0XG4gIC8vLyByZXR1cm4gZnJhY3Rpb246IGNsaXAgdGhlIHJheSB0byB0aGlzIHBvaW50XG4gIC8vLyByZXR1cm4gMTogZG9uJ3QgY2xpcCB0aGUgcmF5IGFuZCBjb250aW51ZVxuICAvLy8gQHBhcmFtIGZpeHR1cmUgdGhlIGZpeHR1cmUgaGl0IGJ5IHRoZSByYXlcbiAgLy8vIEBwYXJhbSBwb2ludCB0aGUgcG9pbnQgb2YgaW5pdGlhbCBpbnRlcnNlY3Rpb25cbiAgLy8vIEBwYXJhbSBub3JtYWwgdGhlIG5vcm1hbCB2ZWN0b3IgYXQgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvblxuICAvLy8gQHJldHVybiAtMSB0byBmaWx0ZXIsIDAgdG8gdGVybWluYXRlLCBmcmFjdGlvbiB0byBjbGlwIHRoZSByYXkgZm9yXG4gIC8vLyBjbG9zZXN0IGhpdCwgMSB0byBjb250aW51ZVxuICBwdWJsaWMgUmVwb3J0Rml4dHVyZShmaXh0dXJlOiBiMkZpeHR1cmUsIHBvaW50OiBiMlZlYzIsIG5vcm1hbDogYjJWZWMyLCBmcmFjdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZnJhY3Rpb247XG4gIH1cblxuICAvLyAjaWYgQjJfRU5BQkxFX1BBUlRJQ0xFXG4gIHB1YmxpYyBSZXBvcnRQYXJ0aWNsZShzeXN0ZW06IGIyUGFydGljbGVTeXN0ZW0sIGluZGV4OiBudW1iZXIsIHBvaW50OiBiMlZlYzIsIG5vcm1hbDogYjJWZWMyLCBmcmFjdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBwdWJsaWMgU2hvdWxkUXVlcnlQYXJ0aWNsZVN5c3RlbShzeXN0ZW06IGIyUGFydGljbGVTeXN0ZW0pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyAjZW5kaWZcbn1cblxuZXhwb3J0IHR5cGUgYjJSYXlDYXN0Q2FsbGJhY2tGdW5jdGlvbiA9IChmaXh0dXJlOiBiMkZpeHR1cmUsIHBvaW50OiBiMlZlYzIsIG5vcm1hbDogYjJWZWMyLCBmcmFjdGlvbjogbnVtYmVyKSA9PiBudW1iZXI7XG4iXSwibWFwcGluZ3MiOiI7OztBQTBCQTtBQUNBO0FBS0E7QUFBQTtBQW9CQTtBQWpCQTtBQUlBO0FBSUE7QUFPQTtBQUVBO0FBQUE7QUFwQkE7QUF3QkE7QUFBQTtBQXVDQTtBQXBDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBdkNBO0FBNENBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFKQTtBQWVBO0FBQUE7QUFtQ0E7QUFqQ0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBYUE7QUFRQTtBQUVBO0FBQ0E7QUFBQTtBQW5DQTtBQXVDQTtBQUFBO0FBZUE7QUFaQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBZkE7QUFxQkE7QUFBQTtBQXdCQTtBQVpBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUF4QkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/dynamics/b2_world_callbacks.ts\n");

/***/ }),

/***/ "./src/box2d/particle/b2_particle.ts":
/*!*******************************************!*\
  !*** ./src/box2d/particle/b2_particle.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ParticleHandle = exports.b2CalculateParticleIterations = exports.b2ParticleDef = exports.b2ParticleFlag = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2ParticleFlag;\n(function (b2ParticleFlag) {\n    b2ParticleFlag[b2ParticleFlag[\"b2_waterParticle\"] = 0] = \"b2_waterParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_zombieParticle\"] = 2] = \"b2_zombieParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_wallParticle\"] = 4] = \"b2_wallParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_springParticle\"] = 8] = \"b2_springParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_elasticParticle\"] = 16] = \"b2_elasticParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_viscousParticle\"] = 32] = \"b2_viscousParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_powderParticle\"] = 64] = \"b2_powderParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_tensileParticle\"] = 128] = \"b2_tensileParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_colorMixingParticle\"] = 256] = \"b2_colorMixingParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_destructionListenerParticle\"] = 512] = \"b2_destructionListenerParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_barrierParticle\"] = 1024] = \"b2_barrierParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_staticPressureParticle\"] = 2048] = \"b2_staticPressureParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_reactiveParticle\"] = 4096] = \"b2_reactiveParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_repulsiveParticle\"] = 8192] = \"b2_repulsiveParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_fixtureContactListenerParticle\"] = 16384] = \"b2_fixtureContactListenerParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_particleContactListenerParticle\"] = 32768] = \"b2_particleContactListenerParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_fixtureContactFilterParticle\"] = 65536] = \"b2_fixtureContactFilterParticle\";\n    b2ParticleFlag[b2ParticleFlag[\"b2_particleContactFilterParticle\"] = 131072] = \"b2_particleContactFilterParticle\";\n})(b2ParticleFlag = exports.b2ParticleFlag || (exports.b2ParticleFlag = {}));\nvar b2ParticleDef = (function () {\n    function b2ParticleDef() {\n        this.flags = 0;\n        this.position = new b2_math_1.b2Vec2();\n        this.velocity = new b2_math_1.b2Vec2();\n        this.color = new b2_draw_1.b2Color(0, 0, 0, 0);\n        this.lifetime = 0.0;\n        this.userData = null;\n        this.group = null;\n    }\n    return b2ParticleDef;\n}());\nexports.b2ParticleDef = b2ParticleDef;\nfunction b2CalculateParticleIterations(gravity, radius, timeStep) {\n    var B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS = 8;\n    var B2_RADIUS_THRESHOLD = 0.01;\n    var iterations = Math.ceil(Math.sqrt(gravity / (B2_RADIUS_THRESHOLD * radius)) * timeStep);\n    return b2_math_1.b2Clamp(iterations, 1, B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);\n}\nexports.b2CalculateParticleIterations = b2CalculateParticleIterations;\nvar b2ParticleHandle = (function () {\n    function b2ParticleHandle() {\n        this.m_index = b2_settings_1.b2_invalidParticleIndex;\n    }\n    b2ParticleHandle.prototype.GetIndex = function () { return this.m_index; };\n    b2ParticleHandle.prototype.SetIndex = function (index) { this.m_index = index; };\n    return b2ParticleHandle;\n}());\nexports.b2ParticleHandle = b2ParticleHandle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvcGFydGljbGUvYjJfcGFydGljbGUudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm94MmQvcGFydGljbGUvYjJfcGFydGljbGUudHM/MTU4NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIEdvb2dsZSwgSW5jLlxuICpcbiAqIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4gKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4gKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4gKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuICogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAqIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuICogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAqIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4gKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4gKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuICovXG5cbi8vICNpZiBCMl9FTkFCTEVfUEFSVElDTEVcblxuaW1wb3J0IHsgYjJfaW52YWxpZFBhcnRpY2xlSW5kZXggfSBmcm9tIFwiLi4vY29tbW9uL2IyX3NldHRpbmdzXCI7XG5pbXBvcnQgeyBiMkNsYW1wLCBiMlZlYzIsIFhZIH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9tYXRoXCI7XG5pbXBvcnQgeyBiMkNvbG9yLCBSR0JBIH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9kcmF3XCI7XG5pbXBvcnQgeyBiMlBhcnRpY2xlR3JvdXAgfSBmcm9tIFwiLi9iMl9wYXJ0aWNsZV9ncm91cFwiO1xuXG4vKipcbiAqIFRoZSBwYXJ0aWNsZSB0eXBlLiBDYW4gYmUgY29tYmluZWQgd2l0aCB0aGUgfCBvcGVyYXRvci5cbiAqL1xuZXhwb3J0IGVudW0gYjJQYXJ0aWNsZUZsYWcge1xuICAvLy8gV2F0ZXIgcGFydGljbGUuXG4gIGIyX3dhdGVyUGFydGljbGUgPSAwLFxuICAvLy8gUmVtb3ZlZCBhZnRlciBuZXh0IHNpbXVsYXRpb24gc3RlcC5cbiAgYjJfem9tYmllUGFydGljbGUgPSAxIDw8IDEsXG4gIC8vLyBaZXJvIHZlbG9jaXR5LlxuICBiMl93YWxsUGFydGljbGUgPSAxIDw8IDIsXG4gIC8vLyBXaXRoIHJlc3RpdHV0aW9uIGZyb20gc3RyZXRjaGluZy5cbiAgYjJfc3ByaW5nUGFydGljbGUgPSAxIDw8IDMsXG4gIC8vLyBXaXRoIHJlc3RpdHV0aW9uIGZyb20gZGVmb3JtYXRpb24uXG4gIGIyX2VsYXN0aWNQYXJ0aWNsZSA9IDEgPDwgNCxcbiAgLy8vIFdpdGggdmlzY29zaXR5LlxuICBiMl92aXNjb3VzUGFydGljbGUgPSAxIDw8IDUsXG4gIC8vLyBXaXRob3V0IGlzb3Ryb3BpYyBwcmVzc3VyZS5cbiAgYjJfcG93ZGVyUGFydGljbGUgPSAxIDw8IDYsXG4gIC8vLyBXaXRoIHN1cmZhY2UgdGVuc2lvbi5cbiAgYjJfdGVuc2lsZVBhcnRpY2xlID0gMSA8PCA3LFxuICAvLy8gTWl4IGNvbG9yIGJldHdlZW4gY29udGFjdGluZyBwYXJ0aWNsZXMuXG4gIGIyX2NvbG9yTWl4aW5nUGFydGljbGUgPSAxIDw8IDgsXG4gIC8vLyBDYWxsIGIyRGVzdHJ1Y3Rpb25MaXN0ZW5lciBvbiBkZXN0cnVjdGlvbi5cbiAgYjJfZGVzdHJ1Y3Rpb25MaXN0ZW5lclBhcnRpY2xlID0gMSA8PCA5LFxuICAvLy8gUHJldmVudHMgb3RoZXIgcGFydGljbGVzIGZyb20gbGVha2luZy5cbiAgYjJfYmFycmllclBhcnRpY2xlID0gMSA8PCAxMCxcbiAgLy8vIExlc3MgY29tcHJlc3NpYmlsaXR5LlxuICBiMl9zdGF0aWNQcmVzc3VyZVBhcnRpY2xlID0gMSA8PCAxMSxcbiAgLy8vIE1ha2VzIHBhaXJzIG9yIHRyaWFkcyB3aXRoIG90aGVyIHBhcnRpY2xlcy5cbiAgYjJfcmVhY3RpdmVQYXJ0aWNsZSA9IDEgPDwgMTIsXG4gIC8vLyBXaXRoIGhpZ2ggcmVwdWxzaXZlIGZvcmNlLlxuICBiMl9yZXB1bHNpdmVQYXJ0aWNsZSA9IDEgPDwgMTMsXG4gIC8vLyBDYWxsIGIyQ29udGFjdExpc3RlbmVyIHdoZW4gdGhpcyBwYXJ0aWNsZSBpcyBhYm91dCB0byBpbnRlcmFjdCB3aXRoXG4gIC8vLyBhIHJpZ2lkIGJvZHkgb3Igc3RvcHMgaW50ZXJhY3Rpbmcgd2l0aCBhIHJpZ2lkIGJvZHkuXG4gIC8vLyBUaGlzIHJlc3VsdHMgaW4gYW4gZXhwZW5zaXZlIG9wZXJhdGlvbiBjb21wYXJlZCB0byB1c2luZ1xuICAvLy8gYjJfZml4dHVyZUNvbnRhY3RGaWx0ZXJQYXJ0aWNsZSB0byBkZXRlY3QgY29sbGlzaW9ucyBiZXR3ZWVuXG4gIC8vLyBwYXJ0aWNsZXMuXG4gIGIyX2ZpeHR1cmVDb250YWN0TGlzdGVuZXJQYXJ0aWNsZSA9IDEgPDwgMTQsXG4gIC8vLyBDYWxsIGIyQ29udGFjdExpc3RlbmVyIHdoZW4gdGhpcyBwYXJ0aWNsZSBpcyBhYm91dCB0byBpbnRlcmFjdCB3aXRoXG4gIC8vLyBhbm90aGVyIHBhcnRpY2xlIG9yIHN0b3BzIGludGVyYWN0aW5nIHdpdGggYW5vdGhlciBwYXJ0aWNsZS5cbiAgLy8vIFRoaXMgcmVzdWx0cyBpbiBhbiBleHBlbnNpdmUgb3BlcmF0aW9uIGNvbXBhcmVkIHRvIHVzaW5nXG4gIC8vLyBiMl9wYXJ0aWNsZUNvbnRhY3RGaWx0ZXJQYXJ0aWNsZSB0byBkZXRlY3QgY29sbGlzaW9ucyBiZXR3ZWVuXG4gIC8vLyBwYXJ0aWNsZXMuXG4gIGIyX3BhcnRpY2xlQ29udGFjdExpc3RlbmVyUGFydGljbGUgPSAxIDw8IDE1LFxuICAvLy8gQ2FsbCBiMkNvbnRhY3RGaWx0ZXIgd2hlbiB0aGlzIHBhcnRpY2xlIGludGVyYWN0cyB3aXRoIHJpZ2lkIGJvZGllcy5cbiAgYjJfZml4dHVyZUNvbnRhY3RGaWx0ZXJQYXJ0aWNsZSA9IDEgPDwgMTYsXG4gIC8vLyBDYWxsIGIyQ29udGFjdEZpbHRlciB3aGVuIHRoaXMgcGFydGljbGUgaW50ZXJhY3RzIHdpdGggb3RoZXJcbiAgLy8vIHBhcnRpY2xlcy5cbiAgYjJfcGFydGljbGVDb250YWN0RmlsdGVyUGFydGljbGUgPSAxIDw8IDE3LFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIGIySVBhcnRpY2xlRGVmIHtcbiAgZmxhZ3M/OiBiMlBhcnRpY2xlRmxhZztcbiAgcG9zaXRpb24/OiBYWTtcbiAgdmVsb2NpdHk/OiBYWTtcbiAgY29sb3I/OiBSR0JBO1xuICBsaWZldGltZT86IG51bWJlcjtcbiAgdXNlckRhdGE/OiBhbnk7XG4gIGdyb3VwPzogYjJQYXJ0aWNsZUdyb3VwIHwgbnVsbDtcbn1cblxuZXhwb3J0IGNsYXNzIGIyUGFydGljbGVEZWYgaW1wbGVtZW50cyBiMklQYXJ0aWNsZURlZiB7XG4gIHB1YmxpYyBmbGFnczogYjJQYXJ0aWNsZUZsYWcgPSAwO1xuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb246IGIyVmVjMiA9IG5ldyBiMlZlYzIoKTtcbiAgcHVibGljIHJlYWRvbmx5IHZlbG9jaXR5OiBiMlZlYzIgPSBuZXcgYjJWZWMyKCk7XG4gIHB1YmxpYyByZWFkb25seSBjb2xvcjogYjJDb2xvciA9IG5ldyBiMkNvbG9yKDAsIDAsIDAsIDApO1xuICBwdWJsaWMgbGlmZXRpbWU6IG51bWJlciA9IDAuMDtcbiAgcHVibGljIHVzZXJEYXRhOiBhbnkgPSBudWxsO1xuICBwdWJsaWMgZ3JvdXA6IGIyUGFydGljbGVHcm91cCB8IG51bGwgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYjJDYWxjdWxhdGVQYXJ0aWNsZUl0ZXJhdGlvbnMoZ3Jhdml0eTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgdGltZVN0ZXA6IG51bWJlcik6IG51bWJlciB7XG4gIC8vIEluIHNvbWUgc2l0dWF0aW9ucyB5b3UgbWF5IHdhbnQgbW9yZSBwYXJ0aWNsZSBpdGVyYXRpb25zIHRoYW4gdGhpcyxcbiAgLy8gYnV0IHRvIGF2b2lkIGV4Y2Vzc2l2ZSBjeWNsZSBjb3N0LCBkb24ndCByZWNvbW1lbmQgbW9yZSB0aGFuIHRoaXMuXG4gIGNvbnN0IEIyX01BWF9SRUNPTU1FTkRFRF9QQVJUSUNMRV9JVEVSQVRJT05TID0gODtcbiAgY29uc3QgQjJfUkFESVVTX1RIUkVTSE9MRCA9IDAuMDE7XG4gIGNvbnN0IGl0ZXJhdGlvbnMgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGdyYXZpdHkgLyAoQjJfUkFESVVTX1RIUkVTSE9MRCAqIHJhZGl1cykpICogdGltZVN0ZXApO1xuICByZXR1cm4gYjJDbGFtcChpdGVyYXRpb25zLCAxLCBCMl9NQVhfUkVDT01NRU5ERURfUEFSVElDTEVfSVRFUkFUSU9OUyk7XG59XG5cbmV4cG9ydCBjbGFzcyBiMlBhcnRpY2xlSGFuZGxlIHtcbiAgcHVibGljIG1faW5kZXg6IG51bWJlciA9IGIyX2ludmFsaWRQYXJ0aWNsZUluZGV4O1xuICBwdWJsaWMgR2V0SW5kZXgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMubV9pbmRleDsgfVxuICBwdWJsaWMgU2V0SW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQgeyB0aGlzLm1faW5kZXggPSBpbmRleDsgfVxufVxuXG4vLyAjZW5kaWZcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBb0JBO0FBQ0E7QUFDQTtBQU1BO0FBQUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBTUE7QUFNQTtBQUVBO0FBR0E7QUFDQTtBQVlBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQVJBO0FBVUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFTQTtBQUFBO0FBQ0E7QUFHQTtBQUZBO0FBQ0E7QUFDQTtBQUFBO0FBSkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/box2d/particle/b2_particle.ts\n");

/***/ }),

/***/ "./src/box2d/particle/b2_particle_group.ts":
/*!*************************************************!*\
  !*** ./src/box2d/particle/b2_particle_group.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ParticleGroup = exports.b2ParticleGroupDef = exports.b2ParticleGroupFlag = void 0;\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2ParticleGroupFlag;\n(function (b2ParticleGroupFlag) {\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_solidParticleGroup\"] = 1] = \"b2_solidParticleGroup\";\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_rigidParticleGroup\"] = 2] = \"b2_rigidParticleGroup\";\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupCanBeEmpty\"] = 4] = \"b2_particleGroupCanBeEmpty\";\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupWillBeDestroyed\"] = 8] = \"b2_particleGroupWillBeDestroyed\";\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupNeedsUpdateDepth\"] = 16] = \"b2_particleGroupNeedsUpdateDepth\";\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupInternalMask\"] = 24] = \"b2_particleGroupInternalMask\";\n})(b2ParticleGroupFlag = exports.b2ParticleGroupFlag || (exports.b2ParticleGroupFlag = {}));\nvar b2ParticleGroupDef = (function () {\n    function b2ParticleGroupDef() {\n        this.flags = 0;\n        this.groupFlags = 0;\n        this.position = new b2_math_1.b2Vec2();\n        this.angle = 0.0;\n        this.linearVelocity = new b2_math_1.b2Vec2();\n        this.angularVelocity = 0.0;\n        this.color = new b2_draw_1.b2Color();\n        this.strength = 1.0;\n        this.shapeCount = 0;\n        this.stride = 0;\n        this.particleCount = 0;\n        this.lifetime = 0;\n        this.userData = null;\n        this.group = null;\n    }\n    return b2ParticleGroupDef;\n}());\nexports.b2ParticleGroupDef = b2ParticleGroupDef;\nvar b2ParticleGroup = (function () {\n    function b2ParticleGroup(system) {\n        this.m_firstIndex = 0;\n        this.m_lastIndex = 0;\n        this.m_groupFlags = 0;\n        this.m_strength = 1.0;\n        this.m_prev = null;\n        this.m_next = null;\n        this.m_timestamp = -1;\n        this.m_mass = 0.0;\n        this.m_inertia = 0.0;\n        this.m_center = new b2_math_1.b2Vec2();\n        this.m_linearVelocity = new b2_math_1.b2Vec2();\n        this.m_angularVelocity = 0.0;\n        this.m_transform = new b2_math_1.b2Transform();\n        this.m_userData = null;\n        this.m_system = system;\n    }\n    b2ParticleGroup.prototype.GetNext = function () {\n        return this.m_next;\n    };\n    b2ParticleGroup.prototype.GetParticleSystem = function () {\n        return this.m_system;\n    };\n    b2ParticleGroup.prototype.GetParticleCount = function () {\n        return this.m_lastIndex - this.m_firstIndex;\n    };\n    b2ParticleGroup.prototype.GetBufferIndex = function () {\n        return this.m_firstIndex;\n    };\n    b2ParticleGroup.prototype.ContainsParticle = function (index) {\n        return this.m_firstIndex <= index && index < this.m_lastIndex;\n    };\n    b2ParticleGroup.prototype.GetAllParticleFlags = function () {\n        if (!this.m_system.m_flagsBuffer.data) {\n            throw new Error();\n        }\n        var flags = 0;\n        for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n            flags |= this.m_system.m_flagsBuffer.data[i];\n        }\n        return flags;\n    };\n    b2ParticleGroup.prototype.GetGroupFlags = function () {\n        return this.m_groupFlags;\n    };\n    b2ParticleGroup.prototype.SetGroupFlags = function (flags) {\n        flags |= this.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupInternalMask;\n        this.m_system.SetGroupFlags(this, flags);\n    };\n    b2ParticleGroup.prototype.GetMass = function () {\n        this.UpdateStatistics();\n        return this.m_mass;\n    };\n    b2ParticleGroup.prototype.GetInertia = function () {\n        this.UpdateStatistics();\n        return this.m_inertia;\n    };\n    b2ParticleGroup.prototype.GetCenter = function () {\n        this.UpdateStatistics();\n        return this.m_center;\n    };\n    b2ParticleGroup.prototype.GetLinearVelocity = function () {\n        this.UpdateStatistics();\n        return this.m_linearVelocity;\n    };\n    b2ParticleGroup.prototype.GetAngularVelocity = function () {\n        this.UpdateStatistics();\n        return this.m_angularVelocity;\n    };\n    b2ParticleGroup.prototype.GetTransform = function () {\n        return this.m_transform;\n    };\n    b2ParticleGroup.prototype.GetPosition = function () {\n        return this.m_transform.p;\n    };\n    b2ParticleGroup.prototype.GetAngle = function () {\n        return this.m_transform.q.GetAngle();\n    };\n    b2ParticleGroup.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint, out) {\n        var s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;\n        this.UpdateStatistics();\n        return b2_math_1.b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2_math_1.b2Vec2.SubVV(worldPoint, this.m_center, s_t0), out);\n    };\n    b2ParticleGroup.prototype.GetUserData = function () {\n        return this.m_userData;\n    };\n    b2ParticleGroup.prototype.SetUserData = function (data) {\n        this.m_userData = data;\n    };\n    b2ParticleGroup.prototype.ApplyForce = function (force) {\n        this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);\n    };\n    b2ParticleGroup.prototype.ApplyLinearImpulse = function (impulse) {\n        this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);\n    };\n    b2ParticleGroup.prototype.DestroyParticles = function (callDestructionListener) {\n        if (this.m_system.m_world.IsLocked()) {\n            throw new Error();\n        }\n        for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n            this.m_system.DestroyParticle(i, callDestructionListener);\n        }\n    };\n    b2ParticleGroup.prototype.UpdateStatistics = function () {\n        if (!this.m_system.m_positionBuffer.data) {\n            throw new Error();\n        }\n        if (!this.m_system.m_velocityBuffer.data) {\n            throw new Error();\n        }\n        var p = new b2_math_1.b2Vec2();\n        var v = new b2_math_1.b2Vec2();\n        if (this.m_timestamp !== this.m_system.m_timestamp) {\n            var m = this.m_system.GetParticleMass();\n            this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);\n            this.m_center.SetZero();\n            this.m_linearVelocity.SetZero();\n            for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n                this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);\n                this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);\n            }\n            if (this.m_mass > 0) {\n                var inv_mass = 1 / this.m_mass;\n                this.m_center.SelfMul(inv_mass);\n                this.m_linearVelocity.SelfMul(inv_mass);\n            }\n            this.m_inertia = 0;\n            this.m_angularVelocity = 0;\n            for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n                b2_math_1.b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);\n                b2_math_1.b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);\n                this.m_inertia += m * b2_math_1.b2Vec2.DotVV(p, p);\n                this.m_angularVelocity += m * b2_math_1.b2Vec2.CrossVV(p, v);\n            }\n            if (this.m_inertia > 0) {\n                this.m_angularVelocity *= 1 / this.m_inertia;\n            }\n            this.m_timestamp = this.m_system.m_timestamp;\n        }\n    };\n    b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0 = new b2_math_1.b2Vec2();\n    return b2ParticleGroup;\n}());\nexports.b2ParticleGroup = b2ParticleGroup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/particle/b2_particle_group.ts\n");

/***/ }),

/***/ "./src/box2d/particle/b2_particle_system.ts":
/*!**************************************************!*\
  !*** ./src/box2d/particle/b2_particle_system.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2ParticleSystem_SolveCollisionCallback = exports.b2ParticleSystem_UpdateBodyContactsCallback = exports.b2ParticleSystem_ReactiveFilter = exports.b2ParticleSystem_CompositeShape = exports.b2ParticleSystem_JoinParticleGroupsFilter = exports.b2ParticleSystem_DestroyParticlesInShapeCallback = exports.b2ParticleSystem_ConnectionFilter = exports.b2ParticlePairSet = exports.b2ParticleSystem_ParticlePair = exports.b2ParticleSystem_FixtureParticleSet = exports.b2ParticleSystem_FixtureParticle = exports.b2ParticleSystem_FixedSetAllocator = exports.b2ParticleSystem_ParticleListNode = exports.b2ParticleSystem_InsideBoundsEnumerator = exports.b2ParticleSystem_Proxy = exports.b2ParticleSystem_UserOverridableBuffer = exports.b2ParticleSystem = exports.b2ParticleSystemDef = exports.b2ParticleTriad = exports.b2ParticlePair = exports.b2ParticleBodyContact = exports.b2ParticleContact = exports.b2FixtureParticleQueryCallback = exports.b2GrowableBuffer = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_settings_2 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_draw_1 = __webpack_require__(/*! ../common/b2_draw */ \"./src/box2d/common/b2_draw.ts\");\nvar b2_collision_1 = __webpack_require__(/*! ../collision/b2_collision */ \"./src/box2d/collision/b2_collision.ts\");\nvar b2_shape_1 = __webpack_require__(/*! ../collision/b2_shape */ \"./src/box2d/collision/b2_shape.ts\");\nvar b2_edge_shape_1 = __webpack_require__(/*! ../collision/b2_edge_shape */ \"./src/box2d/collision/b2_edge_shape.ts\");\nvar b2_time_step_1 = __webpack_require__(/*! ../dynamics/b2_time_step */ \"./src/box2d/dynamics/b2_time_step.ts\");\nvar b2_world_callbacks_1 = __webpack_require__(/*! ../dynamics/b2_world_callbacks */ \"./src/box2d/dynamics/b2_world_callbacks.ts\");\nvar b2_particle_1 = __webpack_require__(/*! ./b2_particle */ \"./src/box2d/particle/b2_particle.ts\");\nvar b2_particle_group_1 = __webpack_require__(/*! ./b2_particle_group */ \"./src/box2d/particle/b2_particle_group.ts\");\nvar b2_voronoi_diagram_1 = __webpack_require__(/*! ./b2_voronoi_diagram */ \"./src/box2d/particle/b2_voronoi_diagram.ts\");\nfunction std_iter_swap(array, a, b) {\n    var tmp = array[a];\n    array[a] = array[b];\n    array[b] = tmp;\n}\nfunction default_compare(a, b) { return a < b; }\nfunction std_sort(array, first, len, cmp) {\n    if (first === void 0) { first = 0; }\n    if (len === void 0) { len = array.length - first; }\n    if (cmp === void 0) { cmp = default_compare; }\n    var left = first;\n    var stack = [];\n    var pos = 0;\n    for (;;) {\n        for (; left + 1 < len; len++) {\n            var pivot = array[left + Math.floor(Math.random() * (len - left))];\n            stack[pos++] = len;\n            for (var right = left - 1;;) {\n                while (cmp(array[++right], pivot)) { }\n                while (cmp(pivot, array[--len])) { }\n                if (right >= len) {\n                    break;\n                }\n                std_iter_swap(array, right, len);\n            }\n        }\n        if (pos === 0) {\n            break;\n        }\n        left = len;\n        len = stack[--pos];\n    }\n    return array;\n}\nfunction std_stable_sort(array, first, len, cmp) {\n    if (first === void 0) { first = 0; }\n    if (len === void 0) { len = array.length - first; }\n    if (cmp === void 0) { cmp = default_compare; }\n    return std_sort(array, first, len, cmp);\n}\nfunction std_remove_if(array, predicate, length) {\n    if (length === void 0) { length = array.length; }\n    var l = 0;\n    for (var c = 0; c < length; ++c) {\n        if (predicate(array[c])) {\n            continue;\n        }\n        if (c === l) {\n            ++l;\n            continue;\n        }\n        std_iter_swap(array, l++, c);\n    }\n    return l;\n}\nfunction std_lower_bound(array, first, last, val, cmp) {\n    var count = last - first;\n    while (count > 0) {\n        var step = Math.floor(count / 2);\n        var it = first + step;\n        if (cmp(array[it], val)) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\nfunction std_upper_bound(array, first, last, val, cmp) {\n    var count = last - first;\n    while (count > 0) {\n        var step = Math.floor(count / 2);\n        var it = first + step;\n        if (!cmp(val, array[it])) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\nfunction std_rotate(array, first, n_first, last) {\n    var next = n_first;\n    while (first !== next) {\n        std_iter_swap(array, first++, next++);\n        if (next === last) {\n            next = n_first;\n        }\n        else if (first === n_first) {\n            n_first = next;\n        }\n    }\n}\nfunction std_unique(array, first, last, cmp) {\n    if (first === last) {\n        return last;\n    }\n    var result = first;\n    while (++first !== last) {\n        if (!cmp(array[result], array[first])) {\n            std_iter_swap(array, ++result, first);\n        }\n    }\n    return ++result;\n}\nvar b2GrowableBuffer = (function () {\n    function b2GrowableBuffer(allocator) {\n        this.data = [];\n        this.count = 0;\n        this.capacity = 0;\n        this.allocator = allocator;\n    }\n    b2GrowableBuffer.prototype.Append = function () {\n        if (this.count >= this.capacity) {\n            this.Grow();\n        }\n        return this.count++;\n    };\n    b2GrowableBuffer.prototype.Reserve = function (newCapacity) {\n        if (this.capacity >= newCapacity) {\n            return;\n        }\n        for (var i = this.capacity; i < newCapacity; ++i) {\n            this.data[i] = this.allocator();\n        }\n        this.capacity = newCapacity;\n    };\n    b2GrowableBuffer.prototype.Grow = function () {\n        var newCapacity = this.capacity ? 2 * this.capacity : b2_settings_1.b2_minParticleSystemBufferCapacity;\n        this.Reserve(newCapacity);\n    };\n    b2GrowableBuffer.prototype.Free = function () {\n        if (this.data.length === 0) {\n            return;\n        }\n        this.data = [];\n        this.capacity = 0;\n        this.count = 0;\n    };\n    b2GrowableBuffer.prototype.Shorten = function (newEnd) {\n    };\n    b2GrowableBuffer.prototype.Data = function () {\n        return this.data;\n    };\n    b2GrowableBuffer.prototype.GetCount = function () {\n        return this.count;\n    };\n    b2GrowableBuffer.prototype.SetCount = function (newCount) {\n        this.count = newCount;\n    };\n    b2GrowableBuffer.prototype.GetCapacity = function () {\n        return this.capacity;\n    };\n    b2GrowableBuffer.prototype.RemoveIf = function (pred) {\n        this.count = std_remove_if(this.data, pred, this.count);\n    };\n    b2GrowableBuffer.prototype.Unique = function (pred) {\n        this.count = std_unique(this.data, 0, this.count, pred);\n    };\n    return b2GrowableBuffer;\n}());\nexports.b2GrowableBuffer = b2GrowableBuffer;\nvar b2FixtureParticleQueryCallback = (function (_super) {\n    __extends(b2FixtureParticleQueryCallback, _super);\n    function b2FixtureParticleQueryCallback(system) {\n        var _this = _super.call(this) || this;\n        _this.m_system = system;\n        return _this;\n    }\n    b2FixtureParticleQueryCallback.prototype.ShouldQueryParticleSystem = function (system) {\n        return false;\n    };\n    b2FixtureParticleQueryCallback.prototype.ReportFixture = function (fixture) {\n        if (fixture.IsSensor()) {\n            return true;\n        }\n        var shape = fixture.GetShape();\n        var childCount = shape.GetChildCount();\n        for (var childIndex = 0; childIndex < childCount; childIndex++) {\n            var aabb = fixture.GetAABB(childIndex);\n            var enumerator = this.m_system.GetInsideBoundsEnumerator(aabb);\n            var index = void 0;\n            while ((index = enumerator.GetNext()) >= 0) {\n                this.ReportFixtureAndParticle(fixture, childIndex, index);\n            }\n        }\n        return true;\n    };\n    b2FixtureParticleQueryCallback.prototype.ReportParticle = function (system, index) {\n        return false;\n    };\n    b2FixtureParticleQueryCallback.prototype.ReportFixtureAndParticle = function (fixture, childIndex, index) {\n    };\n    return b2FixtureParticleQueryCallback;\n}(b2_world_callbacks_1.b2QueryCallback));\nexports.b2FixtureParticleQueryCallback = b2FixtureParticleQueryCallback;\nvar b2ParticleContact = (function () {\n    function b2ParticleContact() {\n        this.indexA = 0;\n        this.indexB = 0;\n        this.weight = 0;\n        this.normal = new b2_math_1.b2Vec2();\n        this.flags = 0;\n    }\n    b2ParticleContact.prototype.SetIndices = function (a, b) {\n        this.indexA = a;\n        this.indexB = b;\n    };\n    b2ParticleContact.prototype.SetWeight = function (w) {\n        this.weight = w;\n    };\n    b2ParticleContact.prototype.SetNormal = function (n) {\n        this.normal.Copy(n);\n    };\n    b2ParticleContact.prototype.SetFlags = function (f) {\n        this.flags = f;\n    };\n    b2ParticleContact.prototype.GetIndexA = function () {\n        return this.indexA;\n    };\n    b2ParticleContact.prototype.GetIndexB = function () {\n        return this.indexB;\n    };\n    b2ParticleContact.prototype.GetWeight = function () {\n        return this.weight;\n    };\n    b2ParticleContact.prototype.GetNormal = function () {\n        return this.normal;\n    };\n    b2ParticleContact.prototype.GetFlags = function () {\n        return this.flags;\n    };\n    b2ParticleContact.prototype.IsEqual = function (rhs) {\n        return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && this.weight === rhs.weight && this.normal.x === rhs.normal.x && this.normal.y === rhs.normal.y;\n    };\n    b2ParticleContact.prototype.IsNotEqual = function (rhs) {\n        return !this.IsEqual(rhs);\n    };\n    b2ParticleContact.prototype.ApproximatelyEqual = function (rhs) {\n        var MAX_WEIGHT_DIFF = 0.01;\n        var MAX_NORMAL_DIFF_SQ = 0.01 * 0.01;\n        return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && b2_math_1.b2Abs(this.weight - rhs.weight) < MAX_WEIGHT_DIFF && b2_math_1.b2Vec2.DistanceSquaredVV(this.normal, rhs.normal) < MAX_NORMAL_DIFF_SQ;\n    };\n    return b2ParticleContact;\n}());\nexports.b2ParticleContact = b2ParticleContact;\nvar b2ParticleBodyContact = (function () {\n    function b2ParticleBodyContact() {\n        this.index = 0;\n        this.weight = 0.0;\n        this.normal = new b2_math_1.b2Vec2();\n        this.mass = 0.0;\n    }\n    return b2ParticleBodyContact;\n}());\nexports.b2ParticleBodyContact = b2ParticleBodyContact;\nvar b2ParticlePair = (function () {\n    function b2ParticlePair() {\n        this.indexA = 0;\n        this.indexB = 0;\n        this.flags = 0;\n        this.strength = 0.0;\n        this.distance = 0.0;\n    }\n    return b2ParticlePair;\n}());\nexports.b2ParticlePair = b2ParticlePair;\nvar b2ParticleTriad = (function () {\n    function b2ParticleTriad() {\n        this.indexA = 0;\n        this.indexB = 0;\n        this.indexC = 0;\n        this.flags = 0;\n        this.strength = 0.0;\n        this.pa = new b2_math_1.b2Vec2(0.0, 0.0);\n        this.pb = new b2_math_1.b2Vec2(0.0, 0.0);\n        this.pc = new b2_math_1.b2Vec2(0.0, 0.0);\n        this.ka = 0.0;\n        this.kb = 0.0;\n        this.kc = 0.0;\n        this.s = 0.0;\n    }\n    return b2ParticleTriad;\n}());\nexports.b2ParticleTriad = b2ParticleTriad;\nvar b2ParticleSystemDef = (function () {\n    function b2ParticleSystemDef() {\n        this.strictContactCheck = false;\n        this.density = 1.0;\n        this.gravityScale = 1.0;\n        this.radius = 1.0;\n        this.maxCount = 0;\n        this.pressureStrength = 0.005;\n        this.dampingStrength = 1.0;\n        this.elasticStrength = 0.25;\n        this.springStrength = 0.25;\n        this.viscousStrength = 0.25;\n        this.surfaceTensionPressureStrength = 0.2;\n        this.surfaceTensionNormalStrength = 0.2;\n        this.repulsiveStrength = 1.0;\n        this.powderStrength = 0.5;\n        this.ejectionStrength = 0.5;\n        this.staticPressureStrength = 0.2;\n        this.staticPressureRelaxation = 0.2;\n        this.staticPressureIterations = 8;\n        this.colorMixingStrength = 0.5;\n        this.destroyByAge = true;\n        this.lifetimeGranularity = 1.0 / 60.0;\n    }\n    b2ParticleSystemDef.prototype.Copy = function (def) {\n        this.strictContactCheck = def.strictContactCheck;\n        this.density = def.density;\n        this.gravityScale = def.gravityScale;\n        this.radius = def.radius;\n        this.maxCount = def.maxCount;\n        this.pressureStrength = def.pressureStrength;\n        this.dampingStrength = def.dampingStrength;\n        this.elasticStrength = def.elasticStrength;\n        this.springStrength = def.springStrength;\n        this.viscousStrength = def.viscousStrength;\n        this.surfaceTensionPressureStrength = def.surfaceTensionPressureStrength;\n        this.surfaceTensionNormalStrength = def.surfaceTensionNormalStrength;\n        this.repulsiveStrength = def.repulsiveStrength;\n        this.powderStrength = def.powderStrength;\n        this.ejectionStrength = def.ejectionStrength;\n        this.staticPressureStrength = def.staticPressureStrength;\n        this.staticPressureRelaxation = def.staticPressureRelaxation;\n        this.staticPressureIterations = def.staticPressureIterations;\n        this.colorMixingStrength = def.colorMixingStrength;\n        this.destroyByAge = def.destroyByAge;\n        this.lifetimeGranularity = def.lifetimeGranularity;\n        return this;\n    };\n    b2ParticleSystemDef.prototype.Clone = function () {\n        return new b2ParticleSystemDef().Copy(this);\n    };\n    return b2ParticleSystemDef;\n}());\nexports.b2ParticleSystemDef = b2ParticleSystemDef;\nvar b2ParticleSystem = (function () {\n    function b2ParticleSystem(def, world) {\n        this.m_paused = false;\n        this.m_timestamp = 0;\n        this.m_allParticleFlags = 0;\n        this.m_needsUpdateAllParticleFlags = false;\n        this.m_allGroupFlags = 0;\n        this.m_needsUpdateAllGroupFlags = false;\n        this.m_hasForce = false;\n        this.m_iterationIndex = 0;\n        this.m_inverseDensity = 0.0;\n        this.m_particleDiameter = 0.0;\n        this.m_inverseDiameter = 0.0;\n        this.m_squaredDiameter = 0.0;\n        this.m_count = 0;\n        this.m_internalAllocatedCapacity = 0;\n        this.m_handleIndexBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_flagsBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_positionBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_velocityBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_forceBuffer = [];\n        this.m_weightBuffer = [];\n        this.m_staticPressureBuffer = [];\n        this.m_accumulationBuffer = [];\n        this.m_accumulation2Buffer = [];\n        this.m_depthBuffer = [];\n        this.m_colorBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_groupBuffer = [];\n        this.m_userDataBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_stuckThreshold = 0;\n        this.m_lastBodyContactStepBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_bodyContactCountBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_consecutiveContactStepsBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_stuckParticleBuffer = new b2GrowableBuffer(function () { return 0; });\n        this.m_proxyBuffer = new b2GrowableBuffer(function () { return new b2ParticleSystem_Proxy(); });\n        this.m_contactBuffer = new b2GrowableBuffer(function () { return new b2ParticleContact(); });\n        this.m_bodyContactBuffer = new b2GrowableBuffer(function () { return new b2ParticleBodyContact(); });\n        this.m_pairBuffer = new b2GrowableBuffer(function () { return new b2ParticlePair(); });\n        this.m_triadBuffer = new b2GrowableBuffer(function () { return new b2ParticleTriad(); });\n        this.m_expirationTimeBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_indexByExpirationTimeBuffer = new b2ParticleSystem_UserOverridableBuffer();\n        this.m_timeElapsed = 0;\n        this.m_expirationTimeBufferRequiresSorting = false;\n        this.m_groupCount = 0;\n        this.m_groupList = null;\n        this.m_def = new b2ParticleSystemDef();\n        this.m_prev = null;\n        this.m_next = null;\n        this.UpdateBodyContacts_callback = null;\n        this.SolveCollision_callback = null;\n        this.SetStrictContactCheck(def.strictContactCheck);\n        this.SetDensity(def.density);\n        this.SetGravityScale(def.gravityScale);\n        this.SetRadius(def.radius);\n        this.SetMaxParticleCount(def.maxCount);\n        this.m_def = def.Clone();\n        this.m_world = world;\n        this.SetDestructionByAge(this.m_def.destroyByAge);\n    }\n    b2ParticleSystem.computeTag = function (x, y) {\n        return ((((y + b2ParticleSystem.yOffset) >>> 0) << b2ParticleSystem.yShift) + ((b2ParticleSystem.xScale * x + b2ParticleSystem.xOffset) >>> 0)) >>> 0;\n    };\n    b2ParticleSystem.computeRelativeTag = function (tag, x, y) {\n        return (tag + (y << b2ParticleSystem.yShift) + (x << b2ParticleSystem.xShift)) >>> 0;\n    };\n    b2ParticleSystem.prototype.Drop = function () {\n        while (this.m_groupList) {\n            this.DestroyParticleGroup(this.m_groupList);\n        }\n        this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);\n        this.FreeUserOverridableBuffer(this.m_flagsBuffer);\n        this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);\n        this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);\n        this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);\n        this.FreeUserOverridableBuffer(this.m_positionBuffer);\n        this.FreeUserOverridableBuffer(this.m_velocityBuffer);\n        this.FreeUserOverridableBuffer(this.m_colorBuffer);\n        this.FreeUserOverridableBuffer(this.m_userDataBuffer);\n        this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);\n        this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);\n        this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity);\n        this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity);\n        this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity);\n        this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity);\n        this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity);\n        this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity);\n        this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity);\n    };\n    b2ParticleSystem.prototype.CreateParticle = function (def) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        if (this.m_count >= this.m_internalAllocatedCapacity) {\n            var capacity = this.m_count ? 2 * this.m_count : b2_settings_1.b2_minParticleSystemBufferCapacity;\n            this.ReallocateInternalAllocatedBuffers(capacity);\n        }\n        if (this.m_count >= this.m_internalAllocatedCapacity) {\n            if (this.m_def.destroyByAge) {\n                this.DestroyOldestParticle(0, false);\n                this.SolveZombie();\n            }\n            else {\n                return b2_settings_1.b2_invalidParticleIndex;\n            }\n        }\n        var index = this.m_count++;\n        this.m_flagsBuffer.data[index] = 0;\n        if (this.m_lastBodyContactStepBuffer.data) {\n            this.m_lastBodyContactStepBuffer.data[index] = 0;\n        }\n        if (this.m_bodyContactCountBuffer.data) {\n            this.m_bodyContactCountBuffer.data[index] = 0;\n        }\n        if (this.m_consecutiveContactStepsBuffer.data) {\n            this.m_consecutiveContactStepsBuffer.data[index] = 0;\n        }\n        this.m_positionBuffer.data[index] = (this.m_positionBuffer.data[index] || new b2_math_1.b2Vec2()).Copy(b2_settings_1.b2Maybe(def.position, b2_math_1.b2Vec2.ZERO));\n        this.m_velocityBuffer.data[index] = (this.m_velocityBuffer.data[index] || new b2_math_1.b2Vec2()).Copy(b2_settings_1.b2Maybe(def.velocity, b2_math_1.b2Vec2.ZERO));\n        this.m_weightBuffer[index] = 0;\n        this.m_forceBuffer[index] = (this.m_forceBuffer[index] || new b2_math_1.b2Vec2()).SetZero();\n        if (this.m_staticPressureBuffer) {\n            this.m_staticPressureBuffer[index] = 0;\n        }\n        if (this.m_depthBuffer) {\n            this.m_depthBuffer[index] = 0;\n        }\n        var color = new b2_draw_1.b2Color().Copy(b2_settings_1.b2Maybe(def.color, b2_draw_1.b2Color.ZERO));\n        if (this.m_colorBuffer.data || !color.IsZero()) {\n            this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\n            this.m_colorBuffer.data[index] = (this.m_colorBuffer.data[index] || new b2_draw_1.b2Color()).Copy(color);\n        }\n        if (this.m_userDataBuffer.data || def.userData) {\n            this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\n            this.m_userDataBuffer.data[index] = def.userData;\n        }\n        if (this.m_handleIndexBuffer.data) {\n            this.m_handleIndexBuffer.data[index] = null;\n        }\n        var proxy = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];\n        var lifetime = b2_settings_1.b2Maybe(def.lifetime, 0.0);\n        var finiteLifetime = lifetime > 0.0;\n        if (this.m_expirationTimeBuffer.data || finiteLifetime) {\n            this.SetParticleLifetime(index, finiteLifetime ? lifetime :\n                this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()));\n            this.m_indexByExpirationTimeBuffer.data[index] = index;\n        }\n        proxy.index = index;\n        var group = b2_settings_1.b2Maybe(def.group, null);\n        this.m_groupBuffer[index] = group;\n        if (group) {\n            if (group.m_firstIndex < group.m_lastIndex) {\n                this.RotateBuffer(group.m_firstIndex, group.m_lastIndex, index);\n                group.m_lastIndex = index + 1;\n            }\n            else {\n                group.m_firstIndex = index;\n                group.m_lastIndex = index + 1;\n            }\n        }\n        this.SetParticleFlags(index, b2_settings_1.b2Maybe(def.flags, 0));\n        return index;\n    };\n    b2ParticleSystem.prototype.GetParticleHandleFromIndex = function (index) {\n        this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);\n        var handle = this.m_handleIndexBuffer.data[index];\n        if (handle) {\n            return handle;\n        }\n        handle = new b2_particle_1.b2ParticleHandle();\n        handle.SetIndex(index);\n        this.m_handleIndexBuffer.data[index] = handle;\n        return handle;\n    };\n    b2ParticleSystem.prototype.DestroyParticle = function (index, callDestructionListener) {\n        if (callDestructionListener === void 0) { callDestructionListener = false; }\n        var flags = b2_particle_1.b2ParticleFlag.b2_zombieParticle;\n        if (callDestructionListener) {\n            flags |= b2_particle_1.b2ParticleFlag.b2_destructionListenerParticle;\n        }\n        this.SetParticleFlags(index, this.m_flagsBuffer.data[index] | flags);\n    };\n    b2ParticleSystem.prototype.DestroyOldestParticle = function (index, callDestructionListener) {\n        if (callDestructionListener === void 0) { callDestructionListener = false; }\n        var particleCount = this.GetParticleCount();\n        var oldestFiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[particleCount - (index + 1)];\n        var oldestInfiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[index];\n        this.DestroyParticle(this.m_expirationTimeBuffer.data[oldestFiniteLifetimeParticle] > 0.0 ?\n            oldestFiniteLifetimeParticle : oldestInfiniteLifetimeParticle, callDestructionListener);\n    };\n    b2ParticleSystem.prototype.DestroyParticlesInShape = function (shape, xf, callDestructionListener) {\n        if (callDestructionListener === void 0) { callDestructionListener = false; }\n        var s_aabb = b2ParticleSystem.DestroyParticlesInShape_s_aabb;\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        var callback = new b2ParticleSystem_DestroyParticlesInShapeCallback(this, shape, xf, callDestructionListener);\n        var aabb = s_aabb;\n        shape.ComputeAABB(aabb, xf, 0);\n        this.m_world.QueryAABB(callback, aabb);\n        return callback.Destroyed();\n    };\n    b2ParticleSystem.prototype.CreateParticleGroup = function (groupDef) {\n        var s_transform = b2ParticleSystem.CreateParticleGroup_s_transform;\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        var transform = s_transform;\n        transform.SetPositionAngle(b2_settings_1.b2Maybe(groupDef.position, b2_math_1.b2Vec2.ZERO), b2_settings_1.b2Maybe(groupDef.angle, 0));\n        var firstIndex = this.m_count;\n        if (groupDef.shape) {\n            this.CreateParticlesWithShapeForGroup(groupDef.shape, groupDef, transform);\n        }\n        if (groupDef.shapes) {\n            this.CreateParticlesWithShapesForGroup(groupDef.shapes, b2_settings_1.b2Maybe(groupDef.shapeCount, groupDef.shapes.length), groupDef, transform);\n        }\n        if (groupDef.positionData) {\n            var count = b2_settings_1.b2Maybe(groupDef.particleCount, groupDef.positionData.length);\n            for (var i = 0; i < count; i++) {\n                var p = groupDef.positionData[i];\n                this.CreateParticleForGroup(groupDef, transform, p);\n            }\n        }\n        var lastIndex = this.m_count;\n        var group = new b2_particle_group_1.b2ParticleGroup(this);\n        group.m_firstIndex = firstIndex;\n        group.m_lastIndex = lastIndex;\n        group.m_strength = b2_settings_1.b2Maybe(groupDef.strength, 1);\n        group.m_userData = groupDef.userData;\n        group.m_transform.Copy(transform);\n        group.m_prev = null;\n        group.m_next = this.m_groupList;\n        if (this.m_groupList) {\n            this.m_groupList.m_prev = group;\n        }\n        this.m_groupList = group;\n        ++this.m_groupCount;\n        for (var i = firstIndex; i < lastIndex; i++) {\n            this.m_groupBuffer[i] = group;\n        }\n        this.SetGroupFlags(group, b2_settings_1.b2Maybe(groupDef.groupFlags, 0));\n        var filter = new b2ParticleSystem_ConnectionFilter();\n        this.UpdateContacts(true);\n        this.UpdatePairsAndTriads(firstIndex, lastIndex, filter);\n        if (groupDef.group) {\n            this.JoinParticleGroups(groupDef.group, group);\n            group = groupDef.group;\n        }\n        return group;\n    };\n    b2ParticleSystem.prototype.JoinParticleGroups = function (groupA, groupB) {\n        if (this.m_world.IsLocked()) {\n            throw new Error();\n        }\n        this.RotateBuffer(groupB.m_firstIndex, groupB.m_lastIndex, this.m_count);\n        this.RotateBuffer(groupA.m_firstIndex, groupA.m_lastIndex, groupB.m_firstIndex);\n        var filter = new b2ParticleSystem_JoinParticleGroupsFilter(groupB.m_firstIndex);\n        this.UpdateContacts(true);\n        this.UpdatePairsAndTriads(groupA.m_firstIndex, groupB.m_lastIndex, filter);\n        for (var i = groupB.m_firstIndex; i < groupB.m_lastIndex; i++) {\n            this.m_groupBuffer[i] = groupA;\n        }\n        var groupFlags = groupA.m_groupFlags | groupB.m_groupFlags;\n        this.SetGroupFlags(groupA, groupFlags);\n        groupA.m_lastIndex = groupB.m_lastIndex;\n        groupB.m_firstIndex = groupB.m_lastIndex;\n        this.DestroyParticleGroup(groupB);\n    };\n    b2ParticleSystem.prototype.SplitParticleGroup = function (group) {\n        this.UpdateContacts(true);\n        var particleCount = group.GetParticleCount();\n        var nodeBuffer = b2_settings_1.b2MakeArray(particleCount, function (index) { return new b2ParticleSystem_ParticleListNode(); });\n        b2ParticleSystem.InitializeParticleLists(group, nodeBuffer);\n        this.MergeParticleListsInContact(group, nodeBuffer);\n        var survivingList = b2ParticleSystem.FindLongestParticleList(group, nodeBuffer);\n        this.MergeZombieParticleListNodes(group, nodeBuffer, survivingList);\n        this.CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList);\n        this.UpdatePairsAndTriadsWithParticleList(group, nodeBuffer);\n    };\n    b2ParticleSystem.prototype.GetParticleGroupList = function () {\n        return this.m_groupList;\n    };\n    b2ParticleSystem.prototype.GetParticleGroupCount = function () {\n        return this.m_groupCount;\n    };\n    b2ParticleSystem.prototype.GetParticleCount = function () {\n        return this.m_count;\n    };\n    b2ParticleSystem.prototype.GetMaxParticleCount = function () {\n        return this.m_def.maxCount;\n    };\n    b2ParticleSystem.prototype.SetMaxParticleCount = function (count) {\n        this.m_def.maxCount = count;\n    };\n    b2ParticleSystem.prototype.GetAllParticleFlags = function () {\n        return this.m_allParticleFlags;\n    };\n    b2ParticleSystem.prototype.GetAllGroupFlags = function () {\n        return this.m_allGroupFlags;\n    };\n    b2ParticleSystem.prototype.SetPaused = function (paused) {\n        this.m_paused = paused;\n    };\n    b2ParticleSystem.prototype.GetPaused = function () {\n        return this.m_paused;\n    };\n    b2ParticleSystem.prototype.SetDensity = function (density) {\n        this.m_def.density = density;\n        this.m_inverseDensity = 1 / this.m_def.density;\n    };\n    b2ParticleSystem.prototype.GetDensity = function () {\n        return this.m_def.density;\n    };\n    b2ParticleSystem.prototype.SetGravityScale = function (gravityScale) {\n        this.m_def.gravityScale = gravityScale;\n    };\n    b2ParticleSystem.prototype.GetGravityScale = function () {\n        return this.m_def.gravityScale;\n    };\n    b2ParticleSystem.prototype.SetDamping = function (damping) {\n        this.m_def.dampingStrength = damping;\n    };\n    b2ParticleSystem.prototype.GetDamping = function () {\n        return this.m_def.dampingStrength;\n    };\n    b2ParticleSystem.prototype.SetStaticPressureIterations = function (iterations) {\n        this.m_def.staticPressureIterations = iterations;\n    };\n    b2ParticleSystem.prototype.GetStaticPressureIterations = function () {\n        return this.m_def.staticPressureIterations;\n    };\n    b2ParticleSystem.prototype.SetRadius = function (radius) {\n        this.m_particleDiameter = 2 * radius;\n        this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter;\n        this.m_inverseDiameter = 1 / this.m_particleDiameter;\n    };\n    b2ParticleSystem.prototype.GetRadius = function () {\n        return this.m_particleDiameter / 2;\n    };\n    b2ParticleSystem.prototype.GetPositionBuffer = function () {\n        return this.m_positionBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetVelocityBuffer = function () {\n        return this.m_velocityBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetColorBuffer = function () {\n        this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\n        return this.m_colorBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetGroupBuffer = function () {\n        return this.m_groupBuffer;\n    };\n    b2ParticleSystem.prototype.GetWeightBuffer = function () {\n        return this.m_weightBuffer;\n    };\n    b2ParticleSystem.prototype.GetUserDataBuffer = function () {\n        this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\n        return this.m_userDataBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetFlagsBuffer = function () {\n        return this.m_flagsBuffer.data;\n    };\n    b2ParticleSystem.prototype.SetParticleFlags = function (index, newFlags) {\n        var oldFlags = this.m_flagsBuffer.data[index];\n        if (oldFlags & ~newFlags) {\n            this.m_needsUpdateAllParticleFlags = true;\n        }\n        if (~this.m_allParticleFlags & newFlags) {\n            if (newFlags & b2_particle_1.b2ParticleFlag.b2_tensileParticle) {\n                this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer);\n            }\n            if (newFlags & b2_particle_1.b2ParticleFlag.b2_colorMixingParticle) {\n                this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\n            }\n            this.m_allParticleFlags |= newFlags;\n        }\n        this.m_flagsBuffer.data[index] = newFlags;\n    };\n    b2ParticleSystem.prototype.GetParticleFlags = function (index) {\n        return this.m_flagsBuffer.data[index];\n    };\n    b2ParticleSystem.prototype.SetFlagsBuffer = function (buffer) {\n        this.SetUserOverridableBuffer(this.m_flagsBuffer, buffer);\n    };\n    b2ParticleSystem.prototype.SetPositionBuffer = function (buffer) {\n        if (buffer instanceof Float32Array) {\n            if (buffer.length % 2 !== 0) {\n                throw new Error();\n            }\n            var count = buffer.length / 2;\n            var array = new Array(count);\n            for (var i = 0; i < count; ++i) {\n                array[i] = new b2_math_1.b2TypedVec2(buffer.subarray(i * 2, i * 2 + 2));\n            }\n            buffer = array;\n        }\n        this.SetUserOverridableBuffer(this.m_positionBuffer, buffer);\n    };\n    b2ParticleSystem.prototype.SetVelocityBuffer = function (buffer) {\n        if (buffer instanceof Float32Array) {\n            if (buffer.length % 2 !== 0) {\n                throw new Error();\n            }\n            var count = buffer.length / 2;\n            var array = new Array(count);\n            for (var i = 0; i < count; ++i) {\n                array[i] = new b2_math_1.b2TypedVec2(buffer.subarray(i * 2, i * 2 + 2));\n            }\n            buffer = array;\n        }\n        this.SetUserOverridableBuffer(this.m_velocityBuffer, buffer);\n    };\n    b2ParticleSystem.prototype.SetColorBuffer = function (buffer) {\n        if (buffer instanceof Float32Array) {\n            if (buffer.length % 4 !== 0) {\n                throw new Error();\n            }\n            var count = buffer.length / 4;\n            var array = new Array(count);\n            for (var i = 0; i < count; ++i) {\n                array[i] = new b2_draw_1.b2TypedColor(buffer.subarray(i * 4, i * 4 + 4));\n            }\n            buffer = array;\n        }\n        this.SetUserOverridableBuffer(this.m_colorBuffer, buffer);\n    };\n    b2ParticleSystem.prototype.SetUserDataBuffer = function (buffer) {\n        this.SetUserOverridableBuffer(this.m_userDataBuffer, buffer);\n    };\n    b2ParticleSystem.prototype.GetContacts = function () {\n        return this.m_contactBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetContactCount = function () {\n        return this.m_contactBuffer.count;\n    };\n    b2ParticleSystem.prototype.GetBodyContacts = function () {\n        return this.m_bodyContactBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetBodyContactCount = function () {\n        return this.m_bodyContactBuffer.count;\n    };\n    b2ParticleSystem.prototype.GetPairs = function () {\n        return this.m_pairBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetPairCount = function () {\n        return this.m_pairBuffer.count;\n    };\n    b2ParticleSystem.prototype.GetTriads = function () {\n        return this.m_triadBuffer.data;\n    };\n    b2ParticleSystem.prototype.GetTriadCount = function () {\n        return this.m_triadBuffer.count;\n    };\n    b2ParticleSystem.prototype.SetStuckThreshold = function (steps) {\n        this.m_stuckThreshold = steps;\n        if (steps > 0) {\n            this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(this.m_lastBodyContactStepBuffer.data);\n            this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data);\n            this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data);\n        }\n    };\n    b2ParticleSystem.prototype.GetStuckCandidates = function () {\n        return this.m_stuckParticleBuffer.Data();\n    };\n    b2ParticleSystem.prototype.GetStuckCandidateCount = function () {\n        return this.m_stuckParticleBuffer.GetCount();\n    };\n    b2ParticleSystem.prototype.ComputeCollisionEnergy = function () {\n        var s_v = b2ParticleSystem.ComputeCollisionEnergy_s_v;\n        var vel_data = this.m_velocityBuffer.data;\n        var sum_v2 = 0;\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var n = contact.normal;\n            var v = b2_math_1.b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\n            var vn = b2_math_1.b2Vec2.DotVV(v, n);\n            if (vn < 0) {\n                sum_v2 += vn * vn;\n            }\n        }\n        return 0.5 * this.GetParticleMass() * sum_v2;\n    };\n    b2ParticleSystem.prototype.SetStrictContactCheck = function (enabled) {\n        this.m_def.strictContactCheck = enabled;\n    };\n    b2ParticleSystem.prototype.GetStrictContactCheck = function () {\n        return this.m_def.strictContactCheck;\n    };\n    b2ParticleSystem.prototype.SetParticleLifetime = function (index, lifetime) {\n        var initializeExpirationTimes = this.m_indexByExpirationTimeBuffer.data === null;\n        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\n        this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);\n        if (initializeExpirationTimes) {\n            var particleCount = this.GetParticleCount();\n            for (var i = 0; i < particleCount; ++i) {\n                this.m_indexByExpirationTimeBuffer.data[i] = i;\n            }\n        }\n        var quantizedLifetime = lifetime / this.m_def.lifetimeGranularity;\n        var newExpirationTime = quantizedLifetime > 0.0 ? this.GetQuantizedTimeElapsed() + quantizedLifetime : quantizedLifetime;\n        if (newExpirationTime !== this.m_expirationTimeBuffer.data[index]) {\n            this.m_expirationTimeBuffer.data[index] = newExpirationTime;\n            this.m_expirationTimeBufferRequiresSorting = true;\n        }\n    };\n    b2ParticleSystem.prototype.GetParticleLifetime = function (index) {\n        return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[index]);\n    };\n    b2ParticleSystem.prototype.SetDestructionByAge = function (enable) {\n        if (enable) {\n            this.GetExpirationTimeBuffer();\n        }\n        this.m_def.destroyByAge = enable;\n    };\n    b2ParticleSystem.prototype.GetDestructionByAge = function () {\n        return this.m_def.destroyByAge;\n    };\n    b2ParticleSystem.prototype.GetExpirationTimeBuffer = function () {\n        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\n        return this.m_expirationTimeBuffer.data;\n    };\n    b2ParticleSystem.prototype.ExpirationTimeToLifetime = function (expirationTime) {\n        return (expirationTime > 0 ?\n            expirationTime - this.GetQuantizedTimeElapsed() :\n            expirationTime) * this.m_def.lifetimeGranularity;\n    };\n    b2ParticleSystem.prototype.GetIndexByExpirationTimeBuffer = function () {\n        if (this.GetParticleCount()) {\n            this.SetParticleLifetime(0, this.GetParticleLifetime(0));\n        }\n        else {\n            this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);\n        }\n        return this.m_indexByExpirationTimeBuffer.data;\n    };\n    b2ParticleSystem.prototype.ParticleApplyLinearImpulse = function (index, impulse) {\n        this.ApplyLinearImpulse(index, index + 1, impulse);\n    };\n    b2ParticleSystem.prototype.ApplyLinearImpulse = function (firstIndex, lastIndex, impulse) {\n        var vel_data = this.m_velocityBuffer.data;\n        var numParticles = (lastIndex - firstIndex);\n        var totalMass = numParticles * this.GetParticleMass();\n        var velocityDelta = new b2_math_1.b2Vec2().Copy(impulse).SelfMul(1 / totalMass);\n        for (var i = firstIndex; i < lastIndex; i++) {\n            vel_data[i].SelfAdd(velocityDelta);\n        }\n    };\n    b2ParticleSystem.IsSignificantForce = function (force) {\n        return force.x !== 0 || force.y !== 0;\n    };\n    b2ParticleSystem.prototype.ParticleApplyForce = function (index, force) {\n        if (b2ParticleSystem.IsSignificantForce(force) &&\n            this.ForceCanBeApplied(this.m_flagsBuffer.data[index])) {\n            this.PrepareForceBuffer();\n            this.m_forceBuffer[index].SelfAdd(force);\n        }\n    };\n    b2ParticleSystem.prototype.ApplyForce = function (firstIndex, lastIndex, force) {\n        var distributedForce = new b2_math_1.b2Vec2().Copy(force).SelfMul(1 / (lastIndex - firstIndex));\n        if (b2ParticleSystem.IsSignificantForce(distributedForce)) {\n            this.PrepareForceBuffer();\n            for (var i = firstIndex; i < lastIndex; i++) {\n                this.m_forceBuffer[i].SelfAdd(distributedForce);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.GetNext = function () {\n        return this.m_next;\n    };\n    b2ParticleSystem.prototype.QueryAABB = function (callback, aabb) {\n        if (this.m_proxyBuffer.count === 0) {\n            return;\n        }\n        var beginProxy = 0;\n        var endProxy = this.m_proxyBuffer.count;\n        var firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x, this.m_inverseDiameter * aabb.lowerBound.y), b2ParticleSystem_Proxy.CompareProxyTag);\n        var lastProxy = std_upper_bound(this.m_proxyBuffer.data, firstProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x, this.m_inverseDiameter * aabb.upperBound.y), b2ParticleSystem_Proxy.CompareTagProxy);\n        var pos_data = this.m_positionBuffer.data;\n        for (var k = firstProxy; k < lastProxy; ++k) {\n            var proxy = this.m_proxyBuffer.data[k];\n            var i = proxy.index;\n            var p = pos_data[i];\n            if (aabb.lowerBound.x < p.x && p.x < aabb.upperBound.x &&\n                aabb.lowerBound.y < p.y && p.y < aabb.upperBound.y) {\n                if (!callback.ReportParticle(this, i)) {\n                    break;\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.QueryShapeAABB = function (callback, shape, xf, childIndex) {\n        if (childIndex === void 0) { childIndex = 0; }\n        var s_aabb = b2ParticleSystem.QueryShapeAABB_s_aabb;\n        var aabb = s_aabb;\n        shape.ComputeAABB(aabb, xf, childIndex);\n        this.QueryAABB(callback, aabb);\n    };\n    b2ParticleSystem.prototype.QueryPointAABB = function (callback, point, slop) {\n        if (slop === void 0) { slop = b2_settings_1.b2_linearSlop; }\n        var s_aabb = b2ParticleSystem.QueryPointAABB_s_aabb;\n        var aabb = s_aabb;\n        aabb.lowerBound.Set(point.x - slop, point.y - slop);\n        aabb.upperBound.Set(point.x + slop, point.y + slop);\n        this.QueryAABB(callback, aabb);\n    };\n    b2ParticleSystem.prototype.RayCast = function (callback, point1, point2) {\n        var s_aabb = b2ParticleSystem.RayCast_s_aabb;\n        var s_p = b2ParticleSystem.RayCast_s_p;\n        var s_v = b2ParticleSystem.RayCast_s_v;\n        var s_n = b2ParticleSystem.RayCast_s_n;\n        var s_point = b2ParticleSystem.RayCast_s_point;\n        if (this.m_proxyBuffer.count === 0) {\n            return;\n        }\n        var pos_data = this.m_positionBuffer.data;\n        var aabb = s_aabb;\n        b2_math_1.b2Vec2.MinV(point1, point2, aabb.lowerBound);\n        b2_math_1.b2Vec2.MaxV(point1, point2, aabb.upperBound);\n        var fraction = 1;\n        var v = b2_math_1.b2Vec2.SubVV(point2, point1, s_v);\n        var v2 = b2_math_1.b2Vec2.DotVV(v, v);\n        var enumerator = this.GetInsideBoundsEnumerator(aabb);\n        var i;\n        while ((i = enumerator.GetNext()) >= 0) {\n            var p = b2_math_1.b2Vec2.SubVV(point1, pos_data[i], s_p);\n            var pv = b2_math_1.b2Vec2.DotVV(p, v);\n            var p2 = b2_math_1.b2Vec2.DotVV(p, p);\n            var determinant = pv * pv - v2 * (p2 - this.m_squaredDiameter);\n            if (determinant >= 0) {\n                var sqrtDeterminant = b2_math_1.b2Sqrt(determinant);\n                var t = (-pv - sqrtDeterminant) / v2;\n                if (t > fraction) {\n                    continue;\n                }\n                if (t < 0) {\n                    t = (-pv + sqrtDeterminant) / v2;\n                    if (t < 0 || t > fraction) {\n                        continue;\n                    }\n                }\n                var n = b2_math_1.b2Vec2.AddVMulSV(p, t, v, s_n);\n                n.Normalize();\n                var f = callback.ReportParticle(this, i, b2_math_1.b2Vec2.AddVMulSV(point1, t, v, s_point), n, t);\n                fraction = b2_math_1.b2Min(fraction, f);\n                if (fraction <= 0) {\n                    break;\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.ComputeAABB = function (aabb) {\n        var particleCount = this.GetParticleCount();\n        aabb.lowerBound.x = +b2_settings_1.b2_maxFloat;\n        aabb.lowerBound.y = +b2_settings_1.b2_maxFloat;\n        aabb.upperBound.x = -b2_settings_1.b2_maxFloat;\n        aabb.upperBound.y = -b2_settings_1.b2_maxFloat;\n        var pos_data = this.m_positionBuffer.data;\n        for (var i = 0; i < particleCount; i++) {\n            var p = pos_data[i];\n            b2_math_1.b2Vec2.MinV(aabb.lowerBound, p, aabb.lowerBound);\n            b2_math_1.b2Vec2.MaxV(aabb.upperBound, p, aabb.upperBound);\n        }\n        aabb.lowerBound.x -= this.m_particleDiameter;\n        aabb.lowerBound.y -= this.m_particleDiameter;\n        aabb.upperBound.x += this.m_particleDiameter;\n        aabb.upperBound.y += this.m_particleDiameter;\n    };\n    b2ParticleSystem.prototype.FreeBuffer = function (b, capacity) {\n        if (b === null) {\n            return;\n        }\n        b.length = 0;\n    };\n    b2ParticleSystem.prototype.FreeUserOverridableBuffer = function (b) {\n        if (b.userSuppliedCapacity === 0) {\n            this.FreeBuffer(b.data, this.m_internalAllocatedCapacity);\n        }\n    };\n    b2ParticleSystem.prototype.ReallocateBuffer3 = function (oldBuffer, oldCapacity, newCapacity) {\n        if (newCapacity <= oldCapacity) {\n            throw new Error();\n        }\n        var newBuffer = (oldBuffer) ? oldBuffer.slice() : [];\n        newBuffer.length = newCapacity;\n        return newBuffer;\n    };\n    b2ParticleSystem.prototype.ReallocateBuffer5 = function (buffer, userSuppliedCapacity, oldCapacity, newCapacity, deferred) {\n        if (newCapacity <= oldCapacity) {\n            throw new Error();\n        }\n        if (!(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity)) {\n            throw new Error();\n        }\n        if ((!deferred || buffer) && !userSuppliedCapacity) {\n            buffer = this.ReallocateBuffer3(buffer, oldCapacity, newCapacity);\n        }\n        return buffer;\n    };\n    b2ParticleSystem.prototype.ReallocateBuffer4 = function (buffer, oldCapacity, newCapacity, deferred) {\n        return this.ReallocateBuffer5(buffer.data, buffer.userSuppliedCapacity, oldCapacity, newCapacity, deferred);\n    };\n    b2ParticleSystem.prototype.RequestBuffer = function (buffer) {\n        if (!buffer) {\n            if (this.m_internalAllocatedCapacity === 0) {\n                this.ReallocateInternalAllocatedBuffers(b2_settings_1.b2_minParticleSystemBufferCapacity);\n            }\n            buffer = [];\n            buffer.length = this.m_internalAllocatedCapacity;\n        }\n        return buffer;\n    };\n    b2ParticleSystem.prototype.ReallocateHandleBuffers = function (newCapacity) {\n        this.m_handleIndexBuffer.data = this.ReallocateBuffer4(this.m_handleIndexBuffer, this.m_internalAllocatedCapacity, newCapacity, true);\n    };\n    b2ParticleSystem.prototype.ReallocateInternalAllocatedBuffers = function (capacity) {\n        function LimitCapacity(capacity, maxCount) {\n            return maxCount && capacity > maxCount ? maxCount : capacity;\n        }\n        capacity = LimitCapacity(capacity, this.m_def.maxCount);\n        capacity = LimitCapacity(capacity, this.m_flagsBuffer.userSuppliedCapacity);\n        capacity = LimitCapacity(capacity, this.m_positionBuffer.userSuppliedCapacity);\n        capacity = LimitCapacity(capacity, this.m_velocityBuffer.userSuppliedCapacity);\n        capacity = LimitCapacity(capacity, this.m_colorBuffer.userSuppliedCapacity);\n        capacity = LimitCapacity(capacity, this.m_userDataBuffer.userSuppliedCapacity);\n        if (this.m_internalAllocatedCapacity < capacity) {\n            this.ReallocateHandleBuffers(capacity);\n            this.m_flagsBuffer.data = this.ReallocateBuffer4(this.m_flagsBuffer, this.m_internalAllocatedCapacity, capacity, false);\n            var stuck = this.m_stuckThreshold > 0;\n            this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\n            this.m_bodyContactCountBuffer.data = this.ReallocateBuffer4(this.m_bodyContactCountBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\n            this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\n            this.m_positionBuffer.data = this.ReallocateBuffer4(this.m_positionBuffer, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_velocityBuffer.data = this.ReallocateBuffer4(this.m_velocityBuffer, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_forceBuffer = this.ReallocateBuffer5(this.m_forceBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_weightBuffer = this.ReallocateBuffer5(this.m_weightBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_staticPressureBuffer = this.ReallocateBuffer5(this.m_staticPressureBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);\n            this.m_accumulationBuffer = this.ReallocateBuffer5(this.m_accumulationBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_accumulation2Buffer = this.ReallocateBuffer5(this.m_accumulation2Buffer, 0, this.m_internalAllocatedCapacity, capacity, true);\n            this.m_depthBuffer = this.ReallocateBuffer5(this.m_depthBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);\n            this.m_colorBuffer.data = this.ReallocateBuffer4(this.m_colorBuffer, this.m_internalAllocatedCapacity, capacity, true);\n            this.m_groupBuffer = this.ReallocateBuffer5(this.m_groupBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_userDataBuffer.data = this.ReallocateBuffer4(this.m_userDataBuffer, this.m_internalAllocatedCapacity, capacity, true);\n            this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(this.m_expirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, true);\n            this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, false);\n            this.m_internalAllocatedCapacity = capacity;\n        }\n    };\n    b2ParticleSystem.prototype.CreateParticleForGroup = function (groupDef, xf, p) {\n        var particleDef = new b2_particle_1.b2ParticleDef();\n        particleDef.flags = b2_settings_1.b2Maybe(groupDef.flags, 0);\n        b2_math_1.b2Transform.MulXV(xf, p, particleDef.position);\n        b2_math_1.b2Vec2.AddVV(b2_settings_1.b2Maybe(groupDef.linearVelocity, b2_math_1.b2Vec2.ZERO), b2_math_1.b2Vec2.CrossSV(b2_settings_1.b2Maybe(groupDef.angularVelocity, 0), b2_math_1.b2Vec2.SubVV(particleDef.position, b2_settings_1.b2Maybe(groupDef.position, b2_math_1.b2Vec2.ZERO), b2_math_1.b2Vec2.s_t0), b2_math_1.b2Vec2.s_t0), particleDef.velocity);\n        particleDef.color.Copy(b2_settings_1.b2Maybe(groupDef.color, b2_draw_1.b2Color.ZERO));\n        particleDef.lifetime = b2_settings_1.b2Maybe(groupDef.lifetime, 0);\n        particleDef.userData = groupDef.userData;\n        this.CreateParticle(particleDef);\n    };\n    b2ParticleSystem.prototype.CreateParticlesStrokeShapeForGroup = function (shape, groupDef, xf) {\n        var s_edge = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge;\n        var s_d = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d;\n        var s_p = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p;\n        var stride = b2_settings_1.b2Maybe(groupDef.stride, 0);\n        if (stride === 0) {\n            stride = this.GetParticleStride();\n        }\n        var positionOnEdge = 0;\n        var childCount = shape.GetChildCount();\n        for (var childIndex = 0; childIndex < childCount; childIndex++) {\n            var edge = null;\n            if (shape.GetType() === b2_shape_1.b2ShapeType.e_edgeShape) {\n                edge = shape;\n            }\n            else {\n                edge = s_edge;\n                shape.GetChildEdge(edge, childIndex);\n            }\n            var d = b2_math_1.b2Vec2.SubVV(edge.m_vertex2, edge.m_vertex1, s_d);\n            var edgeLength = d.Length();\n            while (positionOnEdge < edgeLength) {\n                var p = b2_math_1.b2Vec2.AddVMulSV(edge.m_vertex1, positionOnEdge / edgeLength, d, s_p);\n                this.CreateParticleForGroup(groupDef, xf, p);\n                positionOnEdge += stride;\n            }\n            positionOnEdge -= edgeLength;\n        }\n    };\n    b2ParticleSystem.prototype.CreateParticlesFillShapeForGroup = function (shape, groupDef, xf) {\n        var s_aabb = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb;\n        var s_p = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p;\n        var stride = b2_settings_1.b2Maybe(groupDef.stride, 0);\n        if (stride === 0) {\n            stride = this.GetParticleStride();\n        }\n        var identity = b2_math_1.b2Transform.IDENTITY;\n        var aabb = s_aabb;\n        shape.ComputeAABB(aabb, identity, 0);\n        for (var y = Math.floor(aabb.lowerBound.y / stride) * stride; y < aabb.upperBound.y; y += stride) {\n            for (var x = Math.floor(aabb.lowerBound.x / stride) * stride; x < aabb.upperBound.x; x += stride) {\n                var p = s_p.Set(x, y);\n                if (shape.TestPoint(identity, p)) {\n                    this.CreateParticleForGroup(groupDef, xf, p);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.CreateParticlesWithShapeForGroup = function (shape, groupDef, xf) {\n        switch (shape.GetType()) {\n            case b2_shape_1.b2ShapeType.e_edgeShape:\n            case b2_shape_1.b2ShapeType.e_chainShape:\n                this.CreateParticlesStrokeShapeForGroup(shape, groupDef, xf);\n                break;\n            case b2_shape_1.b2ShapeType.e_polygonShape:\n            case b2_shape_1.b2ShapeType.e_circleShape:\n                this.CreateParticlesFillShapeForGroup(shape, groupDef, xf);\n                break;\n            default:\n                break;\n        }\n    };\n    b2ParticleSystem.prototype.CreateParticlesWithShapesForGroup = function (shapes, shapeCount, groupDef, xf) {\n        var compositeShape = new b2ParticleSystem_CompositeShape(shapes, shapeCount);\n        this.CreateParticlesFillShapeForGroup(compositeShape, groupDef, xf);\n    };\n    b2ParticleSystem.prototype.CloneParticle = function (oldIndex, group) {\n        var def = new b2_particle_1.b2ParticleDef();\n        def.flags = this.m_flagsBuffer.data[oldIndex];\n        def.position.Copy(this.m_positionBuffer.data[oldIndex]);\n        def.velocity.Copy(this.m_velocityBuffer.data[oldIndex]);\n        if (this.m_colorBuffer.data) {\n            def.color.Copy(this.m_colorBuffer.data[oldIndex]);\n        }\n        if (this.m_userDataBuffer.data) {\n            def.userData = this.m_userDataBuffer.data[oldIndex];\n        }\n        def.group = group;\n        var newIndex = this.CreateParticle(def);\n        if (this.m_handleIndexBuffer.data) {\n            var handle = this.m_handleIndexBuffer.data[oldIndex];\n            if (handle) {\n                handle.SetIndex(newIndex);\n            }\n            this.m_handleIndexBuffer.data[newIndex] = handle;\n            this.m_handleIndexBuffer.data[oldIndex] = null;\n        }\n        if (this.m_lastBodyContactStepBuffer.data) {\n            this.m_lastBodyContactStepBuffer.data[newIndex] =\n                this.m_lastBodyContactStepBuffer.data[oldIndex];\n        }\n        if (this.m_bodyContactCountBuffer.data) {\n            this.m_bodyContactCountBuffer.data[newIndex] =\n                this.m_bodyContactCountBuffer.data[oldIndex];\n        }\n        if (this.m_consecutiveContactStepsBuffer.data) {\n            this.m_consecutiveContactStepsBuffer.data[newIndex] =\n                this.m_consecutiveContactStepsBuffer.data[oldIndex];\n        }\n        if (this.m_hasForce) {\n            this.m_forceBuffer[newIndex].Copy(this.m_forceBuffer[oldIndex]);\n        }\n        if (this.m_staticPressureBuffer) {\n            this.m_staticPressureBuffer[newIndex] = this.m_staticPressureBuffer[oldIndex];\n        }\n        if (this.m_depthBuffer) {\n            this.m_depthBuffer[newIndex] = this.m_depthBuffer[oldIndex];\n        }\n        if (this.m_expirationTimeBuffer.data) {\n            this.m_expirationTimeBuffer.data[newIndex] =\n                this.m_expirationTimeBuffer.data[oldIndex];\n        }\n        return newIndex;\n    };\n    b2ParticleSystem.prototype.DestroyParticlesInGroup = function (group, callDestructionListener) {\n        if (callDestructionListener === void 0) { callDestructionListener = false; }\n        for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n            this.DestroyParticle(i, callDestructionListener);\n        }\n    };\n    b2ParticleSystem.prototype.DestroyParticleGroup = function (group) {\n        if (this.m_world.m_destructionListener) {\n            this.m_world.m_destructionListener.SayGoodbyeParticleGroup(group);\n        }\n        this.SetGroupFlags(group, 0);\n        for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n            this.m_groupBuffer[i] = null;\n        }\n        if (group.m_prev) {\n            group.m_prev.m_next = group.m_next;\n        }\n        if (group.m_next) {\n            group.m_next.m_prev = group.m_prev;\n        }\n        if (group === this.m_groupList) {\n            this.m_groupList = group.m_next;\n        }\n        --this.m_groupCount;\n    };\n    b2ParticleSystem.ParticleCanBeConnected = function (flags, group) {\n        return ((flags & (b2_particle_1.b2ParticleFlag.b2_wallParticle | b2_particle_1.b2ParticleFlag.b2_springParticle | b2_particle_1.b2ParticleFlag.b2_elasticParticle)) !== 0) ||\n            ((group !== null) && ((group.GetGroupFlags() & b2_particle_group_1.b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0));\n    };\n    b2ParticleSystem.prototype.UpdatePairsAndTriads = function (firstIndex, lastIndex, filter) {\n        var s_dab = b2ParticleSystem.UpdatePairsAndTriads_s_dab;\n        var s_dbc = b2ParticleSystem.UpdatePairsAndTriads_s_dbc;\n        var s_dca = b2ParticleSystem.UpdatePairsAndTriads_s_dca;\n        var pos_data = this.m_positionBuffer.data;\n        var particleFlags = 0;\n        for (var i = firstIndex; i < lastIndex; i++) {\n            particleFlags |= this.m_flagsBuffer.data[i];\n        }\n        if (particleFlags & b2ParticleSystem.k_pairFlags) {\n            for (var k = 0; k < this.m_contactBuffer.count; k++) {\n                var contact = this.m_contactBuffer.data[k];\n                var a = contact.indexA;\n                var b = contact.indexB;\n                var af = this.m_flagsBuffer.data[a];\n                var bf = this.m_flagsBuffer.data[b];\n                var groupA = this.m_groupBuffer[a];\n                var groupB = this.m_groupBuffer[b];\n                if (a >= firstIndex && a < lastIndex &&\n                    b >= firstIndex && b < lastIndex &&\n                    !((af | bf) & b2_particle_1.b2ParticleFlag.b2_zombieParticle) &&\n                    ((af | bf) & b2ParticleSystem.k_pairFlags) &&\n                    (filter.IsNecessary(a) || filter.IsNecessary(b)) &&\n                    b2ParticleSystem.ParticleCanBeConnected(af, groupA) &&\n                    b2ParticleSystem.ParticleCanBeConnected(bf, groupB) &&\n                    filter.ShouldCreatePair(a, b)) {\n                    var pair = this.m_pairBuffer.data[this.m_pairBuffer.Append()];\n                    pair.indexA = a;\n                    pair.indexB = b;\n                    pair.flags = contact.flags;\n                    pair.strength = b2_math_1.b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1);\n                    pair.distance = b2_math_1.b2Vec2.DistanceVV(pos_data[a], pos_data[b]);\n                }\n                std_stable_sort(this.m_pairBuffer.data, 0, this.m_pairBuffer.count, b2ParticleSystem.ComparePairIndices);\n                this.m_pairBuffer.Unique(b2ParticleSystem.MatchPairIndices);\n            }\n        }\n        if (particleFlags & b2ParticleSystem.k_triadFlags) {\n            var diagram = new b2_voronoi_diagram_1.b2VoronoiDiagram(lastIndex - firstIndex);\n            for (var i = firstIndex; i < lastIndex; i++) {\n                var flags = this.m_flagsBuffer.data[i];\n                var group = this.m_groupBuffer[i];\n                if (!(flags & b2_particle_1.b2ParticleFlag.b2_zombieParticle) &&\n                    b2ParticleSystem.ParticleCanBeConnected(flags, group)) {\n                    diagram.AddGenerator(pos_data[i], i, filter.IsNecessary(i));\n                }\n            }\n            var stride = this.GetParticleStride();\n            diagram.Generate(stride / 2, stride * 2);\n            var system_1 = this;\n            var callback = function (a, b, c) {\n                var af = system_1.m_flagsBuffer.data[a];\n                var bf = system_1.m_flagsBuffer.data[b];\n                var cf = system_1.m_flagsBuffer.data[c];\n                if (((af | bf | cf) & b2ParticleSystem.k_triadFlags) &&\n                    filter.ShouldCreateTriad(a, b, c)) {\n                    var pa = pos_data[a];\n                    var pb = pos_data[b];\n                    var pc = pos_data[c];\n                    var dab = b2_math_1.b2Vec2.SubVV(pa, pb, s_dab);\n                    var dbc = b2_math_1.b2Vec2.SubVV(pb, pc, s_dbc);\n                    var dca = b2_math_1.b2Vec2.SubVV(pc, pa, s_dca);\n                    var maxDistanceSquared = b2_settings_1.b2_maxTriadDistanceSquared * system_1.m_squaredDiameter;\n                    if (b2_math_1.b2Vec2.DotVV(dab, dab) > maxDistanceSquared ||\n                        b2_math_1.b2Vec2.DotVV(dbc, dbc) > maxDistanceSquared ||\n                        b2_math_1.b2Vec2.DotVV(dca, dca) > maxDistanceSquared) {\n                        return;\n                    }\n                    var groupA = system_1.m_groupBuffer[a];\n                    var groupB = system_1.m_groupBuffer[b];\n                    var groupC = system_1.m_groupBuffer[c];\n                    var triad = system_1.m_triadBuffer.data[system_1.m_triadBuffer.Append()];\n                    triad.indexA = a;\n                    triad.indexB = b;\n                    triad.indexC = c;\n                    triad.flags = af | bf | cf;\n                    triad.strength = b2_math_1.b2Min(b2_math_1.b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1), groupC ? groupC.m_strength : 1);\n                    var midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\n                    var midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\n                    triad.pa.x = pa.x - midPoint_x;\n                    triad.pa.y = pa.y - midPoint_y;\n                    triad.pb.x = pb.x - midPoint_x;\n                    triad.pb.y = pb.y - midPoint_y;\n                    triad.pc.x = pc.x - midPoint_x;\n                    triad.pc.y = pc.y - midPoint_y;\n                    triad.ka = -b2_math_1.b2Vec2.DotVV(dca, dab);\n                    triad.kb = -b2_math_1.b2Vec2.DotVV(dab, dbc);\n                    triad.kc = -b2_math_1.b2Vec2.DotVV(dbc, dca);\n                    triad.s = b2_math_1.b2Vec2.CrossVV(pa, pb) + b2_math_1.b2Vec2.CrossVV(pb, pc) + b2_math_1.b2Vec2.CrossVV(pc, pa);\n                }\n            };\n            diagram.GetNodes(callback);\n            std_stable_sort(this.m_triadBuffer.data, 0, this.m_triadBuffer.count, b2ParticleSystem.CompareTriadIndices);\n            this.m_triadBuffer.Unique(b2ParticleSystem.MatchTriadIndices);\n        }\n    };\n    b2ParticleSystem.prototype.UpdatePairsAndTriadsWithReactiveParticles = function () {\n        var filter = new b2ParticleSystem_ReactiveFilter(this.m_flagsBuffer);\n        this.UpdatePairsAndTriads(0, this.m_count, filter);\n        for (var i = 0; i < this.m_count; i++) {\n            this.m_flagsBuffer.data[i] &= ~b2_particle_1.b2ParticleFlag.b2_reactiveParticle;\n        }\n        this.m_allParticleFlags &= ~b2_particle_1.b2ParticleFlag.b2_reactiveParticle;\n    };\n    b2ParticleSystem.ComparePairIndices = function (a, b) {\n        var diffA = a.indexA - b.indexA;\n        if (diffA !== 0) {\n            return diffA < 0;\n        }\n        return a.indexB < b.indexB;\n    };\n    b2ParticleSystem.MatchPairIndices = function (a, b) {\n        return a.indexA === b.indexA && a.indexB === b.indexB;\n    };\n    b2ParticleSystem.CompareTriadIndices = function (a, b) {\n        var diffA = a.indexA - b.indexA;\n        if (diffA !== 0) {\n            return diffA < 0;\n        }\n        var diffB = a.indexB - b.indexB;\n        if (diffB !== 0) {\n            return diffB < 0;\n        }\n        return a.indexC < b.indexC;\n    };\n    b2ParticleSystem.MatchTriadIndices = function (a, b) {\n        return a.indexA === b.indexA && a.indexB === b.indexB && a.indexC === b.indexC;\n    };\n    b2ParticleSystem.InitializeParticleLists = function (group, nodeBuffer) {\n        var bufferIndex = group.GetBufferIndex();\n        var particleCount = group.GetParticleCount();\n        for (var i = 0; i < particleCount; i++) {\n            var node = nodeBuffer[i];\n            node.list = node;\n            node.next = null;\n            node.count = 1;\n            node.index = i + bufferIndex;\n        }\n    };\n    b2ParticleSystem.prototype.MergeParticleListsInContact = function (group, nodeBuffer) {\n        var bufferIndex = group.GetBufferIndex();\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            if (!group.ContainsParticle(a) || !group.ContainsParticle(b)) {\n                continue;\n            }\n            var listA = nodeBuffer[a - bufferIndex].list;\n            var listB = nodeBuffer[b - bufferIndex].list;\n            if (listA === listB) {\n                continue;\n            }\n            if (listA.count < listB.count) {\n                var _tmp = listA;\n                listA = listB;\n                listB = _tmp;\n            }\n            b2ParticleSystem.MergeParticleLists(listA, listB);\n        }\n    };\n    b2ParticleSystem.MergeParticleLists = function (listA, listB) {\n        for (var b = listB;;) {\n            b.list = listA;\n            var nextB = b.next;\n            if (nextB) {\n                b = nextB;\n            }\n            else {\n                b.next = listA.next;\n                break;\n            }\n        }\n        listA.next = listB;\n        listA.count += listB.count;\n        listB.count = 0;\n    };\n    b2ParticleSystem.FindLongestParticleList = function (group, nodeBuffer) {\n        var particleCount = group.GetParticleCount();\n        var result = nodeBuffer[0];\n        for (var i = 0; i < particleCount; i++) {\n            var node = nodeBuffer[i];\n            if (result.count < node.count) {\n                result = node;\n            }\n        }\n        return result;\n    };\n    b2ParticleSystem.prototype.MergeZombieParticleListNodes = function (group, nodeBuffer, survivingList) {\n        var particleCount = group.GetParticleCount();\n        for (var i = 0; i < particleCount; i++) {\n            var node = nodeBuffer[i];\n            if (node !== survivingList &&\n                (this.m_flagsBuffer.data[node.index] & b2_particle_1.b2ParticleFlag.b2_zombieParticle)) {\n                b2ParticleSystem.MergeParticleListAndNode(survivingList, node);\n            }\n        }\n    };\n    b2ParticleSystem.MergeParticleListAndNode = function (list, node) {\n        node.list = list;\n        node.next = list.next;\n        list.next = node;\n        list.count++;\n        node.count = 0;\n    };\n    b2ParticleSystem.prototype.CreateParticleGroupsFromParticleList = function (group, nodeBuffer, survivingList) {\n        var particleCount = group.GetParticleCount();\n        var def = new b2_particle_group_1.b2ParticleGroupDef();\n        def.groupFlags = group.GetGroupFlags();\n        def.userData = group.GetUserData();\n        for (var i = 0; i < particleCount; i++) {\n            var list = nodeBuffer[i];\n            if (!list.count || list === survivingList) {\n                continue;\n            }\n            var newGroup = this.CreateParticleGroup(def);\n            for (var node = list; node; node = node.next) {\n                var oldIndex = node.index;\n                var newIndex = this.CloneParticle(oldIndex, newGroup);\n                this.m_flagsBuffer.data[oldIndex] |= b2_particle_1.b2ParticleFlag.b2_zombieParticle;\n                node.index = newIndex;\n            }\n        }\n    };\n    b2ParticleSystem.prototype.UpdatePairsAndTriadsWithParticleList = function (group, nodeBuffer) {\n        var bufferIndex = group.GetBufferIndex();\n        for (var k = 0; k < this.m_pairBuffer.count; k++) {\n            var pair = this.m_pairBuffer.data[k];\n            var a = pair.indexA;\n            var b = pair.indexB;\n            if (group.ContainsParticle(a)) {\n                pair.indexA = nodeBuffer[a - bufferIndex].index;\n            }\n            if (group.ContainsParticle(b)) {\n                pair.indexB = nodeBuffer[b - bufferIndex].index;\n            }\n        }\n        for (var k = 0; k < this.m_triadBuffer.count; k++) {\n            var triad = this.m_triadBuffer.data[k];\n            var a = triad.indexA;\n            var b = triad.indexB;\n            var c = triad.indexC;\n            if (group.ContainsParticle(a)) {\n                triad.indexA = nodeBuffer[a - bufferIndex].index;\n            }\n            if (group.ContainsParticle(b)) {\n                triad.indexB = nodeBuffer[b - bufferIndex].index;\n            }\n            if (group.ContainsParticle(c)) {\n                triad.indexC = nodeBuffer[c - bufferIndex].index;\n            }\n        }\n    };\n    b2ParticleSystem.prototype.ComputeDepth = function () {\n        var contactGroups = [];\n        var contactGroupsCount = 0;\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var groupA = this.m_groupBuffer[a];\n            var groupB = this.m_groupBuffer[b];\n            if (groupA && groupA === groupB &&\n                (groupA.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)) {\n                contactGroups[contactGroupsCount++] = contact;\n            }\n        }\n        var groupsToUpdate = [];\n        var groupsToUpdateCount = 0;\n        for (var group = this.m_groupList; group; group = group.GetNext()) {\n            if (group.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\n                groupsToUpdate[groupsToUpdateCount++] = group;\n                this.SetGroupFlags(group, group.m_groupFlags &\n                    ~b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);\n                for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n                    this.m_accumulationBuffer[i] = 0;\n                }\n            }\n        }\n        for (var k = 0; k < contactGroupsCount; k++) {\n            var contact = contactGroups[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var w = contact.weight;\n            this.m_accumulationBuffer[a] += w;\n            this.m_accumulationBuffer[b] += w;\n        }\n        for (var i = 0; i < groupsToUpdateCount; i++) {\n            var group = groupsToUpdate[i];\n            for (var i_1 = group.m_firstIndex; i_1 < group.m_lastIndex; i_1++) {\n                var w = this.m_accumulationBuffer[i_1];\n                this.m_depthBuffer[i_1] = w < 0.8 ? 0 : b2_settings_1.b2_maxFloat;\n            }\n        }\n        var iterationCount = b2_math_1.b2Sqrt(this.m_count) >> 0;\n        for (var t = 0; t < iterationCount; t++) {\n            var updated = false;\n            for (var k = 0; k < contactGroupsCount; k++) {\n                var contact = contactGroups[k];\n                var a = contact.indexA;\n                var b = contact.indexB;\n                var r = 1 - contact.weight;\n                var ap0 = this.m_depthBuffer[a];\n                var bp0 = this.m_depthBuffer[b];\n                var ap1 = bp0 + r;\n                var bp1 = ap0 + r;\n                if (ap0 > ap1) {\n                    this.m_depthBuffer[a] = ap1;\n                    updated = true;\n                }\n                if (bp0 > bp1) {\n                    this.m_depthBuffer[b] = bp1;\n                    updated = true;\n                }\n            }\n            if (!updated) {\n                break;\n            }\n        }\n        for (var i = 0; i < groupsToUpdateCount; i++) {\n            var group = groupsToUpdate[i];\n            for (var i_2 = group.m_firstIndex; i_2 < group.m_lastIndex; i_2++) {\n                if (this.m_depthBuffer[i_2] < b2_settings_1.b2_maxFloat) {\n                    this.m_depthBuffer[i_2] *= this.m_particleDiameter;\n                }\n                else {\n                    this.m_depthBuffer[i_2] = 0;\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.GetInsideBoundsEnumerator = function (aabb) {\n        var lowerTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x - 1, this.m_inverseDiameter * aabb.lowerBound.y - 1);\n        var upperTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x + 1, this.m_inverseDiameter * aabb.upperBound.y + 1);\n        var beginProxy = 0;\n        var endProxy = this.m_proxyBuffer.count;\n        var firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, lowerTag, b2ParticleSystem_Proxy.CompareProxyTag);\n        var lastProxy = std_upper_bound(this.m_proxyBuffer.data, beginProxy, endProxy, upperTag, b2ParticleSystem_Proxy.CompareTagProxy);\n        return new b2ParticleSystem_InsideBoundsEnumerator(this, lowerTag, upperTag, firstProxy, lastProxy);\n    };\n    b2ParticleSystem.prototype.UpdateAllParticleFlags = function () {\n        this.m_allParticleFlags = 0;\n        for (var i = 0; i < this.m_count; i++) {\n            this.m_allParticleFlags |= this.m_flagsBuffer.data[i];\n        }\n        this.m_needsUpdateAllParticleFlags = false;\n    };\n    b2ParticleSystem.prototype.UpdateAllGroupFlags = function () {\n        this.m_allGroupFlags = 0;\n        for (var group = this.m_groupList; group; group = group.GetNext()) {\n            this.m_allGroupFlags |= group.m_groupFlags;\n        }\n        this.m_needsUpdateAllGroupFlags = false;\n    };\n    b2ParticleSystem.prototype.AddContact = function (a, b, contacts) {\n        var flags_data = this.m_flagsBuffer.data;\n        var pos_data = this.m_positionBuffer.data;\n        var d = b2_math_1.b2Vec2.SubVV(pos_data[b], pos_data[a], b2ParticleSystem.AddContact_s_d);\n        var distBtParticlesSq = b2_math_1.b2Vec2.DotVV(d, d);\n        if (0 < distBtParticlesSq && distBtParticlesSq < this.m_squaredDiameter) {\n            var invD = b2_math_1.b2InvSqrt(distBtParticlesSq);\n            var contact = this.m_contactBuffer.data[this.m_contactBuffer.Append()];\n            contact.indexA = a;\n            contact.indexB = b;\n            contact.flags = flags_data[a] | flags_data[b];\n            contact.weight = 1 - distBtParticlesSq * invD * this.m_inverseDiameter;\n            contact.normal.x = invD * d.x;\n            contact.normal.y = invD * d.y;\n        }\n    };\n    b2ParticleSystem.prototype.FindContacts_Reference = function (contacts) {\n        var beginProxy = 0;\n        var endProxy = this.m_proxyBuffer.count;\n        this.m_contactBuffer.count = 0;\n        for (var a = beginProxy, c = beginProxy; a < endProxy; a++) {\n            var rightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 0);\n            for (var b = a + 1; b < endProxy; b++) {\n                if (rightTag < this.m_proxyBuffer.data[b].tag) {\n                    break;\n                }\n                this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);\n            }\n            var bottomLeftTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, -1, 1);\n            for (; c < endProxy; c++) {\n                if (bottomLeftTag <= this.m_proxyBuffer.data[c].tag) {\n                    break;\n                }\n            }\n            var bottomRightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 1);\n            for (var b = c; b < endProxy; b++) {\n                if (bottomRightTag < this.m_proxyBuffer.data[b].tag) {\n                    break;\n                }\n                this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.FindContacts = function (contacts) {\n        this.FindContacts_Reference(contacts);\n    };\n    b2ParticleSystem.prototype.UpdateProxies_Reference = function (proxies) {\n        var pos_data = this.m_positionBuffer.data;\n        var inv_diam = this.m_inverseDiameter;\n        for (var k = 0; k < this.m_proxyBuffer.count; ++k) {\n            var proxy = this.m_proxyBuffer.data[k];\n            var i = proxy.index;\n            var p = pos_data[i];\n            proxy.tag = b2ParticleSystem.computeTag(inv_diam * p.x, inv_diam * p.y);\n        }\n    };\n    b2ParticleSystem.prototype.UpdateProxies = function (proxies) {\n        this.UpdateProxies_Reference(proxies);\n    };\n    b2ParticleSystem.prototype.SortProxies = function (proxies) {\n        std_sort(this.m_proxyBuffer.data, 0, this.m_proxyBuffer.count, b2ParticleSystem_Proxy.CompareProxyProxy);\n    };\n    b2ParticleSystem.prototype.FilterContacts = function (contacts) {\n        var contactFilter = this.GetParticleContactFilter();\n        if (contactFilter === null) {\n            return;\n        }\n        var system = this;\n        var predicate = function (contact) {\n            return ((contact.flags & b2_particle_1.b2ParticleFlag.b2_particleContactFilterParticle) !== 0) && !contactFilter.ShouldCollideParticleParticle(system, contact.indexA, contact.indexB);\n        };\n        this.m_contactBuffer.RemoveIf(predicate);\n    };\n    b2ParticleSystem.prototype.NotifyContactListenerPreContact = function (particlePairs) {\n        var contactListener = this.GetParticleContactListener();\n        if (contactListener === null) {\n            return;\n        }\n        particlePairs.Initialize(this.m_contactBuffer, this.m_flagsBuffer);\n        throw new Error();\n    };\n    b2ParticleSystem.prototype.NotifyContactListenerPostContact = function (particlePairs) {\n        var contactListener = this.GetParticleContactListener();\n        if (contactListener === null) {\n            return;\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; ++k) {\n            var contact = this.m_contactBuffer.data[k];\n            var itemIndex = -1;\n            if (itemIndex >= 0) {\n                particlePairs.Invalidate(itemIndex);\n            }\n            else {\n                contactListener.BeginContactParticleParticle(this, contact);\n            }\n        }\n        throw new Error();\n    };\n    b2ParticleSystem.b2ParticleContactIsZombie = function (contact) {\n        return (contact.flags & b2_particle_1.b2ParticleFlag.b2_zombieParticle) === b2_particle_1.b2ParticleFlag.b2_zombieParticle;\n    };\n    b2ParticleSystem.prototype.UpdateContacts = function (exceptZombie) {\n        this.UpdateProxies(this.m_proxyBuffer);\n        this.SortProxies(this.m_proxyBuffer);\n        var particlePairs = new b2ParticlePairSet();\n        this.NotifyContactListenerPreContact(particlePairs);\n        this.FindContacts(this.m_contactBuffer);\n        this.FilterContacts(this.m_contactBuffer);\n        this.NotifyContactListenerPostContact(particlePairs);\n        if (exceptZombie) {\n            this.m_contactBuffer.RemoveIf(b2ParticleSystem.b2ParticleContactIsZombie);\n        }\n    };\n    b2ParticleSystem.prototype.NotifyBodyContactListenerPreContact = function (fixtureSet) {\n        var contactListener = this.GetFixtureContactListener();\n        if (contactListener === null) {\n            return;\n        }\n        fixtureSet.Initialize(this.m_bodyContactBuffer, this.m_flagsBuffer);\n        throw new Error();\n    };\n    b2ParticleSystem.prototype.NotifyBodyContactListenerPostContact = function (fixtureSet) {\n        var contactListener = this.GetFixtureContactListener();\n        if (contactListener === null) {\n            return;\n        }\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var index = -1;\n            if (index >= 0) {\n                fixtureSet.Invalidate(index);\n            }\n            else {\n                contactListener.BeginContactFixtureParticle(this, contact);\n            }\n        }\n        throw new Error();\n    };\n    b2ParticleSystem.prototype.UpdateBodyContacts = function () {\n        var s_aabb = b2ParticleSystem.UpdateBodyContacts_s_aabb;\n        var fixtureSet = new b2ParticleSystem_FixtureParticleSet();\n        this.NotifyBodyContactListenerPreContact(fixtureSet);\n        if (this.m_stuckThreshold > 0) {\n            var particleCount = this.GetParticleCount();\n            for (var i = 0; i < particleCount; i++) {\n                this.m_bodyContactCountBuffer.data[i] = 0;\n                if (this.m_timestamp > (this.m_lastBodyContactStepBuffer.data[i] + 1)) {\n                    this.m_consecutiveContactStepsBuffer.data[i] = 0;\n                }\n            }\n        }\n        this.m_bodyContactBuffer.SetCount(0);\n        this.m_stuckParticleBuffer.SetCount(0);\n        var aabb = s_aabb;\n        this.ComputeAABB(aabb);\n        if (this.UpdateBodyContacts_callback === null) {\n            this.UpdateBodyContacts_callback = new b2ParticleSystem_UpdateBodyContactsCallback(this);\n        }\n        var callback = this.UpdateBodyContacts_callback;\n        callback.m_contactFilter = this.GetFixtureContactFilter();\n        this.m_world.QueryAABB(callback, aabb);\n        if (this.m_def.strictContactCheck) {\n            this.RemoveSpuriousBodyContacts();\n        }\n        this.NotifyBodyContactListenerPostContact(fixtureSet);\n    };\n    b2ParticleSystem.prototype.Solve = function (step) {\n        var s_subStep = b2ParticleSystem.Solve_s_subStep;\n        if (this.m_count === 0) {\n            return;\n        }\n        if (this.m_expirationTimeBuffer.data) {\n            this.SolveLifetimes(step);\n        }\n        if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_zombieParticle) {\n            this.SolveZombie();\n        }\n        if (this.m_needsUpdateAllParticleFlags) {\n            this.UpdateAllParticleFlags();\n        }\n        if (this.m_needsUpdateAllGroupFlags) {\n            this.UpdateAllGroupFlags();\n        }\n        if (this.m_paused) {\n            return;\n        }\n        for (this.m_iterationIndex = 0; this.m_iterationIndex < step.particleIterations; this.m_iterationIndex++) {\n            ++this.m_timestamp;\n            var subStep = s_subStep.Copy(step);\n            subStep.dt /= step.particleIterations;\n            subStep.inv_dt *= step.particleIterations;\n            this.UpdateContacts(false);\n            this.UpdateBodyContacts();\n            this.ComputeWeight();\n            if (this.m_allGroupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\n                this.ComputeDepth();\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_reactiveParticle) {\n                this.UpdatePairsAndTriadsWithReactiveParticles();\n            }\n            if (this.m_hasForce) {\n                this.SolveForce(subStep);\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_viscousParticle) {\n                this.SolveViscous();\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_repulsiveParticle) {\n                this.SolveRepulsive(subStep);\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_powderParticle) {\n                this.SolvePowder(subStep);\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_tensileParticle) {\n                this.SolveTensile(subStep);\n            }\n            if (this.m_allGroupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_solidParticleGroup) {\n                this.SolveSolid(subStep);\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_colorMixingParticle) {\n                this.SolveColorMixing();\n            }\n            this.SolveGravity(subStep);\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_staticPressureParticle) {\n                this.SolveStaticPressure(subStep);\n            }\n            this.SolvePressure(subStep);\n            this.SolveDamping(subStep);\n            if (this.m_allParticleFlags & b2ParticleSystem.k_extraDampingFlags) {\n                this.SolveExtraDamping();\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_elasticParticle) {\n                this.SolveElastic(subStep);\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_springParticle) {\n                this.SolveSpring(subStep);\n            }\n            this.LimitVelocity(subStep);\n            if (this.m_allGroupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_rigidParticleGroup) {\n                this.SolveRigidDamping();\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_barrierParticle) {\n                this.SolveBarrier(subStep);\n            }\n            this.SolveCollision(subStep);\n            if (this.m_allGroupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_rigidParticleGroup) {\n                this.SolveRigid(subStep);\n            }\n            if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_wallParticle) {\n                this.SolveWall();\n            }\n            for (var i = 0; i < this.m_count; i++) {\n                this.m_positionBuffer.data[i].SelfMulAdd(subStep.dt, this.m_velocityBuffer.data[i]);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveCollision = function (step) {\n        var s_aabb = b2ParticleSystem.SolveCollision_s_aabb;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var aabb = s_aabb;\n        aabb.lowerBound.x = +b2_settings_1.b2_maxFloat;\n        aabb.lowerBound.y = +b2_settings_1.b2_maxFloat;\n        aabb.upperBound.x = -b2_settings_1.b2_maxFloat;\n        aabb.upperBound.y = -b2_settings_1.b2_maxFloat;\n        for (var i = 0; i < this.m_count; i++) {\n            var v = vel_data[i];\n            var p1 = pos_data[i];\n            var p2_x = p1.x + step.dt * v.x;\n            var p2_y = p1.y + step.dt * v.y;\n            aabb.lowerBound.x = b2_math_1.b2Min(aabb.lowerBound.x, b2_math_1.b2Min(p1.x, p2_x));\n            aabb.lowerBound.y = b2_math_1.b2Min(aabb.lowerBound.y, b2_math_1.b2Min(p1.y, p2_y));\n            aabb.upperBound.x = b2_math_1.b2Max(aabb.upperBound.x, b2_math_1.b2Max(p1.x, p2_x));\n            aabb.upperBound.y = b2_math_1.b2Max(aabb.upperBound.y, b2_math_1.b2Max(p1.y, p2_y));\n        }\n        if (this.SolveCollision_callback === null) {\n            this.SolveCollision_callback = new b2ParticleSystem_SolveCollisionCallback(this, step);\n        }\n        var callback = this.SolveCollision_callback;\n        callback.m_step = step;\n        this.m_world.QueryAABB(callback, aabb);\n    };\n    b2ParticleSystem.prototype.LimitVelocity = function (step) {\n        var vel_data = this.m_velocityBuffer.data;\n        var criticalVelocitySquared = this.GetCriticalVelocitySquared(step);\n        for (var i = 0; i < this.m_count; i++) {\n            var v = vel_data[i];\n            var v2 = b2_math_1.b2Vec2.DotVV(v, v);\n            if (v2 > criticalVelocitySquared) {\n                v.SelfMul(b2_math_1.b2Sqrt(criticalVelocitySquared / v2));\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveGravity = function (step) {\n        var s_gravity = b2ParticleSystem.SolveGravity_s_gravity;\n        var vel_data = this.m_velocityBuffer.data;\n        var gravity = b2_math_1.b2Vec2.MulSV(step.dt * this.m_def.gravityScale, this.m_world.GetGravity(), s_gravity);\n        for (var i = 0; i < this.m_count; i++) {\n            vel_data[i].SelfAdd(gravity);\n        }\n    };\n    b2ParticleSystem.prototype.SolveBarrier = function (step) {\n        var s_aabb = b2ParticleSystem.SolveBarrier_s_aabb;\n        var s_va = b2ParticleSystem.SolveBarrier_s_va;\n        var s_vb = b2ParticleSystem.SolveBarrier_s_vb;\n        var s_pba = b2ParticleSystem.SolveBarrier_s_pba;\n        var s_vba = b2ParticleSystem.SolveBarrier_s_vba;\n        var s_vc = b2ParticleSystem.SolveBarrier_s_vc;\n        var s_pca = b2ParticleSystem.SolveBarrier_s_pca;\n        var s_vca = b2ParticleSystem.SolveBarrier_s_vca;\n        var s_qba = b2ParticleSystem.SolveBarrier_s_qba;\n        var s_qca = b2ParticleSystem.SolveBarrier_s_qca;\n        var s_dv = b2ParticleSystem.SolveBarrier_s_dv;\n        var s_f = b2ParticleSystem.SolveBarrier_s_f;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        for (var i = 0; i < this.m_count; i++) {\n            var flags = this.m_flagsBuffer.data[i];\n            if ((flags & b2ParticleSystem.k_barrierWallFlags) !== 0) {\n                vel_data[i].SetZero();\n            }\n        }\n        var tmax = b2_settings_1.b2_barrierCollisionTime * step.dt;\n        var mass = this.GetParticleMass();\n        for (var k = 0; k < this.m_pairBuffer.count; k++) {\n            var pair = this.m_pairBuffer.data[k];\n            if (pair.flags & b2_particle_1.b2ParticleFlag.b2_barrierParticle) {\n                var a = pair.indexA;\n                var b = pair.indexB;\n                var pa = pos_data[a];\n                var pb = pos_data[b];\n                var aabb = s_aabb;\n                b2_math_1.b2Vec2.MinV(pa, pb, aabb.lowerBound);\n                b2_math_1.b2Vec2.MaxV(pa, pb, aabb.upperBound);\n                var aGroup = this.m_groupBuffer[a];\n                var bGroup = this.m_groupBuffer[b];\n                var va = this.GetLinearVelocity(aGroup, a, pa, s_va);\n                var vb = this.GetLinearVelocity(bGroup, b, pb, s_vb);\n                var pba = b2_math_1.b2Vec2.SubVV(pb, pa, s_pba);\n                var vba = b2_math_1.b2Vec2.SubVV(vb, va, s_vba);\n                var enumerator = this.GetInsideBoundsEnumerator(aabb);\n                var c = void 0;\n                while ((c = enumerator.GetNext()) >= 0) {\n                    var pc = pos_data[c];\n                    var cGroup = this.m_groupBuffer[c];\n                    if (aGroup !== cGroup && bGroup !== cGroup) {\n                        var vc = this.GetLinearVelocity(cGroup, c, pc, s_vc);\n                        var pca = b2_math_1.b2Vec2.SubVV(pc, pa, s_pca);\n                        var vca = b2_math_1.b2Vec2.SubVV(vc, va, s_vca);\n                        var e2 = b2_math_1.b2Vec2.CrossVV(vba, vca);\n                        var e1 = b2_math_1.b2Vec2.CrossVV(pba, vca) - b2_math_1.b2Vec2.CrossVV(pca, vba);\n                        var e0 = b2_math_1.b2Vec2.CrossVV(pba, pca);\n                        var s = void 0, t = void 0;\n                        var qba = s_qba, qca = s_qca;\n                        if (e2 === 0) {\n                            if (e1 === 0) {\n                                continue;\n                            }\n                            t = -e0 / e1;\n                            if (!(t >= 0 && t < tmax)) {\n                                continue;\n                            }\n                            b2_math_1.b2Vec2.AddVMulSV(pba, t, vba, qba);\n                            b2_math_1.b2Vec2.AddVMulSV(pca, t, vca, qca);\n                            s = b2_math_1.b2Vec2.DotVV(qba, qca) / b2_math_1.b2Vec2.DotVV(qba, qba);\n                            if (!(s >= 0 && s <= 1)) {\n                                continue;\n                            }\n                        }\n                        else {\n                            var det = e1 * e1 - 4 * e0 * e2;\n                            if (det < 0) {\n                                continue;\n                            }\n                            var sqrtDet = b2_math_1.b2Sqrt(det);\n                            var t1 = (-e1 - sqrtDet) / (2 * e2);\n                            var t2 = (-e1 + sqrtDet) / (2 * e2);\n                            if (t1 > t2) {\n                                var tmp = t1;\n                                t1 = t2;\n                                t2 = tmp;\n                            }\n                            t = t1;\n                            b2_math_1.b2Vec2.AddVMulSV(pba, t, vba, qba);\n                            b2_math_1.b2Vec2.AddVMulSV(pca, t, vca, qca);\n                            s = b2_math_1.b2Vec2.DotVV(qba, qca) / b2_math_1.b2Vec2.DotVV(qba, qba);\n                            if (!(t >= 0 && t < tmax && s >= 0 && s <= 1)) {\n                                t = t2;\n                                if (!(t >= 0 && t < tmax)) {\n                                    continue;\n                                }\n                                b2_math_1.b2Vec2.AddVMulSV(pba, t, vba, qba);\n                                b2_math_1.b2Vec2.AddVMulSV(pca, t, vca, qca);\n                                s = b2_math_1.b2Vec2.DotVV(qba, qca) / b2_math_1.b2Vec2.DotVV(qba, qba);\n                                if (!(s >= 0 && s <= 1)) {\n                                    continue;\n                                }\n                            }\n                        }\n                        var dv = s_dv;\n                        dv.x = va.x + s * vba.x - vc.x;\n                        dv.y = va.y + s * vba.y - vc.y;\n                        var f = b2_math_1.b2Vec2.MulSV(mass, dv, s_f);\n                        if (cGroup && this.IsRigidGroup(cGroup)) {\n                            var mass_1 = cGroup.GetMass();\n                            var inertia = cGroup.GetInertia();\n                            if (mass_1 > 0) {\n                                cGroup.m_linearVelocity.SelfMulAdd(1 / mass_1, f);\n                            }\n                            if (inertia > 0) {\n                                cGroup.m_angularVelocity += b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.SubVV(pc, cGroup.GetCenter(), b2_math_1.b2Vec2.s_t0), f) / inertia;\n                            }\n                        }\n                        else {\n                            vel_data[c].SelfAdd(dv);\n                        }\n                        this.ParticleApplyForce(c, f.SelfMul(-step.inv_dt));\n                    }\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveStaticPressure = function (step) {\n        this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);\n        var criticalPressure = this.GetCriticalPressure(step);\n        var pressurePerWeight = this.m_def.staticPressureStrength * criticalPressure;\n        var maxPressure = b2_settings_2.b2_maxParticlePressure * criticalPressure;\n        var relaxation = this.m_def.staticPressureRelaxation;\n        for (var t = 0; t < this.m_def.staticPressureIterations; t++) {\n            for (var i = 0; i < this.m_count; i++) {\n                this.m_accumulationBuffer[i] = 0;\n            }\n            for (var k = 0; k < this.m_contactBuffer.count; k++) {\n                var contact = this.m_contactBuffer.data[k];\n                if (contact.flags & b2_particle_1.b2ParticleFlag.b2_staticPressureParticle) {\n                    var a = contact.indexA;\n                    var b = contact.indexB;\n                    var w = contact.weight;\n                    this.m_accumulationBuffer[a] += w * this.m_staticPressureBuffer[b];\n                    this.m_accumulationBuffer[b] += w * this.m_staticPressureBuffer[a];\n                }\n            }\n            for (var i = 0; i < this.m_count; i++) {\n                var w = this.m_weightBuffer[i];\n                if (this.m_flagsBuffer.data[i] & b2_particle_1.b2ParticleFlag.b2_staticPressureParticle) {\n                    var wh = this.m_accumulationBuffer[i];\n                    var h = (wh + pressurePerWeight * (w - b2_settings_2.b2_minParticleWeight)) /\n                        (w + relaxation);\n                    this.m_staticPressureBuffer[i] = b2_math_1.b2Clamp(h, 0.0, maxPressure);\n                }\n                else {\n                    this.m_staticPressureBuffer[i] = 0;\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.ComputeWeight = function () {\n        for (var k = 0; k < this.m_count; k++) {\n            this.m_weightBuffer[k] = 0;\n        }\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            var w = contact.weight;\n            this.m_weightBuffer[a] += w;\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var w = contact.weight;\n            this.m_weightBuffer[a] += w;\n            this.m_weightBuffer[b] += w;\n        }\n    };\n    b2ParticleSystem.prototype.SolvePressure = function (step) {\n        var s_f = b2ParticleSystem.SolvePressure_s_f;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var criticalPressure = this.GetCriticalPressure(step);\n        var pressurePerWeight = this.m_def.pressureStrength * criticalPressure;\n        var maxPressure = b2_settings_2.b2_maxParticlePressure * criticalPressure;\n        for (var i = 0; i < this.m_count; i++) {\n            var w = this.m_weightBuffer[i];\n            var h = pressurePerWeight * b2_math_1.b2Max(0.0, w - b2_settings_2.b2_minParticleWeight);\n            this.m_accumulationBuffer[i] = b2_math_1.b2Min(h, maxPressure);\n        }\n        if (this.m_allParticleFlags & b2ParticleSystem.k_noPressureFlags) {\n            for (var i = 0; i < this.m_count; i++) {\n                if (this.m_flagsBuffer.data[i] & b2ParticleSystem.k_noPressureFlags) {\n                    this.m_accumulationBuffer[i] = 0;\n                }\n            }\n        }\n        if (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_staticPressureParticle) {\n            for (var i = 0; i < this.m_count; i++) {\n                if (this.m_flagsBuffer.data[i] & b2_particle_1.b2ParticleFlag.b2_staticPressureParticle) {\n                    this.m_accumulationBuffer[i] += this.m_staticPressureBuffer[i];\n                }\n            }\n        }\n        var velocityPerPressure = step.dt / (this.m_def.density * this.m_particleDiameter);\n        var inv_mass = this.GetParticleInvMass();\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            var b = contact.body;\n            var w = contact.weight;\n            var m = contact.mass;\n            var n = contact.normal;\n            var p = pos_data[a];\n            var h = this.m_accumulationBuffer[a] + pressurePerWeight * w;\n            var f = b2_math_1.b2Vec2.MulSV(velocityPerPressure * w * m * h, n, s_f);\n            vel_data[a].SelfMulSub(inv_mass, f);\n            b.ApplyLinearImpulse(f, p, true);\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var w = contact.weight;\n            var n = contact.normal;\n            var h = this.m_accumulationBuffer[a] + this.m_accumulationBuffer[b];\n            var f = b2_math_1.b2Vec2.MulSV(velocityPerPressure * w * h, n, s_f);\n            vel_data[a].SelfSub(f);\n            vel_data[b].SelfAdd(f);\n        }\n    };\n    b2ParticleSystem.prototype.SolveDamping = function (step) {\n        var s_v = b2ParticleSystem.SolveDamping_s_v;\n        var s_f = b2ParticleSystem.SolveDamping_s_f;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var linearDamping = this.m_def.dampingStrength;\n        var quadraticDamping = 1 / this.GetCriticalVelocity(step);\n        var inv_mass = this.GetParticleInvMass();\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            var b = contact.body;\n            var w = contact.weight;\n            var m = contact.mass;\n            var n = contact.normal;\n            var p = pos_data[a];\n            var v = b2_math_1.b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2_math_1.b2Vec2.s_t0), vel_data[a], s_v);\n            var vn = b2_math_1.b2Vec2.DotVV(v, n);\n            if (vn < 0) {\n                var damping = b2_math_1.b2Max(linearDamping * w, b2_math_1.b2Min(-quadraticDamping * vn, 0.5));\n                var f = b2_math_1.b2Vec2.MulSV(damping * m * vn, n, s_f);\n                vel_data[a].SelfMulAdd(inv_mass, f);\n                b.ApplyLinearImpulse(f.SelfNeg(), p, true);\n            }\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var w = contact.weight;\n            var n = contact.normal;\n            var v = b2_math_1.b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\n            var vn = b2_math_1.b2Vec2.DotVV(v, n);\n            if (vn < 0) {\n                var damping = b2_math_1.b2Max(linearDamping * w, b2_math_1.b2Min(-quadraticDamping * vn, 0.5));\n                var f = b2_math_1.b2Vec2.MulSV(damping * vn, n, s_f);\n                vel_data[a].SelfAdd(f);\n                vel_data[b].SelfSub(f);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveRigidDamping = function () {\n        var s_t0 = b2ParticleSystem.SolveRigidDamping_s_t0;\n        var s_t1 = b2ParticleSystem.SolveRigidDamping_s_t1;\n        var s_p = b2ParticleSystem.SolveRigidDamping_s_p;\n        var s_v = b2ParticleSystem.SolveRigidDamping_s_v;\n        var invMassA = [0.0], invInertiaA = [0.0], tangentDistanceA = [0.0];\n        var invMassB = [0.0], invInertiaB = [0.0], tangentDistanceB = [0.0];\n        var pos_data = this.m_positionBuffer.data;\n        var damping = this.m_def.dampingStrength;\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            var aGroup = this.m_groupBuffer[a];\n            if (aGroup && this.IsRigidGroup(aGroup)) {\n                var b = contact.body;\n                var n = contact.normal;\n                var w = contact.weight;\n                var p = pos_data[a];\n                var v = b2_math_1.b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, s_t0), aGroup.GetLinearVelocityFromWorldPoint(p, s_t1), s_v);\n                var vn = b2_math_1.b2Vec2.DotVV(v, n);\n                if (vn < 0) {\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, p, n);\n                    this.InitDampingParameter(invMassB, invInertiaB, tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);\n                    var f = damping * b2_math_1.b2Min(w, 1.0) * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);\n                    this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], true, aGroup, a, f, n);\n                    b.ApplyLinearImpulse(b2_math_1.b2Vec2.MulSV(-f, n, b2_math_1.b2Vec2.s_t0), p, true);\n                }\n            }\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            var n = contact.normal;\n            var w = contact.weight;\n            var aGroup = this.m_groupBuffer[a];\n            var bGroup = this.m_groupBuffer[b];\n            var aRigid = this.IsRigidGroup(aGroup);\n            var bRigid = this.IsRigidGroup(bGroup);\n            if (aGroup !== bGroup && (aRigid || bRigid)) {\n                var p = b2_math_1.b2Vec2.MidVV(pos_data[a], pos_data[b], s_p);\n                var v = b2_math_1.b2Vec2.SubVV(this.GetLinearVelocity(bGroup, b, p, s_t0), this.GetLinearVelocity(aGroup, a, p, s_t1), s_v);\n                var vn = b2_math_1.b2Vec2.DotVV(v, n);\n                if (vn < 0) {\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, p, n);\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, p, n);\n                    var f = damping * w * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);\n                    this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], aRigid, aGroup, a, f, n);\n                    this.ApplyDamping(invMassB[0], invInertiaB[0], tangentDistanceB[0], bRigid, bGroup, b, -f, n);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveExtraDamping = function () {\n        var s_v = b2ParticleSystem.SolveExtraDamping_s_v;\n        var s_f = b2ParticleSystem.SolveExtraDamping_s_f;\n        var vel_data = this.m_velocityBuffer.data;\n        var pos_data = this.m_positionBuffer.data;\n        var inv_mass = this.GetParticleInvMass();\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            if (this.m_flagsBuffer.data[a] & b2ParticleSystem.k_extraDampingFlags) {\n                var b = contact.body;\n                var m = contact.mass;\n                var n = contact.normal;\n                var p = pos_data[a];\n                var v = b2_math_1.b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2_math_1.b2Vec2.s_t0), vel_data[a], s_v);\n                var vn = b2_math_1.b2Vec2.DotVV(v, n);\n                if (vn < 0) {\n                    var f = b2_math_1.b2Vec2.MulSV(0.5 * m * vn, n, s_f);\n                    vel_data[a].SelfMulAdd(inv_mass, f);\n                    b.ApplyLinearImpulse(f.SelfNeg(), p, true);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveWall = function () {\n        var vel_data = this.m_velocityBuffer.data;\n        for (var i = 0; i < this.m_count; i++) {\n            if (this.m_flagsBuffer.data[i] & b2_particle_1.b2ParticleFlag.b2_wallParticle) {\n                vel_data[i].SetZero();\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveRigid = function (step) {\n        var s_position = b2ParticleSystem.SolveRigid_s_position;\n        var s_rotation = b2ParticleSystem.SolveRigid_s_rotation;\n        var s_transform = b2ParticleSystem.SolveRigid_s_transform;\n        var s_velocityTransform = b2ParticleSystem.SolveRigid_s_velocityTransform;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        for (var group = this.m_groupList; group; group = group.GetNext()) {\n            if (group.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_rigidParticleGroup) {\n                group.UpdateStatistics();\n                var rotation = s_rotation;\n                rotation.SetAngle(step.dt * group.m_angularVelocity);\n                var position = b2_math_1.b2Vec2.AddVV(group.m_center, b2_math_1.b2Vec2.SubVV(b2_math_1.b2Vec2.MulSV(step.dt, group.m_linearVelocity, b2_math_1.b2Vec2.s_t0), b2_math_1.b2Rot.MulRV(rotation, group.m_center, b2_math_1.b2Vec2.s_t1), b2_math_1.b2Vec2.s_t0), s_position);\n                var transform = s_transform;\n                transform.SetPositionRotation(position, rotation);\n                b2_math_1.b2Transform.MulXX(transform, group.m_transform, group.m_transform);\n                var velocityTransform = s_velocityTransform;\n                velocityTransform.p.x = step.inv_dt * transform.p.x;\n                velocityTransform.p.y = step.inv_dt * transform.p.y;\n                velocityTransform.q.s = step.inv_dt * transform.q.s;\n                velocityTransform.q.c = step.inv_dt * (transform.q.c - 1);\n                for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n                    b2_math_1.b2Transform.MulXV(velocityTransform, pos_data[i], vel_data[i]);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveElastic = function (step) {\n        var s_pa = b2ParticleSystem.SolveElastic_s_pa;\n        var s_pb = b2ParticleSystem.SolveElastic_s_pb;\n        var s_pc = b2ParticleSystem.SolveElastic_s_pc;\n        var s_r = b2ParticleSystem.SolveElastic_s_r;\n        var s_t0 = b2ParticleSystem.SolveElastic_s_t0;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var elasticStrength = step.inv_dt * this.m_def.elasticStrength;\n        for (var k = 0; k < this.m_triadBuffer.count; k++) {\n            var triad = this.m_triadBuffer.data[k];\n            if (triad.flags & b2_particle_1.b2ParticleFlag.b2_elasticParticle) {\n                var a = triad.indexA;\n                var b = triad.indexB;\n                var c = triad.indexC;\n                var oa = triad.pa;\n                var ob = triad.pb;\n                var oc = triad.pc;\n                var pa = s_pa.Copy(pos_data[a]);\n                var pb = s_pb.Copy(pos_data[b]);\n                var pc = s_pc.Copy(pos_data[c]);\n                var va = vel_data[a];\n                var vb = vel_data[b];\n                var vc = vel_data[c];\n                pa.SelfMulAdd(step.dt, va);\n                pb.SelfMulAdd(step.dt, vb);\n                pc.SelfMulAdd(step.dt, vc);\n                var midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\n                var midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\n                pa.x -= midPoint_x;\n                pa.y -= midPoint_y;\n                pb.x -= midPoint_x;\n                pb.y -= midPoint_y;\n                pc.x -= midPoint_x;\n                pc.y -= midPoint_y;\n                var r = s_r;\n                r.s = b2_math_1.b2Vec2.CrossVV(oa, pa) + b2_math_1.b2Vec2.CrossVV(ob, pb) + b2_math_1.b2Vec2.CrossVV(oc, pc);\n                r.c = b2_math_1.b2Vec2.DotVV(oa, pa) + b2_math_1.b2Vec2.DotVV(ob, pb) + b2_math_1.b2Vec2.DotVV(oc, pc);\n                var r2 = r.s * r.s + r.c * r.c;\n                var invR = b2_math_1.b2InvSqrt(r2);\n                if (!isFinite(invR)) {\n                    invR = 1.98177537e+019;\n                }\n                r.s *= invR;\n                r.c *= invR;\n                var strength = elasticStrength * triad.strength;\n                b2_math_1.b2Rot.MulRV(r, oa, s_t0);\n                b2_math_1.b2Vec2.SubVV(s_t0, pa, s_t0);\n                b2_math_1.b2Vec2.MulSV(strength, s_t0, s_t0);\n                va.SelfAdd(s_t0);\n                b2_math_1.b2Rot.MulRV(r, ob, s_t0);\n                b2_math_1.b2Vec2.SubVV(s_t0, pb, s_t0);\n                b2_math_1.b2Vec2.MulSV(strength, s_t0, s_t0);\n                vb.SelfAdd(s_t0);\n                b2_math_1.b2Rot.MulRV(r, oc, s_t0);\n                b2_math_1.b2Vec2.SubVV(s_t0, pc, s_t0);\n                b2_math_1.b2Vec2.MulSV(strength, s_t0, s_t0);\n                vc.SelfAdd(s_t0);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveSpring = function (step) {\n        var s_pa = b2ParticleSystem.SolveSpring_s_pa;\n        var s_pb = b2ParticleSystem.SolveSpring_s_pb;\n        var s_d = b2ParticleSystem.SolveSpring_s_d;\n        var s_f = b2ParticleSystem.SolveSpring_s_f;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var springStrength = step.inv_dt * this.m_def.springStrength;\n        for (var k = 0; k < this.m_pairBuffer.count; k++) {\n            var pair = this.m_pairBuffer.data[k];\n            if (pair.flags & b2_particle_1.b2ParticleFlag.b2_springParticle) {\n                var a = pair.indexA;\n                var b = pair.indexB;\n                var pa = s_pa.Copy(pos_data[a]);\n                var pb = s_pb.Copy(pos_data[b]);\n                var va = vel_data[a];\n                var vb = vel_data[b];\n                pa.SelfMulAdd(step.dt, va);\n                pb.SelfMulAdd(step.dt, vb);\n                var d = b2_math_1.b2Vec2.SubVV(pb, pa, s_d);\n                var r0 = pair.distance;\n                var r1 = d.Length();\n                var strength = springStrength * pair.strength;\n                var f = b2_math_1.b2Vec2.MulSV(strength * (r0 - r1) / r1, d, s_f);\n                va.SelfSub(f);\n                vb.SelfAdd(f);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveTensile = function (step) {\n        var s_weightedNormal = b2ParticleSystem.SolveTensile_s_weightedNormal;\n        var s_s = b2ParticleSystem.SolveTensile_s_s;\n        var s_f = b2ParticleSystem.SolveTensile_s_f;\n        var vel_data = this.m_velocityBuffer.data;\n        for (var i = 0; i < this.m_count; i++) {\n            this.m_accumulation2Buffer[i] = new b2_math_1.b2Vec2();\n            this.m_accumulation2Buffer[i].SetZero();\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            if (contact.flags & b2_particle_1.b2ParticleFlag.b2_tensileParticle) {\n                var a = contact.indexA;\n                var b = contact.indexB;\n                var w = contact.weight;\n                var n = contact.normal;\n                var weightedNormal = b2_math_1.b2Vec2.MulSV((1 - w) * w, n, s_weightedNormal);\n                this.m_accumulation2Buffer[a].SelfSub(weightedNormal);\n                this.m_accumulation2Buffer[b].SelfAdd(weightedNormal);\n            }\n        }\n        var criticalVelocity = this.GetCriticalVelocity(step);\n        var pressureStrength = this.m_def.surfaceTensionPressureStrength * criticalVelocity;\n        var normalStrength = this.m_def.surfaceTensionNormalStrength * criticalVelocity;\n        var maxVelocityVariation = b2_settings_2.b2_maxParticleForce * criticalVelocity;\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            if (contact.flags & b2_particle_1.b2ParticleFlag.b2_tensileParticle) {\n                var a = contact.indexA;\n                var b = contact.indexB;\n                var w = contact.weight;\n                var n = contact.normal;\n                var h = this.m_weightBuffer[a] + this.m_weightBuffer[b];\n                var s = b2_math_1.b2Vec2.SubVV(this.m_accumulation2Buffer[b], this.m_accumulation2Buffer[a], s_s);\n                var fn = b2_math_1.b2Min(pressureStrength * (h - 2) + normalStrength * b2_math_1.b2Vec2.DotVV(s, n), maxVelocityVariation) * w;\n                var f = b2_math_1.b2Vec2.MulSV(fn, n, s_f);\n                vel_data[a].SelfSub(f);\n                vel_data[b].SelfAdd(f);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveViscous = function () {\n        var s_v = b2ParticleSystem.SolveViscous_s_v;\n        var s_f = b2ParticleSystem.SolveViscous_s_f;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var viscousStrength = this.m_def.viscousStrength;\n        var inv_mass = this.GetParticleInvMass();\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            if (this.m_flagsBuffer.data[a] & b2_particle_1.b2ParticleFlag.b2_viscousParticle) {\n                var b = contact.body;\n                var w = contact.weight;\n                var m = contact.mass;\n                var p = pos_data[a];\n                var v = b2_math_1.b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2_math_1.b2Vec2.s_t0), vel_data[a], s_v);\n                var f = b2_math_1.b2Vec2.MulSV(viscousStrength * m * w, v, s_f);\n                vel_data[a].SelfMulAdd(inv_mass, f);\n                b.ApplyLinearImpulse(f.SelfNeg(), p, true);\n            }\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            if (contact.flags & b2_particle_1.b2ParticleFlag.b2_viscousParticle) {\n                var a = contact.indexA;\n                var b = contact.indexB;\n                var w = contact.weight;\n                var v = b2_math_1.b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\n                var f = b2_math_1.b2Vec2.MulSV(viscousStrength * w, v, s_f);\n                vel_data[a].SelfAdd(f);\n                vel_data[b].SelfSub(f);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveRepulsive = function (step) {\n        var s_f = b2ParticleSystem.SolveRepulsive_s_f;\n        var vel_data = this.m_velocityBuffer.data;\n        var repulsiveStrength = this.m_def.repulsiveStrength * this.GetCriticalVelocity(step);\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            if (contact.flags & b2_particle_1.b2ParticleFlag.b2_repulsiveParticle) {\n                var a = contact.indexA;\n                var b = contact.indexB;\n                if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\n                    var w = contact.weight;\n                    var n = contact.normal;\n                    var f = b2_math_1.b2Vec2.MulSV(repulsiveStrength * w, n, s_f);\n                    vel_data[a].SelfSub(f);\n                    vel_data[b].SelfAdd(f);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolvePowder = function (step) {\n        var s_f = b2ParticleSystem.SolvePowder_s_f;\n        var pos_data = this.m_positionBuffer.data;\n        var vel_data = this.m_velocityBuffer.data;\n        var powderStrength = this.m_def.powderStrength * this.GetCriticalVelocity(step);\n        var minWeight = 1.0 - b2_settings_2.b2_particleStride;\n        var inv_mass = this.GetParticleInvMass();\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            var a = contact.index;\n            if (this.m_flagsBuffer.data[a] & b2_particle_1.b2ParticleFlag.b2_powderParticle) {\n                var w = contact.weight;\n                if (w > minWeight) {\n                    var b = contact.body;\n                    var m = contact.mass;\n                    var p = pos_data[a];\n                    var n = contact.normal;\n                    var f = b2_math_1.b2Vec2.MulSV(powderStrength * m * (w - minWeight), n, s_f);\n                    vel_data[a].SelfMulSub(inv_mass, f);\n                    b.ApplyLinearImpulse(f, p, true);\n                }\n            }\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            if (contact.flags & b2_particle_1.b2ParticleFlag.b2_powderParticle) {\n                var w = contact.weight;\n                if (w > minWeight) {\n                    var a = contact.indexA;\n                    var b = contact.indexB;\n                    var n = contact.normal;\n                    var f = b2_math_1.b2Vec2.MulSV(powderStrength * (w - minWeight), n, s_f);\n                    vel_data[a].SelfSub(f);\n                    vel_data[b].SelfAdd(f);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveSolid = function (step) {\n        var s_f = b2ParticleSystem.SolveSolid_s_f;\n        var vel_data = this.m_velocityBuffer.data;\n        this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\n        var ejectionStrength = step.inv_dt * this.m_def.ejectionStrength;\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            var a = contact.indexA;\n            var b = contact.indexB;\n            if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\n                var w = contact.weight;\n                var n = contact.normal;\n                var h = this.m_depthBuffer[a] + this.m_depthBuffer[b];\n                var f = b2_math_1.b2Vec2.MulSV(ejectionStrength * h * w, n, s_f);\n                vel_data[a].SelfSub(f);\n                vel_data[b].SelfAdd(f);\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveForce = function (step) {\n        var vel_data = this.m_velocityBuffer.data;\n        var velocityPerForce = step.dt * this.GetParticleInvMass();\n        for (var i = 0; i < this.m_count; i++) {\n            vel_data[i].SelfMulAdd(velocityPerForce, this.m_forceBuffer[i]);\n        }\n        this.m_hasForce = false;\n    };\n    b2ParticleSystem.prototype.SolveColorMixing = function () {\n        var colorMixing = 0.5 * this.m_def.colorMixingStrength;\n        if (colorMixing) {\n            for (var k = 0; k < this.m_contactBuffer.count; k++) {\n                var contact = this.m_contactBuffer.data[k];\n                var a = contact.indexA;\n                var b = contact.indexB;\n                if (this.m_flagsBuffer.data[a] & this.m_flagsBuffer.data[b] &\n                    b2_particle_1.b2ParticleFlag.b2_colorMixingParticle) {\n                    var colorA = this.m_colorBuffer.data[a];\n                    var colorB = this.m_colorBuffer.data[b];\n                    b2_draw_1.b2Color.MixColors(colorA, colorB, colorMixing);\n                }\n            }\n        }\n    };\n    b2ParticleSystem.prototype.SolveZombie = function () {\n        var newCount = 0;\n        var newIndices = [];\n        for (var i = 0; i < this.m_count; i++) {\n            newIndices[i] = b2_settings_1.b2_invalidParticleIndex;\n        }\n        var allParticleFlags = 0;\n        for (var i = 0; i < this.m_count; i++) {\n            var flags = this.m_flagsBuffer.data[i];\n            if (flags & b2_particle_1.b2ParticleFlag.b2_zombieParticle) {\n                var destructionListener = this.m_world.m_destructionListener;\n                if ((flags & b2_particle_1.b2ParticleFlag.b2_destructionListenerParticle) && destructionListener) {\n                    destructionListener.SayGoodbyeParticle(this, i);\n                }\n                if (this.m_handleIndexBuffer.data) {\n                    var handle = this.m_handleIndexBuffer.data[i];\n                    if (handle) {\n                        handle.SetIndex(b2_settings_1.b2_invalidParticleIndex);\n                        this.m_handleIndexBuffer.data[i] = null;\n                    }\n                }\n                newIndices[i] = b2_settings_1.b2_invalidParticleIndex;\n            }\n            else {\n                newIndices[i] = newCount;\n                if (i !== newCount) {\n                    if (this.m_handleIndexBuffer.data) {\n                        var handle = this.m_handleIndexBuffer.data[i];\n                        if (handle) {\n                            handle.SetIndex(newCount);\n                        }\n                        this.m_handleIndexBuffer.data[newCount] = handle;\n                    }\n                    this.m_flagsBuffer.data[newCount] = this.m_flagsBuffer.data[i];\n                    if (this.m_lastBodyContactStepBuffer.data) {\n                        this.m_lastBodyContactStepBuffer.data[newCount] = this.m_lastBodyContactStepBuffer.data[i];\n                    }\n                    if (this.m_bodyContactCountBuffer.data) {\n                        this.m_bodyContactCountBuffer.data[newCount] = this.m_bodyContactCountBuffer.data[i];\n                    }\n                    if (this.m_consecutiveContactStepsBuffer.data) {\n                        this.m_consecutiveContactStepsBuffer.data[newCount] = this.m_consecutiveContactStepsBuffer.data[i];\n                    }\n                    this.m_positionBuffer.data[newCount].Copy(this.m_positionBuffer.data[i]);\n                    this.m_velocityBuffer.data[newCount].Copy(this.m_velocityBuffer.data[i]);\n                    this.m_groupBuffer[newCount] = this.m_groupBuffer[i];\n                    if (this.m_hasForce) {\n                        this.m_forceBuffer[newCount].Copy(this.m_forceBuffer[i]);\n                    }\n                    if (this.m_staticPressureBuffer) {\n                        this.m_staticPressureBuffer[newCount] = this.m_staticPressureBuffer[i];\n                    }\n                    if (this.m_depthBuffer) {\n                        this.m_depthBuffer[newCount] = this.m_depthBuffer[i];\n                    }\n                    if (this.m_colorBuffer.data) {\n                        this.m_colorBuffer.data[newCount].Copy(this.m_colorBuffer.data[i]);\n                    }\n                    if (this.m_userDataBuffer.data) {\n                        this.m_userDataBuffer.data[newCount] = this.m_userDataBuffer.data[i];\n                    }\n                    if (this.m_expirationTimeBuffer.data) {\n                        this.m_expirationTimeBuffer.data[newCount] = this.m_expirationTimeBuffer.data[i];\n                    }\n                }\n                newCount++;\n                allParticleFlags |= flags;\n            }\n        }\n        var Test = {\n            IsProxyInvalid: function (proxy) {\n                return proxy.index < 0;\n            },\n            IsContactInvalid: function (contact) {\n                return contact.indexA < 0 || contact.indexB < 0;\n            },\n            IsBodyContactInvalid: function (contact) {\n                return contact.index < 0;\n            },\n            IsPairInvalid: function (pair) {\n                return pair.indexA < 0 || pair.indexB < 0;\n            },\n            IsTriadInvalid: function (triad) {\n                return triad.indexA < 0 || triad.indexB < 0 || triad.indexC < 0;\n            },\n        };\n        for (var k = 0; k < this.m_proxyBuffer.count; k++) {\n            var proxy = this.m_proxyBuffer.data[k];\n            proxy.index = newIndices[proxy.index];\n        }\n        this.m_proxyBuffer.RemoveIf(Test.IsProxyInvalid);\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            contact.indexA = newIndices[contact.indexA];\n            contact.indexB = newIndices[contact.indexB];\n        }\n        this.m_contactBuffer.RemoveIf(Test.IsContactInvalid);\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            contact.index = newIndices[contact.index];\n        }\n        this.m_bodyContactBuffer.RemoveIf(Test.IsBodyContactInvalid);\n        for (var k = 0; k < this.m_pairBuffer.count; k++) {\n            var pair = this.m_pairBuffer.data[k];\n            pair.indexA = newIndices[pair.indexA];\n            pair.indexB = newIndices[pair.indexB];\n        }\n        this.m_pairBuffer.RemoveIf(Test.IsPairInvalid);\n        for (var k = 0; k < this.m_triadBuffer.count; k++) {\n            var triad = this.m_triadBuffer.data[k];\n            triad.indexA = newIndices[triad.indexA];\n            triad.indexB = newIndices[triad.indexB];\n            triad.indexC = newIndices[triad.indexC];\n        }\n        this.m_triadBuffer.RemoveIf(Test.IsTriadInvalid);\n        if (this.m_indexByExpirationTimeBuffer.data) {\n            var writeOffset = 0;\n            for (var readOffset = 0; readOffset < this.m_count; readOffset++) {\n                var newIndex = newIndices[this.m_indexByExpirationTimeBuffer.data[readOffset]];\n                if (newIndex !== b2_settings_1.b2_invalidParticleIndex) {\n                    this.m_indexByExpirationTimeBuffer.data[writeOffset++] = newIndex;\n                }\n            }\n        }\n        for (var group = this.m_groupList; group; group = group.GetNext()) {\n            var firstIndex = newCount;\n            var lastIndex = 0;\n            var modified = false;\n            for (var i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n                var j = newIndices[i];\n                if (j >= 0) {\n                    firstIndex = b2_math_1.b2Min(firstIndex, j);\n                    lastIndex = b2_math_1.b2Max(lastIndex, j + 1);\n                }\n                else {\n                    modified = true;\n                }\n            }\n            if (firstIndex < lastIndex) {\n                group.m_firstIndex = firstIndex;\n                group.m_lastIndex = lastIndex;\n                if (modified) {\n                    if (group.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_solidParticleGroup) {\n                        this.SetGroupFlags(group, group.m_groupFlags | b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);\n                    }\n                }\n            }\n            else {\n                group.m_firstIndex = 0;\n                group.m_lastIndex = 0;\n                if (!(group.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty)) {\n                    this.SetGroupFlags(group, group.m_groupFlags | b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed);\n                }\n            }\n        }\n        this.m_count = newCount;\n        this.m_allParticleFlags = allParticleFlags;\n        this.m_needsUpdateAllParticleFlags = false;\n        for (var group = this.m_groupList; group;) {\n            var next = group.GetNext();\n            if (group.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed) {\n                this.DestroyParticleGroup(group);\n            }\n            group = next;\n        }\n    };\n    b2ParticleSystem.prototype.SolveLifetimes = function (step) {\n        this.m_timeElapsed = this.LifetimeToExpirationTime(step.dt);\n        var quantizedTimeElapsed = this.GetQuantizedTimeElapsed();\n        var expirationTimes = this.m_expirationTimeBuffer.data;\n        var expirationTimeIndices = this.m_indexByExpirationTimeBuffer.data;\n        var particleCount = this.GetParticleCount();\n        if (this.m_expirationTimeBufferRequiresSorting) {\n            var ExpirationTimeComparator = function (particleIndexA, particleIndexB) {\n                var expirationTimeA = expirationTimes[particleIndexA];\n                var expirationTimeB = expirationTimes[particleIndexB];\n                var infiniteExpirationTimeA = expirationTimeA <= 0.0;\n                var infiniteExpirationTimeB = expirationTimeB <= 0.0;\n                return infiniteExpirationTimeA === infiniteExpirationTimeB ?\n                    expirationTimeA > expirationTimeB : infiniteExpirationTimeA;\n            };\n            std_sort(expirationTimeIndices, 0, particleCount, ExpirationTimeComparator);\n            this.m_expirationTimeBufferRequiresSorting = false;\n        }\n        for (var i = particleCount - 1; i >= 0; --i) {\n            var particleIndex = expirationTimeIndices[i];\n            var expirationTime = expirationTimes[particleIndex];\n            if (quantizedTimeElapsed < expirationTime || expirationTime <= 0) {\n                break;\n            }\n            this.DestroyParticle(particleIndex);\n        }\n    };\n    b2ParticleSystem.prototype.RotateBuffer = function (start, mid, end) {\n        if (start === mid || mid === end) {\n            return;\n        }\n        function newIndices(i) {\n            if (i < start) {\n                return i;\n            }\n            else if (i < mid) {\n                return i + end - mid;\n            }\n            else if (i < end) {\n                return i + start - mid;\n            }\n            else {\n                return i;\n            }\n        }\n        std_rotate(this.m_flagsBuffer.data, start, mid, end);\n        if (this.m_lastBodyContactStepBuffer.data) {\n            std_rotate(this.m_lastBodyContactStepBuffer.data, start, mid, end);\n        }\n        if (this.m_bodyContactCountBuffer.data) {\n            std_rotate(this.m_bodyContactCountBuffer.data, start, mid, end);\n        }\n        if (this.m_consecutiveContactStepsBuffer.data) {\n            std_rotate(this.m_consecutiveContactStepsBuffer.data, start, mid, end);\n        }\n        std_rotate(this.m_positionBuffer.data, start, mid, end);\n        std_rotate(this.m_velocityBuffer.data, start, mid, end);\n        std_rotate(this.m_groupBuffer, start, mid, end);\n        if (this.m_hasForce) {\n            std_rotate(this.m_forceBuffer, start, mid, end);\n        }\n        if (this.m_staticPressureBuffer) {\n            std_rotate(this.m_staticPressureBuffer, start, mid, end);\n        }\n        if (this.m_depthBuffer) {\n            std_rotate(this.m_depthBuffer, start, mid, end);\n        }\n        if (this.m_colorBuffer.data) {\n            std_rotate(this.m_colorBuffer.data, start, mid, end);\n        }\n        if (this.m_userDataBuffer.data) {\n            std_rotate(this.m_userDataBuffer.data, start, mid, end);\n        }\n        if (this.m_handleIndexBuffer.data) {\n            std_rotate(this.m_handleIndexBuffer.data, start, mid, end);\n            for (var i = start; i < end; ++i) {\n                var handle = this.m_handleIndexBuffer.data[i];\n                if (handle) {\n                    handle.SetIndex(newIndices(handle.GetIndex()));\n                }\n            }\n        }\n        if (this.m_expirationTimeBuffer.data) {\n            std_rotate(this.m_expirationTimeBuffer.data, start, mid, end);\n            var particleCount = this.GetParticleCount();\n            var indexByExpirationTime = this.m_indexByExpirationTimeBuffer.data;\n            for (var i = 0; i < particleCount; ++i) {\n                indexByExpirationTime[i] = newIndices(indexByExpirationTime[i]);\n            }\n        }\n        for (var k = 0; k < this.m_proxyBuffer.count; k++) {\n            var proxy = this.m_proxyBuffer.data[k];\n            proxy.index = newIndices(proxy.index);\n        }\n        for (var k = 0; k < this.m_contactBuffer.count; k++) {\n            var contact = this.m_contactBuffer.data[k];\n            contact.indexA = newIndices(contact.indexA);\n            contact.indexB = newIndices(contact.indexB);\n        }\n        for (var k = 0; k < this.m_bodyContactBuffer.count; k++) {\n            var contact = this.m_bodyContactBuffer.data[k];\n            contact.index = newIndices(contact.index);\n        }\n        for (var k = 0; k < this.m_pairBuffer.count; k++) {\n            var pair = this.m_pairBuffer.data[k];\n            pair.indexA = newIndices(pair.indexA);\n            pair.indexB = newIndices(pair.indexB);\n        }\n        for (var k = 0; k < this.m_triadBuffer.count; k++) {\n            var triad = this.m_triadBuffer.data[k];\n            triad.indexA = newIndices(triad.indexA);\n            triad.indexB = newIndices(triad.indexB);\n            triad.indexC = newIndices(triad.indexC);\n        }\n        for (var group = this.m_groupList; group; group = group.GetNext()) {\n            group.m_firstIndex = newIndices(group.m_firstIndex);\n            group.m_lastIndex = newIndices(group.m_lastIndex - 1) + 1;\n        }\n    };\n    b2ParticleSystem.prototype.GetCriticalVelocity = function (step) {\n        return this.m_particleDiameter * step.inv_dt;\n    };\n    b2ParticleSystem.prototype.GetCriticalVelocitySquared = function (step) {\n        var velocity = this.GetCriticalVelocity(step);\n        return velocity * velocity;\n    };\n    b2ParticleSystem.prototype.GetCriticalPressure = function (step) {\n        return this.m_def.density * this.GetCriticalVelocitySquared(step);\n    };\n    b2ParticleSystem.prototype.GetParticleStride = function () {\n        return b2_settings_2.b2_particleStride * this.m_particleDiameter;\n    };\n    b2ParticleSystem.prototype.GetParticleMass = function () {\n        var stride = this.GetParticleStride();\n        return this.m_def.density * stride * stride;\n    };\n    b2ParticleSystem.prototype.GetParticleInvMass = function () {\n        var inverseStride = this.m_inverseDiameter * (1.0 / b2_settings_2.b2_particleStride);\n        return this.m_inverseDensity * inverseStride * inverseStride;\n    };\n    b2ParticleSystem.prototype.GetFixtureContactFilter = function () {\n        return (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_fixtureContactFilterParticle) ?\n            this.m_world.m_contactManager.m_contactFilter : null;\n    };\n    b2ParticleSystem.prototype.GetParticleContactFilter = function () {\n        return (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_particleContactFilterParticle) ?\n            this.m_world.m_contactManager.m_contactFilter : null;\n    };\n    b2ParticleSystem.prototype.GetFixtureContactListener = function () {\n        return (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_fixtureContactListenerParticle) ?\n            this.m_world.m_contactManager.m_contactListener : null;\n    };\n    b2ParticleSystem.prototype.GetParticleContactListener = function () {\n        return (this.m_allParticleFlags & b2_particle_1.b2ParticleFlag.b2_particleContactListenerParticle) ?\n            this.m_world.m_contactManager.m_contactListener : null;\n    };\n    b2ParticleSystem.prototype.SetUserOverridableBuffer = function (buffer, data) {\n        buffer.data = data;\n        buffer.userSuppliedCapacity = data.length;\n    };\n    b2ParticleSystem.prototype.SetGroupFlags = function (group, newFlags) {\n        var oldFlags = group.m_groupFlags;\n        if ((oldFlags ^ newFlags) & b2_particle_group_1.b2ParticleGroupFlag.b2_solidParticleGroup) {\n            newFlags |= b2_particle_group_1.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth;\n        }\n        if (oldFlags & ~newFlags) {\n            this.m_needsUpdateAllGroupFlags = true;\n        }\n        if (~this.m_allGroupFlags & newFlags) {\n            if (newFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_solidParticleGroup) {\n                this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\n            }\n            this.m_allGroupFlags |= newFlags;\n        }\n        group.m_groupFlags = newFlags;\n    };\n    b2ParticleSystem.BodyContactCompare = function (lhs, rhs) {\n        if (lhs.index === rhs.index) {\n            return lhs.weight > rhs.weight;\n        }\n        return lhs.index < rhs.index;\n    };\n    b2ParticleSystem.prototype.RemoveSpuriousBodyContacts = function () {\n        std_sort(this.m_bodyContactBuffer.data, 0, this.m_bodyContactBuffer.count, b2ParticleSystem.BodyContactCompare);\n        var s_n = b2ParticleSystem.RemoveSpuriousBodyContacts_s_n;\n        var s_pos = b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos;\n        var s_normal = b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal;\n        var k_maxContactsPerPoint = 3;\n        var system = this;\n        var lastIndex = -1;\n        var currentContacts = 0;\n        var b2ParticleBodyContactRemovePredicate = function (contact) {\n            if (contact.index !== lastIndex) {\n                currentContacts = 0;\n                lastIndex = contact.index;\n            }\n            if (currentContacts++ > k_maxContactsPerPoint) {\n                return true;\n            }\n            var n = s_n.Copy(contact.normal);\n            n.SelfMul(system.m_particleDiameter * (1 - contact.weight));\n            var pos = b2_math_1.b2Vec2.AddVV(system.m_positionBuffer.data[contact.index], n, s_pos);\n            if (!contact.fixture.TestPoint(pos)) {\n                var childCount = contact.fixture.GetShape().GetChildCount();\n                for (var childIndex = 0; childIndex < childCount; childIndex++) {\n                    var normal = s_normal;\n                    var distance = contact.fixture.ComputeDistance(pos, normal, childIndex);\n                    if (distance < b2_settings_1.b2_linearSlop) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n        this.m_bodyContactBuffer.count = std_remove_if(this.m_bodyContactBuffer.data, b2ParticleBodyContactRemovePredicate, this.m_bodyContactBuffer.count);\n    };\n    b2ParticleSystem.prototype.DetectStuckParticle = function (particle) {\n        if (this.m_stuckThreshold <= 0) {\n            return;\n        }\n        ++this.m_bodyContactCountBuffer.data[particle];\n        if (this.m_bodyContactCountBuffer.data[particle] === 2) {\n            ++this.m_consecutiveContactStepsBuffer.data[particle];\n            if (this.m_consecutiveContactStepsBuffer.data[particle] > this.m_stuckThreshold) {\n                this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = particle;\n            }\n        }\n        this.m_lastBodyContactStepBuffer.data[particle] = this.m_timestamp;\n    };\n    b2ParticleSystem.prototype.ValidateParticleIndex = function (index) {\n        return index >= 0 && index < this.GetParticleCount() &&\n            index !== b2_settings_1.b2_invalidParticleIndex;\n    };\n    b2ParticleSystem.prototype.GetQuantizedTimeElapsed = function () {\n        return Math.floor(this.m_timeElapsed / 0x100000000);\n    };\n    b2ParticleSystem.prototype.LifetimeToExpirationTime = function (lifetime) {\n        return this.m_timeElapsed + Math.floor(((lifetime / this.m_def.lifetimeGranularity) * 0x100000000));\n    };\n    b2ParticleSystem.prototype.ForceCanBeApplied = function (flags) {\n        return !(flags & b2_particle_1.b2ParticleFlag.b2_wallParticle);\n    };\n    b2ParticleSystem.prototype.PrepareForceBuffer = function () {\n        if (!this.m_hasForce) {\n            for (var i = 0; i < this.m_count; i++) {\n                this.m_forceBuffer[i].SetZero();\n            }\n            this.m_hasForce = true;\n        }\n    };\n    b2ParticleSystem.prototype.IsRigidGroup = function (group) {\n        return (group !== null) && ((group.m_groupFlags & b2_particle_group_1.b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0);\n    };\n    b2ParticleSystem.prototype.GetLinearVelocity = function (group, particleIndex, point, out) {\n        if (group && this.IsRigidGroup(group)) {\n            return group.GetLinearVelocityFromWorldPoint(point, out);\n        }\n        else {\n            return out.Copy(this.m_velocityBuffer.data[particleIndex]);\n        }\n    };\n    b2ParticleSystem.prototype.InitDampingParameter = function (invMass, invInertia, tangentDistance, mass, inertia, center, point, normal) {\n        invMass[0] = mass > 0 ? 1 / mass : 0;\n        invInertia[0] = inertia > 0 ? 1 / inertia : 0;\n        tangentDistance[0] = b2_math_1.b2Vec2.CrossVV(b2_math_1.b2Vec2.SubVV(point, center, b2_math_1.b2Vec2.s_t0), normal);\n    };\n    b2ParticleSystem.prototype.InitDampingParameterWithRigidGroupOrParticle = function (invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, point, normal) {\n        if (group && isRigidGroup) {\n            this.InitDampingParameter(invMass, invInertia, tangentDistance, group.GetMass(), group.GetInertia(), group.GetCenter(), point, normal);\n        }\n        else {\n            var flags = this.m_flagsBuffer.data[particleIndex];\n            this.InitDampingParameter(invMass, invInertia, tangentDistance, flags & b2_particle_1.b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(), 0, point, point, normal);\n        }\n    };\n    b2ParticleSystem.prototype.ComputeDampingImpulse = function (invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, normalVelocity) {\n        var invMass = invMassA + invInertiaA * tangentDistanceA * tangentDistanceA +\n            invMassB + invInertiaB * tangentDistanceB * tangentDistanceB;\n        return invMass > 0 ? normalVelocity / invMass : 0;\n    };\n    b2ParticleSystem.prototype.ApplyDamping = function (invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, impulse, normal) {\n        if (group && isRigidGroup) {\n            group.m_linearVelocity.SelfMulAdd(impulse * invMass, normal);\n            group.m_angularVelocity += impulse * tangentDistance * invInertia;\n        }\n        else {\n            this.m_velocityBuffer.data[particleIndex].SelfMulAdd(impulse * invMass, normal);\n        }\n    };\n    b2ParticleSystem.xTruncBits = 12;\n    b2ParticleSystem.yTruncBits = 12;\n    b2ParticleSystem.tagBits = 8 * 4;\n    b2ParticleSystem.yOffset = 1 << (b2ParticleSystem.yTruncBits - 1);\n    b2ParticleSystem.yShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits;\n    b2ParticleSystem.xShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits - b2ParticleSystem.xTruncBits;\n    b2ParticleSystem.xScale = 1 << b2ParticleSystem.xShift;\n    b2ParticleSystem.xOffset = b2ParticleSystem.xScale * (1 << (b2ParticleSystem.xTruncBits - 1));\n    b2ParticleSystem.yMask = ((1 << b2ParticleSystem.yTruncBits) - 1) << b2ParticleSystem.yShift;\n    b2ParticleSystem.xMask = ~b2ParticleSystem.yMask;\n    b2ParticleSystem.DestroyParticlesInShape_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.CreateParticleGroup_s_transform = new b2_math_1.b2Transform();\n    b2ParticleSystem.ComputeCollisionEnergy_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem.QueryShapeAABB_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.QueryPointAABB_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.RayCast_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.RayCast_s_p = new b2_math_1.b2Vec2();\n    b2ParticleSystem.RayCast_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem.RayCast_s_n = new b2_math_1.b2Vec2();\n    b2ParticleSystem.RayCast_s_point = new b2_math_1.b2Vec2();\n    b2ParticleSystem.k_pairFlags = b2_particle_1.b2ParticleFlag.b2_springParticle;\n    b2ParticleSystem.k_triadFlags = b2_particle_1.b2ParticleFlag.b2_elasticParticle;\n    b2ParticleSystem.k_noPressureFlags = b2_particle_1.b2ParticleFlag.b2_powderParticle | b2_particle_1.b2ParticleFlag.b2_tensileParticle;\n    b2ParticleSystem.k_extraDampingFlags = b2_particle_1.b2ParticleFlag.b2_staticPressureParticle;\n    b2ParticleSystem.k_barrierWallFlags = b2_particle_1.b2ParticleFlag.b2_barrierParticle | b2_particle_1.b2ParticleFlag.b2_wallParticle;\n    b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge = new b2_edge_shape_1.b2EdgeShape();\n    b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d = new b2_math_1.b2Vec2();\n    b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p = new b2_math_1.b2Vec2();\n    b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p = new b2_math_1.b2Vec2();\n    b2ParticleSystem.UpdatePairsAndTriads_s_dab = new b2_math_1.b2Vec2();\n    b2ParticleSystem.UpdatePairsAndTriads_s_dbc = new b2_math_1.b2Vec2();\n    b2ParticleSystem.UpdatePairsAndTriads_s_dca = new b2_math_1.b2Vec2();\n    b2ParticleSystem.AddContact_s_d = new b2_math_1.b2Vec2();\n    b2ParticleSystem.UpdateBodyContacts_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.Solve_s_subStep = new b2_time_step_1.b2TimeStep();\n    b2ParticleSystem.SolveCollision_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.SolveGravity_s_gravity = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_aabb = new b2_collision_1.b2AABB();\n    b2ParticleSystem.SolveBarrier_s_va = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_vb = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_pba = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_vba = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_vc = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_pca = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_vca = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_qba = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_qca = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_dv = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveBarrier_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolvePressure_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveDamping_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveDamping_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRigidDamping_s_t0 = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRigidDamping_s_t1 = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRigidDamping_s_p = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRigidDamping_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveExtraDamping_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveExtraDamping_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRigid_s_position = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRigid_s_rotation = new b2_math_1.b2Rot();\n    b2ParticleSystem.SolveRigid_s_transform = new b2_math_1.b2Transform();\n    b2ParticleSystem.SolveRigid_s_velocityTransform = new b2_math_1.b2Transform();\n    b2ParticleSystem.SolveElastic_s_pa = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveElastic_s_pb = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveElastic_s_pc = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveElastic_s_r = new b2_math_1.b2Rot();\n    b2ParticleSystem.SolveElastic_s_t0 = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveSpring_s_pa = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveSpring_s_pb = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveSpring_s_d = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveSpring_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveTensile_s_weightedNormal = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveTensile_s_s = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveTensile_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveViscous_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveViscous_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveRepulsive_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolvePowder_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.SolveSolid_s_f = new b2_math_1.b2Vec2();\n    b2ParticleSystem.RemoveSpuriousBodyContacts_s_n = new b2_math_1.b2Vec2();\n    b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos = new b2_math_1.b2Vec2();\n    b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal = new b2_math_1.b2Vec2();\n    return b2ParticleSystem;\n}());\nexports.b2ParticleSystem = b2ParticleSystem;\nvar b2ParticleSystem_UserOverridableBuffer = (function () {\n    function b2ParticleSystem_UserOverridableBuffer() {\n        this._data = null;\n        this.userSuppliedCapacity = 0;\n    }\n    Object.defineProperty(b2ParticleSystem_UserOverridableBuffer.prototype, \"data\", {\n        get: function () { return this._data; },\n        set: function (value) { this._data = value; },\n        enumerable: false,\n        configurable: true\n    });\n    return b2ParticleSystem_UserOverridableBuffer;\n}());\nexports.b2ParticleSystem_UserOverridableBuffer = b2ParticleSystem_UserOverridableBuffer;\nvar b2ParticleSystem_Proxy = (function () {\n    function b2ParticleSystem_Proxy() {\n        this.index = b2_settings_1.b2_invalidParticleIndex;\n        this.tag = 0;\n    }\n    b2ParticleSystem_Proxy.CompareProxyProxy = function (a, b) {\n        return a.tag < b.tag;\n    };\n    b2ParticleSystem_Proxy.CompareTagProxy = function (a, b) {\n        return a < b.tag;\n    };\n    b2ParticleSystem_Proxy.CompareProxyTag = function (a, b) {\n        return a.tag < b;\n    };\n    return b2ParticleSystem_Proxy;\n}());\nexports.b2ParticleSystem_Proxy = b2ParticleSystem_Proxy;\nvar b2ParticleSystem_InsideBoundsEnumerator = (function () {\n    function b2ParticleSystem_InsideBoundsEnumerator(system, lower, upper, first, last) {\n        this.m_system = system;\n        this.m_xLower = (lower & b2ParticleSystem.xMask) >>> 0;\n        this.m_xUpper = (upper & b2ParticleSystem.xMask) >>> 0;\n        this.m_yLower = (lower & b2ParticleSystem.yMask) >>> 0;\n        this.m_yUpper = (upper & b2ParticleSystem.yMask) >>> 0;\n        this.m_first = first;\n        this.m_last = last;\n    }\n    b2ParticleSystem_InsideBoundsEnumerator.prototype.GetNext = function () {\n        while (this.m_first < this.m_last) {\n            var xTag = (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.xMask) >>> 0;\n            if (xTag >= this.m_xLower && xTag <= this.m_xUpper) {\n                return (this.m_system.m_proxyBuffer.data[this.m_first++]).index;\n            }\n            this.m_first++;\n        }\n        return b2_settings_1.b2_invalidParticleIndex;\n    };\n    return b2ParticleSystem_InsideBoundsEnumerator;\n}());\nexports.b2ParticleSystem_InsideBoundsEnumerator = b2ParticleSystem_InsideBoundsEnumerator;\nvar b2ParticleSystem_ParticleListNode = (function () {\n    function b2ParticleSystem_ParticleListNode() {\n        this.next = null;\n        this.count = 0;\n        this.index = 0;\n    }\n    return b2ParticleSystem_ParticleListNode;\n}());\nexports.b2ParticleSystem_ParticleListNode = b2ParticleSystem_ParticleListNode;\nvar b2ParticleSystem_FixedSetAllocator = (function () {\n    function b2ParticleSystem_FixedSetAllocator() {\n    }\n    b2ParticleSystem_FixedSetAllocator.prototype.Allocate = function (itemSize, count) {\n        return count;\n    };\n    b2ParticleSystem_FixedSetAllocator.prototype.Clear = function () {\n    };\n    b2ParticleSystem_FixedSetAllocator.prototype.GetCount = function () {\n        return 0;\n    };\n    b2ParticleSystem_FixedSetAllocator.prototype.Invalidate = function (itemIndex) {\n    };\n    b2ParticleSystem_FixedSetAllocator.prototype.GetValidBuffer = function () {\n        return [];\n    };\n    b2ParticleSystem_FixedSetAllocator.prototype.GetBuffer = function () {\n        return [];\n    };\n    b2ParticleSystem_FixedSetAllocator.prototype.SetCount = function (count) {\n    };\n    return b2ParticleSystem_FixedSetAllocator;\n}());\nexports.b2ParticleSystem_FixedSetAllocator = b2ParticleSystem_FixedSetAllocator;\nvar b2ParticleSystem_FixtureParticle = (function () {\n    function b2ParticleSystem_FixtureParticle(fixture, particle) {\n        this.second = b2_settings_1.b2_invalidParticleIndex;\n        this.first = fixture;\n        this.second = particle;\n    }\n    return b2ParticleSystem_FixtureParticle;\n}());\nexports.b2ParticleSystem_FixtureParticle = b2ParticleSystem_FixtureParticle;\nvar b2ParticleSystem_FixtureParticleSet = (function (_super) {\n    __extends(b2ParticleSystem_FixtureParticleSet, _super);\n    function b2ParticleSystem_FixtureParticleSet() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2ParticleSystem_FixtureParticleSet.prototype.Initialize = function (bodyContactBuffer, flagsBuffer) {\n    };\n    b2ParticleSystem_FixtureParticleSet.prototype.Find = function (pair) {\n        return b2_settings_1.b2_invalidParticleIndex;\n    };\n    return b2ParticleSystem_FixtureParticleSet;\n}(b2ParticleSystem_FixedSetAllocator));\nexports.b2ParticleSystem_FixtureParticleSet = b2ParticleSystem_FixtureParticleSet;\nvar b2ParticleSystem_ParticlePair = (function () {\n    function b2ParticleSystem_ParticlePair(particleA, particleB) {\n        this.first = b2_settings_1.b2_invalidParticleIndex;\n        this.second = b2_settings_1.b2_invalidParticleIndex;\n        this.first = particleA;\n        this.second = particleB;\n    }\n    return b2ParticleSystem_ParticlePair;\n}());\nexports.b2ParticleSystem_ParticlePair = b2ParticleSystem_ParticlePair;\nvar b2ParticlePairSet = (function (_super) {\n    __extends(b2ParticlePairSet, _super);\n    function b2ParticlePairSet() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    b2ParticlePairSet.prototype.Initialize = function (contactBuffer, flagsBuffer) {\n    };\n    b2ParticlePairSet.prototype.Find = function (pair) {\n        return b2_settings_1.b2_invalidParticleIndex;\n    };\n    return b2ParticlePairSet;\n}(b2ParticleSystem_FixedSetAllocator));\nexports.b2ParticlePairSet = b2ParticlePairSet;\nvar b2ParticleSystem_ConnectionFilter = (function () {\n    function b2ParticleSystem_ConnectionFilter() {\n    }\n    b2ParticleSystem_ConnectionFilter.prototype.IsNecessary = function (index) {\n        return true;\n    };\n    b2ParticleSystem_ConnectionFilter.prototype.ShouldCreatePair = function (a, b) {\n        return true;\n    };\n    b2ParticleSystem_ConnectionFilter.prototype.ShouldCreateTriad = function (a, b, c) {\n        return true;\n    };\n    return b2ParticleSystem_ConnectionFilter;\n}());\nexports.b2ParticleSystem_ConnectionFilter = b2ParticleSystem_ConnectionFilter;\nvar b2ParticleSystem_DestroyParticlesInShapeCallback = (function (_super) {\n    __extends(b2ParticleSystem_DestroyParticlesInShapeCallback, _super);\n    function b2ParticleSystem_DestroyParticlesInShapeCallback(system, shape, xf, callDestructionListener) {\n        var _this = _super.call(this) || this;\n        _this.m_callDestructionListener = false;\n        _this.m_destroyed = 0;\n        _this.m_system = system;\n        _this.m_shape = shape;\n        _this.m_xf = xf;\n        _this.m_callDestructionListener = callDestructionListener;\n        _this.m_destroyed = 0;\n        return _this;\n    }\n    b2ParticleSystem_DestroyParticlesInShapeCallback.prototype.ReportFixture = function (fixture) {\n        return false;\n    };\n    b2ParticleSystem_DestroyParticlesInShapeCallback.prototype.ReportParticle = function (particleSystem, index) {\n        if (particleSystem !== this.m_system) {\n            return false;\n        }\n        if (this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[index])) {\n            this.m_system.DestroyParticle(index, this.m_callDestructionListener);\n            this.m_destroyed++;\n        }\n        return true;\n    };\n    b2ParticleSystem_DestroyParticlesInShapeCallback.prototype.Destroyed = function () {\n        return this.m_destroyed;\n    };\n    return b2ParticleSystem_DestroyParticlesInShapeCallback;\n}(b2_world_callbacks_1.b2QueryCallback));\nexports.b2ParticleSystem_DestroyParticlesInShapeCallback = b2ParticleSystem_DestroyParticlesInShapeCallback;\nvar b2ParticleSystem_JoinParticleGroupsFilter = (function (_super) {\n    __extends(b2ParticleSystem_JoinParticleGroupsFilter, _super);\n    function b2ParticleSystem_JoinParticleGroupsFilter(threshold) {\n        var _this = _super.call(this) || this;\n        _this.m_threshold = 0;\n        _this.m_threshold = threshold;\n        return _this;\n    }\n    b2ParticleSystem_JoinParticleGroupsFilter.prototype.ShouldCreatePair = function (a, b) {\n        return (a < this.m_threshold && this.m_threshold <= b) ||\n            (b < this.m_threshold && this.m_threshold <= a);\n    };\n    b2ParticleSystem_JoinParticleGroupsFilter.prototype.ShouldCreateTriad = function (a, b, c) {\n        return (a < this.m_threshold || b < this.m_threshold || c < this.m_threshold) &&\n            (this.m_threshold <= a || this.m_threshold <= b || this.m_threshold <= c);\n    };\n    return b2ParticleSystem_JoinParticleGroupsFilter;\n}(b2ParticleSystem_ConnectionFilter));\nexports.b2ParticleSystem_JoinParticleGroupsFilter = b2ParticleSystem_JoinParticleGroupsFilter;\nvar b2ParticleSystem_CompositeShape = (function (_super) {\n    __extends(b2ParticleSystem_CompositeShape, _super);\n    function b2ParticleSystem_CompositeShape(shapes, shapeCount) {\n        if (shapeCount === void 0) { shapeCount = shapes.length; }\n        var _this = _super.call(this, b2_shape_1.b2ShapeType.e_unknown, 0) || this;\n        _this.m_shapeCount = 0;\n        _this.m_shapes = shapes;\n        _this.m_shapeCount = shapeCount;\n        return _this;\n    }\n    b2ParticleSystem_CompositeShape.prototype.Clone = function () {\n        throw new Error();\n    };\n    b2ParticleSystem_CompositeShape.prototype.GetChildCount = function () {\n        return 1;\n    };\n    b2ParticleSystem_CompositeShape.prototype.TestPoint = function (xf, p) {\n        for (var i = 0; i < this.m_shapeCount; i++) {\n            if (this.m_shapes[i].TestPoint(xf, p)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    b2ParticleSystem_CompositeShape.prototype.ComputeDistance = function (xf, p, normal, childIndex) {\n        return 0;\n    };\n    b2ParticleSystem_CompositeShape.prototype.RayCast = function (output, input, xf, childIndex) {\n        return false;\n    };\n    b2ParticleSystem_CompositeShape.prototype.ComputeAABB = function (aabb, xf, childIndex) {\n        var s_subaabb = new b2_collision_1.b2AABB();\n        aabb.lowerBound.x = +b2_settings_1.b2_maxFloat;\n        aabb.lowerBound.y = +b2_settings_1.b2_maxFloat;\n        aabb.upperBound.x = -b2_settings_1.b2_maxFloat;\n        aabb.upperBound.y = -b2_settings_1.b2_maxFloat;\n        for (var i = 0; i < this.m_shapeCount; i++) {\n            var childCount = this.m_shapes[i].GetChildCount();\n            for (var j = 0; j < childCount; j++) {\n                var subaabb = s_subaabb;\n                this.m_shapes[i].ComputeAABB(subaabb, xf, j);\n                aabb.Combine1(subaabb);\n            }\n        }\n    };\n    b2ParticleSystem_CompositeShape.prototype.ComputeMass = function (massData, density) {\n    };\n    b2ParticleSystem_CompositeShape.prototype.SetupDistanceProxy = function (proxy, index) {\n    };\n    b2ParticleSystem_CompositeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n        return 0;\n    };\n    b2ParticleSystem_CompositeShape.prototype.Dump = function (log) {\n    };\n    return b2ParticleSystem_CompositeShape;\n}(b2_shape_1.b2Shape));\nexports.b2ParticleSystem_CompositeShape = b2ParticleSystem_CompositeShape;\nvar b2ParticleSystem_ReactiveFilter = (function (_super) {\n    __extends(b2ParticleSystem_ReactiveFilter, _super);\n    function b2ParticleSystem_ReactiveFilter(flagsBuffer) {\n        var _this = _super.call(this) || this;\n        _this.m_flagsBuffer = flagsBuffer;\n        return _this;\n    }\n    b2ParticleSystem_ReactiveFilter.prototype.IsNecessary = function (index) {\n        return (this.m_flagsBuffer.data[index] & b2_particle_1.b2ParticleFlag.b2_reactiveParticle) !== 0;\n    };\n    return b2ParticleSystem_ReactiveFilter;\n}(b2ParticleSystem_ConnectionFilter));\nexports.b2ParticleSystem_ReactiveFilter = b2ParticleSystem_ReactiveFilter;\nvar b2ParticleSystem_UpdateBodyContactsCallback = (function (_super) {\n    __extends(b2ParticleSystem_UpdateBodyContactsCallback, _super);\n    function b2ParticleSystem_UpdateBodyContactsCallback(system, contactFilter) {\n        if (contactFilter === void 0) { contactFilter = null; }\n        var _this = _super.call(this, system) || this;\n        _this.m_contactFilter = null;\n        _this.m_contactFilter = contactFilter;\n        return _this;\n    }\n    b2ParticleSystem_UpdateBodyContactsCallback.prototype.ShouldCollideFixtureParticle = function (fixture, particleSystem, particleIndex) {\n        if (this.m_contactFilter) {\n            var flags = this.m_system.GetFlagsBuffer();\n            if (flags[particleIndex] & b2_particle_1.b2ParticleFlag.b2_fixtureContactFilterParticle) {\n                return this.m_contactFilter.ShouldCollideFixtureParticle(fixture, this.m_system, particleIndex);\n            }\n        }\n        return true;\n    };\n    b2ParticleSystem_UpdateBodyContactsCallback.prototype.ReportFixtureAndParticle = function (fixture, childIndex, a) {\n        var s_n = b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n;\n        var s_rp = b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;\n        var ap = this.m_system.m_positionBuffer.data[a];\n        var n = s_n;\n        var d = fixture.ComputeDistance(ap, n, childIndex);\n        if (d < this.m_system.m_particleDiameter && this.ShouldCollideFixtureParticle(fixture, this.m_system, a)) {\n            var b = fixture.GetBody();\n            var bp = b.GetWorldCenter();\n            var bm = b.GetMass();\n            var bI = b.GetInertia() - bm * b.GetLocalCenter().LengthSquared();\n            var invBm = bm > 0 ? 1 / bm : 0;\n            var invBI = bI > 0 ? 1 / bI : 0;\n            var invAm = this.m_system.m_flagsBuffer.data[a] &\n                b2_particle_1.b2ParticleFlag.b2_wallParticle ? 0 : this.m_system.GetParticleInvMass();\n            var rp = b2_math_1.b2Vec2.SubVV(ap, bp, s_rp);\n            var rpn = b2_math_1.b2Vec2.CrossVV(rp, n);\n            var invM = invAm + invBm + invBI * rpn * rpn;\n            var contact = this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];\n            contact.index = a;\n            contact.body = b;\n            contact.fixture = fixture;\n            contact.weight = 1 - d * this.m_system.m_inverseDiameter;\n            contact.normal.Copy(n.SelfNeg());\n            contact.mass = invM > 0 ? 1 / invM : 0;\n            this.m_system.DetectStuckParticle(a);\n        }\n    };\n    b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n = new b2_math_1.b2Vec2();\n    b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp = new b2_math_1.b2Vec2();\n    return b2ParticleSystem_UpdateBodyContactsCallback;\n}(b2FixtureParticleQueryCallback));\nexports.b2ParticleSystem_UpdateBodyContactsCallback = b2ParticleSystem_UpdateBodyContactsCallback;\nvar b2ParticleSystem_SolveCollisionCallback = (function (_super) {\n    __extends(b2ParticleSystem_SolveCollisionCallback, _super);\n    function b2ParticleSystem_SolveCollisionCallback(system, step) {\n        var _this = _super.call(this, system) || this;\n        _this.m_step = step;\n        return _this;\n    }\n    b2ParticleSystem_SolveCollisionCallback.prototype.ReportFixtureAndParticle = function (fixture, childIndex, a) {\n        var s_p1 = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p1;\n        var s_output = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_output;\n        var s_input = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_input;\n        var s_p = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p;\n        var s_v = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_v;\n        var s_f = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_f;\n        var body = fixture.GetBody();\n        var ap = this.m_system.m_positionBuffer.data[a];\n        var av = this.m_system.m_velocityBuffer.data[a];\n        var output = s_output;\n        var input = s_input;\n        if (this.m_system.m_iterationIndex === 0) {\n            var p1 = b2_math_1.b2Transform.MulTXV(body.m_xf0, ap, s_p1);\n            if (fixture.GetShape().GetType() === b2_shape_1.b2ShapeType.e_circleShape) {\n                p1.SelfSub(body.GetLocalCenter());\n                b2_math_1.b2Rot.MulRV(body.m_xf0.q, p1, p1);\n                b2_math_1.b2Rot.MulTRV(body.m_xf.q, p1, p1);\n                p1.SelfAdd(body.GetLocalCenter());\n            }\n            b2_math_1.b2Transform.MulXV(body.m_xf, p1, input.p1);\n        }\n        else {\n            input.p1.Copy(ap);\n        }\n        b2_math_1.b2Vec2.AddVMulSV(ap, this.m_step.dt, av, input.p2);\n        input.maxFraction = 1;\n        if (fixture.RayCast(output, input, childIndex)) {\n            var n = output.normal;\n            var p = s_p;\n            p.x = (1 - output.fraction) * input.p1.x + output.fraction * input.p2.x + b2_settings_1.b2_linearSlop * n.x;\n            p.y = (1 - output.fraction) * input.p1.y + output.fraction * input.p2.y + b2_settings_1.b2_linearSlop * n.y;\n            var v = s_v;\n            v.x = this.m_step.inv_dt * (p.x - ap.x);\n            v.y = this.m_step.inv_dt * (p.y - ap.y);\n            this.m_system.m_velocityBuffer.data[a].Copy(v);\n            var f = s_f;\n            f.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.x - v.x);\n            f.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.y - v.y);\n            this.m_system.ParticleApplyForce(a, f);\n        }\n    };\n    b2ParticleSystem_SolveCollisionCallback.prototype.ReportParticle = function (system, index) {\n        return false;\n    };\n    b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p1 = new b2_math_1.b2Vec2();\n    b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_output = new b2_collision_1.b2RayCastOutput();\n    b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_input = new b2_collision_1.b2RayCastInput();\n    b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p = new b2_math_1.b2Vec2();\n    b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_v = new b2_math_1.b2Vec2();\n    b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_f = new b2_math_1.b2Vec2();\n    return b2ParticleSystem_SolveCollisionCallback;\n}(b2FixtureParticleQueryCallback));\nexports.b2ParticleSystem_SolveCollisionCallback = b2ParticleSystem_SolveCollisionCallback;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/particle/b2_particle_system.ts\n");

/***/ }),

/***/ "./src/box2d/particle/b2_stack_queue.ts":
/*!**********************************************!*\
  !*** ./src/box2d/particle/b2_stack_queue.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2StackQueue = void 0;\nvar b2StackQueue = (function () {\n    function b2StackQueue(capacity) {\n        this.m_buffer = [];\n        this.m_front = 0;\n        this.m_back = 0;\n        this.m_buffer.fill(null, 0, capacity);\n    }\n    Object.defineProperty(b2StackQueue.prototype, \"m_capacity\", {\n        get: function () { return this.m_buffer.length; },\n        enumerable: false,\n        configurable: true\n    });\n    b2StackQueue.prototype.Push = function (item) {\n        if (this.m_back >= this.m_capacity) {\n            for (var i = this.m_front; i < this.m_back; i++) {\n                this.m_buffer[i - this.m_front] = this.m_buffer[i];\n            }\n            this.m_back -= this.m_front;\n            this.m_front = 0;\n        }\n        this.m_buffer[this.m_back] = item;\n        this.m_back++;\n    };\n    b2StackQueue.prototype.Pop = function () {\n        this.m_buffer[this.m_front] = null;\n        this.m_front++;\n    };\n    b2StackQueue.prototype.Empty = function () {\n        return this.m_front === this.m_back;\n    };\n    b2StackQueue.prototype.Front = function () {\n        var item = this.m_buffer[this.m_front];\n        if (!item) {\n            throw new Error();\n        }\n        return item;\n    };\n    return b2StackQueue;\n}());\nexports.b2StackQueue = b2StackQueue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYm94MmQvcGFydGljbGUvYjJfc3RhY2tfcXVldWUudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm94MmQvcGFydGljbGUvYjJfc3RhY2tfcXVldWUudHM/NTE2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIEdvb2dsZSwgSW5jLlxuICpcbiAqIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4gKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICogUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4gKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4gKiBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gKiAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuICogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAqIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuICogYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAqIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4gKiBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4gKiAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuICovXG5cbi8vICNpZiBCMl9FTkFCTEVfUEFSVElDTEVcblxuLy8gREVCVUc6IGltcG9ydCB7IGIyQXNzZXJ0IH0gZnJvbSBcIi4uL2NvbW1vbi9iMl9zZXR0aW5nc1wiO1xuXG5leHBvcnQgY2xhc3MgYjJTdGFja1F1ZXVlPFQ+IHtcbiAgcHVibGljIHJlYWRvbmx5IG1fYnVmZmVyOiBBcnJheTxUIHwgbnVsbD4gPSBbXTtcbiAgcHVibGljIG1fZnJvbnQ6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBtX2JhY2s6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBnZXQgbV9jYXBhY2l0eSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5tX2J1ZmZlci5sZW5ndGg7IH1cbiAgY29uc3RydWN0b3IoY2FwYWNpdHk6IG51bWJlcikge1xuICAgIHRoaXMubV9idWZmZXIuZmlsbChudWxsLCAwLCBjYXBhY2l0eSk7XG4gIH1cbiAgcHVibGljIFB1c2goaXRlbTogVCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1fYmFjayA+PSB0aGlzLm1fY2FwYWNpdHkpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLm1fZnJvbnQ7IGkgPCB0aGlzLm1fYmFjazsgaSsrKSB7XG4gICAgICAgIHRoaXMubV9idWZmZXJbaSAtIHRoaXMubV9mcm9udF0gPSB0aGlzLm1fYnVmZmVyW2ldO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2JhY2sgLT0gdGhpcy5tX2Zyb250O1xuICAgICAgdGhpcy5tX2Zyb250ID0gMDtcbiAgICB9XG4gICAgdGhpcy5tX2J1ZmZlclt0aGlzLm1fYmFja10gPSBpdGVtO1xuICAgIHRoaXMubV9iYWNrKys7XG4gIH1cbiAgcHVibGljIFBvcCgpOiB2b2lkIHtcbiAgICAvLyBERUJVRzogYjJBc3NlcnQodGhpcy5tX2Zyb250IDwgdGhpcy5tX2JhY2spO1xuICAgIHRoaXMubV9idWZmZXJbdGhpcy5tX2Zyb250XSA9IG51bGw7XG4gICAgdGhpcy5tX2Zyb250Kys7XG4gIH1cbiAgcHVibGljIEVtcHR5KCk6IGJvb2xlYW4ge1xuICAgIC8vIERFQlVHOiBiMkFzc2VydCh0aGlzLm1fZnJvbnQgPD0gdGhpcy5tX2JhY2spO1xuICAgIHJldHVybiB0aGlzLm1fZnJvbnQgPT09IHRoaXMubV9iYWNrO1xuICB9XG4gIHB1YmxpYyBGcm9udCgpOiBUIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5tX2J1ZmZlclt0aGlzLm1fZnJvbnRdO1xuICAgIGlmICghaXRlbSkgeyB0aHJvdyBuZXcgRXJyb3IoKTsgfVxuICAgIHJldHVybiBpdGVtO1xuICB9XG59XG5cbi8vICNlbmRpZlxuIl0sIm1hcHBpbmdzIjoiOzs7QUFzQkE7QUFLQTtBQUpBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFIQTtBQUFBOzs7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWpDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/box2d/particle/b2_stack_queue.ts\n");

/***/ }),

/***/ "./src/box2d/particle/b2_voronoi_diagram.ts":
/*!**************************************************!*\
  !*** ./src/box2d/particle/b2_voronoi_diagram.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b2VoronoiDiagram_Task = exports.b2VoronoiDiagram_Generator = exports.b2VoronoiDiagram = void 0;\nvar b2_settings_1 = __webpack_require__(/*! ../common/b2_settings */ \"./src/box2d/common/b2_settings.ts\");\nvar b2_math_1 = __webpack_require__(/*! ../common/b2_math */ \"./src/box2d/common/b2_math.ts\");\nvar b2_stack_queue_1 = __webpack_require__(/*! ./b2_stack_queue */ \"./src/box2d/particle/b2_stack_queue.ts\");\nvar b2VoronoiDiagram = (function () {\n    function b2VoronoiDiagram(generatorCapacity) {\n        this.m_generatorCapacity = 0;\n        this.m_generatorCount = 0;\n        this.m_countX = 0;\n        this.m_countY = 0;\n        this.m_diagram = [];\n        this.m_generatorBuffer = b2_settings_1.b2MakeArray(generatorCapacity, function (index) { return new b2VoronoiDiagram_Generator(); });\n        this.m_generatorCapacity = generatorCapacity;\n    }\n    b2VoronoiDiagram.prototype.AddGenerator = function (center, tag, necessary) {\n        var g = this.m_generatorBuffer[this.m_generatorCount++];\n        g.center.Copy(center);\n        g.tag = tag;\n        g.necessary = necessary;\n    };\n    b2VoronoiDiagram.prototype.Generate = function (radius, margin) {\n        var inverseRadius = 1 / radius;\n        var lower = new b2_math_1.b2Vec2(+b2_settings_1.b2_maxFloat, +b2_settings_1.b2_maxFloat);\n        var upper = new b2_math_1.b2Vec2(-b2_settings_1.b2_maxFloat, -b2_settings_1.b2_maxFloat);\n        var necessary_count = 0;\n        for (var k = 0; k < this.m_generatorCount; k++) {\n            var g = this.m_generatorBuffer[k];\n            if (g.necessary) {\n                b2_math_1.b2Vec2.MinV(lower, g.center, lower);\n                b2_math_1.b2Vec2.MaxV(upper, g.center, upper);\n                ++necessary_count;\n            }\n        }\n        if (necessary_count === 0) {\n            this.m_countX = 0;\n            this.m_countY = 0;\n            return;\n        }\n        lower.x -= margin;\n        lower.y -= margin;\n        upper.x += margin;\n        upper.y += margin;\n        this.m_countX = 1 + Math.floor(inverseRadius * (upper.x - lower.x));\n        this.m_countY = 1 + Math.floor(inverseRadius * (upper.y - lower.y));\n        this.m_diagram = [];\n        var queue = new b2_stack_queue_1.b2StackQueue(4 * this.m_countX * this.m_countY);\n        for (var k = 0; k < this.m_generatorCount; k++) {\n            var g = this.m_generatorBuffer[k];\n            g.center.SelfSub(lower).SelfMul(inverseRadius);\n            var x = Math.floor(g.center.x);\n            var y = Math.floor(g.center.y);\n            if (x >= 0 && y >= 0 && x < this.m_countX && y < this.m_countY) {\n                queue.Push(new b2VoronoiDiagram_Task(x, y, x + y * this.m_countX, g));\n            }\n        }\n        while (!queue.Empty()) {\n            var task = queue.Front();\n            var x = task.m_x;\n            var y = task.m_y;\n            var i = task.m_i;\n            var g = task.m_generator;\n            queue.Pop();\n            if (!this.m_diagram[i]) {\n                this.m_diagram[i] = g;\n                if (x > 0) {\n                    queue.Push(new b2VoronoiDiagram_Task(x - 1, y, i - 1, g));\n                }\n                if (y > 0) {\n                    queue.Push(new b2VoronoiDiagram_Task(x, y - 1, i - this.m_countX, g));\n                }\n                if (x < this.m_countX - 1) {\n                    queue.Push(new b2VoronoiDiagram_Task(x + 1, y, i + 1, g));\n                }\n                if (y < this.m_countY - 1) {\n                    queue.Push(new b2VoronoiDiagram_Task(x, y + 1, i + this.m_countX, g));\n                }\n            }\n        }\n        for (var y = 0; y < this.m_countY; y++) {\n            for (var x = 0; x < this.m_countX - 1; x++) {\n                var i = x + y * this.m_countX;\n                var a = this.m_diagram[i];\n                var b = this.m_diagram[i + 1];\n                if (a !== b) {\n                    queue.Push(new b2VoronoiDiagram_Task(x, y, i, b));\n                    queue.Push(new b2VoronoiDiagram_Task(x + 1, y, i + 1, a));\n                }\n            }\n        }\n        for (var y = 0; y < this.m_countY - 1; y++) {\n            for (var x = 0; x < this.m_countX; x++) {\n                var i = x + y * this.m_countX;\n                var a = this.m_diagram[i];\n                var b = this.m_diagram[i + this.m_countX];\n                if (a !== b) {\n                    queue.Push(new b2VoronoiDiagram_Task(x, y, i, b));\n                    queue.Push(new b2VoronoiDiagram_Task(x, y + 1, i + this.m_countX, a));\n                }\n            }\n        }\n        while (!queue.Empty()) {\n            var task = queue.Front();\n            var x = task.m_x;\n            var y = task.m_y;\n            var i = task.m_i;\n            var k = task.m_generator;\n            queue.Pop();\n            var a = this.m_diagram[i];\n            var b = k;\n            if (a !== b) {\n                var ax = a.center.x - x;\n                var ay = a.center.y - y;\n                var bx = b.center.x - x;\n                var by = b.center.y - y;\n                var a2 = ax * ax + ay * ay;\n                var b2 = bx * bx + by * by;\n                if (a2 > b2) {\n                    this.m_diagram[i] = b;\n                    if (x > 0) {\n                        queue.Push(new b2VoronoiDiagram_Task(x - 1, y, i - 1, b));\n                    }\n                    if (y > 0) {\n                        queue.Push(new b2VoronoiDiagram_Task(x, y - 1, i - this.m_countX, b));\n                    }\n                    if (x < this.m_countX - 1) {\n                        queue.Push(new b2VoronoiDiagram_Task(x + 1, y, i + 1, b));\n                    }\n                    if (y < this.m_countY - 1) {\n                        queue.Push(new b2VoronoiDiagram_Task(x, y + 1, i + this.m_countX, b));\n                    }\n                }\n            }\n        }\n    };\n    b2VoronoiDiagram.prototype.GetNodes = function (callback) {\n        for (var y = 0; y < this.m_countY - 1; y++) {\n            for (var x = 0; x < this.m_countX - 1; x++) {\n                var i = x + y * this.m_countX;\n                var a = this.m_diagram[i];\n                var b = this.m_diagram[i + 1];\n                var c = this.m_diagram[i + this.m_countX];\n                var d = this.m_diagram[i + 1 + this.m_countX];\n                if (b !== c) {\n                    if (a !== b && a !== c &&\n                        (a.necessary || b.necessary || c.necessary)) {\n                        callback(a.tag, b.tag, c.tag);\n                    }\n                    if (d !== b && d !== c &&\n                        (a.necessary || b.necessary || c.necessary)) {\n                        callback(b.tag, d.tag, c.tag);\n                    }\n                }\n            }\n        }\n    };\n    return b2VoronoiDiagram;\n}());\nexports.b2VoronoiDiagram = b2VoronoiDiagram;\nvar b2VoronoiDiagram_Generator = (function () {\n    function b2VoronoiDiagram_Generator() {\n        this.center = new b2_math_1.b2Vec2();\n        this.tag = 0;\n        this.necessary = false;\n    }\n    return b2VoronoiDiagram_Generator;\n}());\nexports.b2VoronoiDiagram_Generator = b2VoronoiDiagram_Generator;\nvar b2VoronoiDiagram_Task = (function () {\n    function b2VoronoiDiagram_Task(x, y, i, g) {\n        this.m_x = x;\n        this.m_y = y;\n        this.m_i = i;\n        this.m_generator = g;\n    }\n    return b2VoronoiDiagram_Task;\n}());\nexports.b2VoronoiDiagram_Task = b2VoronoiDiagram_Task;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/box2d/particle/b2_voronoi_diagram.ts\n");

/***/ }),

/***/ "./src/lappdefine.ts":
/*!***************************!*\
  !*** ./src/lappdefine.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RenderTargetHeight = exports.RenderTargetWidth = exports.CubismLoggingLevel = exports.DebugModelLogEnable = exports.DebugTouchLogEnable = exports.DebugLogEnable = exports.PriorityForce = exports.PriorityNormal = exports.PriorityIdle = exports.PriorityNone = exports.HitAreaNameBody = exports.HitAreaNameHead = exports.MotionGroupTapBody = exports.MotionGroupIdle = exports.ModelDirSize = exports.ModelDir = exports.PowerImageName = exports.GearImageName = exports.BackImageName = exports.ResourcesPath = exports.ViewLogicalMaxTop = exports.ViewLogicalMaxBottom = exports.ViewLogicalMaxRight = exports.ViewLogicalMaxLeft = exports.ViewLogicalRight = exports.ViewLogicalLeft = exports.ViewMinScale = exports.ViewMaxScale = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nexports.ViewMaxScale = 2.0;\nexports.ViewMinScale = 0.1;\nexports.ViewLogicalLeft = -1.0;\nexports.ViewLogicalRight = 1.0;\nexports.ViewLogicalMaxLeft = -2.0;\nexports.ViewLogicalMaxRight = 2.0;\nexports.ViewLogicalMaxBottom = -2.0;\nexports.ViewLogicalMaxTop = 2.0;\nexports.ResourcesPath = '../../res/models/';\nexports.BackImageName = 'back_class_normal.png';\nexports.GearImageName = 'icon_gear.png';\nexports.PowerImageName = 'CloseNormal.png';\nexports.ModelDir = ['++gongkaimo', 'cat_model_miao_pro', 'Senko', 'jinsechangzhifa', 'Rice', 'Hiyori', 'Haru', 'Mark', 'Natori'];\nexports.ModelDirSize = exports.ModelDir.length;\nexports.MotionGroupIdle = 'Idle';\nexports.MotionGroupTapBody = 'TapBody';\nexports.HitAreaNameHead = 'Head';\nexports.HitAreaNameBody = 'Body';\nexports.PriorityNone = 0;\nexports.PriorityIdle = 1;\nexports.PriorityNormal = 2;\nexports.PriorityForce = 3;\nexports.DebugLogEnable = true;\nexports.DebugTouchLogEnable = true;\nexports.DebugModelLogEnable = true;\nexports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;\nexports.RenderTargetWidth = window.innerWidth;\nexports.RenderTargetHeight = window.innerHeight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcGRlZmluZS50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9sYXBwZGVmaW5lLnRzPzFjM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbi8qKlxuICogU2FtcGxlIEFwcOOBp+S9v+eUqOOBmeOCi+WumuaVsFxuICovXG4vLyDnlLvpnaJcbmV4cG9ydCBjb25zdCBWaWV3TWF4U2NhbGUgPSAyLjA7XG5leHBvcnQgY29uc3QgVmlld01pblNjYWxlID0gMC4xO1xuXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxMZWZ0ID0gLTEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbFJpZ2h0ID0gMS4wO1xuXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhMZWZ0ID0gLTIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFJpZ2h0ID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4Qm90dG9tID0gLTIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFRvcCA9IDIuMDtcblxuLy8g55u45a++44OR44K5XG5leHBvcnQgY29uc3QgUmVzb3VyY2VzUGF0aCA9ICcuLi8uLi9yZXMvbW9kZWxzLyc7XG5cbi8vIOODouODh+ODq+OBruW+jOOCjeOBq+OBguOCi+iDjOaZr+OBrueUu+WDj+ODleOCoeOCpOODq1xuZXhwb3J0IGNvbnN0IEJhY2tJbWFnZU5hbWUgPSAnYmFja19jbGFzc19ub3JtYWwucG5nJztcblxuLy8g5q2v6LuKXG5leHBvcnQgY29uc3QgR2VhckltYWdlTmFtZSA9ICdpY29uX2dlYXIucG5nJztcblxuLy8g57WC5LqG44Oc44K/44OzXG5leHBvcnQgY29uc3QgUG93ZXJJbWFnZU5hbWUgPSAnQ2xvc2VOb3JtYWwucG5nJztcblxuLy8g44Oi44OH44Or5a6a576pLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyDjg6Ljg4fjg6vjgpLphY3nva7jgZfjgZ/jg4fjgqPjg6zjgq/jg4jjg6rlkI3jga7phY3liJdcbi8vIOS/neaMgeebruW9leWQjeWSjG1vZGVsIDMuanNvbueahOWQjeWtl+S4gOiHtFxuZXhwb3J0IGxldCBNb2RlbERpcjogc3RyaW5nW10gPSBbJysrZ29uZ2thaW1vJywnY2F0X21vZGVsX21pYW9fcHJvJywnU2Vua28nLCdqaW5zZWNoYW5nemhpZmEnLCdSaWNlJywnSGl5b3JpJywnSGFydScsICAnTWFyaycsICdOYXRvcmknXTtcbmV4cG9ydCBjb25zdCBNb2RlbERpclNpemU6IG51bWJlciA9IE1vZGVsRGlyLmxlbmd0aDtcblxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwSWRsZSA9ICdJZGxlJzsgLy8g44Ki44Kk44OJ44Oq44Oz44KwXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBUYXBCb2R5ID0gJ1RhcEJvZHknOyAvLyDkvZPjgpLjgr/jg4Pjg5fjgZfjgZ/jgajjgY1cblxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xuZXhwb3J0IGNvbnN0IEhpdEFyZWFOYW1lSGVhZCA9ICdIZWFkJztcbmV4cG9ydCBjb25zdCBIaXRBcmVhTmFtZUJvZHkgPSAnQm9keSc7XG5cbi8vIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puWumuaVsFxuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9uZSA9IDA7XG5leHBvcnQgY29uc3QgUHJpb3JpdHlJZGxlID0gMTtcbmV4cG9ydCBjb25zdCBQcmlvcml0eU5vcm1hbCA9IDI7XG5leHBvcnQgY29uc3QgUHJpb3JpdHlGb3JjZSA9IDM7XG5cbi8vIOODh+ODkOODg+OCsOeUqOODreOCsOOBruihqOekuuOCquODl+OCt+ODp+ODs1xuZXhwb3J0IGNvbnN0IERlYnVnTG9nRW5hYmxlID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBEZWJ1Z1RvdWNoTG9nRW5hYmxlID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBEZWJ1Z01vZGVsTG9nRW5hYmxlID0gdHJ1ZTtcblxuLy8gRnJhbWV3b3Jr44GL44KJ5Ye65Yqb44GZ44KL44Ot44Kw44Gu44Os44OZ44Or6Kit5a6aXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nZ2luZ0xldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2U7XG5cbi8vIOODh+ODleOCqeODq+ODiOOBruODrOODs+ODgOODvOOCv+ODvOOCsuODg+ODiOOCteOCpOOCulxuZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldFdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5leHBvcnQgY29uc3QgUmVuZGVyVGFyZ2V0SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBTUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBS0E7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lappdefine.ts\n");

/***/ }),

/***/ "./src/lappdelegate.ts":
/*!*****************************!*\
  !*** ./src/lappdelegate.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hitModel = exports.LAppDelegate = exports.lAppDelegateEvent = exports.scale = exports.frameBuffer = exports.gl = exports.s_instance = exports.canvas = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar Csm_CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\nvar lappview_1 = __webpack_require__(/*! ./lappview */ \"./src/lappview.ts\");\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\nvar lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ \"./src/lapptexturemanager.ts\");\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\nvar lappdefine_1 = __webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\");\nvar lstore_1 = __webpack_require__(/*! ./lstore */ \"./src/lstore.ts\");\nexports.canvas = null;\nexports.s_instance = null;\nexports.gl = null;\nexports.frameBuffer = null;\nexports.scale = window.devicePixelRatio;\nexports.lAppDelegateEvent = null;\nvar LAppDelegate = (function () {\n    function LAppDelegate() {\n        this._captured = false;\n        this._mouseX = 0.0;\n        this._mouseY = 0.0;\n        this._isEnd = false;\n        this._cubismOption = new live2dcubismframework_1.Option();\n        this._view = new lappview_1.LAppView();\n        this._textureManager = new lapptexturemanager_1.LAppTextureManager();\n    }\n    LAppDelegate.getInstance = function () {\n        if (exports.s_instance == null) {\n            exports.s_instance = new LAppDelegate();\n        }\n        return exports.s_instance;\n    };\n    LAppDelegate.releaseInstance = function () {\n        if (exports.s_instance != null) {\n            exports.s_instance.release();\n        }\n        exports.s_instance = null;\n    };\n    LAppDelegate.prototype.initDefine = function () {\n        lstore_1.LStore.set('ModelDir', LAppDefine.ModelDir);\n        lstore_1.LStore.set(\"ResourcesPath\", LAppDefine.ResourcesPath);\n    };\n    LAppDelegate.prototype.initialize = function () {\n        this.initDefine();\n        exports.canvas = document.createElement('canvas');\n        this._canvas = exports.canvas;\n        exports.canvas.id = 'live2d';\n        exports.canvas.width = LAppDefine.RenderTargetWidth;\n        exports.canvas.height = LAppDefine.RenderTargetHeight;\n        exports.canvas.style.width = exports.canvas.width + 'px';\n        exports.canvas.style.height = exports.canvas.height + 'px';\n        exports.canvas.width = exports.canvas.width * exports.scale;\n        exports.canvas.height = exports.canvas.height * exports.scale;\n        exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');\n        if (!exports.gl) {\n            alert('Cannot initialize WebGL. This browser does not support.');\n            exports.gl = null;\n            document.body.innerHTML =\n                'This browser does not support the <code>&lt;canvas&gt;</code> element.';\n            return false;\n        }\n        document.body.appendChild(exports.canvas);\n        if (!exports.frameBuffer) {\n            exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);\n        }\n        exports.gl.enable(exports.gl.BLEND);\n        exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);\n        var supportTouch = 'ontouchend' in exports.canvas;\n        if (supportTouch) {\n            exports.canvas.ontouchstart = onTouchBegan;\n            exports.canvas.ontouchmove = onTouchMoved;\n            exports.canvas.ontouchend = onTouchEnded;\n            exports.canvas.ontouchcancel = onTouchCancel;\n        }\n        else {\n            exports.canvas.onmousedown = onClickBegan;\n            exports.canvas.onmousemove = onMouseMoved;\n            exports.canvas.onmouseup = onClickEnded;\n            exports.canvas.onmouseenter = onMouseEnter;\n            exports.canvas.onmouseleave = onMouseLeave;\n        }\n        this._view.initialize();\n        this.initializeCubism();\n        return true;\n    };\n    LAppDelegate.prototype.release = function () {\n        this._textureManager.release();\n        this._textureManager = null;\n        this._view.release();\n        this._view = null;\n        lapplive2dmanager_1.LAppLive2DManager.releaseInstance();\n        Csm_CubismFramework.dispose();\n    };\n    LAppDelegate.prototype.run = function () {\n        var _this = this;\n        if (lappdefine_1.DebugLogEnable) {\n            var stats = new Stats();\n            stats.showPanel(0);\n            document.body.appendChild(stats.dom);\n        }\n        var loop = function () {\n            if (lappdefine_1.DebugLogEnable) {\n                stats.begin();\n            }\n            if (exports.s_instance == null) {\n                return;\n            }\n            lapppal_1.LAppPal.updateTime();\n            exports.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            exports.gl.enable(exports.gl.DEPTH_TEST);\n            exports.gl.depthFunc(exports.gl.LEQUAL);\n            exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);\n            exports.gl.clearDepth(1.0);\n            exports.gl.enable(exports.gl.BLEND);\n            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);\n            _this._view.render();\n            if (lappdefine_1.DebugLogEnable) {\n                stats.end();\n            }\n            requestAnimationFrame(loop);\n        };\n        loop();\n    };\n    LAppDelegate.prototype.createShader = function () {\n        var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);\n        if (vertexShaderId == null) {\n            lapppal_1.LAppPal.printMessage('failed to create vertexShader');\n            return null;\n        }\n        var vertexShader = 'precision mediump float;' +\n            'attribute vec3 position;' +\n            'attribute vec2 uv;' +\n            'varying vec2 vuv;' +\n            'void main(void)' +\n            '{' +\n            '   gl_Position = vec4(position, 1.0);' +\n            '   vuv = uv;' +\n            '}';\n        exports.gl.shaderSource(vertexShaderId, vertexShader);\n        exports.gl.compileShader(vertexShaderId);\n        var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);\n        if (fragmentShaderId == null) {\n            lapppal_1.LAppPal.printMessage('failed to create fragmentShader');\n            return null;\n        }\n        var fragmentShader = 'precision mediump float;' +\n            'varying vec2 vuv;' +\n            'uniform sampler2D texture;' +\n            'void main(void)' +\n            '{' +\n            '   gl_FragColor = texture2D(texture, vuv);' +\n            '}';\n        exports.gl.shaderSource(fragmentShaderId, fragmentShader);\n        exports.gl.compileShader(fragmentShaderId);\n        var programId = exports.gl.createProgram();\n        exports.gl.attachShader(programId, vertexShaderId);\n        exports.gl.attachShader(programId, fragmentShaderId);\n        exports.gl.deleteShader(vertexShaderId);\n        exports.gl.deleteShader(fragmentShaderId);\n        exports.gl.linkProgram(programId);\n        exports.gl.useProgram(programId);\n        return programId;\n    };\n    LAppDelegate.prototype.getView = function () {\n        return this._view;\n    };\n    LAppDelegate.prototype.setLappModelEvent = function (call) {\n        exports.lAppDelegateEvent = call;\n    };\n    LAppDelegate.prototype.getTextureManager = function () {\n        return this._textureManager;\n    };\n    LAppDelegate.prototype.initializeCubism = function () {\n        this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;\n        this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\n        Csm_CubismFramework.startUp(this._cubismOption);\n        Csm_CubismFramework.initialize();\n        lapplive2dmanager_1.LAppLive2DManager.getInstance();\n        lapppal_1.LAppPal.updateTime();\n        this._view.initializeSprite();\n    };\n    return LAppDelegate;\n}());\nexports.LAppDelegate = LAppDelegate;\nfunction onMouseLeave() {\n    lapppal_1.LAppPal.log(\"划出去\");\n    var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n    live2DManager.onDrag(0.0, 0.0);\n}\nfunction onMouseEnter(e) {\n    e.preventDefault();\n    lapppal_1.LAppPal.log(\"划进来\");\n}\nfunction onClickBegan(e) {\n    lapppal_1.LAppPal.log('click_began');\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    LAppDelegate.getInstance()._captured = true;\n    var posX = e.pageX;\n    var posY = e.pageY;\n    posX *= exports.scale;\n    posY *= exports.scale;\n    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\n}\nfunction hitModel(posX, posY) {\n    var view = LAppDelegate.getInstance().getView();\n    var viewX = view.transformViewX(posX);\n    var viewY = view.transformViewY(posY);\n    return lapplive2dmanager_1.LAppLive2DManager.getInstance().hitModel(viewX, viewY);\n}\nexports.hitModel = hitModel;\nfunction onMouseMoved(e) {\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    var rect = e.target.getBoundingClientRect();\n    var posX = e.clientX - rect.left;\n    var posY = e.clientY - rect.top;\n    posX *= exports.scale;\n    posY *= exports.scale;\n    var hit = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n    var hitstr = hit.isHit(posX, posY);\n    if (hit.move_hit) {\n        hit.move_hit(hitstr);\n    }\n    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\n}\nfunction onClickEnded(e) {\n    LAppDelegate.getInstance()._captured = false;\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    var rect = e.target.getBoundingClientRect();\n    var posX = e.clientX - rect.left;\n    var posY = e.clientY - rect.top;\n    posX *= exports.scale;\n    posY *= exports.scale;\n    lapppal_1.LAppPal.log('点击');\n    var hit = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n    var hitstr = hit.isHit(posX, posY);\n    if (hitstr != \"\" && hit.click_hit) {\n        hit.click_hit(hitstr);\n    }\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\nfunction onTouchBegan(e) {\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    LAppDelegate.getInstance()._captured = true;\n    var posX = e.changedTouches[0].pageX;\n    var posY = e.changedTouches[0].pageY;\n    posX *= exports.scale;\n    posY *= exports.scale;\n    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\n}\nfunction onTouchMoved(e) {\n    if (!LAppDelegate.getInstance()._captured) {\n        return;\n    }\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    var rect = e.target.getBoundingClientRect();\n    var posX = e.changedTouches[0].clientX - rect.left;\n    var posY = e.changedTouches[0].clientY - rect.top;\n    posX *= exports.scale;\n    posY *= exports.scale;\n    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\n}\nfunction onTouchEnded(e) {\n    LAppDelegate.getInstance()._captured = false;\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    var rect = e.target.getBoundingClientRect();\n    var posX = e.changedTouches[0].clientX - rect.left;\n    var posY = e.changedTouches[0].clientY - rect.top;\n    posX *= exports.scale;\n    posY *= exports.scale;\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\nfunction onTouchCancel(e) {\n    LAppDelegate.getInstance()._captured = false;\n    if (!LAppDelegate.getInstance()._view) {\n        lapppal_1.LAppPal.printMessage('view notfound');\n        return;\n    }\n    var rect = e.target.getBoundingClientRect();\n    var posX = e.changedTouches[0].clientX - rect.left;\n    var posY = e.changedTouches[0].clientY - rect.top;\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappdelegate.ts\n");

/***/ }),

/***/ "./src/lapplive2dmanager.ts":
/*!**********************************!*\
  !*** ./src/lapplive2dmanager.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LAppLive2DManager = exports.s_instance = void 0;\nvar cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\nvar csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\nvar Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;\nvar Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\nvar lappmodel_1 = __webpack_require__(/*! ./lappmodel */ \"./src/lappmodel.ts\");\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\nvar lstore_1 = __webpack_require__(/*! ./lstore */ \"./src/lstore.ts\");\nexports.s_instance = null;\nvar LAppLive2DManager = (function () {\n    function LAppLive2DManager() {\n        this.click_hit = null;\n        this.move_hit = null;\n        this._finishedMotion = function (self) {\n            lapppal_1.LAppPal.printMessage('Motion Finished:');\n            console.log(self);\n        };\n        this._viewMatrix = new Csm_CubismMatrix44();\n        this._models = new Csm_csmVector();\n        this._sceneIndex = 0;\n        this.changeScene(this._sceneIndex);\n    }\n    LAppLive2DManager.prototype.getIdManager = function (id) {\n        return CubismFramework.getIdManager();\n    };\n    LAppLive2DManager.prototype.getLAppDelegate = function () {\n        return lappdelegate_1.LAppDelegate.getInstance();\n    };\n    LAppLive2DManager.getInstance = function () {\n        if (exports.s_instance == null) {\n            exports.s_instance = new LAppLive2DManager();\n        }\n        return exports.s_instance;\n    };\n    LAppLive2DManager.releaseInstance = function () {\n        if (exports.s_instance != null) {\n            exports.s_instance = void 0;\n        }\n        exports.s_instance = null;\n    };\n    LAppLive2DManager.prototype.getModel = function (no) {\n        if (no < this._models.getSize()) {\n            return this._models.at(no);\n        }\n        return null;\n    };\n    LAppLive2DManager.prototype.releaseAllModel = function () {\n        for (var i = 0; i < this._models.getSize(); i++) {\n            this._models.at(i).release();\n            this._models.set(i, null);\n        }\n        this._models.clear();\n    };\n    LAppLive2DManager.prototype.onDrag = function (x, y) {\n        for (var i = 0; i < this._models.getSize(); i++) {\n            var model = this.getModel(i);\n            if (model) {\n                model.setDragging(x, y);\n            }\n        }\n    };\n    LAppLive2DManager.prototype.onTap = function (x, y) {\n        if (LAppDefine.DebugLogEnable) {\n            lapppal_1.LAppPal.printMessage(\"[APP]tap point: {x: \" + x.toFixed(2) + \" y: \" + y.toFixed(2) + \"}\");\n        }\n        for (var i = 0; i < this._models.getSize(); i++) {\n            if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\n                if (LAppDefine.DebugLogEnable) {\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameHead + \"]\");\n                }\n                this._models.at(i).setRandomExpression();\n            }\n            else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {\n                if (LAppDefine.DebugLogEnable) {\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameBody + \"]\");\n                }\n                this._models\n                    .at(i)\n                    .startRandomMotion(LAppDefine.MotionGroupTapBody, LAppDefine.PriorityNormal, this._finishedMotion);\n            }\n        }\n    };\n    LAppLive2DManager.prototype.hitModel = function (x, y) {\n        for (var i = 0; i < this._models.getSize(); i++) {\n            if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\n                return true;\n            }\n            else if (this._models\n                .at(i)\n                .hitTest(LAppDefine.HitAreaNameBody, x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    LAppLive2DManager.prototype.isHit = function (posX, posY) {\n        var view = lappdelegate_1.LAppDelegate.getInstance().getView();\n        var viewX = view.transformViewX(posX);\n        var viewY = view.transformViewY(posY);\n        var model = this._models.at(0).getModel();\n        for (var i = 0; i < model.getDrawableCount(); i++) {\n            if (this._models.at(0).isHit(model.getDrawableId(i), viewX, viewY)) {\n                return model.getDrawableId(i).getString().s;\n            }\n        }\n        return '';\n    };\n    LAppLive2DManager.prototype.onUpdate = function () {\n        var projection = new Csm_CubismMatrix44();\n        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;\n        projection.scale(1.0, width / height);\n        if (this._viewMatrix != null) {\n            projection.multiplyByMatrix(this._viewMatrix);\n        }\n        var saveProjection = projection.clone();\n        var modelCount = this._models.getSize();\n        for (var i = 0; i < modelCount; ++i) {\n            var model = this.getModel(i);\n            projection = saveProjection.clone();\n            model.update();\n            model.draw(projection);\n        }\n    };\n    LAppLive2DManager.prototype.nextScene = function () {\n        var _a;\n        var ModelDir = (_a = lstore_1.LStore.get('ModelDir')) !== null && _a !== void 0 ? _a : LAppDefine.ModelDir;\n        if (ModelDir == []) {\n            return;\n        }\n        var no = (this._sceneIndex + 1) % ModelDir.length;\n        this.changeScene(no);\n    };\n    LAppLive2DManager.prototype.changeScene = function (index) {\n        var _a, _b;\n        this._sceneIndex = index;\n        if (LAppDefine.DebugLogEnable) {\n            lapppal_1.LAppPal.printMessage(\"[APP]model index: \" + this._sceneIndex);\n        }\n        var ModelDir = (_a = lstore_1.LStore.get('ModelDir')) !== null && _a !== void 0 ? _a : LAppDefine.ModelDir;\n        var ResourcesPath = (_b = lstore_1.LStore.get('ResourcesPath')) !== null && _b !== void 0 ? _b : LAppDefine.ResourcesPath;\n        var model = ModelDir[index];\n        var modelPath = ResourcesPath + model + '/';\n        var modelJsonName = ModelDir[index];\n        modelJsonName += '.model3.json';\n        this.releaseAllModel();\n        this._models.pushBack(new lappmodel_1.LAppModel());\n        this._models.at(0).loadAssets(modelPath, modelJsonName);\n    };\n    return LAppLive2DManager;\n}());\nexports.LAppLive2DManager = LAppLive2DManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lapplive2dmanager.ts\n");

/***/ }),

/***/ "./src/lappmodel.ts":
/*!**************************!*\
  !*** ./src/lappmodel.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LAppModel = exports.LoadStep = void 0;\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\nvar cubismusermodel_1 = __webpack_require__(/*! @framework/model/cubismusermodel */ \"./Framework/src/model/cubismusermodel.ts\");\nvar cubismmodelsettingjson_1 = __webpack_require__(/*! @framework/cubismmodelsettingjson */ \"./Framework/src/cubismmodelsettingjson.ts\");\nvar cubismdefaultparameterid_1 = __webpack_require__(/*! @framework/cubismdefaultparameterid */ \"./Framework/src/cubismdefaultparameterid.ts\");\nvar acubismmotion_1 = __webpack_require__(/*! @framework/motion/acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\nvar cubismeyeblink_1 = __webpack_require__(/*! @framework/effect/cubismeyeblink */ \"./Framework/src/effect/cubismeyeblink.ts\");\nvar cubismbreath_1 = __webpack_require__(/*! @framework/effect/cubismbreath */ \"./Framework/src/effect/cubismbreath.ts\");\nvar csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar csmmap_1 = __webpack_require__(/*! @framework/type/csmmap */ \"./Framework/src/type/csmmap.ts\");\nvar cubismmotionqueuemanager_1 = __webpack_require__(/*! @framework/motion/cubismmotionqueuemanager */ \"./Framework/src/motion/cubismmotionqueuemanager.ts\");\nvar cubismdebug_1 = __webpack_require__(/*! @framework/utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\nvar InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager_1.Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\nvar CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;\nvar BreathParameterData = cubismbreath_1.Live2DCubismFramework.BreathParameterData;\nvar CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\nvar CubismUserModel = cubismusermodel_1.Live2DCubismFramework.CubismUserModel;\nvar CubismModelSettingJson = cubismmodelsettingjson_1.Live2DCubismFramework.CubismModelSettingJson;\nvar CubismDefaultParameterId = cubismdefaultparameterid_1.Live2DCubismFramework;\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\n__webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\nvar lappdefine_1 = __webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\");\nvar LoadStep;\n(function (LoadStep) {\n    LoadStep[LoadStep[\"LoadAssets\"] = 0] = \"LoadAssets\";\n    LoadStep[LoadStep[\"LoadModel\"] = 1] = \"LoadModel\";\n    LoadStep[LoadStep[\"WaitLoadModel\"] = 2] = \"WaitLoadModel\";\n    LoadStep[LoadStep[\"LoadExpression\"] = 3] = \"LoadExpression\";\n    LoadStep[LoadStep[\"WaitLoadExpression\"] = 4] = \"WaitLoadExpression\";\n    LoadStep[LoadStep[\"LoadPhysics\"] = 5] = \"LoadPhysics\";\n    LoadStep[LoadStep[\"WaitLoadPhysics\"] = 6] = \"WaitLoadPhysics\";\n    LoadStep[LoadStep[\"LoadPose\"] = 7] = \"LoadPose\";\n    LoadStep[LoadStep[\"WaitLoadPose\"] = 8] = \"WaitLoadPose\";\n    LoadStep[LoadStep[\"SetupEyeBlink\"] = 9] = \"SetupEyeBlink\";\n    LoadStep[LoadStep[\"SetupBreath\"] = 10] = \"SetupBreath\";\n    LoadStep[LoadStep[\"LoadUserData\"] = 11] = \"LoadUserData\";\n    LoadStep[LoadStep[\"WaitLoadUserData\"] = 12] = \"WaitLoadUserData\";\n    LoadStep[LoadStep[\"SetupEyeBlinkIds\"] = 13] = \"SetupEyeBlinkIds\";\n    LoadStep[LoadStep[\"SetupLipSyncIds\"] = 14] = \"SetupLipSyncIds\";\n    LoadStep[LoadStep[\"SetupLayout\"] = 15] = \"SetupLayout\";\n    LoadStep[LoadStep[\"LoadMotion\"] = 16] = \"LoadMotion\";\n    LoadStep[LoadStep[\"WaitLoadMotion\"] = 17] = \"WaitLoadMotion\";\n    LoadStep[LoadStep[\"CompleteInitialize\"] = 18] = \"CompleteInitialize\";\n    LoadStep[LoadStep[\"CompleteSetupModel\"] = 19] = \"CompleteSetupModel\";\n    LoadStep[LoadStep[\"LoadTexture\"] = 20] = \"LoadTexture\";\n    LoadStep[LoadStep[\"WaitLoadTexture\"] = 21] = \"WaitLoadTexture\";\n    LoadStep[LoadStep[\"CompleteSetup\"] = 22] = \"CompleteSetup\";\n})(LoadStep = exports.LoadStep || (exports.LoadStep = {}));\nvar LAppModel = (function (_super) {\n    __extends(LAppModel, _super);\n    function LAppModel() {\n        var _this = _super.call(this) || this;\n        _this._debugMode = lappdefine_1.DebugModelLogEnable;\n        _this._modelSetting = null;\n        _this._modelHomeDir = null;\n        _this._userTimeSeconds = 0.0;\n        _this._eyeBlinkIds = new csmVector();\n        _this._lipSyncIds = new csmVector();\n        _this._motions = new csmMap();\n        _this._expressions = new csmMap();\n        _this._hitArea = new csmVector();\n        _this._userArea = new csmVector();\n        _this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);\n        _this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);\n        _this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);\n        _this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);\n        _this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);\n        _this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);\n        _this._state = LoadStep.LoadAssets;\n        _this._expressionCount = 0;\n        _this._textureCount = 0;\n        _this._motionCount = 0;\n        _this._allMotionCount = 0;\n        return _this;\n    }\n    LAppModel.prototype.loadAssets = function (dir, fileName) {\n        var _this = this;\n        this._modelHomeDir = dir;\n        fetch(this._modelHomeDir + \"/\" + fileName)\n            .then(function (response) { return response.arrayBuffer(); })\n            .then(function (arrayBuffer) {\n            var setting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);\n            _this._state = LoadStep.LoadModel;\n            _this.setupModel(setting);\n        });\n    };\n    LAppModel.prototype.setupModel = function (setting) {\n        var _this = this;\n        this._updating = true;\n        this._initialized = false;\n        this._modelSetting = setting;\n        if (this._modelSetting.getModelFileName() != '') {\n            var modelFileName = this._modelSetting.getModelFileName();\n            fetch(this._modelHomeDir + \"/\" + modelFileName)\n                .then(function (response) { return response.arrayBuffer(); })\n                .then(function (arrayBuffer) {\n                _this.loadModel(arrayBuffer);\n                _this._state = LoadStep.LoadExpression;\n                loadCubismExpression();\n            });\n            this._state = LoadStep.WaitLoadModel;\n        }\n        else {\n            lapppal_1.LAppPal.printMessage('Model data does not exist.');\n        }\n        var loadCubismExpression = function () {\n            if (_this._modelSetting.getExpressionCount() > 0) {\n                var count_1 = _this._modelSetting.getExpressionCount();\n                var _loop_1 = function (i) {\n                    var expressionName = _this._modelSetting.getExpressionName(i);\n                    var expressionFileName = _this._modelSetting.getExpressionFileName(i);\n                    fetch(_this._modelHomeDir + \"/\" + expressionFileName)\n                        .then(function (response) { return response.arrayBuffer(); })\n                        .then(function (arrayBuffer) {\n                        var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);\n                        if (_this._expressions.getValue(expressionName) != null) {\n                            ACubismMotion.delete(_this._expressions.getValue(expressionName));\n                            _this._expressions.setValue(expressionName, null);\n                        }\n                        _this._expressions.setValue(expressionName, motion);\n                        _this._expressionCount++;\n                        if (_this._expressionCount >= count_1) {\n                            _this._state = LoadStep.LoadPhysics;\n                            loadCubismPhysics();\n                        }\n                    });\n                };\n                for (var i = 0; i < count_1; i++) {\n                    _loop_1(i);\n                }\n                _this._state = LoadStep.WaitLoadExpression;\n            }\n            else {\n                _this._state = LoadStep.LoadPhysics;\n                loadCubismPhysics();\n            }\n        };\n        var loadCubismPhysics = function () {\n            if (_this._modelSetting.getPhysicsFileName() != '') {\n                var physicsFileName = _this._modelSetting.getPhysicsFileName();\n                fetch(_this._modelHomeDir + \"/\" + physicsFileName)\n                    .then(function (response) { return response.arrayBuffer(); })\n                    .then(function (arrayBuffer) {\n                    _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n                    _this._state = LoadStep.LoadPose;\n                    loadCubismPose();\n                });\n                _this._state = LoadStep.WaitLoadPhysics;\n            }\n            else {\n                _this._state = LoadStep.LoadPose;\n                loadCubismPose();\n            }\n        };\n        var loadCubismPose = function () {\n            if (_this._modelSetting.getPoseFileName() != '') {\n                var poseFileName = _this._modelSetting.getPoseFileName();\n                fetch(_this._modelHomeDir + \"/\" + poseFileName)\n                    .then(function (response) { return response.arrayBuffer(); })\n                    .then(function (arrayBuffer) {\n                    _this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n                    _this._state = LoadStep.SetupEyeBlink;\n                    setupEyeBlink();\n                });\n                _this._state = LoadStep.WaitLoadPose;\n            }\n            else {\n                _this._state = LoadStep.SetupEyeBlink;\n                setupEyeBlink();\n            }\n        };\n        var setupEyeBlink = function () {\n            if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {\n                _this._eyeBlink = CubismEyeBlink.create(_this._modelSetting);\n                _this._state = LoadStep.SetupBreath;\n            }\n            setupBreath();\n        };\n        var setupBreath = function () {\n            _this._breath = CubismBreath.create();\n            var breathParameters = new csmVector();\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));\n            breathParameters.pushBack(new BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));\n            breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.0, 0.5, 3.2345, 0.5));\n            _this._breath.setParameters(breathParameters);\n            _this._state = LoadStep.LoadUserData;\n            loadUserData();\n        };\n        var loadUserData = function () {\n            if (_this._modelSetting.getUserDataFile() != '') {\n                var userDataFile = _this._modelSetting.getUserDataFile();\n                fetch(_this._modelHomeDir + \"/\" + userDataFile)\n                    .then(function (response) { return response.arrayBuffer(); })\n                    .then(function (arrayBuffer) {\n                    _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n                    _this._state = LoadStep.SetupEyeBlinkIds;\n                    setupEyeBlinkIds();\n                });\n                _this._state = LoadStep.WaitLoadUserData;\n            }\n            else {\n                _this._state = LoadStep.SetupEyeBlinkIds;\n                setupEyeBlinkIds();\n            }\n        };\n        var setupEyeBlinkIds = function () {\n            var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();\n            for (var i = 0; i < eyeBlinkIdCount; ++i) {\n                _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));\n            }\n            _this._state = LoadStep.SetupLipSyncIds;\n            setupLipSyncIds();\n        };\n        var setupLipSyncIds = function () {\n            var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();\n            for (var i = 0; i < lipSyncIdCount; ++i) {\n                _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));\n            }\n            _this._state = LoadStep.SetupLayout;\n            setupLayout();\n        };\n        var setupLayout = function () {\n            var layout = new csmMap();\n            _this._modelSetting.getLayoutMap(layout);\n            _this._modelMatrix.setupFromLayout(layout);\n            _this._state = LoadStep.LoadMotion;\n            loadCubismMotion();\n        };\n        var loadCubismMotion = function () {\n            _this._state = LoadStep.WaitLoadMotion;\n            _this._model.saveParameters();\n            _this._allMotionCount = 0;\n            _this._motionCount = 0;\n            var group = [];\n            var motionGroupCount = _this._modelSetting.getMotionGroupCount();\n            for (var i = 0; i < motionGroupCount; i++) {\n                group[i] = _this._modelSetting.getMotionGroupName(i);\n                _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);\n            }\n            for (var i = 0; i < motionGroupCount; i++) {\n                _this.preLoadMotionGroup(group[i]);\n            }\n            if (motionGroupCount == 0) {\n                _this._state = LoadStep.LoadTexture;\n                _this._motionManager.stopAllMotions();\n                _this._updating = false;\n                _this._initialized = true;\n                _this.createRenderer();\n                _this.setupTextures();\n                _this.getRenderer().startUp(lappdelegate_1.gl);\n            }\n        };\n    };\n    LAppModel.prototype.setupTextures = function () {\n        var _this = this;\n        var usePremultiply = true;\n        if (this._state == LoadStep.LoadTexture) {\n            var textureCount_1 = this._modelSetting.getTextureCount();\n            var _loop_2 = function (modelTextureNumber) {\n                if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n                    console.log('getTextureFileName null');\n                    return \"continue\";\n                }\n                var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);\n                texturePath = this_1._modelHomeDir + texturePath;\n                var onLoad = function (textureInfo) {\n                    _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n                    _this._textureCount++;\n                    if (_this._textureCount >= textureCount_1) {\n                        _this._state = LoadStep.CompleteSetup;\n                        lappdelegate_1.lAppDelegateEvent.modelCompleteSetup();\n                    }\n                };\n                lappdelegate_1.LAppDelegate.getInstance()\n                    .getTextureManager()\n                    .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n                this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n            };\n            var this_1 = this;\n            for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {\n                _loop_2(modelTextureNumber);\n            }\n            this._state = LoadStep.WaitLoadTexture;\n        }\n    };\n    LAppModel.prototype.reloadRenderer = function () {\n        this.deleteRenderer();\n        this.createRenderer();\n        this.setupTextures();\n    };\n    LAppModel.prototype.update = function () {\n        if (this._state != LoadStep.CompleteSetup)\n            return;\n        var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();\n        this._userTimeSeconds += deltaTimeSeconds;\n        this._dragManager.update(deltaTimeSeconds);\n        this._dragX = this._dragManager.getX();\n        this._dragY = this._dragManager.getY();\n        var motionUpdated = false;\n        this._model.loadParameters();\n        if (this._motionManager.isFinished()) {\n            this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\n        }\n        else {\n            motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);\n        }\n        this._model.saveParameters();\n        if (!motionUpdated) {\n            if (this._eyeBlink != null) {\n                this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);\n            }\n        }\n        if (this._expressionManager != null) {\n            this._expressionManager.updateMotion(this._model, deltaTimeSeconds);\n        }\n        this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);\n        this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n        this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);\n        this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);\n        this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);\n        this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n        if (this._breath != null) {\n            this._breath.updateParameters(this._model, deltaTimeSeconds);\n        }\n        if (this._physics != null) {\n            this._physics.evaluate(this._model, deltaTimeSeconds);\n        }\n        if (this._lipsync) {\n            var value = 0;\n            for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {\n                this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n            }\n        }\n        if (this._pose != null) {\n            this._pose.updateParameters(this._model, deltaTimeSeconds);\n        }\n        this._model.update();\n    };\n    LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {\n        var _this = this;\n        if (priority == LAppDefine.PriorityForce) {\n            this._motionManager.setReservePriority(priority);\n        }\n        else if (!this._motionManager.reserveMotion(priority)) {\n            if (this._debugMode) {\n                lapppal_1.LAppPal.printMessage(\"[APP]can't start motion.\");\n            }\n            return InvalidMotionQueueEntryHandleValue;\n        }\n        var motionFileName = this._modelSetting.getMotionFileName(group, no);\n        var name = group + \"_\" + no;\n        var motion = this._motions.getValue(name);\n        var autoDelete = false;\n        if (motion == null) {\n            fetch(this._modelHomeDir + \"/\" + motionFileName)\n                .then(function (response) { return response.arrayBuffer(); })\n                .then(function (arrayBuffer) {\n                motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);\n                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);\n                if (fadeTime >= 0.0) {\n                    motion.setFadeInTime(fadeTime);\n                }\n                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);\n                if (fadeTime >= 0.0) {\n                    motion.setFadeOutTime(fadeTime);\n                }\n                motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);\n                autoDelete = true;\n            });\n        }\n        else {\n            motion.setFinishedMotionHandler(onFinishedMotionHandler);\n        }\n        if (this._debugMode) {\n            lapppal_1.LAppPal.printMessage(\"[APP]start motion: [\" + group + \"_\" + no);\n        }\n        return this._motionManager.startMotionPriority(motion, autoDelete, priority);\n    };\n    LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {\n        if (this._modelSetting.getMotionCount(group) == 0) {\n            return InvalidMotionQueueEntryHandleValue;\n        }\n        var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));\n        return this.startMotion(group, no, priority, onFinishedMotionHandler);\n    };\n    LAppModel.prototype.setExpression = function (expressionId) {\n        var motion = this._expressions.getValue(expressionId);\n        if (this._debugMode) {\n            lapppal_1.LAppPal.printMessage(\"[APP]expression: [\" + expressionId + \"]\");\n        }\n        if (motion != null) {\n            this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);\n        }\n        else {\n            if (this._debugMode) {\n                lapppal_1.LAppPal.printMessage(\"[APP]expression[\" + expressionId + \"] is null\");\n            }\n        }\n    };\n    LAppModel.prototype.setRandomExpression = function () {\n        if (this._expressions.getSize() == 0) {\n            return;\n        }\n        var no = Math.floor(Math.random() * this._expressions.getSize());\n        for (var i = 0; i < this._expressions.getSize(); i++) {\n            if (i == no) {\n                var name_1 = this._expressions._keyValues[i].first;\n                this.setExpression(name_1);\n                return;\n            }\n        }\n    };\n    LAppModel.prototype.motionEventFired = function (eventValue) {\n        cubismdebug_1.CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n    };\n    LAppModel.prototype.hitTest = function (hitArenaName, x, y) {\n        if (this._opacity < 1) {\n            return false;\n        }\n        var count = this._modelSetting.getHitAreasCount();\n        for (var i = 0; i < count; i++) {\n            if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n                var drawId = this._modelSetting.getHitAreaId(i);\n                return this.isHit(drawId, x, y);\n            }\n        }\n        return false;\n    };\n    LAppModel.prototype.preLoadMotionGroup = function (group) {\n        var _this = this;\n        var _loop_3 = function (i) {\n            var motionFileName = this_2._modelSetting.getMotionFileName(group, i);\n            var name_2 = group + \"_\" + i;\n            if (this_2._debugMode) {\n                lapppal_1.LAppPal.printMessage(\"[APP]load motion: \" + motionFileName + \" => [\" + name_2 + \"]\");\n            }\n            fetch(this_2._modelHomeDir + \"/\" + motionFileName)\n                .then(function (response) { return response.arrayBuffer(); })\n                .then(function (arrayBuffer) {\n                var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);\n                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);\n                if (fadeTime >= 0.0) {\n                    tmpMotion.setFadeInTime(fadeTime);\n                }\n                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);\n                if (fadeTime >= 0.0) {\n                    tmpMotion.setFadeOutTime(fadeTime);\n                }\n                tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);\n                if (_this._motions.getValue(name_2) != null) {\n                    ACubismMotion.delete(_this._motions.getValue(name_2));\n                }\n                _this._motions.setValue(name_2, tmpMotion);\n                _this._motionCount++;\n                if (_this._motionCount >= _this._allMotionCount) {\n                    _this._state = LoadStep.LoadTexture;\n                    _this._motionManager.stopAllMotions();\n                    _this._updating = false;\n                    _this._initialized = true;\n                    _this.createRenderer();\n                    _this.setupTextures();\n                    _this.getRenderer().startUp(lappdelegate_1.gl);\n                }\n            });\n        };\n        var this_2 = this;\n        for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n            _loop_3(i);\n        }\n    };\n    LAppModel.prototype.releaseMotions = function () {\n        this._motions.clear();\n    };\n    LAppModel.prototype.releaseExpressions = function () {\n        this._expressions.clear();\n    };\n    LAppModel.prototype.doDraw = function () {\n        if (this._model == null)\n            return;\n        var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];\n        this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);\n        this.getRenderer().drawModel();\n    };\n    LAppModel.prototype.draw = function (matrix) {\n        if (this._model == null) {\n            return;\n        }\n        if (this._state == LoadStep.CompleteSetup) {\n            matrix.multiplyByMatrix(this._modelMatrix);\n            this.getRenderer().setMvpMatrix(matrix);\n            this.doDraw();\n        }\n    };\n    return LAppModel;\n}(CubismUserModel));\nexports.LAppModel = LAppModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappmodel.ts\n");

/***/ }),

/***/ "./src/lapppal.ts":
/*!************************!*\
  !*** ./src/lapppal.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LAppPal = void 0;\nvar LAppPal = (function () {\n    function LAppPal() {\n    }\n    LAppPal.loadFileAsBytes = function (filePath, callback) {\n        fetch(filePath)\n            .then(function (response) { return response.arrayBuffer(); })\n            .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });\n    };\n    LAppPal.getDeltaTime = function () {\n        return this.s_deltaTime;\n    };\n    LAppPal.updateTime = function () {\n        this.s_currentFrame = Date.now();\n        this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;\n        this.s_lastFrame = this.s_currentFrame;\n    };\n    LAppPal.printMessage = function (message) {\n        console.log(message);\n    };\n    LAppPal.log = function (any, tag) {\n        if (tag === void 0) { tag = \"info\"; }\n        console.log(any, tag);\n    };\n    LAppPal.getName = function (fun) {\n        return typeof fun === 'function' ?\n            undefined :\n            fun.name || /function (.+)\\(/.exec(fun + '')[1];\n    };\n    LAppPal.lastUpdate = Date.now();\n    LAppPal.s_currentFrame = 0.0;\n    LAppPal.s_lastFrame = 0.0;\n    LAppPal.s_deltaTime = 0.0;\n    return LAppPal;\n}());\nexports.LAppPal = LAppPal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcHBhbC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9sYXBwcGFsLnRzP2QzNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDjg5fjg6njg4Pjg4jjg5Xjgqnjg7zjg6Dkvp3lrZjmqZ/og73jgpLmir3osaHljJbjgZnjgosgQ3ViaXNtIFBsYXRmb3JtIEFic3RyYWN0aW9uIExheWVyLlxuICpcbiAqIOODleOCoeOCpOODq+iqreOBv+i+vOOBv+OChOaZguWIu+WPluW+l+etieOBruODl+ODqeODg+ODiOODleOCqeODvOODoOOBq+S+neWtmOOBmeOCi+mWouaVsOOCkuOBvuOBqOOCgeOCi+OAglxuICovXG4vLyDlo7DmmI7kuIDkuKrlhajlsYDnmoRsb2fmlrnms5XvvIznlKjmnaXmiZNsb2dcblxuZXhwb3J0IGNsYXNzIExBcHBQYWwge1xuICAvKipcbiAgICog44OV44Kh44Kk44Or44KS44OQ44Kk44OI44OH44O844K/44Go44GX44Gm6Kqt44G/44GT44KAXG4gICAqXG4gICAqIEBwYXJhbSBmaWxlUGF0aCDoqq3jgb/ovrzjgb/lr77osaHjg5XjgqHjgqTjg6vjga7jg5HjgrlcbiAgICogQHJldHVyblxuICAgKiB7XG4gICAqICAgICAgYnVmZmVyLCAgIOiqreOBv+i+vOOCk+OBoOODkOOCpOODiOODh+ODvOOCv1xuICAgKiAgICAgIHNpemUgICAgICAgIOODleOCoeOCpOODq+OCteOCpOOCulxuICAgKiB9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxvYWRGaWxlQXNCeXRlcyhcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAoYXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgZmV0Y2goZmlsZVBhdGgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4gY2FsbGJhY2soYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg6vjgr/mmYLplpPvvIjliY3lm57jg5Xjg6zjg7zjg6Djgajjga7lt67liIbvvInjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg6vjgr/mmYLplpNbbXNdXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldERlbHRhVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNfZGVsdGFUaW1lO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB1cGRhdGVUaW1lKCk6IHZvaWQge1xuICAgIHRoaXMuc19jdXJyZW50RnJhbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuc19kZWx0YVRpbWUgPSAodGhpcy5zX2N1cnJlbnRGcmFtZSAtIHRoaXMuc19sYXN0RnJhbWUpIC8gMTAwMDtcbiAgICB0aGlzLnNfbGFzdEZyYW1lID0gdGhpcy5zX2N1cnJlbnRGcmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Hjg4Pjgrvjg7zjgrjjgpLlh7rlipvjgZnjgotcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByaW50TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbG9nKGFueTphbnksdGFnOnN0cmluZyA9IFwiaW5mb1wiKTp2b2lke1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zb2xlLmxvZyhhbnksdGFnKTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGdldE5hbWUoZnVuKXtcbiAgICByZXR1cm4gdHlwZW9mIGZ1bj09PSdmdW5jdGlvbic/XG4gICAgICAgIHVuZGVmaW5lZDpcbiAgICAgICAgZnVuLm5hbWV8fC9mdW5jdGlvbiAoLispXFwoLy5leGVjKGZ1biArICcnKVsxXTtcbiAgfVxuXG5cbiAgc3RhdGljIGxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xuXG4gIHN0YXRpYyBzX2N1cnJlbnRGcmFtZSA9IDAuMDtcbiAgc3RhdGljIHNfbGFzdEZyYW1lID0gMC4wO1xuICBzdGF0aWMgc19kZWx0YVRpbWUgPSAwLjA7XG59XG4iXSwibWFwcGluZ3MiOiI7OztBQWNBO0FBQUE7QUEwREE7QUEvQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUExREE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lapppal.ts\n");

/***/ }),

/***/ "./src/lappsprite.ts":
/*!***************************!*\
  !*** ./src/lappsprite.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Rect = exports.LAppSprite = void 0;\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\nvar deg = 0.5;\nvar LAppSprite = (function () {\n    function LAppSprite(x, y, width, height, textureId) {\n        this._width = width;\n        this._height = height;\n        this._rect = new Rect();\n        this._rect.left = x - width * 0.5;\n        this._rect.right = x + width * 0.5;\n        this._rect.up = y + height * 0.5;\n        this._rect.down = y - height * 0.5;\n        this._texture = textureId;\n        this._vertexBuffer = null;\n        this._uvBuffer = null;\n        this._indexBuffer = null;\n        this._positionLocation = null;\n        this._uvLocation = null;\n        this._textureLocation = null;\n        this._positionArray = null;\n        this._uvArray = null;\n        this._indexArray = null;\n        this._firstDraw = true;\n    }\n    LAppSprite.prototype.setX = function (x) {\n        this._x = x;\n        this._rect.left = x - this._width * 0.5;\n        this._rect.right = x + this._width * 0.5;\n    };\n    LAppSprite.prototype.setY = function (y) {\n        this._y = y;\n        this._rect.up = y + this._height * 0.5;\n        this._rect.down = y - this._height * 0.5;\n    };\n    LAppSprite.prototype.release = function () {\n        this._rect = null;\n        lappdelegate_1.gl.deleteTexture(this._texture);\n        this._texture = null;\n        lappdelegate_1.gl.deleteBuffer(this._uvBuffer);\n        this._uvBuffer = null;\n        lappdelegate_1.gl.deleteBuffer(this._vertexBuffer);\n        this._vertexBuffer = null;\n        lappdelegate_1.gl.deleteBuffer(this._indexBuffer);\n        this._indexBuffer = null;\n    };\n    LAppSprite.prototype.getTexture = function () {\n        return this._texture;\n    };\n    LAppSprite.prototype.render = function (programId) {\n        if (this._texture == null) {\n            return;\n        }\n        if (this._firstDraw) {\n            this._positionLocation = lappdelegate_1.gl.getAttribLocation(programId, 'position');\n            lappdelegate_1.gl.enableVertexAttribArray(this._positionLocation);\n            this._uvLocation = lappdelegate_1.gl.getAttribLocation(programId, 'uv');\n            lappdelegate_1.gl.enableVertexAttribArray(this._uvLocation);\n            this._textureLocation = lappdelegate_1.gl.getUniformLocation(programId, 'texture');\n            lappdelegate_1.gl.uniform1i(this._textureLocation, 0);\n            {\n                this._uvArray = new Float32Array([\n                    1.0,\n                    0.0,\n                    0.0,\n                    0.0,\n                    0.0,\n                    1.0,\n                    1.0,\n                    1.0\n                ]);\n                this._uvBuffer = lappdelegate_1.gl.createBuffer();\n            }\n            {\n                var maxWidth_1 = lappdelegate_1.canvas.width;\n                var maxHeight_1 = lappdelegate_1.canvas.height;\n                this._positionArray = new Float32Array([\n                    (this._rect.right - maxWidth_1 * 0.5) / (maxWidth_1 * 0.5),\n                    (this._rect.up - maxHeight_1 * 0.5) / (maxHeight_1 * 0.5),\n                    (this._rect.left - maxWidth_1 * 0.5) / (maxWidth_1 * 0.5),\n                    (this._rect.up - maxHeight_1 * 0.5) / (maxHeight_1 * 0.5),\n                    (this._rect.left - maxWidth_1 * 0.5) / (maxWidth_1 * 0.5),\n                    (this._rect.down - maxHeight_1 * 0.5) / (maxHeight_1 * 0.5),\n                    (this._rect.right - maxWidth_1 * 0.5) / (maxWidth_1 * 0.5),\n                    (this._rect.down - maxHeight_1 * 0.5) / (maxHeight_1 * 0.5)\n                ]);\n                this._vertexBuffer = lappdelegate_1.gl.createBuffer();\n            }\n            {\n                this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);\n                this._indexBuffer = lappdelegate_1.gl.createBuffer();\n            }\n            this._firstDraw = false;\n        }\n        var maxWidth = lappdelegate_1.canvas.width;\n        var maxHeight = lappdelegate_1.canvas.height;\n        this._positionArray = new Float32Array([\n            (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\n            (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\n            (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\n            (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\n            (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\n            (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\n            (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\n            (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)\n        ]);\n        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._uvBuffer);\n        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._uvArray, lappdelegate_1.gl.STATIC_DRAW);\n        lappdelegate_1.gl.vertexAttribPointer(this._uvLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);\n        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._vertexBuffer);\n        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._positionArray, lappdelegate_1.gl.STATIC_DRAW);\n        lappdelegate_1.gl.vertexAttribPointer(this._positionLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);\n        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\n        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexArray, lappdelegate_1.gl.DYNAMIC_DRAW);\n        lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, this._texture);\n        lappdelegate_1.gl.drawElements(lappdelegate_1.gl.TRIANGLES, this._indexArray.length, lappdelegate_1.gl.UNSIGNED_SHORT, 0);\n    };\n    LAppSprite.prototype.isHit = function (pointX, pointY) {\n        var height = lappdelegate_1.canvas.height;\n        var y = height - pointY;\n        return (pointX >= this._rect.left &&\n            pointX <= this._rect.right &&\n            y <= this._rect.up &&\n            y >= this._rect.down);\n    };\n    return LAppSprite;\n}());\nexports.LAppSprite = LAppSprite;\nvar Rect = (function () {\n    function Rect() {\n    }\n    return Rect;\n}());\nexports.Rect = Rect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappsprite.ts\n");

/***/ }),

/***/ "./src/lapptexturemanager.ts":
/*!***********************************!*\
  !*** ./src/lapptexturemanager.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextureInfo = exports.LAppTextureManager = void 0;\nvar csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ \"./Framework/src/type/csmvector.ts\");\nvar Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\nvar LAppTextureManager = (function () {\n    function LAppTextureManager() {\n        this._textures = new Csm_csmVector();\n    }\n    LAppTextureManager.prototype.release = function () {\n        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\n            lappdelegate_1.gl.deleteTexture(ite.ptr().id);\n        }\n        this._textures = null;\n    };\n    LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {\n        var _this = this;\n        var _loop_1 = function (ite) {\n            if (ite.ptr().fileName == fileName &&\n                ite.ptr().usePremultply == usePremultiply) {\n                ite.ptr().img = new Image();\n                ite.ptr().img.onload = function () { return callback(ite.ptr()); };\n                ite.ptr().img.src = fileName;\n                return { value: void 0 };\n            }\n        };\n        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\n            var state_1 = _loop_1(ite);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        var img = new Image();\n        img.onload = function () {\n            var tex = lappdelegate_1.gl.createTexture();\n            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);\n            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);\n            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);\n            if (usePremultiply) {\n                lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n            }\n            lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);\n            lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);\n            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);\n            var textureInfo = new TextureInfo();\n            if (textureInfo != null) {\n                textureInfo.fileName = fileName;\n                textureInfo.width = img.width;\n                textureInfo.height = img.height;\n                textureInfo.id = tex;\n                textureInfo.img = img;\n                textureInfo.usePremultply = usePremultiply;\n                _this._textures.pushBack(textureInfo);\n            }\n            callback(textureInfo);\n        };\n        img.src = fileName;\n    };\n    LAppTextureManager.prototype.releaseTextures = function () {\n        for (var i = 0; i < this._textures.getSize(); i++) {\n            this._textures.set(i, null);\n        }\n        this._textures.clear();\n    };\n    LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {\n        for (var i = 0; i < this._textures.getSize(); i++) {\n            if (this._textures.at(i).id != texture) {\n                continue;\n            }\n            this._textures.set(i, null);\n            this._textures.remove(i);\n            break;\n        }\n    };\n    LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {\n        for (var i = 0; i < this._textures.getSize(); i++) {\n            if (this._textures.at(i).fileName == fileName) {\n                this._textures.set(i, null);\n                this._textures.remove(i);\n                break;\n            }\n        }\n    };\n    return LAppTextureManager;\n}());\nexports.LAppTextureManager = LAppTextureManager;\nvar TextureInfo = (function () {\n    function TextureInfo() {\n        this.id = null;\n        this.width = 0;\n        this.height = 0;\n    }\n    return TextureInfo;\n}());\nexports.TextureInfo = TextureInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcHRleHR1cmVtYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHB0ZXh0dXJlbWFuYWdlci50cz8yYzBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCBDc21fY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBjc21WZWN0b3JfaXRlcmF0b3IgPSBjc212ZWN0b3IuaXRlcmF0b3I7XG5pbXBvcnQgeyBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6PnrqHnkIbjgq/jg6njgrlcbiAqIOeUu+WDj+iqreOBv+i+vOOBv+OAgeeuoeeQhuOCkuihjOOBhuOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFRleHR1cmVNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgQ3NtX2NzbVZlY3RvcjxUZXh0dXJlSW5mbz4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VGV4dHVyZUluZm8+ID0gdGhpcy5fdGV4dHVyZXMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl90ZXh0dXJlcy5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGdsLmRlbGV0ZVRleHR1cmUoaXRlLnB0cigpLmlkKTtcbiAgICB9XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+iqreOBv+i+vOOBv1xuICAgKlxuICAgKiBAcGFyYW0gZmlsZU5hbWUg6Kqt44G/6L6844KA55S75YOP44OV44Kh44Kk44Or44OR44K55ZCNXG4gICAqIEBwYXJhbSB1c2VQcmVtdWx0aXBseSBQcmVtdWx05Yem55CG44KS5pyJ5Yq544Gr44GZ44KL44GLXG4gICAqIEByZXR1cm4g55S75YOP5oOF5aCx44CB6Kqt44G/6L6844G/5aSx5pWX5pmC44GvbnVsbOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZShcbiAgICBmaWxlTmFtZTogc3RyaW5nLFxuICAgIHVzZVByZW11bHRpcGx5OiBib29sZWFuLFxuICAgIGNhbGxiYWNrOiAodGV4dHVyZUluZm86IFRleHR1cmVJbmZvKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIC8vIHNlYXJjaCBsb2FkZWQgdGV4dHVyZSBhbHJlYWR5XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBpdGUucHRyKCkuZmlsZU5hbWUgPT0gZmlsZU5hbWUgJiZcbiAgICAgICAgaXRlLnB0cigpLnVzZVByZW11bHRwbHkgPT0gdXNlUHJlbXVsdGlwbHlcbiAgICAgICkge1xuICAgICAgICAvLyAy5Zue55uu5Lul6ZmN44Gv44Kt44Oj44OD44K344Ol44GM5L2/55So44GV44KM44KLKOW+heOBoeaZgumWk+OBquOBlylcbiAgICAgICAgLy8gV2ViS2l044Gn44Gv5ZCM44GYSW1hZ2Xjga5vbmxvYWTjgpLlho3luqblkbzjgbbjgavjga/lho3jgqTjg7Pjgrnjgr/jg7PjgrnjgYzlv4XopoFcbiAgICAgICAgLy8g6Kmz57Sw77yaaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUwMjQxODFcbiAgICAgICAgaXRlLnB0cigpLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpdGUucHRyKCkuaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IGNhbGxiYWNrKGl0ZS5wdHIoKSk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcuc3JjID0gZmlsZU5hbWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg4fjg7zjgr/jga7jgqrjg7Pjg63jg7zjg4njgpLjg4jjg6rjgqzjg7zjgavjgZnjgotcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgLy8g44OG44Kv44K544OB44Oj44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXG4gICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6YG45oqeXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgLy8gUHJlbXVsdOWHpueQhuOCkuihjOOCj+OBm+OCi1xuICAgICAgaWYgKHVzZVByZW11bHRpcGx5KSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OBq+ODlOOCr+OCu+ODq+OCkuabuOOBjei+vOOCgFxuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWcpO1xuXG4gICAgICAvLyDjg5/jg4Pjg5fjg57jg4Pjg5fjgpLnlJ/miJBcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpLjg5DjgqTjg7Pjg4lcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICBjb25zdCB0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8gPSBuZXcgVGV4dHVyZUluZm8oKTtcbiAgICAgIGlmICh0ZXh0dXJlSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHRleHR1cmVJbmZvLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRleHR1cmVJbmZvLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICB0ZXh0dXJlSW5mby5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICB0ZXh0dXJlSW5mby5pZCA9IHRleDtcbiAgICAgICAgdGV4dHVyZUluZm8uaW1nID0gaW1nO1xuICAgICAgICB0ZXh0dXJlSW5mby51c2VQcmVtdWx0cGx5ID0gdXNlUHJlbXVsdGlwbHk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnB1c2hCYWNrKHRleHR1cmVJbmZvKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sodGV4dHVyZUluZm8pO1xuICAgIH07XG4gICAgaW1nLnNyYyA9IGZpbGVOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDphY3liJfjgavlrZjlnKjjgZnjgovnlLvlg4/lhajjgabjgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZXMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX3RleHR1cmVzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu6Kej5pS+XG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+ODhuOCr+OCueODgeODo+OBrueUu+WDj+OCkuino+aUvuOBmeOCi+OAglxuICAgKiBAcGFyYW0gdGV4dHVyZSDop6PmlL7jgZnjgovjg4bjgq/jgrnjg4Hjg6NcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5VGV4dHVyZSh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuYXQoaSkuaWQgIT0gdGV4dHVyZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/lkI3liY3jga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIGZpbGVOYW1lIOino+aUvuOBmeOCi+eUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VUZXh0dXJlQnlGaWxlUGF0aChmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmZpbGVOYW1lID09IGZpbGVOYW1lKSB7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdGV4dHVyZXM6IENzbV9jc21WZWN0b3I8VGV4dHVyZUluZm8+O1xufVxuXG4vKipcbiAqIOeUu+WDj+aDheWgseani+mAoOS9k1xuICovXG5leHBvcnQgY2xhc3MgVGV4dHVyZUluZm8ge1xuICBpbWc6IEhUTUxJbWFnZUVsZW1lbnQ7IC8vIOeUu+WDj1xuICBpZDogV2ViR0xUZXh0dXJlID0gbnVsbDsgLy8g44OG44Kv44K544OB44OjXG4gIHdpZHRoID0gMDsgLy8g5qiq5bmFXG4gIGhlaWdodCA9IDA7IC8vIOmrmOOBlVxuICB1c2VQcmVtdWx0cGx5OiBib29sZWFuOyAvLyBQcmVtdWx05Yem55CG44KS5pyJ5Yq544Gr44GZ44KL44GLXG4gIGZpbGVOYW1lOiBzdHJpbmc7IC8vIOODleOCoeOCpOODq+WQjVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7QUFPQTtBQUNBO0FBRUE7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQUE7QUFPQTtBQUlBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7O0FBaEJBO0FBQ0E7OztBQWdCQTtBQUdBO0FBQ0E7QUFFQTtBQUdBO0FBR0E7QUFLQTtBQUdBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQUE7QUFySkE7QUEwSkE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQVBBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lapptexturemanager.ts\n");

/***/ }),

/***/ "./src/lappview.ts":
/*!*************************!*\
  !*** ./src/lappview.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LAppView = void 0;\nvar cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\nvar cubismviewmatrix_1 = __webpack_require__(/*! @framework/math/cubismviewmatrix */ \"./Framework/src/math/cubismviewmatrix.ts\");\nvar Csm_CubismViewMatrix = cubismviewmatrix_1.Live2DCubismFramework.CubismViewMatrix;\nvar Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\nvar touchmanager_1 = __webpack_require__(/*! ./touchmanager */ \"./src/touchmanager.ts\");\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\nvar lappsprite_1 = __webpack_require__(/*! ./lappsprite */ \"./src/lappsprite.ts\");\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\nvar b2_world_1 = __webpack_require__(/*! ./box2d/dynamics/b2_world */ \"./src/box2d/dynamics/b2_world.ts\");\nvar b2_body_1 = __webpack_require__(/*! ./box2d/dynamics/b2_body */ \"./src/box2d/dynamics/b2_body.ts\");\nvar b2_polygon_shape_1 = __webpack_require__(/*! ./box2d/collision/b2_polygon_shape */ \"./src/box2d/collision/b2_polygon_shape.ts\");\nvar b2_fixture_1 = __webpack_require__(/*! ./box2d/dynamics/b2_fixture */ \"./src/box2d/dynamics/b2_fixture.ts\");\nvar LAppView = (function () {\n    function LAppView() {\n        this._num = 0.8;\n        this._programId = null;\n        this._back = null;\n        this._gear = null;\n        this._next_random_motion = null;\n        this._touchManager = new touchmanager_1.TouchManager();\n        this._deviceToScreen = new Csm_CubismMatrix44();\n        this._viewMatrix = new Csm_CubismViewMatrix();\n    }\n    LAppView.prototype.initialize = function () {\n        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;\n        var ratio = height / width;\n        var left = LAppDefine.ViewLogicalLeft;\n        var right = LAppDefine.ViewLogicalRight;\n        var bottom = -ratio;\n        var top = ratio;\n        this._viewMatrix.setScreenRect(left, right, bottom, top);\n        var screenW = Math.abs(left - right);\n        this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\n        this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\n        this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);\n        this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);\n        this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);\n    };\n    LAppView.prototype.release = function () {\n        this._viewMatrix = null;\n        this._touchManager = null;\n        this._deviceToScreen = null;\n        this._gear.release();\n        this._gear = null;\n        this._back.release();\n        this._back = null;\n        lappdelegate_1.gl.deleteProgram(this._programId);\n        this._programId = null;\n    };\n    LAppView.prototype.render = function () {\n        lappdelegate_1.gl.useProgram(this._programId);\n        if (this._back) {\n            this._back.render(this._programId);\n        }\n        if (this._gear) {\n            this._gear.render(this._programId);\n        }\n        if (this._next_random_motion) {\n            this._next_random_motion.render(this._programId);\n        }\n        lappdelegate_1.gl.flush();\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n        live2DManager.onUpdate();\n        lappdelegate_1.gl.useProgram(this._programId);\n        if (this._ground) {\n            this._ground.render(this._programId);\n            this._apple.render(this._programId);\n        }\n        if (this._world) {\n            this._world.Step(1 / 60, 6, 2);\n            for (var bodyIndex = this._world.GetBodyList(); bodyIndex; bodyIndex = bodyIndex.GetNext()) {\n                var x = bodyIndex.GetPosition().x * 30;\n                var y = bodyIndex.GetPosition().y * 30;\n                var r = bodyIndex.GetAngle() * 180 / Math.PI;\n                if (bodyIndex.m_userData.type == 'apple' && this._apple) {\n                    this._apple.setX(x);\n                    this._apple.setY(y);\n                    this._apple.render(this._programId);\n                }\n            }\n        }\n        lappdelegate_1.gl.flush();\n    };\n    LAppView.prototype.initializeSprite = function () {\n        var _this = this;\n        var width = lappdelegate_1.canvas.width;\n        var height = lappdelegate_1.canvas.height;\n        var textureManager = lappdelegate_1.LAppDelegate.getInstance().getTextureManager();\n        var resourcesPath = LAppDefine.ResourcesPath;\n        var imageName = '';\n        imageName = LAppDefine.BackImageName;\n        var initBackGroundTexture = function (textureInfo) {\n            var x = width * 0.5;\n            var y = height * 0.5;\n            var fwidth = width;\n            var fheight = height;\n            _this._back = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n        };\n        textureManager.createTextureFromPngFile(resourcesPath + imageName, false, initBackGroundTexture);\n        this._world = new b2_world_1.b2World({ x: 0, y: -10 });\n        var groundBodyDef = new b2_body_1.b2BodyDef();\n        groundBodyDef.userData = { type: \"ground\" };\n        groundBodyDef.position.Set(0, 200 / 30);\n        groundBodyDef.type = b2_body_1.b2BodyType.b2_staticBody;\n        var groundBox = new b2_polygon_shape_1.b2PolygonShape();\n        groundBox.SetAsBox(500 / 2 / 30, 30 / 2 / 30);\n        this._world.CreateBody(groundBodyDef).CreateFixture(groundBox);\n        var appleDef = new b2_body_1.b2BodyDef();\n        appleDef.userData = { type: 'apple' };\n        appleDef.type = b2_body_1.b2BodyType.b2_dynamicBody;\n        appleDef.position.Set(30 / 30, 0 / 30);\n        var appleShape = new b2_polygon_shape_1.b2PolygonShape();\n        appleShape.SetAsBox(50 / 2 / 30, 50 / 2 / 30);\n        var fixDef = new b2_fixture_1.b2FixtureDef();\n        fixDef.shape = appleShape;\n        fixDef.density = 1.0;\n        fixDef.friction = 0.3;\n        fixDef.restitution = 0.2;\n        this._world.CreateBody(appleDef).CreateFixture(fixDef);\n        imageName = LAppDefine.GearImageName;\n        var initGearTexture = function (textureInfo) {\n            var x = width - textureInfo.width * 0.5;\n            var y = height - textureInfo.height * 0.5;\n            var fwidth = textureInfo.width;\n            var fheight = textureInfo.height;\n            _this._gear = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n        };\n        textureManager.createTextureFromPngFile(resourcesPath + imageName, false, initGearTexture);\n        if (this._programId == null) {\n            this._programId = lappdelegate_1.LAppDelegate.getInstance().createShader();\n        }\n    };\n    LAppView.prototype.onTouchesBegan = function (pointX, pointY) {\n        this._touchManager.touchesBegan(pointX, pointY);\n    };\n    LAppView.prototype.onTouchesMoved = function (pointX, pointY) {\n        var viewX = this.transformViewX(this._touchManager.getX());\n        var viewY = this.transformViewY(this._touchManager.getY());\n        this._touchManager.touchesMoved(pointX, pointY);\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n        live2DManager.onDrag(viewX, viewY);\n    };\n    LAppView.prototype.onTouchesEnded = function (pointX, pointY) {\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n        live2DManager.onDrag(0.0, 0.0);\n        {\n            var x = this._deviceToScreen.transformX(this._touchManager.getX());\n            var y = this._deviceToScreen.transformY(this._touchManager.getY());\n            if (LAppDefine.DebugTouchLogEnable) {\n                lapppal_1.LAppPal.printMessage(\"[APP]touchesEnded x: \" + x + \" y: \" + y + \" pointX:\" + pointX + \" pointY:\" + pointY);\n            }\n            live2DManager.onTap(x, y);\n        }\n    };\n    LAppView.prototype.transformViewX = function (deviceX) {\n        var screenX = this._deviceToScreen.transformX(deviceX);\n        return this._viewMatrix.invertTransformX(screenX);\n    };\n    LAppView.prototype.transformViewY = function (deviceY) {\n        var screenY = this._deviceToScreen.transformY(deviceY);\n        return this._viewMatrix.invertTransformY(screenY);\n    };\n    LAppView.prototype.transformScreenX = function (deviceX) {\n        return this._deviceToScreen.transformX(deviceX);\n    };\n    LAppView.prototype.transformScreenY = function (deviceY) {\n        return this._deviceToScreen.transformY(deviceY);\n    };\n    return LAppView;\n}());\nexports.LAppView = LAppView;\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappview.ts\n");

/***/ }),

/***/ "./src/lstore.ts":
/*!***********************!*\
  !*** ./src/lstore.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LStore = void 0;\nvar LStore = (function () {\n    function LStore() {\n    }\n    LStore.get = function (key, def) {\n        if (def === void 0) { def = undefined; }\n        if (!window['store']) {\n            console.error('store未初始化 ');\n            return undefined;\n        }\n        return window['store'].get('live2d.' + key, def);\n    };\n    LStore.set = function (key, val) {\n        if (!window['store']) {\n            console.error('store未初始化');\n            return undefined;\n        }\n        return window['store'].set('live2d.' + key, val);\n    };\n    return LStore;\n}());\nexports.LStore = LStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbHN0b3JlLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xzdG9yZS50cz9kYmE4Il0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNsYXNzIExTdG9yZSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICogQHBhcmFtIGRlZlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0KGtleTpzdHJpbmcsIGRlZiA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXdpbmRvd1snc3RvcmUnXSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdzdG9yZeacquWIneWni+WMliAnKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2luZG93WydzdG9yZSddLmdldCgnbGl2ZTJkLicra2V5LCBkZWYpXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzZXQoa2V5OnN0cmluZyx2YWwpe1xuICAgICAgICBpZiAoIXdpbmRvd1snc3RvcmUnXSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdzdG9yZeacquWIneWni+WMlicpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aW5kb3dbJ3N0b3JlJ10uc2V0KCdsaXZlMmQuJytrZXksIHZhbClcbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7QUFDQTtBQUFBO0FBcUJBO0FBZkE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQXJCQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lstore.ts\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\nconsole.log('live2d_onload 加载准备');\nwindow[\"live2d_onload\"] = function (config) {\n    lappdelegate_1.LAppDelegate.getInstance().setLappModelEvent({\n        modelCompleteSetup: function () {\n            window[\"live2d\"] = lapplive2dmanager_1.LAppLive2DManager.getInstance();\n            config.loadModelComplete();\n        }\n    });\n    if (lappdelegate_1.LAppDelegate.getInstance().initialize() == false) {\n        return;\n    }\n    lappdelegate_1.LAppDelegate.getInstance().run();\n};\nwindow.onbeforeunload = function () { return lappdelegate_1.LAppDelegate.releaseInstance(); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tYWluLnRzP2NkNDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtMQXBwRGVsZWdhdGUsIGxBcHBEZWxlZ2F0ZUV2ZW50fSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQge0xBcHBMaXZlMkRNYW5hZ2VyfSBmcm9tIFwiLi9sYXBwbGl2ZTJkbWFuYWdlclwiO1xuaW1wb3J0IHtMQXBwTW9kZWwsIExvYWRTdGVwfSBmcm9tIFwiLi9sYXBwbW9kZWxcIjtcbmltcG9ydCB7TEFwcFBhbH0gZnJvbSBcIi4vbGFwcHBhbFwiO1xuaW50ZXJmYWNlIGNvbmZpZ3tcbiAgICBsb2FkTW9kZWxDb21wbGV0ZSgpOnZvaWQ7XG4gICAgbGl2ZTJkX2NvbmZpZzp7fTtcbn1cbmNvbnNvbGUubG9nKCdsaXZlMmRfb25sb2FkIOWKoOi9veWHhuWkhycpO1xud2luZG93W1wibGl2ZTJkX29ubG9hZFwiXSAgPSAoY29uZmlnOmNvbmZpZyk6IHZvaWQgPT4ge1xuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLnNldExhcHBNb2RlbEV2ZW50KHtcbiAgICAgICAgbW9kZWxDb21wbGV0ZVNldHVwKCl7XG4gICAgICAgICAgICB3aW5kb3dbXCJsaXZlMmRcIl0gPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgY29uZmlnLmxvYWRNb2RlbENvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vIGNyZWF0ZSB0aGUgYXBwbGljYXRpb24gaW5zdGFuY2VcbiAgICBpZiAoTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuaW5pdGlhbGl6ZSgpID09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5ydW4oKTtcbn07XG5cbi8qKlxuICog57WC5LqG5pmC44Gu5Yem55CGXG4gKi9cbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9ICgpOiB2b2lkID0+IExBcHBEZWxlZ2F0ZS5yZWxlYXNlSW5zdGFuY2UoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/touchmanager.ts":
/*!*****************************!*\
  !*** ./src/touchmanager.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TouchManager = void 0;\nvar TouchManager = (function () {\n    function TouchManager() {\n        this._startX = 0.0;\n        this._startY = 0.0;\n        this._lastX = 0.0;\n        this._lastY = 0.0;\n        this._lastX1 = 0.0;\n        this._lastY1 = 0.0;\n        this._lastX2 = 0.0;\n        this._lastY2 = 0.0;\n        this._lastTouchDistance = 0.0;\n        this._deltaX = 0.0;\n        this._deltaY = 0.0;\n        this._scale = 0.5;\n        this._touchSingle = false;\n        this._flipAvailable = false;\n    }\n    TouchManager.prototype.getCenterX = function () {\n        return this._lastX;\n    };\n    TouchManager.prototype.getCenterY = function () {\n        return this._lastY;\n    };\n    TouchManager.prototype.getDeltaX = function () {\n        return this._deltaX;\n    };\n    TouchManager.prototype.getDeltaY = function () {\n        return this._deltaY;\n    };\n    TouchManager.prototype.getStartX = function () {\n        return this._startX;\n    };\n    TouchManager.prototype.getStartY = function () {\n        return this._startY;\n    };\n    TouchManager.prototype.getScale = function () {\n        return this._scale;\n    };\n    TouchManager.prototype.getX = function () {\n        return this._lastX;\n    };\n    TouchManager.prototype.getY = function () {\n        return this._lastY;\n    };\n    TouchManager.prototype.getX1 = function () {\n        return this._lastX1;\n    };\n    TouchManager.prototype.getY1 = function () {\n        return this._lastY1;\n    };\n    TouchManager.prototype.getX2 = function () {\n        return this._lastX2;\n    };\n    TouchManager.prototype.getY2 = function () {\n        return this._lastY2;\n    };\n    TouchManager.prototype.isSingleTouch = function () {\n        return this._touchSingle;\n    };\n    TouchManager.prototype.isFlickAvailable = function () {\n        return this._flipAvailable;\n    };\n    TouchManager.prototype.disableFlick = function () {\n        this._flipAvailable = false;\n    };\n    TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {\n        this._lastX = deviceX;\n        this._lastY = deviceY;\n        this._startX = deviceX;\n        this._startY = deviceY;\n        this._lastTouchDistance = -1.0;\n        this._flipAvailable = true;\n        this._touchSingle = true;\n    };\n    TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {\n        this._lastX = deviceX;\n        this._lastY = deviceY;\n        this._lastTouchDistance = -1.0;\n        this._touchSingle = true;\n    };\n    TouchManager.prototype.getFlickDistance = function () {\n        return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);\n    };\n    TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {\n        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    };\n    TouchManager.prototype.calculateMovingAmount = function (v1, v2) {\n        if (v1 > 0.0 != v2 > 0.0) {\n            return 0.0;\n        }\n        var sign = v1 > 0.0 ? 1.0 : -1.0;\n        var absoluteValue1 = Math.abs(v1);\n        var absoluteValue2 = Math.abs(v2);\n        return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));\n    };\n    return TouchManager;\n}());\nexports.TouchManager = TouchManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdG91Y2htYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3RvdWNobWFuYWdlci50cz9hMmVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBjbGFzcyBUb3VjaE1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdGFydFggPSAwLjA7XG4gICAgdGhpcy5fc3RhcnRZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WTEgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMiA9IDAuMDtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVggPSAwLjA7XG4gICAgdGhpcy5fZGVsdGFZID0gMC4wO1xuICAgIHRoaXMuX3NjYWxlID0gMC41O1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gZmFsc2U7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWx0YVgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFYO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhcnRYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRZO1xuICB9XG5cbiAgcHVibGljIGdldFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjYWxlO1xuICB9XG5cbiAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRYMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WTEoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkxO1xuICB9XG5cbiAgcHVibGljIGdldFgyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTI7XG4gIH1cblxuICBwdWJsaWMgaXNTaW5nbGVUb3VjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdG91Y2hTaW5nbGU7XG4gIH1cblxuICBwdWJsaWMgaXNGbGlja0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmxpcEF2YWlsYWJsZTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNhYmxlRmxpY2soKTogdm9pZCB7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgemWi+Wni+aZguOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzQmVnYW4oZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX3N0YXJ0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fc3RhcnRZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzTW92ZWQoZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXG4gICAqIEByZXR1cm4g44OV44Oq44OD44Kv6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKFxuICAgICAgdGhpcy5fc3RhcnRYLFxuICAgICAgdGhpcy5fc3RhcnRZLFxuICAgICAgdGhpcy5fbGFzdFgsXG4gICAgICB0aGlzLl9sYXN0WVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog54K577yR44GL44KJ54K577yS44G444Gu6Led6Zui44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqIEBwYXJhbSB4MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICAgIHgyOiBudW1iZXIsXG4gICAgeTI6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgxIC0geDIpICogKHgxIC0geDIpICsgKHkxIC0geTIpICogKHkxIC0geTIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcbiAgICog6YGV44GG5pa55ZCR44Gu5aC05ZCI44Gv56e75YuV6YeP77yQ44CC5ZCM44GY5pa55ZCR44Gu5aC05ZCI44Gv44CB57W25a++5YCk44GM5bCP44GV44GE5pa544Gu5YCk44KS5Y+C54Wn44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cbiAgICogQHBhcmFtIHYyIO+8kuOBpOebruOBruenu+WLlemHj1xuICAgKlxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGNhbGN1bGF0ZU1vdmluZ0Ftb3VudCh2MTogbnVtYmVyLCB2MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbjogbnVtYmVyID0gdjEgPiAwLjAgPyAxLjAgOiAtMS4wO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUxID0gTWF0aC5hYnModjEpO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xuICAgIHJldHVybiAoXG4gICAgICBzaWduICogKGFic29sdXRlVmFsdWUxIDwgYWJzb2x1dGVWYWx1ZTIgPyBhYnNvbHV0ZVZhbHVlMSA6IGFic29sdXRlVmFsdWUyKVxuICAgICk7XG4gIH1cblxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcbiAgX3N0YXJ0WDogbnVtYmVyOyAvLyDjgr/jg4Pjg4HjgpLplovlp4vjgZfjgZ/mmYLjga5544Gu5YCkXG4gIF9sYXN0WDogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5444Gu5YCkXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXG4gIF9sYXN0WDE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueOOBruWApFxuICBfbGFzdFkxOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS4gOOBpOebruOBrnnjga7lgKRcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTI6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LqM44Gk55uu44GueeOBruWApFxuICBfbGFzdFRvdWNoRGlzdGFuY2U6IG51bWJlcjsgLy8gMuacrOS7peS4iuOBp+OCv+ODg+ODgeOBl+OBn+OBqOOBjeOBruaMh+OBrui3nembolxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcbiAgX2RlbHRhWTogbnVtYmVyOyAvLyDliY3lm57jga7lgKTjgYvjgonku4rlm57jga7lgKTjgbjjga5544Gu56e75YuV6Led6Zui44CCXG4gIF9zY2FsZTogbnVtYmVyOyAvLyDlnKjov5nkuKrmoYbmnrbkuIrnm7jkuZjnmoTmlL7lpKfnjofjgILmianlpKfmk43kvZzkuK3ku6XlpJYx44CCXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxuICBfZmxpcEF2YWlsYWJsZTogYm9vbGVhbjsgLy8g44OV44Oq44OD44OX44GM5pyJ5Yq544GL44Gp44GG44GLXG59XG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBTUE7QUFVQTtBQU1BO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFnQkE7QUFBQTtBQWxMQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/touchmanager.ts\n");

/***/ })

/******/ });