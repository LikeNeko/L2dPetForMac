diff --git a/node_modules/tar/coverage/lcov-report/tar/lib/parse.js.html b/node_modules/tar/coverage/lcov-report/tar/lib/parse.js.html
index 1d505ab..4016963 100644
--- a/node_modules/tar/coverage/lcov-report/tar/lib/parse.js.html
+++ b/node_modules/tar/coverage/lcov-report/tar/lib/parse.js.html
@@ -905,7 +905,7 @@ const Entry = require('./read-entry.js')
 const Pax = require('./pax.js')
 const zlib = require('minizlib')
 &nbsp;
-const gzipHeader = new Buffer([0x1f, 0x8b])
+const gzipHeader = Buffer.alloc([0x1f, 0x8b])
 const STATE = Symbol('state')
 const WRITEENTRY = Symbol('writeEntry')
 const READENTRY = Symbol('readEntry')
diff --git a/node_modules/tar/lib/buffer-entry.js b/node_modules/tar/lib/buffer-entry.js
index 6c1da23..43c73a3 100644
--- a/node_modules/tar/lib/buffer-entry.js
+++ b/node_modules/tar/lib/buffer-entry.js
@@ -12,7 +12,7 @@ var inherits = require("inherits")
 
 function BufferEntry () {
   Entry.apply(this, arguments)
-  this._buffer = new Buffer(this.props.size)
+  this._buffer = Buffer.alloc(this.props.size)
   this._offset = 0
   this.body = ""
   this.on("end", function () {
diff --git a/node_modules/tar/lib/extended-header-writer.js b/node_modules/tar/lib/extended-header-writer.js
index 1728c45..105ff25 100644
--- a/node_modules/tar/lib/extended-header-writer.js
+++ b/node_modules/tar/lib/extended-header-writer.js
@@ -157,7 +157,7 @@ function encodeField (k, v, nop) {
 
   if (typeof val === "number") val = val.toString(10)
 
-  var s = new Buffer(" " + k + "=" + v + "\n")
+  var s = Buffer.alloc(" " + k + "=" + v + "\n")
     , digits = Math.floor(Math.log(s.length) / Math.log(10)) + 1
 
   // console.error("1 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
@@ -176,7 +176,7 @@ function encodeField (k, v, nop) {
 
   var len = digits + s.length
   // console.error("3 s=%j digits=%j s.length=%d len=%d", s.toString(), digits, s.length, len)
-  var lenBuf = new Buffer("" + len)
+  var lenBuf = Buffer.alloc("" + len)
   if (lenBuf.length + s.length !== len) {
     throw new Error("Bad length calculation\n"+
                     "len="+len+"\n"+
diff --git a/node_modules/tar/lib/extended-header.js b/node_modules/tar/lib/extended-header.js
index 74f432c..856f2d3 100644
--- a/node_modules/tar/lib/extended-header.js
+++ b/node_modules/tar/lib/extended-header.js
@@ -81,7 +81,7 @@ function parse (c) {
         if (b === space) {
           this._state = KEY
           // this._fieldPos = this._sizeBuf.length
-          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10)
+          this._size = parseInt(Buffer.alloc(this._sizeBuf).toString(), 10)
           this._sizeBuf.length = 0
           continue
         }
@@ -96,7 +96,7 @@ function parse (c) {
         // can be any char except =, not > size.
         if (b === eq) {
           this._state = VAL
-          this._key = new Buffer(this._keyBuf).toString()
+          this._key = Buffer.alloc(this._keyBuf).toString()
           if (keyTrans[this._key]) this._key = keyTrans[this._key]
           this._keyBuf.length = 0
           continue
@@ -112,7 +112,7 @@ function parse (c) {
             error(this, "expected \\n at end of field")
             return
           }
-          var val = new Buffer(this._valBuf).toString()
+          var val = Buffer.alloc(this._valBuf).toString()
           if (numeric[this._key]) {
             val = parseFloat(val)
           }
diff --git a/node_modules/tar/lib/header.js b/node_modules/tar/lib/header.js
index 05b237c..ab8d118 100644
--- a/node_modules/tar/lib/header.js
+++ b/node_modules/tar/lib/header.js
@@ -40,7 +40,7 @@ function encode (obj) {
     "encode must be called on a TarHeader, or supplied an object")
 
   obj = obj || this
-  var block = obj.block = new Buffer(512)
+  var block = obj.block = Buffer.alloc(512)
 
   // if the object has a "prefix", then that's actually an extension of
   // the path field.
@@ -99,7 +99,7 @@ function encode (obj) {
           var searchStart = pathLen - 1 - pathFSize
             , searchEnd = prefFSize
             , found = false
-            , pathBuf = new Buffer(obj.path)
+            , pathBuf = Buffer.alloc(obj.path)
 
           for ( var s = searchStart
               ; (s <= searchEnd)
diff --git a/node_modules/tar/lib/pack.js b/node_modules/tar/lib/pack.js
index 5a3bb95..b062c25 100644
--- a/node_modules/tar/lib/pack.js
+++ b/node_modules/tar/lib/pack.js
@@ -9,7 +9,7 @@ var EntryWriter = require("./entry-writer.js")
   , inherits = require("inherits")
   , GlobalHeaderWriter = require("./global-header-writer.js")
   , collect = require("fstream").collect
-  , eof = new Buffer(512)
+  , eof = Buffer.alloc(512)
 
 for (var i = 0; i < 512; i ++) eof[i] = 0
 
diff --git a/node_modules/tar/test/header.js b/node_modules/tar/test/header.js
index 8ea6f79..be0815b 100644
--- a/node_modules/tar/test/header.js
+++ b/node_modules/tar/test/header.js
@@ -133,7 +133,7 @@ var headers =
 tap.test("parsing", function (t) {
   Object.keys(headers).forEach(function (name) {
     var h = headers[name]
-      , header = new Buffer(h[0], "hex")
+      , header = Buffer.alloc(h[0], "hex")
       , expect = h[1]
       , parsed = new TarHeader(header)
 
@@ -146,7 +146,7 @@ tap.test("parsing", function (t) {
 tap.test("encoding", function (t) {
   Object.keys(headers).forEach(function (name) {
     var h = headers[name]
-      , expect = new Buffer(h[0], "hex")
+      , expect = Buffer.alloc(h[0], "hex")
       , encoded = TarHeader.encode(h[1])
 
     // might have slightly different bytes, since the standard
@@ -176,7 +176,7 @@ tap.test("parseNumeric tests", function (t) {
       , "8000000000001544c5": 1393861
       , "ffffffffffff1544c5": -15383354 }
   Object.keys(numbers).forEach(function (n) {
-    var b = new Buffer(n, "hex")
+    var b = Buffer.alloc(n, "hex")
     t.equal(parseNumeric(b), numbers[n], n + " === " + numbers[n])
   })
   t.end()
