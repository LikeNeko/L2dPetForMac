diff --git a/node_modules/block-stream/block-stream.js b/node_modules/block-stream/block-stream.js
index 008de03..3c07de6 100644
--- a/node_modules/block-stream/block-stream.js
+++ b/node_modules/block-stream/block-stream.js
@@ -18,7 +18,7 @@ function BlockStream (size, opt) {
   this._bufferLength = 0
   if (this._opt.nopad) this._zeroes = false
   else {
-    this._zeroes = new Buffer(this._chunkSize)
+    this._zeroes = Buffer.alloc(this._chunkSize);
     for (var i = 0; i < this._chunkSize; i ++) {
       this._zeroes[i] = 0
     }
@@ -30,7 +30,7 @@ inherits(BlockStream, Stream)
 BlockStream.prototype.write = function (c) {
   // debug("   BS write", c)
   if (this._ended) throw new Error("BlockStream: write after end")
-  if (c && !Buffer.isBuffer(c)) c = new Buffer(c + "")
+  if (c && !Buffer.isBuffer(c)) c = Buffer.alloc(c + "");
   if (c.length) {
     this._buffer.push(c)
     this._bufferLength += c.length
@@ -112,7 +112,7 @@ BlockStream.prototype._emitChunk = function (flush) {
       // Also, need to copy if we've already done some copying, since buffers
       // can't be joined like cons strings.
       if (out || curHas < outHas) {
-        out = out || new Buffer(this._chunkSize)
+        out = out || Buffer.alloc(this._chunkSize);
         cur.copy(out, outOffset,
                  this._offset, this._offset + Math.min(curHas, outHas))
       } else if (cur.length === outHas && this._offset === 0) {
@@ -170,7 +170,7 @@ BlockStream.prototype._emitChunk = function (flush) {
       }
     } else {
       var outHas = this._bufferLength
-        , out = new Buffer(outHas)
+        , out = Buffer.alloc(outHas);
         , outOffset = 0
       for (var i = 0; i < l; i ++) {
         var cur = this._buffer[i]
